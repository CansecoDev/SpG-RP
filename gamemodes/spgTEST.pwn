/************************************************************************************

    	SpG:RP ha sido creado por nuetro querido |MageC.|
	Traducido muy a lo bestia pero bien por David (Niño sin Tarta)
	Testeado con ganas por Diablo (Niño sin Francotiradora)
	Revisado y adaptado a la 0.3 por DryilZas (Niño sin Teclado)

		Spanish pc Gamers | Roleplay fue basado en Moderntopia: Los Santos
	que este a su vez fue basado en el Script original de Godfather de "Fear".
		                ________________
	 __________________|  .:SpG 2.0:.   |___________________
	|                                                       |
	|					¬ DryilZas                          |
	|					¬ Nadiusko                          |
	|					¬ Pedro Armas                       |
	|		  _____________________________________         |
	| _______|  .:Spanish pc Gamers | Roleplay:.   |________|
	|                                                       |
	|					¬ MaGeC                             |
	|					¬ DryilZas                          |
	|					¬ Diablo                            |
	|					¬ Nico                              |
	|                ____________________                   |
    |_______________|  .:Moderntopia:.   |__________________|
    |                                                       |
	|					¬ Novice                            |
	|					¬ Luk0r                             |
	|					¬ Shehab                            |
	|					¬ Ehren                             |
	|                 __________________                    |
	|________________|  .:GodFather:.   |___________________|
	|                                                       |
 	|					¬ FeaR                              |
	|                 ___________________                   |
	|________________|  .:QBase Team:.   |__________________|
	|
 	|                   ¬ LordMan                           |
 	|_______________________________________________________|
 	
 	GodFather: 		25.733 Lineas de Codigo.
 	Moderntopia: 	41.026 Lineas de Codigo.
 	SpG-RP:         65.151 Lineas de Codigo.

*************************************************************************************/

// Copyright (C) 2009-2010 Spanish Pc Gamers, Spanish Pc Gamers RP.

/*****************************************************************************
 * Nombre:		SPG.pwn
 *
 * Descripcion:		Gamemode de Rol
 *
 * $	Archivo: /gamemodes/SPG.amx 	$
 * $	Autores:  Magec y DryilZas. 		$
 * $	Revision: 	6 					$
 * $	Version: 	0.3 				$
 * $	Inicio: 	26/08/09 18:53 	    $
 * $	Edicion: 	17/03/10 19:27		$
 *
 *****************************************************************************/
 
/*************************** AQI COMIENZA EL CODIGO **************************/

#include <multilines>
#include <a_samp>
#include <SpikeStrip>
#include <foreach>
#include <a_vehicles>
#include <a_sampdb>
#include <a_npc>
#include <a_objects>
#include <a_players>
#include <core>
#include <datagram>
#include <float>
#include <string>
#include <time>
#include <file>
#include <utils>
#include <morphinc>
#include <dini>

Itter_Create(Vehicle, MAX_VEHICLES);

#define COLOR_TXT 0xC4996DFF
forward public travel(playerid);
forward public traveling();
forward PlayerActionMessage(playerid,Float:radius,message[]);

#define SCRIPT_VERSION "SPG:RP"


new gSnoop[MAX_PLAYERS];
new elevador1,elevador2,elevador3,elevador4;//nuevo taller en pruebas
new Bebendo[MAX_PLAYERS];
new fumando[MAX_PLAYERS];
new ConCas[MAX_PLAYERS];
new police;
new Text:Textdraw0;

new TGirando[MAX_PLAYERS];
new TEsperar[MAX_PLAYERS];
new TEsperar4[MAX_PLAYERS];
new EsperaGira[MAX_PLAYERS] = 0;
new CantidadGira[MAX_PLAYERS] = 0;
forward Esperar4(playerid);
forward Esperar(playerid);
forward Girando(playerid);

#define MAX_ROADBLOCKS 85 // Can be anything you want, but don't go over the top
enum rInfo
{
    sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new Roadblocks[MAX_ROADBLOCKS][rInfo];

forward pintando(playerid); //grafi

forward SetHP(playerid);
forward IsAtCandySprunk(playerid);
new TookSprunk[MAX_PLAYERS];



new Menu:shuttlemenu;
new Float:depart[3],Float:arriver[3],Float:diff[3],Float:campos[3],istraveling,curstep,step = 1500,traveltimmer;
new plane,Float:FAplane,planemode,planedest,planedep;
new chkpoint[MAX_PLAYERS];
new pu[3];

static gTeam[MAX_PLAYERS];

/*#define MYSQL_HOST "127.0.0.1"
#define MYSQL_USER "root"
#define MYSQL_PASS ""
#define MYSQL_DB   "samp"*/

#define BLANCO 				0xFFFFFFFF
#define VERDE				0x009F38FF
#define AZUL 				0x0000E6FF
#define MARRON 				0x800000FF
#define ROJO 				0xD70000FF
#define GRIS 				0xC0C0C0FF
#define NARANJA				0xD56A00FF
#define NEGRO 				0x000000FF

#define TDC 200 // Intervalo de tiempo en el cual se chequea la aceleración. Se recomienda dejar entre 100 y 300.
#define MAX_ACE 45 // valor máximo de aceleración...es decir, después de pasar X m/s el jugador empezará a perder salud
#define PROPORCION 25 // mientras mayor el valor menor será la cantidad de vida que se le quite al jugador a x velocidad (25 = -45/25 == -1.8)
#define PROPORCIONCINTO 50 // mientras mayor el valor menor será la cantidad de vida que se le quite al jugador a x velocidad (25 = -45/25 == -1.8)

#define EX_MOTOS false // true para que el sistema funcione en las motos tambien y false todo lo contrario


#define LeAdmin             0b10000000
#define LeBulto             0b01000000
#define LeCazachetos        0b00100000
#define LeEditor            0b00010000
#define LeEventor           0b00001000
#define LeMapper            0b00000100
#define LeModerador         0b00000010
#define LeScripter          0b00000001


#define CallLoop(%1,%2) for(new %1; %1 < %2; %1++)
#define CALLBACK_AMOUNT 500

new SERVERSIDETIMER;
new ServerSideCash[MAX_PLAYERS];

//descripcion
new dActivada[MAX_PLAYERS];
new Text3D:descripcion[MAX_PLAYERS];
new dTextVar[MAX_PLAYERS][256];


#define MAX_STRING 255
#define CHECKPOINT_NONE 0
#define COLOR_ASKQ 0xFF0000FF
#define CHECKPOINT_HOME 12
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x9EC73DAA
#define COLOR_GROVE 0x00FF00FF
#define COLOR_RED 0xAA3333AA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA //0xAA3333AA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_DARKGREEN 0x0F6400FF
#define COLOR_YELLOW 0xDABB3EAA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_DARKBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_NEWS 0x458E1DAA

#define SPECIAL_ACTION_USECELLPHONE			11
#define SPECIAL_ACTION_SITTING				12
#define SPECIAL_ACTION_STOPUSECELLPHONE		13

#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_BODY 0xEFEFEFFF


#define GREEN 0x21DD00FF
#define RED 0xE60000FF
#define ADMIN_RED 0xFB0000FF
#define YELLOW 0xFFFF00FF
#define ORANGE 0xF97804FF
#define LIGHTRED 0xFF8080FF
#define LIGHTBLUE 0x00C2ECFF
#define PURPLE 0xB360FDFF
#define PLAYER_COLOR 0xFFFFFFFF
#define BLUE 0x1229FAFF
#define LIGHTGREEN 0x38FF06FF
#define DARKPINK 0xE100E1FF
#define DARKGREEN 0x008040FF
#define ANNOUNCEMENT 0x6AF7E1FF
#define COLOR_SYSTEM 0xEFEFF7AA
#define GREY 0xCECECEFF
#define PINK 0xD52DFFFF
#define DARKGREY    0x626262FF
#define AQUAGREEN   0x03D687FF
#define NICESKY 0x99FFFFAA
#define WHITE 			0xFFFFFFFF
#define COLOR_GRAD2 0xBFC0C2FF // linea de Baloncesto
#define SPECIAL_ACTION_PISSING      68

//#define COLOR_OOC 0xE0FFFFAA
#define COLOR_OOC 0xB1C8FBAA
#define TEAM_CYAN 1
#define TEAM_BLUE 2
#define TEAM_GREEN 3
#define TEAM_ORANGE 4
#define TEAM_COR 5
#define TEAM_BAR 6
#define TEAM_TAT 7
#define TEAM_CUN 8
#define TEAM_STR 9
#define TEAM_HIT 10
#define TEAM_ADMIN 11
#define OBJECTIVE_COLOR 0x64000064
#define TEAM_GREEN_COLOR 0xFFFFFFAA
#define TEAM_JOB_COLOR 0xFFB6C1AA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define TEAM_BLUE_COLOR 0x8D8DFF00
#define TEAM_RADIO_COLOR 0xF2D068FF
#define COLOR_ADD 0x63FF60AA
#define TEAM_GROVE_COLOR 0x00D900C8
#define TEAM_VAGOS_COLOR 0xFFC801C8
#define TEAM_BALLAS_COLOR 0xD900D3C8
#define TEAM_AZTECAS_COLOR 0x01FCFFC8
#define TEAM_CYAN_COLOR 0xFF8282AA
#define TEAM_ORANGE_COLOR 0xFF830000
#define TEAM_COR_COLOR 0x39393900
#define TEAM_BAR_COLOR 0x00D90000
#define TEAM_TAT_COLOR 0xBDCB9200
#define TEAM_CUN_COLOR 0xD900D300
#define TEAM_STR_COLOR 0x01FCFF00
#define TEAM_ADMIN_COLOR 0x00808000
#define COLOR_INVIS 0xAFAFAF00
#define COLOR_SPEC 0xBFC0C200
#pragma tabsize 0
#define COLOR_BLUE 0x2641FEAA
#define COLOR_DARKNICERED 0x9D000096
#define COLOR_LIGHT_BLUE 0x9FB1EEAA
#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1

//#define Radio 100 //radio


#pragma semicolon 0
#define MAX_TRUNK_SLOTS		(5) // Is actually 4.
#define MAX_VEHICLE_MODELS	(70)
#define MAX_PLYVEH_RATIO	(20) // per player.
#define MAX_VEHICLE_PLATE (7)

#define NEGATIVO    0xFF0000FF // descripcion
#define POSITIVO    0x00FF00FF // descripcion

/* #pragma tabsize 0 // descripcion
new ConEstado[MAX_PLAYERS]; // descripcion
new Text3D:estado[MAX_PLAYERS]; // descripcion */



forward Fuck(playerid);

forward TuneThisCar(vehicleid);
forward LoadModsForAll(vehicleid);
forward SaveModsForAll(vehicleid);


forward GetColorCode(clr[]);
forward KeyChanges();
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward ObjectToPoint(Float:radi, objectid, Float:x, Float:y, Float:z);
forward RefreshMenuHeader(playerid,Menu:menu,text[]);
forward CheckStatus();
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);//linea baloncesto
new HavingBall[MAX_PLAYERS];
new jugarb[MAX_PLAYERS];
new Anim[MAX_PLAYERS];
new Ball;
new BallStatus;
new Baller;
new ShootingBall;
new BallBounce;
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new animation[200];


new spoiler[20][0] = {
	{1000},
	{1001},
	{1002},
	{1003},
	{1014},
	{1015},
	{1016},
	{1023},
	{1058},
	{1060},
	{1049},
	{1050},
	{1138},
	{1139},
	{1146},
	{1147},
	{1158},
	{1162},
	{1163},
	{1164}
};

new nitro[3][0] = {
    {1008},
    {1009},
    {1010}
};

new fbumper[23][0] = {
    {1117},
    {1152},
    {1153},
    {1155},
    {1157},
    {1160},
    {1165},
    {1167},
    {1169},
    {1170},
    {1171},
    {1172},
    {1173},
    {1174},
    {1175},
    {1179},
    {1181},
    {1182},
    {1185},
    {1188},
    {1189},
    {1192},
    {1193}
};

new rbumper[22][0] = {
    {1140},
    {1141},
    {1148},
    {1149},
    {1150},
    {1151},
    {1154},
    {1156},
    {1159},
    {1161},
    {1166},
    {1168},
    {1176},
    {1177},
    {1178},
    {1180},
    {1183},
    {1184},
    {1186},
    {1187},
    {1190},
    {1191}
};

new exhaust[28][0] = {
    {1018},
    {1019},
    {1020},
    {1021},
    {1022},
    {1028},
    {1029},
    {1037},
    {1043},
    {1044},
    {1045},
    {1046},
    {1059},
    {1064},
    {1065},
    {1066},
    {1089},
    {1092},
    {1104},
    {1105},
    {1113},
    {1114},
    {1126},
    {1127},
    {1129},
    {1132},
    {1135},
    {1136}
};

new bventr[2][0] = {
    {1042},
    {1044}
};

new bventl[2][0] = {
    {1043},
    {1045}
};

new bscoop[4][0] = {
	{1004},
	{1005},
	{1011},
	{1012}
};

new rscoop[13][0] = {
    {1006},
    {1032},
    {1033},
    {1035},
    {1038},
    {1053},
    {1054},
    {1055},
    {1061},
    {1067},
    {1068},
    {1088},
    {1091}
};

new lskirt[21][0] = {
    {1007},
    {1026},
    {1031},
    {1036},
    {1039},
    {1042},
    {1047},
    {1048},
    {1056},
    {1057},
    {1069},
    {1070},
    {1090},
    {1093},
    {1106},
    {1108},
    {1118},
    {1119},
    {1133},
    {1122},
    {1134}
};

new rskirt[21][0] = {
    {1017},
    {1027},
    {1030},
    {1040},
    {1041},
    {1051},
    {1052},
    {1062},
    {1063},
    {1071},
    {1072},
    {1094},
    {1095},
    {1099},
    {1101},
    {1102},
    {1107},
    {1120},
    {1121},
    {1124},
    {1137}
};

new hydraulics[1][0] = {
    {1087}
};

new base[1][0] = {
    {1086}
};

new rbbars[2][0] = {
    {1109},
    {1110}
};

new fbbars[2][0] = {
    {1115},
    {1116}
};

new wheels[17][0] = {
    {1025},
    {1073},
    {1074},
    {1075},
    {1076},
    {1077},
    {1078},
    {1079},
    {1080},
    {1081},
    {1082},
    {1083},
    {1084},
    {1085},
    {1096},
    {1097},
    {1098}
};

new lights[2][0] = {
	{1013},
	{1024}
};
//
enum tInfo
{
	mod1,
	mod2,
	mod3,
	mod4,
	mod5,
	mod6,
	mod7,
	mod8,
	mod9,
	mod10,
	mod11,
	mod12,
	mod13,
	mod14,
	mod15,
	mod16,
	mod17,
	paintjob,
	colorA,
	colorB,
}
new TuneCar[MAX_VEHICLES][tInfo];


new
	Exepciones[4], // 0 == motos, 1 autos, 2 acuaticos, 3 aereos
	Velocimetro[MAX_PLAYERS], // 0 si no quieres que se muestre y 1 si quieres lo contrario
	Acelerometro[MAX_PLAYERS], // igual que el anterior
	Estado[MAX_PLAYERS], // 0 si el sistema está activado y 1 si no lo está.
	Float:Velocidad[MAX_PLAYERS][2], // slot 0 para la velocidad inicial y slot 1 para la final.
	Text:Textdraw[4], // 0 = Rapidez, 1 = Aceleración, 2 = Km/h y 3 = m/s
	cinturon[MAX_PLAYERS];
	
forward Chequeo();

new PlayerVehicle[212][] = {
"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana",
"Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam", "Esperanto", "Taxi", "Washington", "Bobcat",
"Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife",
"Trailer 1", "Previon", "Coach", "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo",
"Seasparrow", "Pizzaboy", "Tram", "Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
"Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic", "Sanchez", "Sparrow",
"Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX", "Burrito",
"Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring",
"Sandking", "Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B",
"Bloodring Banger", "Rancher", "Super GT", "Elegant", "Journey", "Bici", "Bici-BMX", "Beagle", "Cropduster","Stunt",  "Tanker",
"Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
"Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Streak",
"Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck LA", "Hustler", "Intruder", "Primo", "Cargobob", "Tampa", "Sunrise", "Merit",
"Utility", "Nevada", "Yosemite", "Windsor", "Monster A", "Monster B", "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance",
"RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito", "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway",
"Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer 3", "Emperor", "Wayfarer", "Euros", "Hotdog",
"Club", "Freight Carriage", "Trailer 4", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car (LSPD)", "Police Car (SFPD)",
"Police Car (LVPD)", "Police Ranger", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage Trailer A",
"Luggage Trailer B", "Stairs", "Boxville", "Tiller", "Utility Trailer" };

// casco
new Float:HelmetPos[][6] = { // casco
    {0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}, //skin 0
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 1
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 2
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 3
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 4
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 5
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 6
    {0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 7
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 8
    {0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 9
    {0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 10
    {0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 11
    {0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 12
    {0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 13
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 14
    {0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 15
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 16
    {0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 17
    {0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 18
    {0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 19
    {0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 20
    {0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 21
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 22
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 23
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 24
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 25
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 26
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 27
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 28
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 29
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 30
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 31
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 32
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 33
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 34
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 35
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 36
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 37
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 38
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 39
    {0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 40
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 41
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 42
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 43
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 44
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 45
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 46
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 47
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 48
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 49
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 50
    {0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 51
    {0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 52
    {0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 53
    {0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 54
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 55
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 56
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 57
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 58
    {0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 59
    {0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 60
    {0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 61
    {0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 62
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 63
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 64
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 66
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 67
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 68
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 69
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 70
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 71
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 72
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 73
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 75
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 76
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 78
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 79
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 80
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 81
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 82
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 83
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 84
    {0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 85
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 86
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 87
    {0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 88
    {0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 89
    {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 90
    {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 91
    {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 92
    {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 93
    {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 94
    {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 95
    {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 96
    {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 97
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 98
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 99
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 100
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 101
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 102
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 103
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 104
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 105
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 106
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 107
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 108
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 109
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 110
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 111
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 112
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 113
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 114
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 115
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 116
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 117
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 118
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 119
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 120
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 121
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 122
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 123
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 124
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 125
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 126
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 127
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 128
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 129
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 130
    {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 131
    {0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 132
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 133
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 134
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 135
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 136
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 137
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 138
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 139
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 140
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 141
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 142
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 143
    {0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 144
    {0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 145
    {0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 146
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 147
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 148
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 150
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 151
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 152
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 153
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 154
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 155
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 156
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 157
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 158
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 159
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 160
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 161
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 162
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 163
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 164
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 165
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 166
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 167
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 168
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 169
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 170
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 171
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 172
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 173
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 174
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 175
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 176
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 177
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 178
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 179
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 180
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 181
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 182
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 183
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 184
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 185
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 186
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 187
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 188
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 189
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 190
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 191
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 192
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 193
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 194
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 195
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 196
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 197
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 198
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 199
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 200
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 201
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 202
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 203
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 204
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 205
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 206
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 207
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 209
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 210
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 211
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 212
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 213
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 214
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 215
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 216
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 217
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 218
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 219
    {0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 220
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 221
    {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 222
    {0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 223
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 224
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 225
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 226
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 227
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 228
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 229
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 230
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 231
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 232
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 233
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 234
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 235
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 236
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 237
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 238
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 239
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 240
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 241
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 242
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 243
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 244
    {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 245
    {0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 246
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 247
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 248
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 249
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 250
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 251
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 252
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 253
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 254
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 255
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 256
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 257
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 258
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 259
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 260
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 261
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 262
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 263
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 264
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 265
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 266
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 267
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 268
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 269
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 270
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 271
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 272
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 274
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 275
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 276
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 277
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 278
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 279
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 280
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 281
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 282
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 283
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 284
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 285
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 286
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 287
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 288
    {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 289
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 290
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 291
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 292
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 293
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 294
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 295
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 296
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 297
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 298
    {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000} };


//Booleans
new bool:TextDrawsShown[MAX_PLAYERS];
new bool:LightRedHealthCreated[MAX_PLAYERS];
new bool:LightYellowSpeedCreated[MAX_PLAYERS];
new bool:VHSCreated[MAX_PLAYERS];
new bool:ExclamationShown[MAX_PLAYERS];

//Timer
new CheckStatusTimer;

//4all
new Text:Black0;
new Text:White1;
new Text:White2;
new Text:BlackHealth;
new Text:DarkRedHealth;
new Text:BlackSpeed;
new Text:DarkYellowSpeed;
new Text:Marker;
new Text:Exclamation;

//4player
new Text:VHS[MAX_PLAYERS];
new Text:LightRedHealth[MAX_PLAYERS];
new Text:LightYellowSpeed[MAX_PLAYERS];
new Menu:burgermenu, Menu:chickenmenu, Menu:pizzamenu, Menu:donutshop;
new Menu:Guide, Menu:JobLocations, Menu:JobLocations2, Menu:JobLocations3;
new Menu:LegalJobs, Menu:LegalJobs2;
new Menu:Licenses;
new Menu:Interior;
new Menu:TwentyFourSeven;
new Menu:Airports;
new Menu:Ammunations;
new Menu:House;
new Menu:Missions;
new Menu:Missions1;
new Menu:Unus;
new Menu:CenShop;
new Menu:Garages;

new Text:webspg;
new Text:web;
new Text:webspg1;

forward tiempoparaca();
forward tiemposalicoche(playerid); // by magec n
forward tiempocargaobjetos(playerid); // by magec n
forward CheckForWalkingTeleport(playerid);
//forward ResetRoadblockTimer();
forward RemoveRoadblock(playerid);
forward BackupClear(playerid, calledbytimer);
forward IsAGangCar(carid);
forward IsAGangCar2(carid);
forward IsAGangCar3(carid);
forward IsAGangCar4(carid);
forward IsAGangCar5(carid);
forward IsAGangCar6(carid);
forward IsAGangCar7(carid);
forward IsAGangCar8(carid);
forward IsAGangCar9(carid);
forward IsABike(carid);
forward IsAOBike(carid);
forward IsATank(carid);
forward puertacasa96t();
forward puertacasa17t();
forward puertacasa80t();
forward puertacasa104t();
forward puertacasa23t();
forward puertacasa20t();
forward puertacasa103t();
forward puertacasa14t();
forward puertacasa95t();
forward puertacasa85t();
forward GateClose(playerid);
forward GateClose2();
forward GateClose3();
forward GateClose4();
forward GateClose5();
forward GateClose6();
forward GateCloseosafa();
forward GateClose7();
forward GateClose8();
forward GateClose9();
forward GateClose10();
forward GateClose11();
forward elevator1(playerid);
forward elevator2(playerid);
forward LoadProperty();
forward LoadBizz();
forward LoadSBizz();
forward LoadStuff();
forward SaveStuff();
forward LoadCK();
forward SaveCK();
forward LoadFamilies();
forward SaveFamilies();
//forward LoadEconomy(); // by DryilZas
//forward SaveEconomy(); // by DryilZas
forward LoadTurfs();
forward SaveTurfs();
forward LoadIRC();
forward SaveIRC();
forward LoadPapers();
forward SavePapers();
forward LoadCar();
forward SaveCarCoords();
forward LoadBoxer();
forward SaveBoxer();
forward OnPropUpdate();
forward ExtortionBiz(bizid, money);
forward ExtortionSBiz(bizid, money);
forward JoinChannel(playerid, number, line[]);
forward JoinChannelNr(playerid, number);
forward IsAtClothShop(playerid);
forward IsAtGasStation(playerid);
forward IsAtFishPlace(playerid);
forward IsAtCookPlace(playerid);
forward IsAtBar(playerid);
forward SearchingHit(playerid);
forward DollahScoreUpdate();
forward SetPlayerSpawn(playerid);
forward SetupPlayerForClassSelection(playerid);
forward SetPlayerTeamFromClass(playerid,classid);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz);
forward CrimInRange(Float:radi, playerid,copid);
forward SendEnemyMessage(color, string[]);
forward SendTeamBeepMessage(team, color, string[]);
forward ABroadCast(color,const string[]);
forward DateProp(playerid);
forward GetClosestPlayer(p1);
forward IsPlayerInTurf(playerid, turfid);
forward LoadMission(playerid,name[]);
forward SaveMission(playerid,name[]);
forward PrintBizInfo(playerid,targetid);
forward PrintSBizInfo(playerid,targetid);
forward SetPlayerUnjail();
forward OtherTimer();
forward RingTonerRev();
forward RingToner();
forward HireCost(carid);
forward BanLog(string[]);
forward KickLog(string[]);
forward PayLog(string[]);
forward CKLog(string[]);
forward IsATruck(carid);
forward IsAPizzabike(carid);
forward Esuncamion(carid);
forward IsABus(carid);
forward IsATowcar(carid);
forward IsAnAmbulance(carid);
forward IsAnFiretruck(carid);
forward IsACopCar(carid);
//forward IsATesteoCar(carid);
forward IsAnFbiCar(carid);
forward IsNgCar(carid);
forward IsAGovernmentCar(carid);
forward IsAHspdCar(carid);
forward IsAnOwnableCar(vehicleid);
forward IsAtDealership(playerid);
forward IsAtCarrental(playerid);
forward IsAPlane(carid);
forward IsABoat(carid);
forward IsAHarvest(carid);
forward IsADrugHarvest(carid);
forward IsASmuggleCar(carid);
forward IsASweeper(carid);
forward IsABasura(carid);
forward IsAcarretilla(carid);
forward IsACop(playerid);
forward IsAPDMember(playerid);
forward IsAMember(playerid);
//forward IsAnInstructor(playerid);
forward Spectator();
forward ConvertTicks(ticks);
forward Encrypt(string[]);
forward KartingEnded();
forward StartKarting();
forward PrepareKarting();
forward PaintballEnded();
forward StartPaintball();
forward PreparePaintball();
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward GameModeExitFunc();
forward SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num);
forward SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi);
forward SetPlayerCriminal(playerid,declare,reason[]);
forward SetPlayerCriminalEx(playerid,declare,reason[]);
forward SetPlayerFree(playerid,declare,reason[]);
forward SetPlayerWeapons(playerid);
forward ShowStats(playerid,targetid);
forward SetPlayerToTeamColor(playerid);
forward GameModeInitExitFunc();
forward split(const strsrc[], strdest[][], delimiter);
forward OnPlayerLogin(playerid,password[]);
forward OnPlayerUpdate(playerid);
forward OnPlayerRegister(playerid, password[]);
forward BroadCast(color,const string[]);
forward OOCOff(color,const string[]);
forward OOCNews(color,const string[]);
forward SendJobMessage(job, color, string[]);
forward SendFamilyMessage(family, color, string[]);
forward SendNewFamilyMessage(family, color, string[]);
forward SendIRCMessage(channel, color, string[]);
forward SendTeamMessage(team, color, string[]);
forward SendRadioMessage(member, color, string[]);
forward SendAdminMessage(color, string[]);
forward AddCar(carcoords);
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward ClearCK(ck);
forward ClearFamily(family);
forward ClearMarriage(playerid);
forward ClearPaper(paper);
forward ClearCrime(playerid);
forward FishCost(playerid, fish);
forward ClearFishes(playerid);
forward ClearFishID(playerid, fish);
forward ClearCooking(playerid);
forward ClearCookingID(playerid, cook);
forward ClearGroceries(playerid);
forward Lotto(number);
forward CarCheck();
forward CarInit();
forward CarTow(carid);
forward CarRespawn(carid);
forward LockCar(carid);
forward UnLockCar(carid);
forward InitLockDoors(playerid);
forward CheckGas();
forward Fillup();
forward StoppedVehicle();
forward SyncTime();
forward SyncUp();
forward SaveAccounts();
forward darhambre();
forward IsPlayerInZone(playerid, zoneid);
forward Production();
forward Checkprop();
forward PayDay();
forward ini_GetKey( line[] );
forward ini_GetValue( line[] );
forward PlayerPlayMusic(playerid);
forward StopMusic();
forward PlayerFixRadio(playerid);
forward PlayerFixRadio2();
forward HouseLevel(playerid);
forward CHouseLevel(houseid);
forward CustomPickups();
forward IdleKick();
forward SetCamBack(playerid);
forward FixHour(hour);
forward AddsOn();
forward IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy);
forward AdvertiseToPlayersAtBusStop(Float:stopX, Float:stopY, Float:stopZ, eastorwest);
forward SendBusRoute(playerid, eastorwest);
forward IsInBusrouteZone(playerid);
forward BusrouteEnd(playerid, vehicleid);
forward CreateFoodMenus();
//forward OnPlayerEnterFood(playerid, foodid);
forward OnPlayerUseVending(playerid, health, money);
//forward OnPlayerExitFood(playerid);
forward ClearChatbox(playerid, lines);
forward CreateGuideMenus();
forward CreateLegalJobsMenus();
forward CreateLicensesMenus();
forward Startup(playerid, vehicleid);
forward engine2(playerid);
forward busroutestoptimer(playerid);
forward CheckCarHealth();
forward StartingTheVehicle(playerid);
forward FarmerExit(playerid);
forward DrugFarmerExit(playerid);
forward LoadDrugSystem();
forward SaveDrugSystem();
forward LoadMatsSystem();
forward SaveMatsSystem();
forward LoadingDrugsForSmugglers(playerid);
forward LoadingDrugsForSmugglersrober(playerid); // by DryilZas
forward SmugglerExit(playerid);
forward SafeGivePlayerMoney(plyid, amounttogive);
forward SafeGivePlayerWeapon(plyid, weaponid, ammo);
forward SafeResetPlayerMoney(plyid);
forward SafeResetPlayerWeapons(plyid);
forward UpdateWeaponSlots(plyid);
forward GlobalHackCheck();
forward GlobalDescCheck();
forward BanAdd(bantype, sqlplayerid, ip[], hackamount);
forward UnsetFirstSpawn(playerid);
forward LoadHQLocks();
forward SaveHQLocks();
forward ClearKnock(playerid);
forward quitarsalva(playerid);
forward liberarsalva(playerid);
forward DrugEffectGone(playerid);
forward Loteria901(playerid); // by DryilZas
forward cinemaoff(playerid); // by DryilZas
/*forward logueando(playerid); // by DryilZas
forward logueando1(playerid); // by DryilZas
forward logueando2(playerid); // by DryilZas
forward logueando3(playerid); // by DryilZas
forward logueando4(playerid); // by DryilZas
forward logueando5(playerid); // by DryilZas
forward logueando6(playerid); // by DryilZas
forward logueando7(playerid); // by DryilZas
forward logueando8(playerid); // by DryilZas
forward logueando9(playerid); // by DryilZas
forward logueando10(playerid); // by DryilZas
forward logueando11(playerid); // by DryilZas
forward logueando12(playerid); // by DryilZas
forward logueando13(playerid); // by DryilZas
forward logueando14(playerid); // by DryilZas
forward logueando15(playerid); // by DryilZas
forward logueando16(playerid); // by DryilZas
forward logueando17(playerid); // by DryilZas
forward logueando18(playerid); // by DryilZas
forward logueando19(playerid); // by DryilZas
forward logueando20(playerid); // by DryilZas
forward logueando21(playerid); // by DryilZas
forward logueando22(playerid); // by DryilZas
forward logueando23(playerid); // by DryilZas
forward logueando24(playerid); // by DryilZas
forward logueando25(playerid); // by DryilZas
forward logueando26(playerid); // by DryilZas
forward logueando27(playerid); // by DryilZas
forward logueando28(playerid); // by DryilZas
forward logueando29(playerid); // by DryilZas
forward logueando30(playerid); // by DryilZas*/
forward BeberBotella(playerid); // by DryilZas
forward BeberBotella2(playerid); // by DryilZas
forward BeberBotella3(playerid); // by DryilZas
forward BeberBotella4(playerid); // by DryilZas
forward BeberBotella5(playerid); // by DryilZas
forward BeberBotella6(playerid); // by DryilZas
forward BeberBotella7(playerid); // by DryilZas
forward BeberBotella8(playerid); // by DryilZas
forward BeberBotella9(playerid); // by DryilZas
forward BeberBotella10(playerid); // by DryilZas
forward AdiosLadron(playerid); // by DryilZas
forward UsingDrugsUnset(playerid);
forward tiemponomerca(playerid); // by DryilZas
forward tiemponopesca(playerid); // by DryilZas
forward tiemponointentar(playerid); // by DryilZas
//forward UpdatePlayerPosition(playerid);
forward CrashPlayer(playerid);
forward UnsetAfterTutorial(playerid);
forward AfterSpray1(playerid);
forward AfterSpray2(playerid);
forward AfterSpray3(playerid);
forward AfterSpray4(playerid);
forward UnsetCrash(playerid);
forward backtoclothes(playerid);
forward RemovePlayerWeapon(playerid, weaponid);
forward SaveTrunk();
forward LoadTrunk();

/*forward UpdateBurgerPositions();
forward ShowMenuBurger(i);
forward UpdateChickenPositions();
forward ShowMenuChicken(i);
*/
forward CanDriveThruAgain(playerid);
forward Float:GetDistance(playerid, Float:x, Float:y);
forward TraceLastCall();
forward ReportReset(playerid);
forward ReduceTimer(playerid);
forward IsPlayerInInvalidNosVehicle(playerid);
//------------------------------------------------------------------------------------------------------

new InvalidNosVehicles[29] =
{
	581,523,462,521,463,522,461,448,468,586,
    509,481,510,472,473,493,595,484,430,453,
    452,446,454,590,569,537,538,570,449
};
//new LS_BUS_VEHICLE; // The pink bus
new football;
new playingfootball[MAX_PLAYERS];
new intermitente[MAX_PLAYERS];
new lastentered[128];
new paracatiempo = 0;
new paracaidas;
new avion;
//new CarAutolock[999];
//new cartrack[256];
new street_zone;
new GangCar[MAX_PLAYERS];
new tactical[MAX_PLAYERS];
new authorizetactical;
new surenos;
new mafiia;
new pachinos;
new nortgang;
new loscobras;
new superlux1;
new superlux2;
new superlux3;
new nortenos;
new mafiia2;
new mafiia3;
/* new lstagate; */
new hangar;
new pdgate1;
new puertacasa96;
new puertacasa17;
new puertacasa80;
new puertacasa104;
new puertacasa23;
new puertacasa20;
new puertacasa103;
new puertacasa14;
new puertacasa95;
new puertacasa85;
new yakuzagate;
new yakuzagate2;
new yakuzagate3;
new puretagate;
new bomberosgate;
new pdgate2;
new pdgate3;
//new tugate;
new lspddoor1;
new tallergate;
new mecanicagate;
new platagate;
new plata2gate;
new lspddoor2;
new armygate1;
new armygate2;
new fbigate;
new hspdgate;
new lucianogate;
new vallaosafa;
new cajamilitar;
//new iorgate;
/*new license_pu;
new license_pu2;
new license_pu3;
new license_pu4;
new license_pu5;*/
new Security = 0;
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
//new Text:txtAnimHelper;
new CreatedCars[100];
new NosDelay[MAX_PLAYERS];
new CreatedCar = 0;
new Tax = 0;
new TaxValue = 0;
new Jackpot = 0;
new StartingPaintballRound = 0;
new AnnouncedPaintballRound = 0;
new PaintballPlayers = 0;
new PaintballRound = 0;
new PaintballWinner = 999;
new PaintballWinnerKills = 0;
new StartingKartRound = 0;
new EndingKartRound = 0;
new AnnouncedKartRound = 0;
new KartingPlayers = 0;
new KartingRound = 0;
new FirstKartWinner = 999;
new SecondKartWinner = 999;
new ThirdKartWinner = 999;
new InRing = 0;
new RoundStarted = 0;
new BoxDelay = 0;
new Boxer1 = 255;
new Boxer2 = 255;
new TBoxer = 255;
new PlayerBoxing[MAX_PLAYERS];
new hitfound = 0;
new hitid = 999;
new Medics = 0;
new MedicCall = 999;
new MedicCallTime[MAX_PLAYERS];
new Mechanics = 0;
new MechanicCall = 999;
new MechanicCallTime[MAX_PLAYERS];
new TaxiDrivers = 0;
new TaxiCall = 999;
new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new BusDrivers = 0;
new BusCall = 999;
new ScriptMoney[MAX_PLAYERS];
new ScriptWeapons[MAX_PLAYERS][13];
new ScriptMoneyUpdated[MAX_PLAYERS];
new ScriptWeaponsUpdated[MAX_PLAYERS];
new ConsumingMoney[MAX_PLAYERS];
new BusCallTime[MAX_PLAYERS];
new BusAccepted[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new RegistrationStep[MAX_PLAYERS];
new MapIconsShown[MAX_PLAYERS];
new OnCK[MAX_PLAYERS];
new GettingCK[MAX_PLAYERS];
new PlayerPaintballing[MAX_PLAYERS];
new PlayerPaintballKills[MAX_PLAYERS];
new PlayerKarting[MAX_PLAYERS];
new PlayerInKart[MAX_PLAYERS];
new SchoolSpawn[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new PlayersChannel[MAX_PLAYERS];
new PlayerOnMission[MAX_PLAYERS];
new MissionCheckpoint[MAX_PLAYERS];
new WatchingTV[MAX_PLAYERS];
new NoFuel[MAX_PLAYERS];
new MatsHolding[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
//new ConsumingMoney[MAX_PLAYERS];
new BringingPaper[MAX_PLAYERS]; //Paper Boys must pick up a Paper first, then use /deliver
new GotPaper[MAX_PLAYERS]; //The player has a paper so he can use /read
new WritingPaper[MAX_PLAYERS]; //Used for onplayertext so he can type in lines
new WritingPaperNumber[MAX_PLAYERS]; //To which Paper in PaperInfo will it be written
new WritingLine[MAX_PLAYERS]; //Used for onplayertext to see which line he's at
new FishCount[MAX_PLAYERS];
new SpawnChange[MAX_PLAYERS];
new TutTime[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new PlayerTazeTime[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new BoxWaitTime[MAX_PLAYERS];
new TestFishes[MAX_PLAYERS];
new PaperOffer[MAX_PLAYERS];
new BoxOffer[MAX_PLAYERS];
new CarOffer[MAX_PLAYERS];
new BegOffer[MAX_PLAYERS];
new BegPrice[MAX_PLAYERS];
new CarPrice[MAX_PLAYERS];
new CarID[MAX_PLAYERS];
new CarCalls[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
new OrderReady[MAX_PLAYERS];
new ConnectedToPC[MAX_PLAYERS];
new MedicTime[MAX_PLAYERS];
new NeedMedicTime[MAX_PLAYERS];
new MedicBill[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new PlacedNews[MAX_PLAYERS];
new SelectChar[MAX_PLAYERS];
new SelectCharID[MAX_PLAYERS];
new SelectCharPlace[MAX_PLAYERS];
new ChosenSkin[MAX_PLAYERS];
new GettingJob[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new ApprovedLawyer[MAX_PLAYERS];
new CallLawyer[MAX_PLAYERS];
new WantLawyer[MAX_PLAYERS];
new CurrentMoney[MAX_PLAYERS];
new KickPlayer[MAX_PLAYERS];
new Robbed[MAX_PLAYERS];
new RobbedTime[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new Rope[MAX_PLAYERS];
new STDPlayer[MAX_PLAYERS];
new SexOffer[MAX_PLAYERS];
new SexPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new DrugOffer[MAX_PLAYERS];
new DrugPrice[MAX_PLAYERS];
new DrugGram[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new WantedPoints[MAX_PLAYERS];
new WantedLevel[MAX_PLAYERS];
new swat[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gActivePlayers[MAX_PLAYERS];
new gLastCar[1999];
new gOoc[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new StartTime[MAX_PLAYERS];
new HireCar[MAX_PLAYERS];
new SafeTime[MAX_PLAYERS];
new Specing[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new HideAdmin[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new gDice[MAX_PLAYERS];
new gGas[MAX_PLAYERS];
new gSpeedo[MAX_PLAYERS];
//new gSpentCash[MAX_PLAYERS];
new FirstSpawn[MAX_PLAYERS];
new SwitchKey[MAX_PLAYERS];
new Fixr[MAX_PLAYERS];
new Locator[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new RingTone[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
new gPlayerMission[MAX_PLAYERS];
new BusrouteEast[MAX_PLAYERS][2];
new BusrouteWest[MAX_PLAYERS][2];
new Float:BusShowLocation[MAX_PLAYERS][4];
new BusShowLocationC[MAX_PLAYERS];
new InAFoodPlace[MAX_PLAYERS];
new gLastDriver[622];
new gCarLock[265];
new MissionPlayable = 0;
new noooc = 0;
new adds = 1;
new addtimer = 60000;
new Float:rx, Float:ry, Float:rz;
new carselect[15];
new objstore[128];
new cbjstore[128];
new motd[256];
//new RStart;
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new numplayers = 0;
new dollah = 0; // Amount player recieves on spawn.
new realtime = 1;
new wtime = 16;
//new levelcost = 5000;
new deathcost = 500;
new callcost = 2; //20 seconds
new realchat = 1;
new timeshift = 0;
new shifthour;
new othtimer;
new hackchecktimer;
new desctimer;
new synctimer;
new newmistimer;
new unjailtimer;
new turftimer;
new pickuptimer;
new spectatetimer;
new idletimer;
new productiontimer;
new SetWorld;
new accountstimer;
new hambre;
new checkgastimer;
new stoppedvehtimer;
new checkcarhealthtimer;
//new updateplayerpos;
new cartimer;
new intrate = 1;
new levelexp = 4;
new idletime = 600000; //10 mins
new civnokill = 0;
new suecost = 100;
new cchargetime = 60;
new txtcost = 1;
new pickups;
new authorizeswat;
new PizzaBoys = 0;
new PizzaCall = 999;
new PizzaCallTime[MAX_PLAYERS];
new bPizza[MAX_PLAYERS];
new sPizza[MAX_PLAYERS];
new CIV[] = {7,19,20,23,73,101,122};
new guarda[] = {163,164};
new STD1[] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
new STD2[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
new STD3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3};
new STD4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3};
new SELLCAR1[] = { 504, 509, 525, 531, 538, 544, 548, 555, 568, 577, 580 };
new SELLCAR2[] = { 642, 648, 653, 661, 668, 670, 674, 687, 693, 698, 703 };
new SELLCAR3[] = { 1234, 1246, 1137, 1349, 1125, 1237, 1207, 1378, 1037, 1112, 1379 };
new SELLCAR4[] = { 1867, 1349, 1794, 1679, 1456, 1861, 1647, 1831, 1800, 1549, 1904 };
new MERCANCIA1[] = { 1, 2, 2, 6, 6, 6, 6, 6, 9, 9, 10 };
new MERCANCIA2[] = { 10, 11, 12, 13, 13, 14, 14, 15, 15, 15, 20 };
new MERCANCIA3[] = { 20, 21, 22, 22, 22, 23, 23, 23, 23, 24, 30 };
new MERCANCIA4[] = { 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 40 };
new MINERIA1[] = { 10, 24, 24, 32, 32, 32, 32, 32, 38, 38, 40 };
new MINERIA2[] = { 40, 44, 48, 52, 56, 56, 56, 60, 60, 60, 80 };
new MINERIA3[] = { 80, 84, 88, 92, 96, 96, 96, 98, 98, 98, 100 };
new MINERIA4[] = { 100, 104, 108, 112, 116, 116, 116, 118, 118, 118, 120 };
new COMERCIAL[] = { 100, 650, 120, 810, 500, 380, 600, 710, 180, 300, 1000 }; //{ 100, 650, 120, 810, 500, 380, 600, 710, 180, 300, 1000 };
new Float:ChangePos[MAX_PLAYERS][3];
new ChangePos2[MAX_PLAYERS][2];
new Float:PlayerPos[MAX_PLAYERS][6];
new Float:TeleportDest[MAX_PLAYERS][3];
new Float:TelePos[MAX_PLAYERS][6];
//new roadblocktimer = 0;
new engineOn[MAX_VEHICLES];
new vehicleEntered[MAX_PLAYERS][MAX_VEHICLES];
new gEngine[MAX_PLAYERS];
new FarmerVar[MAX_PLAYERS];
new FarmerPickup[MAX_PLAYERS][2];
new DrugFarmerVar[MAX_PLAYERS];
new DrugFarmerPickup[MAX_PLAYERS][2];
new JustStarted[MAX_PLAYERS];
new SmugglerWork[MAX_PLAYERS];
new SmuggledDrugs[MAX_PLAYERS];
new PayDaySecure[MAX_PLAYERS];
new JustDied[MAX_PLAYERS];
new KnockedDown[MAX_PLAYERS];
new SinTazer[MAX_PLAYERS]; // by DryilZas
new UnidentifedCall[MAX_PLAYERS];
new LicenseOffer[MAX_PLAYERS];
new LicensePrice[MAX_PLAYERS];
new LicenseType[MAX_PLAYERS];
new DefaultWeather = 10;
new UsingDrugs[MAX_PLAYERS];
new sinmovermerca[MAX_PLAYERS]; // by DryilZas
new sinmoverpesca[MAX_PLAYERS]; // by DryilZas
new nointentar[MAX_PLAYERS]; // by DryilZas
new AfterTutorial[MAX_PLAYERS];
new OwnableCarOffer[MAX_PLAYERS];
new OwnableCarID[MAX_PLAYERS];
new OwnableCarPrice[MAX_PLAYERS];
new BlindFold[MAX_PLAYERS];
new PlayerIsSweeping[MAX_PLAYERS];
new PlayerIsBasuras[MAX_PLAYERS];
// Trunk system
new vehTrunkCounter[MAX_VEHICLES] = 1;
new vehTrunk[MAX_VEHICLES][MAX_TRUNK_SLOTS];
new vehTrunkAmmo[MAX_VEHICLES][MAX_TRUNK_SLOTS];
new Float:vehTrunkArmour[MAX_VEHICLES];
// ------------
new VehicleWindows[MAX_VEHICLES] = 0;
new AdminDuty[MAX_PLAYERS];
new AdminDutycolor[MAX_PLAYERS];
//new BurgerPickUp[9];
//new ChickenPickUp[9];
//new Menu:BurgerShot;
//new Menu:CluckinBell;
//new IsMenuShowed[MAX_PLAYERS] = 0;
//new burgertimer;
//new	chickentimer;
new pdtrace = 0;
new Float:pdtrace_x;
new Float:pdtrace_y;
new Float:pdtrace_z;
new emdtrace = 0;
new Float:emdtrace_x;
new Float:emdtrace_y;
new Float:emdtrace_z;
new tracetimer;
new JustReported[MAX_PLAYERS];
new PlayerNeedsHelp[MAX_PLAYERS];
new AdminSpec[MAX_PLAYERS];
//new IsSmoking[MAX_PLAYERS];
new UsingSmokeAnim[MAX_PLAYERS];
new ReduceTime[MAX_PLAYERS];
new CreatingGun[MAX_PLAYERS];
new CreatingGunAmmo[MAX_PLAYERS];
new CreatingGunPrice[MAX_PLAYERS];
new IsPuttingMaterials[MAX_PLAYERS];
new IsTakingGun[MAX_PLAYERS];
new coche13st=0;
new cocheclic=0;
new cochegroo=0;

// DMV Defines
#define GREEN 0x21DD00FF
#define RED 0xE60000FF
#define YELLOW 0xFFFF00FF
#define ORANGE 0xF97804FF
#define GRAY 0xCECECEFF
#define LIGHTBLUE 0x00C2ECFF
#define DrivingTestCash 5000 // Edit this if needed. 5000 = the cash that you'll pay to take the driving test
#define TooSlow 120 // 120 = if the time is 110 or more, you are driving too slow. You may edit this if needed.
#define TooFast 105 // 105 = if the time is less than 105, you are driving too fast. You may edit this if needed.
#define MINVEHHP 900 // 900 = the minimum vehicle health the vehicle can have to pass the test. You may edit this if needed.
#define cop_color 0xC2A2DAFF
#define COLOR_BLACK 0x000000FF
#define COLOR_NICERED 0xFF0000FF

#define GasMax 100
#define RunOutTime 25000
#define RefuelWait 5000

#define COLOR_ROJO 0xFF0000FF
#define COLOR 0xC2A2DAAA
#define COLOR_VERDE 0x00A200FF
#define COLOR_AZUL 0x0000DAFF
#define AMARILLO 0xFFFF29FF
#define VerdeB 0x9EC73DAA



#define CAR_AMOUNT 2000 //Change to Your Vehicle Amount
new Gas[CAR_AMOUNT];

new Refueling[MAX_PLAYERS];

enum SavePlayerPosEnum
{
    Float:LastX,
    Float:LastY,
    Float:LastZ
}
new SavePlayerPos[MAX_PLAYERS][SavePlayerPosEnum];
new SpeedMode = 1;
new UpdateSeconds = 1;

public Esperar(playerid)
{
    EsperaGira[playerid] = 0;
	return 1;
}
public Esperar4(playerid)
{
    CantidadGira[playerid] = 0;
    return 1;
}
public Girando(playerid)
{
	new Resultado = random(22);
	TogglePlayerControllable(playerid, 1);
	if(Resultado == 0)
	{
        SendClientMessage(playerid,AMARILLO, "|Campana|Diamante|Corona|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 1)
	{
	    SendClientMessage(playerid,AMARILLO, "|Diamante|Diamante|Diamante|");
	    SendClientMessage(playerid,COLOR_VERDE, "¡Felicidades! Ganaste $300");
	    SafeGivePlayerMoney(playerid, 300);
	 	new Nombre[MAX_PLAYER_NAME];
	 	new String[256];
	    GetPlayerName(playerid,Nombre,sizeof(Nombre));
    	format(String, sizeof(String), "* %s gano $300 en la maquina Tragamonedas", Nombre);
    	ProxDetector(30.0, playerid, String, COLOR,COLOR,COLOR,COLOR,COLOR);
	}
	if(Resultado == 2)
	{
        SendClientMessage(playerid,AMARILLO, "|BAR|BAR|Diamante|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 3)
	{
        SendClientMessage(playerid,AMARILLO, "|7|7|7|");
		SendClientMessage(playerid,COLOR_VERDE, "¡Felicidades! Ganaste $500");
        SafeGivePlayerMoney(playerid, 500);
        new Nombre[MAX_PLAYER_NAME];
	 	new String[256];
	    GetPlayerName(playerid,Nombre,sizeof(Nombre));
    	format(String, sizeof(String), "* %s gano $500 en la maquina Tragamonedas", Nombre);
    	ProxDetector(30.0, playerid, String, COLOR,COLOR,COLOR,COLOR,COLOR);
	}
	if(Resultado == 4)
	{
        SendClientMessage(playerid,AMARILLO, "|Fruta|Corona|Diamante|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 5)
	{
        SendClientMessage(playerid,AMARILLO, "|Fruta|Fruta|Fruta|");
		SendClientMessage(playerid,COLOR_VERDE, "¡Felicidades! Ganaste $100");
        SafeGivePlayerMoney(playerid, 100);
        new Nombre[MAX_PLAYER_NAME];
	 	new String[256];
	    GetPlayerName(playerid,Nombre,sizeof(Nombre));
    	format(String, sizeof(String), "* %s gano $100 en la maquina Tragamonedas", Nombre);
    	ProxDetector(30.0, playerid, String, COLOR,COLOR,COLOR,COLOR,COLOR);
	}
	if(Resultado == 6)
	{
        SendClientMessage(playerid,AMARILLO, "|Fruta|BAR|Campana|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 7)
	{
        SendClientMessage(playerid,AMARILLO, "|Corona|BAR|Diamante|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 8)
	{
        SendClientMessage(playerid,AMARILLO, "|BAR|BAR|BAR|");
		SendClientMessage(playerid,COLOR_VERDE, "¡Felicidades! Ganaste $1000");
        SafeGivePlayerMoney(playerid, 1000);
        new Nombre[MAX_PLAYER_NAME];
	 	new String[256];
	    GetPlayerName(playerid,Nombre,sizeof(Nombre));
    	format(String, sizeof(String), "* %s gano $1000 en la maquina Tragamonedas", Nombre);
    	ProxDetector(30.0, playerid, String, COLOR,COLOR,COLOR,COLOR,COLOR);
	}
	if(Resultado == 9)
	{
        SendClientMessage(playerid,AMARILLO, "|Fruta|7|Corona|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 10)
	{
        SendClientMessage(playerid,AMARILLO, "|7|Corona|Fruta|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
    if(Resultado == 11)
	{
        SendClientMessage(playerid,AMARILLO, "|7|BAR|Fruta|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 12)
	{
        SendClientMessage(playerid,AMARILLO, "|Fruta|BAR|Fruta|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 13)
	{
        SendClientMessage(playerid,AMARILLO, "|BAR|7|BAR|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 14)
	{
        SendClientMessage(playerid,AMARILLO, "|7|BAR|7|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 15)
	{
        SendClientMessage(playerid,AMARILLO, "|7|Corona|Diamante|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 16)
	{
        SendClientMessage(playerid,AMARILLO, "|BAR|Fruta|Campana|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 17)
	{
        SendClientMessage(playerid,AMARILLO, "|Campana|Campana|Campana|");
		SendClientMessage(playerid,COLOR_VERDE, "¡Felicidades! Ganaste $150");
        SafeGivePlayerMoney(playerid, 150);
        new Nombre[MAX_PLAYER_NAME];
	 	new String[256];
	    GetPlayerName(playerid,Nombre,sizeof(Nombre));
    	format(String, sizeof(String), "* %s gano $150 en la maquina Tragamonedas", Nombre);
    	ProxDetector(30.0, playerid, String, COLOR,COLOR,COLOR,COLOR,COLOR);
	}
	if(Resultado == 18)
	{
        SendClientMessage(playerid,AMARILLO, "|Diamante|BAR|BAR|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 19)
	{
        SendClientMessage(playerid,AMARILLO, "|BAR|Corona|Corona|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 20)
	{
        SendClientMessage(playerid,AMARILLO, "|BAR|Corona|Fruta|");
		SendClientMessage(playerid,ROJO, "    |_____NADA_____|");
	}
	if(Resultado == 21)
	{
        SendClientMessage(playerid,AMARILLO, "|Corona|Corona|Corona|");
		SendClientMessage(playerid,COLOR_VERDE, "¡Felicidades! Ganaste $50");
        SafeGivePlayerMoney(playerid, 50);
        new Nombre[MAX_PLAYER_NAME];
	 	new String[256];
	    GetPlayerName(playerid,Nombre,sizeof(Nombre));
    	format(String, sizeof(String), "* %s gano $50 en la maquina Tragamonedas", Nombre);
    	ProxDetector(30.0, playerid, String, COLOR,COLOR,COLOR,COLOR,COLOR);
	}
	return 1;
}


public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}
public PlayerActionMessage(playerid,Float:radius,message[])
{
	new string[128];
	format(string, sizeof(string), "* %s %s", GetPlayerNameEx(playerid), message);
	ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}
new Music[MAX_PLAYERS];
/*new Songs[7][1] = {
{1187},
{1185},
{1183},
{1097},
{1076},
{1068},
{1062}
};*/

/*new Float:BurgerDriveIn[6][3] = {
	{801.5522, -1628.91, 13.3828},
	{1209.958,-896.7405, 42.9259},
	{-2341.86, 1021.184, 50.6953},
	{2485.291, 2022.611, 10.8203},
	{1859.496, 2084.797, 10.8203},
	{-2349.49, -152.182, 35.3203}
};

new Float:ChickenDriveIn[3][3] = {
	{2409.651, -1488.65, 23.8281},
	{2377.733, -1909.27, 13.3828},
	{2375.014, 2021.186, 10.8203}
};
*/
new FishNamesNumber = 22;
new LugaresRober = 5; // by DryilZas
new FishNames[22][20] = {
{"Sardina"},
{"Salmon"},
{"Atun"},
{"Perla"},
{"Bacalao"},
{"Pez Globo"},
{"Calamar"},
{"Esturion"},
{"Trucha"},
{"Ballena"},
{"Pez raro"},
{"Pez payaso"},
{"Tiburon martillo"},
{"Pez dorado"},
{"Atun lila"},
{"Pez podrido"},
{"Delfin"},
{"Tiburon"},
{"Tortuga"},
{"Pez Gato"},
{"Bacalao"},
{"Tiburon espada"}
};

new Float:PaintballSpawns[7][3] = {
{-1132.3623,1023.1916,1345.7253},
{-1084.3871,1042.5350,1343.3540},
{-1070.4845,1092.8313,1343.0894},
{-1029.8055,1078.4399,1343.2043},
{-1024.9242,1046.5920,1342.1761},
{-1010.2249,1075.5171,1341.3320},
{-969.9068,1089.5382,1345.0095}
};

new Float:mozoCP[8][3] =
{
{2465.9885,-2558.5659,13.4191},
{2445.3320,-2500.3127,13.4241},
{2416.4675,-2466.5901,13.3892},
{2403.3882,-2562.4019,13.4130},
{2388.3044,-2649.0820,13.4264},
{2388.4988,-2495.1753,13.4111},
{2543.4702,-2465.0767,13.3885},
{2462.1975,-2640.9192,13.4285}
};

new Float:mineroCP[7][3] =
{
{543.4674,991.1042,-7.1863},
{694.1320,743.9894,-5.3337},
{684.3596,970.5570,-13.1550},
{688.5028,807.0879,-30.6415},
{601.9690,854.8279,-43.4663},
{652.1407,914.4853,-41.3994},
{838.7456,857.0182,12.4167}
//{343.4018,855.6278,19.9638}
};

new Float:comercialCP[7][3] =
{
{510.9450,-1758.2991,14.2121},
{-2163.8699,-2418.0164,30.6250},
{-2156.8772,151.2778,35.3203},
{-1707.0957,1264.5760,7.1929},
{-1449.8569,2593.5618,55.8359},
{2247.8433,2398.7993,10.8203},
{1559.2217,1007.2798,10.8125}
};

new Float:gInviteSpawns[10][4] = {
{-1976.5912,166.1818,36.9623,272.6393},
{-1975.8610,162.1945,36.9623,272.0126},
{-1975.7461,157.5404,36.9623,276.1093},
{-1975.2136,151.4920,36.9623,268.2993},
{-1974.9963,145.3430,36.9623,269.2628},
{-1975.5842,140.8170,36.9623,269.8895},
{-1975.7874,134.0368,36.9623,271.7696},
{-1975.1681,129.0926,36.9623,270.8531},
{-1975.9069,121.4700,36.9623,270.5631},
{-1975.3311,112.7078,36.9623,267.7665}
};

/*new Float:gMedicSpawns[3][3] = {
{1170.5933,-1319.6388,1006.8994},
{1167.7089,-1319.9600,1006.8994},
{1164.5577,-1320.0056,1006.8994}
};*/

new Float:gCopPlayerSpawns[2][3] = {
{216.9725,79.1339,1005.0391},
{219.8852,75.5487,1005.0391}
//{614.8,-608.2,17.2},
//{611.5,-607.8,17.2}
};

new Float:gMedPlayerSpawns[2][3] = {
{1178.1,-1321.0,14.1},
{1177.7,-1325.0,14.0}
};

new Float:gSweeperPoints[16][3] = {
{2003.3517,-1730.5336,13.1080},
{2243.8682,-1895.1603,13.1057},
{2872.5264,-1507.8936,10.5887},
{2733.4851,-1079.1128,69.0215},
{2491.6882,-1096.9484,48.1798},
{1973.2815,-1173.0474,25.6866},
{1441.3285,-1038.8422,23.4461},
{1041.5815,-776.1030,104.3925},
{958.6799,-1034.2134,29.8119},
{995.9623,-1351.8215,13.0737},
{793.3896,-1583.4993,13.1155},
{368.1902,-1977.2362,7.3970},
{834.1572,-1794.8837,13.5680},
{1243.4885,-1853.9174,13.1080},
{1527.9438,-1663.3240,13.1080},
{2083.6062,-1843.3563,13.1080}
};

new Float:gBasuraPoints[39][3] = {  // basurero
{1930.8159,-2071.0540,14.1095},
{1996.4435,-1628.7450,14.0067},
{1755.1560,-2161.2456,14.0070},
{1375.7559,-1892.8052,14.0366},
{2127.5986,-1796.8318,14.1019},
{1556.4087,-1839.1584,14.0918},
{2214.2131,-1137.8011,26.2591},
{1821.6285,-1937.9514,14.0668},
{2296.4834,-1718.6564,14.1029},
{2459.8557,-1937.5564,13.9484},
{1074.3671,-1568.2813,13.9528},
{974.2237,-1292.4691,14.0923},
{1031.8350,-1381.5128,14.1370},
{961.4835,-1475.3795,14.0594},
{767.8520,-1437.8405,14.0823},
{607.3024,-1520.8651,15.5895},
{458.5308,-1623.6901,26.5922},
{393.5735,-1839.1588,8.3910},
{357.4880,-1548.5389,33.7182},
{441.6885,-1300.8706,15.7104},
{614.9733,-1347.6855,14.1987},
{785.7828,-1133.3733,24.3755},
{1013.0056,-1027.0144,32.6019},
{1186.3633,-1127.6580,24.5487},
{1420.6996,-1136.1316,24.5616},
{1418.9634,-1253.6621,14.1168},
{1777.7456,-1154.5006,24.3779},
{1970.9005,-1278.2578,24.5324},
{2305.3110,-1638.7535,15.0250},
{2419.2017,-1774.9572,14.0068},
{2229.4009,-1941.5055,14.0781},
{2099.5061,-1643.3976,13.9559},
{2392.9985,-1250.3899,24.5061},
{2678.7559,-1399.6926,31.1013},
{2726.2957,-2016.7651,14.0882},
{2009.2251,-1073.7070,25.1364},
{2710.2800,-1130.1591,70.1237},
{1818.3921,-2145.2527,14.0065},
{1134.4312,-1666.3022,14.3368}
};

enum pBoxingStats
{
    TitelName[128],
    TitelWins,
    TitelLoses,
};
new Titel[pBoxingStats];

enum cCKInfo
{
	cSendername[20],
	cGiveplayer[20],
	cUsed,
};
new CKInfo[10][cCKInfo];

enum pPaperInfo
{
	PaperUsed,
	PaperMaker[20],
	PaperTitle[64],
	PaperText1[128],
	PaperText2[128],
	PaperText3[128],
	PaperText4[128],
	PaperText5[128],
	PaperText6[128],
	PaperText7[128],
	SafeSaving,
};
new PaperInfo[10][pPaperInfo];

enum pPaper
{
	pMaker[20],
	pTitle[64],
	pLine1[128],
	pLine2[128],
	pLine3[128],
	pLine4[128],
	pLine5[128],
	pLine6[128],
	pLine7[128],
};
new Paper[MAX_PLAYERS][pPaper];

enum fInfo
{
	FamilyTaken,
	FamilyName[20],
	FamilyMOTD[128],
	FamilyColor[20],
	FamilyLeader[MAX_PLAYER_NAME],
	FamilyMembers,
	Float:FamilySpawn[4],
	FamilyInterior,
};
new FamilyInfo[10][fInfo];

enum zInfo
{
	zOwner[64],
	zColor[20],
    Float:zMinX,
    Float:zMinY,
    Float:zMaxX,
    Float:zMaxY,
};
new TurfInfo[6][zInfo];
new Turfs[6];

enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

enum pCooking
{
	pCook1[20],
	pCook2[20],
	pCook3[20],
	pCook4[20],
	pCook5[20],
	pCWeight1,
	pCWeight2,
	pCWeight3,
	pCWeight4,
	pCWeight5,
	pCookID1,
	pCookID2,
	pCookID3,
	pCookID4,
	pCookID5,
};
new Cooking[MAX_PLAYERS][pCooking];

enum pGroceries
{
	pChickens,
	pChicken,
	pHamburgers,
	pHamburger,
	pPizzas,
	pPizza,
};
new Groceries[MAX_PLAYERS][pGroceries];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum eCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
};

enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hAdd1[128],
	hAdd2[128],
	hAdd3[128],
	hAdd4[128],
	hAdd5[128],
	hContact1[128],
	hContact2[128],
	hContact3[128],
	hContact4[128],
	hContact5[128],
};
new News[hNews];

enum pInfo
{
	pKey[128],
	pLevel,
	pIp[256],
	pAdmin,
	pAsistente,
	pCazachetos,
	pVigilante,
	pMapper,
	pEventor,
	pModerador,
	pScripter,
	pAdministrador,
	pEsAdmin,
	paaafk,
	ptengocaja,
	pmuriedote,
	pcinema,
	pDonateRank,
	gPupgrade,
	pConnectTime,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pCK,
	pMuted,
	pExp,
	pCash,
	pAccount,
	pJobTimer,
	pCrimes,
	pKills,
	pDeaths,
	pArrested,
	pWantedDeaths,
	pPhoneBook,
	pLottoNr,
	pFishes,
	pBiggestFish,
	pJob,
	pPayCheck,
	pHeadValue,
	pJailed,
	pJailTime,
	pMats,
	pDrugs,
	pLeader,
	pMember,
	pFMember,
	pRank,
	pChar,
	pContractTime,
	pDetSkill,
	pSexSkill,
	pBoxSkill,
	pLawSkill,
	pMechSkill,
	pJackSkill,
	pCarSkill,
	pNewsSkill,
	pDrugsSkill,
	pCookSkill,
	pFishSkill,
	Float:pHealth,
	Float:pSHealth,
	pInt,
	pLocal,
	pTeam,
	pModel,
	pPnumber,
	pPhousekey,
	pPcarkey,
	pPcarkey2,
	pPcarkey3,
	pPcarkey4,
	pPcarkey5,
	pPcarkey6,
	pPcarkey7,
	pPcarkey8,
	pPcarkey9,
	pPcarkey10,
	pGangKey,
	pPbiskey,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic1,
	pGunLic2,
	pGun1,
	pGun2,
	pGun3,
	pGun4,
	pAmmo1,
	pAmmo2,
	pAmmo3,
	pAmmo4,
	pCarTime,
	pPayDay,
	pPayDayHad,
	pCDPlayer,
	pWatch,
	pCrashed,
	pWins,
	pLoses,
	pAlcoholPerk,
	pDrugPerk,
	pMiserPerk,
	pPainPerk,
	pTraderPerk,
	pTut,
	pMissionNr,
	pWarns,
	pVirWorld,
	pFuel,
	pMarried,
	pMarriedTo[128],
	pFishTool,
	pNote1[128],
	pNote1s,
	pNote2[128],
	pNote2s,
	pNote3[128],
	pNote3s,
	pNote4[128],
	pNote4s,
	pNote5[128],
	pNote5s,
	ptatu1[128],
	ptatu1s,
	ptatu2[128],
	ptatu2s,
	ptatu3[128],
	ptatu3s,
	ptatu4[128],
	ptatu4s,
	ptatu5[128],
	ptatu5s,
	pInvWeapon,
	pInvAmmo,
	pLighter,
	pCigarettes,
	pbono1,
	pbono2,
	pbono3,
	pbono4,
	pbono5,
	pbono6,
	pbono7,
	pbono8, //por aqui vamos con los bonos
	pbono9,
	pbono10,
	pbono11,
	pbono12,
	pbono13,
	pbono14,
	pbono15,
	pbono16,
	pbono17,
	pbono18,
	pbono19,
	pbono20,
	pRequestingBackup,
	pRoadblock,
	pMask,
	pThermal,
	pMaskuse,
	pHideNumber,
	pSpeaker,
	pLocked,
    pM2,   //vida bebendo
    pCAM,  // "    "
	pCasco, // casco
	bool:SpawnDance,
	Float:SpawnAngle,
	SpawnTimer,
	//sistema poker
	pDealer,
	pCards,
	pCard1,
	pCard2,
	pFlop1,
	pFlop2,
	pFlop3,
	pTurn,
	pRiver,
	//pSQLID,
};
new PlayerInfo[MAX_PLAYERS][pInfo];

enum hInfo
{
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	hHealthx,
	hHealthy,
	hHealthz,
	hArmourx,
	hArmoury,
	hArmourz,
	hOwner[MAX_PLAYER_NAME],
	hDiscription[MAX_PLAYER_NAME],
	hValue,
	hHel,
	hArm,
	hInt,
	hLock,
	hOwned,
	hRooms,
	hRent,
	hRentabil,
	hTakings,
	hVec,
	hVcol1,
	hVcol2,
	hDate,
	hLevel,
	hWorld
};

enum eInfo //by DryilZas
{
    eAlcalde[MAX_PLAYER_NAME],
    ePartido[MAX_PLAYER_NAME],
	eArcas,
	eImpuestoCompraCasa,
	eImpuestoVentaCasa,
	eImpuestoCompraVeh,
	eImpuestoVentaVeh,
	eImpuestoBancario,
	ePagaCivil,
	ePagaEstado
};

new HouseInfo[105][hInfo];

//new EconomyInfo[eInfo]; // by DryilZas

new HouseEntered[MAX_PLAYERS];

enum cInfo
{
	cModel,
	Float:cLocationx,
	Float:cLocationy,
	Float:cLocationz,
	Float:cAngle,
	cColorOne,
	cColorTwo,
	cOwner[MAX_PLAYER_NAME],
	cDescription[MAX_PLAYER_NAME],
	cValue,
	cLicense,
	cRegistration,
	cOwned,
	cLock,
};

new CarInfo[608][cInfo];

enum bInfo
{
    bOwned,
	bOwner[64],
	bMessage[128],
	bExtortion[MAX_PLAYER_NAME],
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bProducts,
	bMaxProducts,
	bPriceProd,
};
new BizzInfo[30][bInfo];

enum sbInfo
{
	sbOwned,
	sbOwner[64],
	sbMessage[128],
	sbExtortion[MAX_PLAYER_NAME],
	Float:sbEntranceX,
	Float:sbEntranceY,
	Float:sbEntranceZ,
	sbLevelNeeded,
	sbBuyPrice,
	sbEntranceCost,
	sbTill,
	sbLocked,
	sbInterior,
	sbProducts,
	sbMaxProducts,
	sbPriceProd,
};
new SBizzInfo[12][sbInfo];

enum pHaul
{
	pCapasity,
	pLoad,
};

new PlayerHaul[113][pHaul];

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];

enum mInfo
{
    mTitle[128],
    mText1[128],
    mText2[128],
    mText3[128],
    mText4[128],
    mText5[128],
    mText6[128],
    mText7[128],
    mText8[128],
    mText9[128],
    mText10[128],
    mText11[128],
    mText12[128],
    mText13[128],
    mText14[128],
    mText15[128],
    mText16[128],
    mText17[128],
    mText18[128],
    mGText1[128],
    mGText2[128],
    mGText3[128],
    mGText4[128],
    mGText5[128],
    mGText6[128],
	Float:mCP1[3],
	Float:mCP2[3],
	Float:mCP3[3],
	Float:mCP4[3],
	Float:mCP5[3],
	Float:mCP6[3],
	mReward,
	mToggle,
};
new MissionInfo[mInfo];

enum kInfo
{
    kTitle[128],
    kMaker[MAX_PLAYER_NAME],
    kText1[128],
    kText2[128],
    kText3[128],
    kText4[128],
    kText5[128],
    kText6[128],
    kText7[128],
    kText8[128],
    kText9[128],
    kText10[128],
    kText11[128],
    kText12[128],
    kText13[128],
    kText14[128],
    kText15[128],
    kText16[128],
    kText17[128],
    kText18[128],
    kGText1[128],
    kGText2[128],
    kGText3[128],
    kGText4[128],
    kGText5[128],
    kGText6[128],
	Float:kCP1[3],
	Float:kCP2[3],
	Float:kCP3[3],
	Float:kCP4[3],
	Float:kCP5[3],
	Float:kCP6[3],
	kNumber,
	kReward,
	kToggle,
};
new PlayMission[kInfo];

enum iInfo
{
	iAdmin[128],
	iMOTD[128],
	iPassword[128],
	iNeedPass,
	iLock,
	iPlayers,
};
new IRCInfo[10][iInfo];

enum dDrug
{
	DrugAmmount,
};
new drugsys[dDrug];

enum dMats
{
	MatsAmmount,
};
new matssys[dMats];

enum hqLocks
{
	surlock,
	luclock,
	guclock,
	stlock,
	iolock,
	pulock,
	srlock,
};
new hqlock[hqLocks];

new RandCars[20][1] = {
{496},{542},{507},{585},
{466},{492},{579},{559},
{400},{551},{516},{475},
{561},{550},{566},{558},
{562},{562},{603},{560}
};


new RandLCars[1][1] = {
{431}// coach
};


new GunPrice[30][1] = {
{500}, //parachute
{400}, //golfclub
{300}, //nightstick
{200}, //knife
{700}, //baseballbat
{300}, //shovel
{100}, //poolcue
{400}, //purpledildo
{780}, //whitedildo
{560}, //longwhitedildo
{530}, //whitedildo2
{200}, //flowers
{600}, //cane
{500}, //sdpistol
{1000}, //colt45
{3000}, //deagle
{2000}, //Tec9
{3000}, //uzi
{2500}, //mp5
{3000}, //shotgun
{6000}, //spas12
{4000}, //sawnoff
{5000}, //ak47
{5000}, //m4
{1000}, //rifle
{25}, //pistolammo
{40}, //shotgunammo
{25}, //smgammo
{40}, //assaultammo
{50} //rifle
};

new JoinPed[69][1] = {
{280},//POLICE_FORCE
{281},
{282},
{283},
{284},
{285},
{288},
{71},
{166},
{295},
{148},
{286},//FBI/ATF
{164},
{163},
{287},//NATIONAL_GUARD
{285},
{70},//FIRE/AMBULANCE
{274},
{275},
{276},
{277},
{278},
{279},
{292},//SURENOS
{114},
{115},
{175},
{174},
{116},
{173},
{176},
{124},//LUCIANO
{125},
{126},
{111},
{123},
{186},
{228},
{249},//HITMANS
{68},
{72},
{121},
{295},
{148},//NEWS_REPORTERS
{188},
{187},
{255},//TAXI_CAB_COMPANY
{253},
{153},//DRIVING/FLYING_SCHOOL
{156},//DRIVING/FLYING_SCHOOL
{206},//DRIVING/FLYING_SCHOOL
{221},//DRIVING/FLYING_SCHOOL
{19},//nortenos
{22},
{22},
{144},
{170},
{180},
{91},//Chornaya Bratva
{55},
{112},
{127},
{43},
{46},
{173},//18th street
{114},
{175},
{177},
{174}
};

new CivMalePeds[2][1] = {
// Male civilians down here (by LordMan)
/*{2},
{47},
{48},
{48},
{58},
{60},
{68},
{72},
{73},
{80},
{81},
{82},
{83},
{95},
{100},
{101},
{102},
{103},
{104},
{108},
{109},
{110},
{121},
{122},
{123},
{135},
{142},
{143},
{144},
{146},
{153},
{154},
{155},
{156},
{158},
{159},
{160},
{161},
{170},
{179},
{180},
{189},
{202},
{203},
{204},
{258},
{259},
{260},
{293},
{295},
{296},
{297},
{61},*/
{26},
{26}
};

new CivFemalePeds[2][1] = {
// Female civilians down here (by LordMan)
/*{55},
{56},
{63},
{69},
{76},
{85},
{91},
{93},
{131},
{141},
{148},
{150},
{151},
{152},
{157},
{169},
{172},
{190},
{192},
{193},
{194},
{195},
{198},
{201},
{214},
{216},
{219},
{225},
{233},
{237},
{251},*/
{55},
{56}
};


new Peds[200][1] = {
{7},
/*{288},//TEAM_ADMIN
{286},{287},{228},{113},{120},{147},{294},{227},{61},{171},*/
{247},//CIVILIANS DOWN HERE
{248},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{246},{245},{244},{243},{242},{241},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},//ROSE
{291},//PAUL
{293},//OGLOC
{187},
{296},//JIZZY
{297},//MADDOGG
{298},//CAT
{299}//ZERO
};

/*new Float:HouseCarSpawns[34][4] = {
{-2637.2544,165.0454,4.2919,179.9976},//House 2
{2064.4,-1694.4,13.1,271.1561},//House 1
{-2712.7625,870.3005,70.5348,89.1608},//House 2
{1109.8,-968.0,42.7,0.0},//house 3
{2497.6274,-2025.6306,13.2521,355.4281}, // House 4
{2645.0,-1990.8,13.1,180.0},//House - 5
{-2724.8965,914.8384,67.4253,110.1072},//house 6
{1910.5149,-1120.5304,25.4493,177.8350},//house 7
{828.8,-887.0,68.5,230.7095},//House 8
{2149.6,-1610.9,14.0,90.7904},//House 9
{760.1,-1687.8,4.3,180.6},//House 10
{645.5,-1616.1,14.9,0.0},//House 11
{-2635.2371,931.1931,71.5643,215.3709},//House 12
{-2665.9224,989.9724,64.6955,1.7814},//House 13
{959.5864,-901.0845,45.8584,177.3087},//House 14
{2445.8,-1326.8,23.6,18.4},//House 15
{2845.9,-1286.8,18.9,90.0},//house 16
{2159.8,-1803.9,13.3,271.4}, //House 17
{-2693.7847,132.3186,4.1676,89.5330},//House 18
{-2723.0105,977.7357,54.2926,359.9068},//House 19
{1514.0,-694.6,94.5,90.0},//House 20
{1246.7,-1107.6,25.5,266.4},//House 21
{831.7,-857.5,69.9,180.0},//House 22
{1007.9,-659.4,121.1,130.6194},//House 23
{1110.0,-726.4,100.1,90.0},//House 24
{259.7,-1221.0,74.7,202.0011},//House 25
{1463.7,-901.7,55.8,359.0},//house 26
{1440.1,-890.6,51.2,0.0},//house 27
{-2528.8298,2250.2998,4.8112,334.9590},//house 28
{-2554.7874,2270.5356,4.9064,333.9774}, //House 29
{-2371.1323,2438.4104,9.0698,159.2582},//House 30
{-2237.9492,893.7390,66.4872,89.7571},//House 31
{-2529.4817,-142.6608,19.7107,4.2929}, //House 32
{-2616.1897,-108.4479,4.1693,269.8246}//House 33
};*/


/*new CarSpawns[186][eCars] = {
	{405,2205.2,-1177.0,25.7,270.8},//carid 90
	{554,2205.1,-1169.1,25.7,270.8},
	{426,1544.6674,16.3512,24.2420,277.0196},
	{445,1287.3030,331.6524,19.5783,61.2593},
	{492,2229.2,-1170.2,25.7,86.9},
	{507,2228.9,-1162.7,25.7,87.8},
	{545,2217.0,-1157.2,25.7,269.8},
	{540,169.1929,-1342.3611,69.7396,180.4404},
	{482,422.8060,-1263.5979,51.6681,21.4204},
	{547,405.9748,-1264.3921,50.1237,24.2110},
	{550,2242.3, -1235.4, 24.3,359.7513},
	{551,749.8617,-549.1844,17.1578,2.3866},
	{560,2106.4695,-1248.7920,24.0461,0.1524},
	{566,2196.2891,-1277.7905,24.2147,180.4522},
	{402,198.6057,-1437.2435,13.1844,318.3837},
	{405,216.5521,-1431.4004,13.0853,132.5749},
	{554,334.2231,-1343.7405,14.3828,209.9581},
	{426,481.0428,-1320.8564,15.4095,35.6808},
	{507,697.4343,-1230.9486,16.5063,298.7916},
	{545,723.9850,-1121.5535,18.1450,333.9010},
	{540,912.2176,-996.2035,38.1402,7.5764},
	{482,982.1829,-921.8636,41.8776,262.3163},
	{547,981.8715,-917.3546,41.5443,88.0589},
	{550,1188.4082,-925.1859,42.8590,277.5563},
	{474,1307.5226,-914.4717,39.0082,269.3765},
	{405,1450.2,-937.1,36.2,269.6909}, //116
	{492,2148.3257,-1175.2518,24.1959,269.6909},
	{507,2161.4871,-1163.1450,23.6760,269.1628},
	{545,2216.8965,-1165.9469,25.4697,89.8643},
	{540,2348.2910,-1167.9983,27.3637,323.1586},
	{482,2502.0388,-1134.9507,39.1953,150.9506},
	{547,2909.4895,-1180.3746,11.0176,222.1346},
	{550,2853.1858,-1326.8011,11.1511,278.9301},
	{551,2797.2690,-1549.3374,10.4935,93.0282},
	{533,2796.9031,-1567.2024,10.6386,272.4041},
	{482,2813.2175,-1673.0276,9.6638,2.3369},
	{547,2827.6736,-1703.9755,9.7308,77.2896},
	{550,2809.3872,-1837.2391,9.7398,268.9880},
	{551,2870.8789,-1943.2599,11.4834,359.2344},
	{566,2411.5386,-2134.7576,13.9352,0.7795},
	{554,1389.7467,-2695.9370,13.4164,121.1818},
	{405,783.1359,-1601.8208,13.2577,270.9069},
	{554,782.7205,-1619.3584,13.2653,93.0550},
	{426,923.0841,-1361.7990,13.0324,181.1371},
	{445,911.7986,-1352.7415,13.1543,359.3287},
	{492,1174.6599,-922.1939,43.1189,276.8927},
	{507,1363.0210,-1288.3124,13.2839,180.1453},
	{545,1363.2723,-1260.8229,13.0954,179.5841},
	{540,2383.5627,-1927.9207,13.2436,359.6281},
	{482,2377.0374,-1927.8434,13.1071,0.7843},
	{547,2391.7234,-1978.0658,13.1963,90.1736},
	{550,2396.6899,-1966.8123,13.2793,271.6838},
	{551,2391.1135,-1500.6554,23.6355,269.7709},
	{560,2390.7446,-1490.9093,23.5335,271.1926},
	{405,321.2212,-1809.3561,4.2627,179.7758},
	{554,2358.0640,-59.2127,27.1269,182.6377},
	{426,1354.6172,241.7501,19.2247,334.5147},
	{445,499.4850,-1764.0182,5.3367,89.7930},
	{492,646.4998,-1771.6411,13.2905,348.7706},
	{507,740.4332,-1797.7659,13.9196,349.9927},//150
	{545,652.4496,-1656.7273,14.4585,91.3294},
	{540,546.0256,-1622.4747,16.4585,180.7857},
	{482,438.9431,-1625.4088,25.7951,0.1850},
	{547,453.3896,-1494.3240,30.7917,7.7513},
	{550,487.6469,-1516.2312,20.0235,185.5384},
	{551,300.5775,-1490.8882,24.3748,235.1359},
	{560,297.9918,-1535.9011,24.3758,231.2773},
	{566,524.0590,-1375.0093,15.8231,193.3626},
	{405,598.9131,-1519.1414,14.8214,180.4083},
	{554,593.2022,-1519.3578,14.9461,181.5466},
	{426,733.5679,-1438.4880,13.3203,266.7551},
	{445,770.4971,-1431.1127,13.3247,0.7436},
	{492,735.9440,-1346.2430,13.3003,88.3069},
	{507,736.8572,-1337.1550,13.3140,271.3832},
	{545,856.7003,-1363.1852,13.4093,179.8542},//165
	{482,888.1506,-1659.2727,13.3296,1.2414},
	{547,879.1024,-1669.2560,13.3305,180.5853},
	{550,888.0242,-1678.5981,13.3294,358.4990},
	{551,920.4441,-1823.0966,12.3452,84.1821},
	{560,986.5818,-1761.2992,13.4014,181.9385},
	{566,1062.6744,-1757.9412,13.1956,89.0572},
	{405,1084.3831,-1763.8369,13.1501,269.0443},
	{554,1081.8948,-1629.9564,13.4064,90.0880},
	{426,981.7941,-1523.5115,13.3379,267.2751},
	{445,1014.7464,-1434.4586,13.3292,266.3129},
	{492,2684.6,-1990.2,13.3,180.0931},
	{507,2684.6,-2019.0,13.3 ,0.8777},
	{545,1096.1,-1379.9,13.3,270.1909},//178
	{540,1151.6812,-1203.2323,20.2889,273.5155},//179
	{482,1182.2568,-1219.2407,18.4163,0.5578},
	{547,1260.9978,-1187.1921,23.3559,183.3606},
	{550,1331.9304,-1081.3899,24.9941,90.4092},
	{551,1284.8755,-1525.5013,13.3451,269.4388},
	{560,1279.1887,-1539.2032,13.3201,94.8070},
	{566,1275.9120,-1646.7448,13.3273,267.2669},
	{405,1318.2792,-1785.7821,13.2429,182.4215},
	{554,1253.9153,-1833.3832,13.1734,175.3692},
	{426,1279.2875,-1814.4156,13.1657,93.6385},
	{445,1198.5004,-1835.2216,13.1820,93.6780},
	{492,1462.7026,-1737.7279,13.2662,270.2439},
	{507,1508.1047,-1737.7089,13.2418,270.0250},
	{545,1618.0411,-1891.1044,13.3278,0.3364},
	{540,1623.7291,-1892.7234,13.3307,180.0126},
	{482,2189.4170,-2252.4854,13.2933,317.2735},
	{547,371.4392,-2041.8478,7.3034,359.5139},
	{550,1838.1904,-1871.3842,13.1703,358.5452},
	{551,1841.4791,-1871.6549,13.1687,179.3825},
	{560,1646.6588,-1695.6704,20.0420,88.7770},
	{566,1671.7789,-1718.8323,20.0718,358.2389},
	{566,1981.0780,-1986.3513,13.3275,2.1479},
	{405,1987.6057,-1994.9520,13.3296,359.9128},
	{554,1978.0371,-2066.7500,13.1640,358.2871},
	{426,1984.7471,-2066.7776,13.1625,359.7226},
	{445,1938.0565,-2086.8459,13.3429,268.3414},
	{589,1947.1119,-2136.3887,13.3286,90.9804},
	{507,1932.1523,-2141.5220,13.3429,1.8383},
	{545,1793.9172,-2148.5300,13.3781,359.7861},
	{540,1748.0751,-2084.2090,13.3324,0.4337},
	{482,1560.5026,-2260.5457,13.3258,268.7398},
	{547,1461.6943,-1505.1688,13.2541,356.9007},
	{550,1426.4930,-1402.3170,13.1800,181.0290},
	{551,1435.0645,-1325.6835,13.2580,270.9400},
	{560,1513.9486,-1272.5691,14.2685,181.0697},
	{566,1583.7561,-1338.7435,16.1896,359.8619},
	{405,1573.8772,-1209.9202,17.1378,92.7502},
	{554,1476.2012,-1120.3083,23.5660,359.9746},
	{426,1430.2316,-1054.8555,22.8693,359.3625},
	{445,1574.1168,-1036.7643,23.6151,145.6786},
	{492,1617.6676,-1009.8663,23.6052,356.8697},
	{507,1645.3188,-1036.5238,23.6027,0.7258},
	{545,1735.2826,-1010.5402,23.6588,346.3133},
	{540,1770.4874,-1060.9886,23.6658,179.2750},
	{482,1739.9854,-1084.5490,23.6660,176.8026},
	{547,1653.1766,-1134.8994,23.6110,178.6835},
	{550,1617.3746,-1132.8293,23.6117,91.7300},
	{551,1790.0190,-1292.9065,13.2653,267.2964},
	{560,1754.3009,-1476.8170,13.2402,269.6320},
	{554,2003.3417,-1121.4993,26.3879,357.4926},
	{426,2084.2334,-1170.0986,24.2042,91.8975},
	{445,2229.1128,-1357.8774,23.6930,268.2194},
	{492,2229.2278,-1345.4033,23.6892,93.3009},
	{507,2332.5684,-1362.4845,23.7297,358.1198},
	{545,2384.1567,-1275.6326,23.9198,101.6528},
	{540,2432.3149,-1226.0785,24.9941,17.9805},
	{482,2426.9612,-1224.4158,25.0000,202.7159},
	{547,2438.4309,-1321.6925,24.1225,269.7535},
	{551,2612.9702,-1262.6970,48.2461,269.4752},
	{560,2659.4529,-1428.4343,30.1790,266.5051},
	{566,2659.7053,-1422.6743,30.1714,89.8159},
	{405,2485.5313,-1556.1823,23.7478,178.8338},
	{554,2478.7664,-1555.7006,23.7226,183.6043},
	{426,2605.3967,-1365.8829,34.6461,359.9891},
	{445,2754.7136,-1373.0253,40.1154,91.4169},
	{492,2717.3662,-1468.0308,30.0894,1.0298},
	{507,2816.7195,-1449.4285,15.9549,268.9106},
	{545,2816.9937,-1441.5880,15.9544,90.7779},
	{540,2681.9016,-1673.3879,9.1290,0.5605},
	{482,2442.5845,-1642.7507,13.1644,180.3454},
	{547,2361.3120,-1674.6146,13.2505,357.4959},
	{550,2298.3535,-1633.7542,14.3849,80.8107},
	{551,2297.9077,-1639.9464,14.4352,94.4292},
	{560,2255.4045,-1664.5736,15.1304,74.6898},
	{566,2234.1057,-1726.9386,13.1665,271.7536},
	{405,2319.3833,-1716.6823,13.2518,359.8540},
	{554,2474.5105,-1755.9194,13.2522,270.5967},
	{426,2501.8213,-1754.2794,13.1208,176.4916}, //= 255
	{445,2489.1560,-1952.6886,13.1366,178.1629},
	{492,2495.4326,-1953.2922,13.1299,356.5514},
	{507,2306.7168,-1989.6796,13.2639,184.8385},
	{482,2056.1807,-1904.7751,13.2502,2.2910},
	{550,2064.9871,-1919.1674,13.2504,180.8575},
	{551,1886.4812,-2022.9338,13.0964,179.4265},
	{560,1824.8976,-2019.8374,13.0875,272.5273},
	{566,1942.1669,-1862.6425,13.2679,264.5590},
	{405,1923.9409,-1795.5616,13.0877,90.0886},
	{554,1807.0905,-1571.7120,13.1659,125.1048},
	{426,1809.9016,-1676.0603,13.2422,180.7589},
	{445,1809.6266,-1653.3402,13.2365,180.6530},
	{492,1809.7056,-1660.3019,13.2380,180.6262},
	{589,1978.4003,-1675.0157,15.6741,269.7336},
	{545,1974.8230,-1693.5488,15.6741,92.1162},
	{540,1929.2253,-1584.6954,13.2700,185.5542},
	{482,1731.9725,-1590.8959,13.1630,77.7249},
	{547,1721.5776,-1589.2834,13.1526,80.9057},
	{550,1695.1428,-1519.2667,13.1671,0.7121},
	{551,1694.7080,-1501.7454,13.1675,357.8150}
    };
*/

//------------------------------------------------------------------------------------------------------

main()
{
	print(" ");
	print(" ");
	print(" ");
	print(" Spanish Pc Gamers RP");
	print(" _____________________");
	print("| Creado por MageC    |");
	print("|   Con la ayuda de:  |");
	print("|  ___                |");
	print("| |S  |      DryilZas  |");
	print("| | P |      Diablo   |");
	print("| |__G|      Nico     |");
	print("|                     |");
	print("|_____________________|");
	print(" ");
	print(" ");
	//MySQLConnect(MYSQL_HOST,MYSQL_USER,MYSQL_PASS,MYSQL_DB);
}

//------------------------------------------------------------------------------------------------------

//-------------------------------------------=[MYSQL ACCOUNTS]=---------------------------------------------

/*public MySQLConnect(sqlhost[], sqluser[], sqlpass[], sqldb[]) // by LordMan
{
	print("MYSQL: Attempting to connect to server...");
	samp_mysql_connect(sqlhost, sqluser, sqlpass);
	samp_mysql_select_db(sqldb);
	if(samp_mysql_ping()==0)
	{
		print("MYSQL: Database connection established.");
		return 1;
	}
	else
	{
		print("MYSQL: Connection error, retrying...");
		samp_mysql_connect(sqlhost, sqluser, sqlpass);
		samp_mysql_select_db(sqldb);
		if(samp_mysql_ping()==0)
		{
			print("MYSQL: Reconnection successful. We can continue as normal.");
			return 1;
		}
		else
		{
			print("MYSQL: Could not reconnect to server, terminating server...");
			SendRconCommand("exit");
			return 0;
		}
	}
}

public MySQLDisconnect() // by LordMan
{
	samp_mysql_close();
	return 1;
}

public MySQLCheckConnection() // by LordMan
{
	if(samp_mysql_ping()==0)
	{
		return 1;
	}
	else
	{
		print("MYSQL: Connection seems dead, retrying...");
		MySQLDisconnect();
		MySQLConnect(MYSQL_HOST,MYSQL_USER,MYSQL_PASS,MYSQL_DB);
		if(samp_mysql_ping()==0)
		{
			print("MYSQL: Reconnection successful. We can continue as normal.");
			return 1;
		}
		else
		{
			print("MYSQL: Could not reconnect to server, terminating server...");
			SendRconCommand("exit");
			return 0;
		}
	}
}

public MySQLUpdateBuild(query[], sqlplayerid) // by LordMan
{
	new querylen = strlen(query);
	//new querymax = sizeof(query);
	new querymax = MAX_STRING;
	if (querylen < 1) format(query, querymax, "UPDATE players SET ");
	else if (querymax-querylen < 50) // make sure we're being safe here
	{
		// query is too large, send this one and reset
		new whereclause[32];
		format(whereclause, sizeof(whereclause), " WHERE id=%d", sqlplayerid);
		strcat(query, whereclause, querymax);
		samp_mysql_query(query);
		format(query, querymax, "UPDATE players SET ");
	}
	else if (strfind(query, "=", true) != -1) strcat(query, ",", MAX_STRING);
	return 1;
}

public MySQLUpdateFinish(query[], sqlplayerid) // by LordMan
{
	if (strcmp(query, "WHERE id=", false) == 0) samp_mysql_query(query);
	else
	{
		new whereclause[32];
		format(whereclause, sizeof(whereclause), " WHERE id=%d", sqlplayerid);
		strcat(query, whereclause, MAX_STRING);
		samp_mysql_query(query);
		format(query, MAX_STRING, "UPDATE players SET ");
	}
	return 1;
}

public MySQLUpdatePlayerInt(query[], sqlplayerid, sqlvalname[], sqlupdateint) // by LordMan
{
	MySQLUpdateBuild(query, sqlplayerid);
	new updval[64];
	format(updval, sizeof(updval), "%s=%d", sqlvalname, sqlupdateint);
	strcat(query, updval, MAX_STRING);
	return 1;
}

public MySQLUpdatePlayerFlo(query[], sqlplayerid, sqlvalname[], Float:sqlupdateflo) // by LordMan
{*/
/*	new query[128];
	format(query, sizeof(query), "UPDATE players SET %s=%f WHERE id=%d", sqlvalname, sqlupdateflo, sqlplayerid);
	samp_mysql_query(query);*/
/*	new flotostr[32];
	format(flotostr, sizeof(flotostr), "%f", sqlupdateflo);
	MySQLUpdatePlayerStr(query, sqlplayerid, sqlvalname, flotostr);
	return 1;
}

public MySQLUpdatePlayerStr(query[], sqlplayerid, sqlvalname[], sqlupdatestr[]) // by LordMan
{
	MySQLUpdateBuild(query, sqlplayerid);
	new escstr[128];
	new updval[128];
	samp_mysql_real_escape_string(sqlupdatestr, escstr);
	format(updval, sizeof(updval), "%s='%s'", sqlvalname, escstr);
	strcat(query, updval, MAX_STRING);
	return 1;
}

public MySQLUpdatePlayerIntSingle(sqlplayerid, sqlvalname[], sqlupdateint) // by LordMan
{
	new query[128];
	format(query, sizeof(query), "UPDATE players SET %s=%d WHERE id=%d", sqlvalname, sqlupdateint, sqlplayerid);
	samp_mysql_query(query);
	return 1;
}

public MySQLCheckAccount(sqlplayersname[]) // by LordMan
{
	new query[128];
	new escstr[MAX_PLAYER_NAME];
	samp_mysql_real_escape_string(sqlplayersname, escstr);
	format(query, sizeof(query), "SELECT id FROM players WHERE LOWER(Name) = LOWER('%s') LIMIT 1", escstr);
	samp_mysql_query(query);
	samp_mysql_store_result();
	if (samp_mysql_num_rows()==0)
	{
		return 0;
	}
	else
	{
		new strid[32];
		new intid;
		samp_mysql_fetch_row(strid);
		intid = strval(strid);
		return intid;
	}
}

public MySQLCheckAccountLocked(sqlplayerid)
{
	new query[64];
	new lockedboolstr[4];
	format(query, sizeof(query), "SELECT Locked FROM players WHERE id = %d LIMIT 1", sqlplayerid);
	samp_mysql_query(query);
	samp_mysql_store_result();
	samp_mysql_fetch_row(lockedboolstr);
	if (strval(lockedboolstr) != 0)
	{
		return 1;
	}
	return 0;
}

public MySQLCheckIPBanned(ip[])
{
	new query[64];
	format(query, sizeof(query), "SELECT type FROM bans WHERE ip = '%s' AND inactive = 0 ORDER BY id DESC LIMIT 1", ip);
	samp_mysql_query(query);
	samp_mysql_store_result();
	if (samp_mysql_num_rows() != 0)
	{
		new bantypestr[4];
		new bantypeint;
		samp_mysql_fetch_row(bantypestr);
		bantypeint = strval(bantypestr);
		samp_mysql_free_result();
		return bantypeint;
	}
	return 0;
}

public MySQLFetchAcctSingle(sqlplayerid, sqlvalname[], sqlresult[])
{
	new query[128];
	format(query, sizeof(query), "SELECT %s FROM players WHERE id = %d LIMIT 1", sqlvalname, sqlplayerid);
	samp_mysql_query(query);
	samp_mysql_store_result();
	if(samp_mysql_fetch_row(sqlresult)==1)
	{
		return 1;
	}
	return 0;
}

public MySQLFetchAcctRecord(sqlplayerid, sqlresult[]) // by LordMan
{
	new query[64];
	format(query, sizeof(query), "SELECT * FROM players WHERE id = %d LIMIT 1", sqlplayerid);
	samp_mysql_query(query);
	samp_mysql_store_result();
	if(samp_mysql_fetch_row(sqlresult)==1)
	{
		return 1;
	}
	return 0;
}

public MySQLCreateAccount(newplayersname[], newpassword[]) // by LordMan
{
	new query[128];
	new sqlplyname[64];
	new sqlpassword[64];
	samp_mysql_real_escape_string(newplayersname, sqlplyname);
	samp_mysql_real_escape_string(newpassword, sqlpassword);
	format(query, sizeof(query), "INSERT INTO players (Name, Password) VALUES ('%s', '%s')", sqlplyname, sqlpassword);
	samp_mysql_query(query);
	new newplayersid = MySQLCheckAccount(newplayersname);
	if (newplayersid != 0)
	{
		return newplayersid;
	}
	return 0;
}

public MySQLAddLoginRecord(sqlplayerid, ipaddr[]) // by LordMan
{
	new query[128];
	new escip[16];
	samp_mysql_real_escape_string(ipaddr, escip);
	format(query, sizeof(query), "INSERT INTO logins (time,ip,userid) VALUES (UNIX_TIMESTAMP(),'%s',%d)", escip, sqlplayerid);
	samp_mysql_query(query);
	return 1;
}*/

//---------------------------------------------------------------------------------------------------------

public SearchingHit(playerid)
{
	new string[256];
	new giveplayer[MAX_PLAYER_NAME];
	new searchhit = 0;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(searchhit == 0)
		    {
			    if(PlayerInfo[i][pHeadValue] > 0 && GotHit[i] == 0 && PlayerInfo[i][pMember] != 8)
			    {
			        GetPlayerName(i, giveplayer, sizeof(giveplayer));
			        searchhit = 1;
			        hitfound = 1;
			        hitid = i;
			        for(new k=0; k<MAX_PLAYERS; k++)
					{
						if(IsPlayerConnected(k))
						{
				        	if(PlayerInfo[k][pMember] == 8 || PlayerInfo[k][pLeader] == 8)
				        	{
	               				SendClientMessage(k, COLOR_WHITE, "|__________________ Agencia Hitman PCU __________________|");
				                SendClientMessage(k, COLOR_DBLUE, "*** Noticia: Lista de encargos. ***");
				                format(string, sizeof(string), "Persona: %s   ID: %d   Precio: $%d", giveplayer, i, PlayerInfo[i][pHeadValue]);
								SendClientMessage(k, COLOR_DBLUE, string);
								SendClientMessage(k, COLOR_YELLOW, "Para dar contratos en el portatil =Darcontrato=.");
								SendClientMessage(k, COLOR_WHITE, "|________________________________________________________|");
	      					}
					    }
					}
					return 0;
			    }
			}
		}
	}
	if(searchhit == 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "   No hay contratos !");
	}
	return 0;
}
//-----------------[Get color code by name]----------------------
public GetColorCode(clr[])
{
	new color = -1;
	if (IsNumeric(clr))
	{
	    color = strval(clr);
	    return color;
	}
	if (strcmp(clr, "black", true)==0) color=0;
	if (strcmp(clr, "white", true)==0) color=1;
	if (strcmp(clr, "blue", true)==0) color=2;
	if (strcmp(clr, "red", true)==0) color=3;
	if (strcmp(clr, "green", true)==0) color=16;
	if (strcmp(clr, "purple", true)==0) color=5;
	if (strcmp(clr, "yellow", true)==0) color=6;
	if (strcmp(clr, "lightblue", true)==0) color=7;
	if (strcmp(clr, "navy", true)==0) color=61;
	if (strcmp(clr, "beige", true)==0) color=102;
	if (strcmp(clr, "darkgreen", true)==0) color=51;
	if (strcmp(clr, "darkblue", true)==0) color=103;
	if (strcmp(clr, "darkgrey", true)==0) color=13;
	if (strcmp(clr, "gold", true)==0) color=99;
	if (strcmp(clr, "brown", true)==0) color=55;
	if (strcmp(clr, "darkbrown", true)==0) color=84;
	if (strcmp(clr, "darkred", true)==0) color=74;
	if (strcmp(clr, "maroon", true)==0) color=115;
	if (strcmp(clr, "pink", true)==0) color=126;
	return color;
}

public ExtortionBiz(bizid, money)
{
    new string[256];
    format(string, sizeof(string), "No-one");
    if(strcmp(BizzInfo[bizid][bExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(BizzInfo[bizid][bExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 100;
			    value = value * 10;
			    SafeGivePlayerMoney(i, value);
			    BizzInfo[bizid][bTill] -= value;
			}
		}
	}
	return 1;
}

public ExtortionSBiz(bizid, money)
{
    new string[256];
    format(string, sizeof(string), "No-one");
    if(strcmp(SBizzInfo[bizid][sbExtortion],string, true ) == 0 )
	{
	    return 0;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        new name[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			GetPlayerName(i, name, sizeof(name));
			format(string, sizeof(string), "%s", name);
			strmid(wstring, string, 0, strlen(string), 255);
			if(strcmp(SBizzInfo[bizid][sbExtortion] ,wstring, true ) == 0 )
			{
			    new value = money / 100;
			    value = value * 10;
			    SafeGivePlayerMoney(i, value);
			    SBizzInfo[bizid][sbTill] -= value;
			}
		}
	}
	return 1;
}

public PreparePaintball()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            SendClientMessage(i, COLOR_YELLOW, "Paintball Match will start in 20 seconds.");
	        }
		}
	}
 	SetTimer("StartPaintball", 20000, 0);
	return 1;
}

public StartPaintball()
{
	PaintballRound = 1;
	StartingPaintballRound = 0;
	PaintballWinner = 999;
	PaintballWinnerKills = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            SafeResetPlayerWeapons(i);
	            SafeGivePlayerWeapon(i, 29, 999);
	            TogglePlayerControllable(i, 1);
	            SendClientMessage(i, COLOR_YELLOW, "Paintball Match started, 4 minutes left.");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	        }
	    }
	}
	SetTimer("PaintballEnded", 240000, 0);
	return 1;
}

public PaintballEnded()
{
	new string[256];
	new name[MAX_PLAYER_NAME];
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerPaintballing[i] != 0)
	        {
	            if(IsPlayerConnected(PaintballWinner))
	            {
	                GetPlayerName(PaintballWinner, name, sizeof(name));
	                format(string,sizeof(string), "** %s won the Paintball Match with %d kills **",name,PaintballWinnerKills);
	                SendClientMessage(i, COLOR_WHITE, string);
	            }
	            SafeResetPlayerWeapons(i);
	            PlayerPaintballing[i] = 0;
	            SetPlayerPos(i, 418.7112,-1429.3812,32.4777);
	            SetPlayerInterior(i, 0);
	        }
		}
	}
	AnnouncedPaintballRound = 0;
    PaintballRound = 0;
	return 1;
}

public PrepareKarting()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 9;
				SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
				SendClientMessage(i, COLOR_YELLOW, "Kart Race will start in 20 seconds, go to the starting line.");
	        }
		}
	}
	SetTimer("StartKarting", 20000, 0);
	return 1;
}

public StartKarting()
{
	KartingRound = 1;
	StartingKartRound = 0;
	EndingKartRound = 0;
	FirstKartWinner = 999;
	SecondKartWinner = 999;
	ThirdKartWinner = 999;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 10;
	            SendClientMessage(i, COLOR_YELLOW, "Green light, go go go !");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	            SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
	        }
	    }
	}
	SetTimer("KartingEnded", 240000, 0);
	return 1;
}

public KartingEnded()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 0;
	            DisablePlayerCheckpoint(i);
	        }
		}
	}
	AnnouncedKartRound = 0;
    KartingRound = 0;
	return 1;
}

public DollahScoreUpdate()
{
	new LevScore;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
   			LevScore = PlayerInfo[i][pLevel];
			SetPlayerScore(i, LevScore);
		}
	}
	return 1;
}

/*LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    TextDrawShowForPlayer(playerid,txtAnimHelper);
}*/

public Encrypt(string[])
{
	for(new x=0; x < strlen(string); x++)
	  {
		  string[x] += (3^x) * (x % 15);
		  if(string[x] > (0xff))
		  {
			  string[x] -= 256;
		  }
	  }
	return 1;
}

// Place this under your script

stock CreateRoadblock(Object,Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if(Roadblocks[i][sCreated] == 0)
  	    {
            Roadblocks[i][sCreated] = 1;
            Roadblocks[i][sX] = x;
            Roadblocks[i][sY] = y;
            Roadblocks[i][sZ] = z-0.7;
            Roadblocks[i][sObject] = CreateObject(Object, x, y, z-0.9, 0, 0, Angle);
	        return 1;
  	    }
  	}
  	return 0;
}
stock GetPlayerNameEx(playerid)
{
    new string[24];
    GetPlayerName(playerid,string,24);
    new str[24];
    strmid(str,string,0,strlen(string),24);
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if (str[i] == '_') str[i] = ' ';
    }
    return str;
}
stock DeleteAllRoadblocks(playerid)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 100, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
        {
	  	    if(Roadblocks[i][sCreated] == 1)
	  	    {
	  	        Roadblocks[i][sCreated] = 0;
	            Roadblocks[i][sX] = 0.0;
	            Roadblocks[i][sY] = 0.0;
	            Roadblocks[i][sZ] = 0.0;
	            DestroyObject(Roadblocks[i][sObject]);
	  	    }
  	    }
	}
    return 0;
}

stock DeleteClosestRoadblock(playerid)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 5.0, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
        {
  	        if(Roadblocks[i][sCreated] == 1)
            {
                Roadblocks[i][sCreated] = 0;
                Roadblocks[i][sX] = 0.0;
                Roadblocks[i][sY] = 0.0;
                Roadblocks[i][sZ] = 0.0;
                DestroyObject(Roadblocks[i][sObject]);
                return 1;
  	        }
  	    }
  	}
    return 0;
}




stock right(source[], len)
{
	new retval[MAX_STRING], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, MAX_STRING);
	return retval;
}
	
stock sscanf(string[], format[], {Float,_}:...)
{
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs();
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if (ch >= '0' && ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return 1;
					}
				}
				while ((ch = string[stringPos]) && ch != ' ');
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					ch,
					num = 0;
				while ((ch = string[stringPos++]))
				{
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						case ' ':
						{
							break;
						}
						default:
						{
							return 1;
						}
					}
				}
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{
				new tmp[25];
				strmid(tmp, string, stringPos, stringPos+sizeof(tmp)-2);
				setarg(paramPos, 0, _:floatstr(tmp));
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != ' ')
					{
						setarg(paramPos, i++, ch);
					}
					if (!i) return 1;
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != ' ')
		{
			stringPos++;
		}
		while (string[stringPos] == ' ')
		{
			stringPos++;
		}
		paramPos++;
	}
	while (format[formatPos] == 'z') formatPos++;
	return format[formatPos];
}
	
public Spectator()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(KickPlayer[i]==1) { Kick(i); }
			else if(KickPlayer[i]==2) { Ban(i); }
			if(Spectate[i] < 253 && Spectate[i] != 255)
			{
				SetPlayerColor(i,COLOR_SPEC);
				TogglePlayerControllable(i, 0);
				new targetid = Spectate[i];
				if(IsPlayerConnected(targetid))
				{
				    TogglePlayerSpectating(i, 1);
				    if(IsPlayerInAnyVehicle(targetid))
					{
					    new carid = GetPlayerVehicleID(targetid);
					    PlayerSpectateVehicle(i, carid);
					}
					else
					{
					    PlayerSpectatePlayer(i, targetid);
					}
					if(GetPlayerInterior(targetid) == 0)
					{
						SetPlayerInterior(i,0);
					}
					else if(GetPlayerInterior(targetid) > 0)
					{
						SetPlayerInterior(i,GetPlayerInterior(targetid));
					}
				}//Targetid connected
			}
			if(Spectate[i] == 253)
			{
				TogglePlayerControllable(i, 1);
				TogglePlayerSpectating(i, 0);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				Unspec[i][sLocal] = 255;
				SetSpawnInfo(i, PlayerInfo[i][pTeam], PlayerInfo[i][pModel], Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]-1.0, 1.0, -1, -1, -1, -1, -1, -1);
				gTeam[i] = PlayerInfo[i][pTeam];
				SetPlayerToTeamColor(i);
				MedicBill[i] = 0;
				if(PlayerInfo[i][pDonateRank] > 0)
		        {
		            SetSpawnInfo(i, PlayerInfo[i][pTeam], PlayerInfo[i][pModel], Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(i);
					SetCameraBehindPlayer(i);
		        }
		        else
		        {
					SpawnPlayer(i);
				}
				Spectate[i] = 255;
			}
			if(Spectate[i] == 254)
			{
				TogglePlayerControllable(i, 1);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				SetPlayerPos(i, Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 256)
			{
				SetPlayerToTeamColor(i);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 257)
			{
				Spectate[i] = 254;
			}
		}
	}
}


//------------------------------------------------------------------------------------------------------
/*/reportar al clikar en alguien
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
*/
//-------------------------------------------------------------------------------------------------------------------------------------------------
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
  	LoadModsForAll(vehicleid);
	TuneThisCar(vehicleid);
	if(gTeam[playerid] >= 1||gTeam[playerid] >= 3||gTeam[playerid] >= 4)
	{
		if (IsACopCar(vehicleid) && !ispassenger)
		{
			if(PlayerInfo[playerid][pLeader]==1||PlayerInfo[playerid][pLeader]==2||PlayerInfo[playerid][pLeader]==3||PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pMember]==3) {}
		    else {
				new Float:cx, Float:cy, Float:cz;
				GetPlayerPos(playerid, cx, cy, cz);
				SetPlayerPos(playerid, cx,  cy, cz);
			}
		}
		if (IsNgCar(vehicleid) && !ispassenger)
		{
		    if(PlayerInfo[playerid][pLeader]==1||PlayerInfo[playerid][pLeader]==2||PlayerInfo[playerid][pLeader]==3||PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pMember]==3) {}
		    else {
				new Float:cx, Float:cy, Float:cz;
				GetPlayerPos(playerid, cx, cy, cz);
				SetPlayerPos(playerid, cx,  cy, cz);
			}
		}
		if (IsAnAmbulance(vehicleid) && !ispassenger)
		{
		    if(PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4) { }
		    else { WantedPoints[playerid]+=2; SetPlayerCriminal(playerid,255, "Robar una Ambulancia"); }
		}
 		if (IsAnFiretruck(vehicleid) && !ispassenger)
		{
		    if(PlayerInfo[playerid][pMember]==19||PlayerInfo[playerid][pLeader]==19) { }
		    else { WantedPoints[playerid]+=2; SetPlayerCriminal(playerid,255, "Robar un Camion de Bombero"); }
		}
		if (IsATank(vehicleid) && !ispassenger)
		{
			if(PlayerInfo[playerid][pLeader]==1||PlayerInfo[playerid][pLeader]==3||PlayerInfo[playerid][pMember]==3) {}
		    else { WantedPoints[playerid]+=2; SetPlayerCriminal(playerid,255, "Robar un Tanque"); SendClientMessage(playerid, COLOR_GREY,"You don't know how to drive it yet."); }
		}
		if(IsAnOwnableCar(vehicleid) && CarInfo[vehicleid][cLock] == 1 && CarInfo[vehicleid][cOwned] == 1)
		{
		    if(PlayerInfo[playerid][pAdministrador] != 1 && AdminDuty[playerid] != 1)
		    {
		    	new Float:cx, Float:cy, Float:cz;
		    	GetPlayerPos(playerid, cx, cy, cz);
		    	SetPlayerPos(playerid, cx, cy, cz);
			}
		}
	}
	return 1;
}
/*public IsAnInstructor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==11)
		{
		    return 1;
		}
		if(leader==11)
		{
		    return 1;
		}
	}
	return 0;
}*/

public IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==5 || member==6 || member==8 || member==14 || member==15 || member==16 || member==17)
		{
		    return 1;
		}
		if(leader==5 || leader==6 || leader==8 || leader==14 || leader==15 || leader==16 || leader==17)
		{
		    return 1;
		}
	}
	return 0;
}

public IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==1 || member==2 || member==3)
		{
		    return 1;
		}
		else if(leader==1 || leader==2 || leader==3)
		{
		    return 1;
		}
	}
	return 0;
}

public IsAPDMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==1)
		{
		    return 1;
		}
		else if(leader==1)
		{
		    return 1;
		}
	}
	return 0;
}

public IsAnOwnableCar(vehicleid)
{
	if(vehicleid >= 184 && vehicleid <= 608) { return 1; }
	return 0;
}
public IsAtDealership(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(25.0,playerid,2128.0864,-1135.3912,25.5855) || PlayerToPoint(50,playerid,537.3366,-1293.2140,17.2422) || PlayerToPoint(35,playerid,2521.5544,-1524.4504,23.8365) || PlayerToPoint(50,playerid,2155.0146,-1177.3333,23.8211) || PlayerToPoint(50,playerid,299.1723,-1518.6627,24.6007) || PlayerToPoint(50,playerid,335.8143,-1799.3634,4.6992) || PlayerToPoint(50,playerid,1791.5895,-1909.2949,13.3978))
		{
			return 1;
		}
	}
	return 0;
}
public IsAtCarrental(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(30.0,playerid,1696.5543,-1053.4685,23.9063))
		{
			return 1;
		}
	}
	return 0;
}

public IsAtClothShop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(25.0,playerid,20.5627,-103.7291,1005.2578) || PlayerToPoint(25.0,playerid,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
		    return 1;
		}
		else if(PlayerToPoint(30.0,playerid,214.4470,-7.6471,1001.2109) || PlayerToPoint(50.0,playerid,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
		    return 1;
		}
	}
	return 0;
}

public IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(6.0,playerid,1004.0070,-939.3102,42.1797) || PlayerToPoint(6.0,playerid,1944.3260,-1772.9254,13.3906))
		{//LS
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,-90.5515,-1169.4578,2.4079) || PlayerToPoint(6.0,playerid,-1609.7958,-2718.2048,48.5391))
		{//LS
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,-2029.4968,156.4366,28.9498) || PlayerToPoint(8.0,playerid,-2408.7590,976.0934,45.4175))
		{//SF
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,-2243.9629,-2560.6477,31.8841) || PlayerToPoint(8.0,playerid,-1676.6323,414.0262,6.9484))
		{//Between LS and SF
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,2202.2349,2474.3494,10.5258) || PlayerToPoint(10.0,playerid,614.9333,1689.7418,6.6968))
		{//LV
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,-1328.8250,2677.2173,49.7665) || PlayerToPoint(6.0,playerid,70.3882,1218.6783,18.5165))
		{//LV
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,2113.7390,920.1079,10.5255) || PlayerToPoint(6.0,playerid,-1327.7218,2678.8723,50.0625))
		{//LV
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,656.4265,-559.8610,16.5015) || PlayerToPoint(6.0,playerid,656.3797,-570.4138,16.5015))
		{//Dillimore
		    return 1;
		}
	}
	return 0;
}

public IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(1.0,playerid,403.8266,-2088.7598,7.8359) || PlayerToPoint(1.0,playerid,398.7553,-2088.7490,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,396.2197,-2088.6692,7.8359) || PlayerToPoint(1.0,playerid,391.1094,-2088.7976,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,383.4157,-2088.7849,7.8359) || PlayerToPoint(1.0,playerid,374.9598,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,369.8107,-2088.7927,7.8359) || PlayerToPoint(1.0,playerid,367.3637,-2088.7925,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,362.2244,-2088.7981,7.8359) || PlayerToPoint(1.0,playerid,354.5382,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return 1;
		}
	}
	return 0;
}

public IsAtCookPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
	    {//Cluckin Bell
	        return 1;
	    }
	    else if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
		{//Burgershot
		    return 1;
		}
		else if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
		{//Well Stacked Pizza
		    return 1;
		}
	}
	return 0;
}

public IsAtBar(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(4.0,playerid,495.7801,-76.0305,998.7578) || PlayerToPoint(4.0,playerid,499.9654,-20.2515,1000.6797))
		{//In grove street bar (with girlfriend), and in Havanna
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,1215.9480,-13.3519,1000.9219) || PlayerToPoint(10.0,playerid,-2658.9749,1407.4136,906.2734))
		{//PIG Pen
		    return 1;
		}
 		else if(PlayerToPoint(4.0,playerid,968.7739,-46.6145,1001.1172) || PlayerToPoint(10.0,playerid,968.7739,-46.6145,1001.1172))
		{//Yamaguchi HQ
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,-791.016,512.249,1336.41) || PlayerToPoint(10.0,playerid,-799.122,520.988,1336.41))
		{//Nortenos House
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,678.0179,-471.0587,5.0647) || PlayerToPoint(10.0,playerid,678.0179,-471.0587,5.0647))
		{//bar pueblo pequeño
		    return 1;
		}
	}
	return 0;
}

public IsABoat(carid)
{
	if(carid == 25 || (carid >= 175) && (carid <= 177) || (carid >= 622) && (carid <= 624))
	{
		return 1;
	}
	return 0;
}

public IsAHarvest(carid)
{
	if(carid == 96 || carid == 97 || carid == 98)
	{
		return 1;
	}
	return 0;
}

public IsADrugHarvest(carid)
{
	if(carid == 69 || carid == 70 || carid == 71 || carid == 72)
	{
		return 1;
	}
	return 0;
}

public IsASmuggleCar(carid)
{
	if(carid == 73 || carid == 74 || carid == 75 || carid == 76)
	{
		return 1;
	}
	return 0;
}


public IsAcarretilla(carid)
{
	if((carid >= 81) && (carid <= 84))
	{
	    return 1;
	}
	return 0;
}
public IsASweeper(carid)
{
	if((carid >= 99) && (carid <= 102))
	{
	    return 1;
	}
	return 0;
}

public IsABasura(carid)  //coches basurero
{
	if((carid >= 669) && (carid <= 675))
	{
	    return 1;
	}
	return 0;
}

public IsAPlane(carid)
{
	if((carid >= 171) && (carid <= 174)
	|| carid == 11
	|| carid == 12
	|| carid == 23
	|| carid == 24
	|| carid == 45
	|| carid == 50
	|| carid == 54
	|| carid == 613
	|| carid == 642
	|| carid == 64)
	{
		return 1;
	}
	return 0;
}

public IsACopCar(carid)
{
	if((carid >= 1) && (carid <= 14))
	{
		return 1;
	}
	return 0;
}

/*public IsATesteoCar(carid)
{
	if((carid >= 292) && (carid <= 408))
	{
		return 1;
	}
	return 0;
}*/

public IsAnFbiCar(carid)
{
	if((carid >= 15) && (carid <= 17))
	{
	    return 1;
	}
	return 0;
}

public IsNgCar(carid)
{
	if((carid >= 18) && (carid <= 25) || (carid >= 622) && (carid <= 624) || (carid >= 656) && (carid <= 664))
	{
	    return 1;
	}
	return 0;
}

public IsAGovernmentCar(carid)
{
	if((carid >= 1000) && (carid <= 1000))
	{
		return 1;
	}
	return 0;
}

public IsAHspdCar(carid)
{
	if((carid >= 800) && (carid <= 800))
	{
	    return 1;
	}
	return 0;
}

public IsATank(carid)
{
	if(carid==21)
	{
		return 1;
	}
	return 0;
}

public IsAnAmbulance(carid)
{
	if((carid >= 34) && (carid <= 36) || carid == 614 || carid == 613)
	{
		return 1;
	}
	return 0;
}

public IsAnFiretruck(carid)
{
	if((carid >= 635) && (carid <= 642))
	{
		return 1;
	}
	return 0;
}

public IsATruck(carid)
{
	if(carid >= 1001 && carid <= 1001)
	{
		return 1;
	}
	return 0;
}

public IsAPizzabike(carid)
{
	if(carid >= 649 && carid <= 653)
	{
		return 1;
	}
	return 0;
}

public Esuncamion(carid)
{
	if(carid >= 643 && carid <= 648)
	{
		return 1;
	}
	return 0;
}

public IsABus(carid)
{
	if(carid == 32 || carid == 654)
	{
		return 1;
	}
	return 0;
}

public IsATowcar(carid)
{
	if(carid >= 55 && carid <= 58)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar(carid)
{
if(carid >= 37 && carid <= 40)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar2(carid)
{
if(carid >= 41 && carid <= 45)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar3(carid)
{
if(carid >= 59 && carid <= 64)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar4(carid)
{
if(carid >= 65 && carid <= 68)
	{
		return 1;
	}
	return 0;
}

public IsAGangCar5(carid)
{
if((carid >= 609 && carid <= 612) || (carid == 676) || (carid == 677) || (carid == 678))
	{
		return 1;
	}
	return 0;
}

public IsAGangCar6(carid)
{
if((carid >= 613 && carid <= 614))
	{
		return 1;
	}
	return 0;
}

public IsAGangCar7(carid)
{
if((carid >= 615 && carid <= 618))
	{
		return 1;
	}
	return 0;
}

public IsAGangCar8(carid)
{
if((carid >= 619 && carid <= 621))
	{
		return 1;
	}
	return 0;
}

public IsAGangCar9(carid)
{
if((carid >= 625 && carid <= 631))
	{
		return 1;
	}
	return 0;
}

public IsABike(carid)
{
if((carid >= 153 && carid <= 170))
	{
		return 1;
	}
	return 0;
}

public IsAOBike(carid)
{
if((carid >= 153 && carid <= 170) || (carid >= 178 && carid <= 183))// || (carid >= 292 && carid <= 314))
	{
		return 1;
	}
	return 0;
}

//------------------------------------------------------------------------------------------------------

public OnPlayerConnect(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;
    PlayerInfo[playerid][SpawnDance] = true;
    //GameTextForPlayer(playerid,"~w~~n~Spanish pc Gamers~n~~y~]_____]~n~~r~Role Play~n~~r~_____~n~",30000,2); // GameTextForPlayer(playerid,"~y~~n~~n~~n~~n~~n~~n~~w~ www.spanishpcgamers.com",30000,5);
    /*if(IsPlayerNPC(playerid)) {
	    new ip_addr_npc[64+1];
	    new ip_addr_server[64+1];
	    new ip_addr_serverspg[64+1];
	    GetServerVarAsString("bind",ip_addr_server,64);
	    GetServerVarAsString("bind",ip_addr_serverspg,64);
	    GetPlayerIp(playerid,ip_addr_npc,64);
	    
	    TextDrawsShown[playerid] = false;
		VHSCreated[playerid] = false;
		LightRedHealthCreated[playerid] = false;
		LightYellowSpeedCreated[playerid] = false;

		if(!strlen(ip_addr_server))
		{
		    ip_addr_server = "127.0.0.1";
		}
		
		if(!strlen(ip_addr_serverspg))
		{
		    ip_addr_serverspg = "188.165.196.127";
		}

		if(strcmp(ip_addr_npc,ip_addr_server,true) != 0 && strcmp(ip_addr_npc,ip_addr_serverspg,true) != 0)
		{
		    // this bot is remote connecting
		    printf("NPC: Bot ajeno IP: %s ha sido inmediatamente kickeado.",ip_addr_npc);
		    Kick(playerid);
		    return 0;
		}
        printf("NPC: Bot interno IP: %s se ha conectado.",ip_addr_npc);
        SpawnPlayer(playerid);
        return 1;
	}*/
	
	/*FiringZOMBIETimer[playerid] = SetTimerEx("FiringZOMBIE",2500,1,"i",playerid);*/
	gPlayerUsingLoopingAnim[playerid] = 0;
	gPlayerAnimLibsPreloaded[playerid] = 0;
    new plname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, plname, sizeof(plname));
	if(Security != 0)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Host has broken one of the Agreement rules, action has been taken.");
	    Kick(playerid);
	    return 1;
	}
    new namestring = strfind(plname, "_", true);
 	if(namestring == -1)
	{
		SendClientMessage(playerid, COLOR_YELLOW2, "Immigration Department: Your name is not acceptable.");
		SendClientMessage(playerid, COLOR_YELLOW2, "Hint: Your name must be in the format Firstname_Lastname.");
		Kick(playerid);
		return 1;
	}
	
	/*for(new i = 0; i < sizeof(Objects); i++) Player[playerid][view][i] = false;*/
	
    Bebendo[playerid] = -1;
    fumando[playerid] = -1;
	gActivePlayers[playerid]++;
	numplayers++;
	new string[MAX_PLAYER_NAME];
	NosDelay[playerid] = 0;
	SelectChar[playerid] = 0; HidePM[playerid] = 0; HideAdmin[playerid] = 0; gSnoop[playerid] = 1; PhoneOnline[playerid] = 0;
	SelectCharID[playerid] = 0; SelectCharPlace[playerid] = 0; ChosenSkin[playerid] = 0;
	GettingJob[playerid] = 0; GuardOffer[playerid] = 999; GuardPrice[playerid] = 0;
    ApprovedLawyer[playerid] = 0; CallLawyer[playerid] = 0; WantLawyer[playerid] = 0;
	KickPlayer[playerid] = 0; CurrentMoney[playerid] = 0; UsedFind[playerid] = 0;
	CP[playerid] = 0; Robbed[playerid] = 0; SpawnChange[playerid] = 1;
	CarOffer[playerid] = 999; CarPrice[playerid] = 0; BegOffer[playerid] = 999; BegPrice[playerid] = 0; CarID[playerid] = 0; CarCalls[playerid] = 0;
	RobbedTime[playerid] = 0; MoneyMessage[playerid] = 0; Condom[playerid] = 0; Rope[playerid] = 0;
	STDPlayer[playerid] = 0; SexOffer[playerid] = 999; SexPrice[playerid] = 0;
	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0;
	TalkingLive[playerid] = 255; LiveOffer[playerid] = 999; TakingLesson[playerid] = 0;
	RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; MapIconsShown[playerid] = 0;
	DrugOffer[playerid] = 999; PlayerCuffed[playerid] = 0; PlayerCuffedTime[playerid] = 0;
	DrugPrice[playerid] = 0; RegistrationStep[playerid] = 0; OnCK[playerid] = 999; GettingCK[playerid] = 999;
	DrugGram[playerid] = 0; ConnectedToPC[playerid] = 0; //OrderReady[playerid] = 0;
	JailPrice[playerid] = 0; MedicTime[playerid] = 0; NeedMedicTime[playerid] = 0; MedicBill[playerid] = 0; GotHit[playerid] = 0;
	WantedPoints[playerid] = 0; GoChase[playerid] = 999; GetChased[playerid] = 999; PlacedNews[playerid] = 0;
	OnDuty[playerid] = 0; WantedLevel[playerid] = 0; tactical[playerid] = 0; swat[playerid] = 0; TestFishes[playerid] = 0;
	BoxWaitTime[playerid] = 0; SchoolSpawn[playerid] = 0; ChangePos2[playerid][1] = 0;
	SafeTime[playerid] = 60; TransportDuty[playerid] = 0; PlayerTied[playerid] = 0;
	BusCallTime[playerid] = 0; TaxiCallTime[playerid] = 0; MedicCallTime[playerid] = 0; MechanicCallTime[playerid] = 0;
	BusrouteEast[playerid][0] = 0; BusrouteWest[playerid][0] = 0; BusShowLocation[playerid][0] = 0; BusShowLocationC[playerid] = 0;
	FindTimePoints[playerid] = 0; FindTime[playerid] = 0; JobDuty[playerid] = 0;
	Mobile[playerid] = 255; Music[playerid] = 0; BoxOffer[playerid] = 999; PlayerBoxing[playerid] = 0;
	Spectate[playerid] = 255; PlayerDrunk[playerid] = 0; PlayerDrunkTime[playerid] = 0;
	Unspec[playerid][sLocal] = 255; FishCount[playerid] = 0;
	WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999; WritingLine[playerid] = 0; BringingPaper[playerid] = 0; GotPaper[playerid] = 0;
	PaperOffer[playerid] = 999; /*ConsumingMoney[playerid] = 0;*/
	ScriptMoney[playerid] = 0; ScriptMoneyUpdated[playerid] = 0;
	for (new c=0; c<13; c++) ScriptWeapons[playerid][c] = 0;
	ScriptWeaponsUpdated[playerid] = 0;
    gLastCar[playerid] = 0; FirstSpawn[playerid] = 1;
	gOoc[playerid] = 0; gNews[playerid] = 0; BigEar[playerid] = 0; gDice[playerid] = 0; gFam[playerid] = 0;
	gSpeedo[playerid] = 0; gGas[playerid] = 0;
	gPlayerLogged[playerid] = 0; gPlayerLogTries[playerid] = 0; gPlayerAccount[playerid] = 0;
	gPlayerSpawned[playerid] = 0; PlayerKarting[playerid] = 0; PlayerInKart[playerid] = 0;
	PlayerTazeTime[playerid] = 0; PlayerStoned[playerid] = 0;
	StartTime[playerid] = 0; TicketOffer[playerid] = 999; TicketMoney[playerid] = 0;
	MatsHolding[playerid] = 0; TutTime[playerid] = 0;
	gPlayerMission[playerid] = 0; TaxiAccepted[playerid] = 999; BusAccepted[playerid] = 999;
	PlayerInfo[playerid][pCash] = dollah; NoFuel[playerid] = 0;
	HireCar[playerid] = 999; GangCar[playerid] = 512; PlayersChannel[playerid] = 999;
	TransportValue[playerid] = 0; TransportMoney[playerid] = 0; TransportTime[playerid] = 0; TransportCost[playerid] = 0; TransportDriver[playerid] = 999;
	Locator[playerid] = 0; PlayerOnMission[playerid] = 0; MissionCheckpoint[playerid] = 0;
	WatchingTV[playerid] = 0; PlayerPaintballing[playerid] = 0; PlayerPaintballKills[playerid] = 0;
	Fishes[playerid][pLastFish] = 0; Fishes[playerid][pFishID] = 0;
	ProposeOffer[playerid] = 999; MarryWitness[playerid] = 999; MarryWitnessOffer[playerid] = 999; MarriageCeremoney[playerid] = 0; ProposedTo[playerid] = 999; GotProposedBy[playerid] = 999; DivorceOffer[playerid] = 999;
	SafeGivePlayerMoney(playerid,PlayerInfo[playerid][pCash]); tactical[playerid] = 0; swat[playerid] = 0; authorizeswat = 0; authorizetactical = 0;
	PizzaCallTime[playerid] = 0; bPizza[playerid] = 0; sPizza[playerid] = 0; gEngine[playerid] = 0; FarmerVar[playerid] = 0; FarmerPickup[playerid][0] = 0; SmugglerWork[playerid] = 0; SmuggledDrugs[playerid] = 0; JustDied[playerid] = 0; KnockedDown[playerid] = 0; UnidentifedCall[playerid] = 0;
	LicenseOffer[playerid] = 999; LicensePrice[playerid] = 0; LicenseType[playerid] = 0; UsingDrugs[playerid] = 0; AfterTutorial[playerid] = 0;
	OwnableCarOffer[playerid] = 9999; OwnableCarID[playerid] = 0; OwnableCarPrice[playerid] = 0; BlindFold[playerid] = 0; PlayerIsSweeping[playerid] = 0; PlayerIsBasuras[playerid] = 0; AdminDuty[playerid] = 0; AdminDutycolor[playerid] = 0; JustReported[playerid] = 0; PlayerNeedsHelp[playerid] = 0; AdminSpec[playerid] = 0; /*IsSmoking[playerid] = 0;*/ UsingSmokeAnim[playerid] = 0; ReduceTime[playerid] = 0;
	CreatingGun[playerid] = 0; CreatingGunAmmo[playerid] = 0; CreatingGunPrice[playerid] = 0; IsPuttingMaterials[playerid] = 0; IsTakingGun[playerid] = 0;
	InAFoodPlace[playerid] = 0;
	PlayerInfo[playerid][pLevel] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pAsistente] = 0;
	PlayerInfo[playerid][pCazachetos] = 0;
	PlayerInfo[playerid][pVigilante] = 0;
	PlayerInfo[playerid][pMapper] = 0;
	PlayerInfo[playerid][pEventor] = 0;
	PlayerInfo[playerid][pModerador] = 0;
	PlayerInfo[playerid][pScripter] = 0;
	PlayerInfo[playerid][pAdministrador] = 0;
	gSnoop[playerid] = 1;
	PlayerInfo[playerid][pEsAdmin] = 0;
	PlayerInfo[playerid][paaafk] = 0;
	PlayerInfo[playerid][ptengocaja] = 0;
	PlayerInfo[playerid][pmuriedote] = 0;
	PlayerInfo[playerid][pcinema] = 0;
	PlayerInfo[playerid][pDonateRank] = 0;
	PlayerInfo[playerid][gPupgrade] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;
	PlayerInfo[playerid][pReg] = 0;
	PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pOrigin] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pAccount] = 0;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pDeaths] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedDeaths] = 0;
	PlayerInfo[playerid][pPhoneBook] = 0;
	PlayerInfo[playerid][pLottoNr] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pBiggestFish] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pHeadValue] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pDrugs] = 0;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pFMember] = 255;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pChar] = 0;
	PlayerInfo[playerid][pContractTime] = 0;
	PlayerInfo[playerid][pDetSkill] = 0;
	PlayerInfo[playerid][pSexSkill] = 0;
	PlayerInfo[playerid][pBoxSkill] = 0;
	PlayerInfo[playerid][pLawSkill] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pJackSkill] = 0;
	PlayerInfo[playerid][pCarSkill] = 0;
	PlayerInfo[playerid][pNewsSkill] = 0;
	PlayerInfo[playerid][pDrugsSkill] = 0;
	PlayerInfo[playerid][pCookSkill] = 0;
	PlayerInfo[playerid][pFishSkill] = 0;
	PlayerInfo[playerid][pSHealth] = 0.0;
	PlayerInfo[playerid][pHealth] = 50.0;
    PlayerInfo[playerid][pPos_x] = 1612.3240;
	PlayerInfo[playerid][pPos_y] = -2330.1670;
	PlayerInfo[playerid][pPos_z] = 13.5469;
	PlayerInfo[playerid][pInt] = 0;
	PlayerInfo[playerid][pLocal] = 255;
	PlayerInfo[playerid][pTeam] = 3;
	PlayerInfo[playerid][pModel] = 7;
	//new randphone = 100000 + random(899999);//minimum 1000  max 9999 //giving one at the start
	PlayerInfo[playerid][pPnumber] = 0;
	PlayerInfo[playerid][pPcarkey] = 9999;
	PlayerInfo[playerid][pPcarkey2] = 9999;
	PlayerInfo[playerid][pPcarkey3] = 9999;
	PlayerInfo[playerid][pPcarkey4] = 9999;
	PlayerInfo[playerid][pPcarkey5] = 9999;
	PlayerInfo[playerid][pPcarkey6] = 9999;
	PlayerInfo[playerid][pPcarkey7] = 9999;
	PlayerInfo[playerid][pPcarkey8] = 9999;
	PlayerInfo[playerid][pPcarkey9] = 9999;
	PlayerInfo[playerid][pPcarkey10] = 9999;
	PlayerInfo[playerid][pPhousekey] = 255;
	PlayerInfo[playerid][pGangKey] = 255;
	PlayerInfo[playerid][pPbiskey] = 255;
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pBoatLic] = 0;
	PlayerInfo[playerid][pFishLic] = 0;
	PlayerInfo[playerid][pGunLic1] = 0;
	PlayerInfo[playerid][pGunLic2] = 0;
	PlayerInfo[playerid][pGun1] = 0;
	PlayerInfo[playerid][pGun2] = 0;
	PlayerInfo[playerid][pGun3] = 0;
	PlayerInfo[playerid][pGun4] = 0;
	PlayerInfo[playerid][pAmmo1] = 0;
	PlayerInfo[playerid][pAmmo2] = 0;
	PlayerInfo[playerid][pAmmo3] = 0;
	PlayerInfo[playerid][pAmmo4] = 0;
	PlayerInfo[playerid][pCarTime] = 0;
	PlayerInfo[playerid][pPayDay] = 0;
	PlayerInfo[playerid][pPayDayHad] = 0;
	PlayerInfo[playerid][pCDPlayer] = 0;
	PlayerInfo[playerid][pWatch] = 0;
	PlayerInfo[playerid][pCrashed] = 0;
	PlayerInfo[playerid][pWins] = 0;
	PlayerInfo[playerid][pLoses] = 0;
	PlayerInfo[playerid][pAlcoholPerk] = 0;
	PlayerInfo[playerid][pDrugPerk] = 0;
	PlayerInfo[playerid][pMiserPerk] = 0;
	PlayerInfo[playerid][pPainPerk] = 0;
	PlayerInfo[playerid][pTraderPerk] = 0;
	PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pMissionNr] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pFuel] = 0;
	PlayerInfo[playerid][pVirWorld] = 0;
	PlayerInfo[playerid][pRequestingBackup] = 0;
	PlayerInfo[playerid][pRoadblock] = 0;
	PlayerInfo[playerid][pFishTool] = 0;
	strmid(PlayerInfo[playerid][pNote1], "---", 0, strlen("---"), 255);
	PlayerInfo[playerid][pNote1s] = 0;
	strmid(PlayerInfo[playerid][pNote2], "---", 0, strlen("---"), 255);
	PlayerInfo[playerid][pNote2s] = 0;
	strmid(PlayerInfo[playerid][pNote3], "---", 0, strlen("---"), 255);
	PlayerInfo[playerid][pNote3s] = 0;
	strmid(PlayerInfo[playerid][pNote4], "---", 0, strlen("---"), 255);
	PlayerInfo[playerid][pNote4s] = 0;
	strmid(PlayerInfo[playerid][pNote5], "---", 0, strlen("---"), 255);
	PlayerInfo[playerid][pNote5s] = 0;
	strmid(PlayerInfo[playerid][ptatu1], "---", 0, strlen("---"), 255);
	PlayerInfo[playerid][ptatu1s] = 0;
	strmid(PlayerInfo[playerid][ptatu2], "---", 0, strlen("---"), 255);
	PlayerInfo[playerid][ptatu2s] = 0;
	strmid(PlayerInfo[playerid][ptatu3], "---", 0, strlen("---"), 255);
	PlayerInfo[playerid][ptatu3s] = 0;
	strmid(PlayerInfo[playerid][ptatu4], "---", 0, strlen("---"), 255);
	PlayerInfo[playerid][ptatu4s] = 0;
	strmid(PlayerInfo[playerid][ptatu5], "---", 0, strlen("---"), 255);
	PlayerInfo[playerid][ptatu5s] = 0;
	PlayerInfo[playerid][pInvWeapon] = 0;
	PlayerInfo[playerid][pInvAmmo] = 0;
	PlayerInfo[playerid][pLighter] = 0;
	PlayerInfo[playerid][pCigarettes] = 0;
	PlayerInfo[playerid][pbono1] = 0;
	PlayerInfo[playerid][pbono2] = 0;
	PlayerInfo[playerid][pbono3] = 0;
	PlayerInfo[playerid][pbono4] = 0;
	PlayerInfo[playerid][pbono5] = 0;
	PlayerInfo[playerid][pbono6] = 0;
	PlayerInfo[playerid][pbono7] = 0;
	PlayerInfo[playerid][pbono8] = 0;
	PlayerInfo[playerid][pbono9] = 0;
	PlayerInfo[playerid][pbono10] = 0;
	PlayerInfo[playerid][pbono11] = 0;
	PlayerInfo[playerid][pbono12] = 0;
	PlayerInfo[playerid][pbono13] = 0;
	PlayerInfo[playerid][pbono14] = 0;
	PlayerInfo[playerid][pbono15] = 0;
	PlayerInfo[playerid][pbono16] = 0;
	PlayerInfo[playerid][pbono17] = 0;
	PlayerInfo[playerid][pbono18] = 0;
	PlayerInfo[playerid][pbono19] = 0;
	PlayerInfo[playerid][pbono20] = 0;
	PlayerInfo[playerid][pMask] = 0;
	PlayerInfo[playerid][pThermal] = 0;
	PlayerInfo[playerid][pMaskuse] = 0;
	PlayerInfo[playerid][pHideNumber] = 0;
	PlayerInfo[playerid][pSpeaker] = 0;
	PlayerInfo[playerid][pLocked] = 0;
	PlayerInfo[playerid][pM2] = 0;  // Bebendo
	PlayerInfo[playerid][pCAM] = 0; //  Bebendo
	PlayerInfo[playerid][pCasco] = 0; // casco
	//PlayerInfo[playerid][pSQLID] = 0;
	//sistema poker
	PlayerInfo[playerid][pFlop1] = 0;
	PlayerInfo[playerid][pFlop2] = 0;
	PlayerInfo[playerid][pFlop3] = 0;
	PlayerInfo[playerid][pRiver] = 0;
	PlayerInfo[playerid][pTurn] = 0;
	PlayerInfo[playerid][pDealer] = 0;
	PlayerInfo[playerid][pCards] = 0;
	PlayerInfo[playerid][pCard1] = 0;
	PlayerInfo[playerid][pCard2] = 0;
	ClearCrime(playerid);
	ClearFishes(playerid);
	ClearCooking(playerid);
	ClearGroceries(playerid);
	ClearMarriage(playerid);
	SetPlayerColor(playerid,COLOR_GRAD2);
	HouseEntered[playerid] = 255;
	for(new h = 184; h < sizeof(CarInfo); h++)
	{
		SetVehicleParamsForPlayer(h,playerid,0,CarInfo[h][cLock]);
	}
	GetPlayerName(playerid, plname, sizeof(plname));
	format(string, sizeof(string), "users/%s.ini", plname);
	SendClientMessage(playerid, COLOR_YELLOW2, "Cargando...");
	if(fexist(string))
	{
		gPlayerAccount[playerid] = 1;
		/*SendClientMessage(playerid, COLOR_YELLOW2, "Immigration: You are a registered citizen of San Andreas.");
		SendClientMessage(playerid, COLOR_YELLOW2, "Hint: Use /login <password> to log in to your game account.");*/
		//return 1;
	}
	else
	{
		gPlayerAccount[playerid] = 0;
		//SendClientMessage(playerid,COLOR_YELLOW2,"Immigration: Please supply the necessary immigration documents by typing /registro <password>");
		//return 1;
	}
	//MySQLCheckConnection();

	// Check if the account exists
	/*new sqlaccountstatus = MySQLCheckAccount(plname);
	if(sqlaccountstatus != 0)
	{
		// Check if the account is locked
		if (MySQLCheckAccountLocked(sqlaccountstatus) != 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "This account has been locked and cannot be accessed. Please contact an admin.");
			Kick(playerid);
			return 0;
		}
		gPlayerAccount[playerid] = 1;
		PlayerInfo[playerid][pSQLID] = sqlaccountstatus;
	}
	else
	{
		gPlayerAccount[playerid] = 0;
	}*/
	
	//"1| %s", PlayerInfo[playerid][pNote1]
	//format(string, sizeof(string), "%s", PlayerInfo[playerid][pNote1]);
	Textdraw0 = TextDrawCreate(36.000000, 428.000000, "SpG-RolePlay.info");
	TextDrawBackgroundColor(Textdraw0, 255);
	TextDrawFont(Textdraw0, 0);
	TextDrawLetterSize(Textdraw0, 0.400000, 1.300000);
	TextDrawColor(Textdraw0, -1);
	TextDrawSetOutline(Textdraw0, 1);
	TextDrawSetProportional(Textdraw0, 1);
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(IsPlayerConnected(i))
		{
			TextDrawShowForPlayer(i, Textdraw0);
		}
	}
	return 1;
}

public JoinChannel(playerid, number, line[])
{
    if(IsPlayerConnected(playerid))
	{
	    if(strcmp(IRCInfo[number][iPassword],line, true ) == 0 )
		{
	        JoinChannelNr(playerid, number);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_GREY, "   Wrong Channel Password !");
	    }
	}
	return 1;
}

public JoinChannelNr(playerid, number)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[256];
		new sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayersChannel[playerid] < 999)
	    {
			format(string, sizeof(string), "* %s has left the Channel.", sendername);
			SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
			IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	    }
		new channel; channel = number; channel += 1;
	    PlayersChannel[playerid] = number;
	    IRCInfo[PlayersChannel[playerid]][iPlayers] += 1;
    	new wstring[128];
		format(string, sizeof(string), "%s", sendername);
		strmid(wstring, string, 0, strlen(string), 255);
		if(strcmp(IRCInfo[number][iAdmin],wstring, true ) == 0 )
		{
		    format(string, sizeof(string), "* You have joined IRC Channel %d as the Administrator.", channel);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else
		{
		    format(string, sizeof(string), "* You have joined IRC Channel %d, Admin: %s.", channel, IRCInfo[number][iAdmin]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		format(string, sizeof(string), "MOTD: %s.", IRCInfo[number][iMOTD]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "* %s has joined the Channel.", sendername);
		SendIRCMessage(number, COLOR_GREEN, string);
	}
	return 1;
}

public ClearCK(ck)
{
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "No-one");
	strmid(CKInfo[ck][cSendername], string, 0, strlen(string), 255);
	strmid(CKInfo[ck][cGiveplayer], string, 0, strlen(string), 255);
	CKInfo[ck][cUsed] = 0;
	SaveCK();
	return 1;
}

public ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "No-one");
		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}

public ClearPaper(paper)
{
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "---");
	PaperInfo[paper][PaperUsed] = 0;
	strmid(PaperInfo[paper][PaperMaker], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperTitle], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText1], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText2], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText3], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText4], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText5], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText6], string, 0, strlen(string), 255);
	strmid(PaperInfo[paper][PaperText7], string, 0, strlen(string), 255);
	SavePapers();
	return 1;
}

public ClearFamily(family)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerInfo[i][pFMember] == family)
	        {
	            SendClientMessage(i, COLOR_WHITE, "* The Family you are in got Deleted by the Organisation Leader, you got kicked out automaticly.");
	            PlayerInfo[i][pFMember] = 255;
	        }
	    }
	}
    new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "---");
	FamilyInfo[family][FamilyTaken] = 0;
	strmid(FamilyInfo[family][FamilyName], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyMOTD], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 255);
	format(string, sizeof(string), "0xFF000069");
	strmid(FamilyInfo[family][FamilyColor], string, 0, strlen(string), 255);
	FamilyInfo[family][FamilyMembers] = 0;
	FamilyInfo[family][FamilySpawn][0] = 0.0;
	FamilyInfo[family][FamilySpawn][1] = 0.0;
	FamilyInfo[family][FamilySpawn][2] = 0.0;
	FamilyInfo[family][FamilySpawn][3] = 0.0;
	FamilyInfo[family][FamilyInterior] = 0;
	SaveFamilies();
	return 1;
}

public ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "********");
		strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	}
	return 1;
}

public FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new cost = 0;
		switch (fish)
		{
		    case 1:
		    {
		        cost = 74;
		    }
		    case 2:
		    {
		        cost = 57;
		    }
		    case 3:
		    {
		        cost = 83;
		    }
		    case 5:
		    {
		        cost = 46;
		    }
		    case 6:
		    {
		        cost = 24;
		    }
		    case 8:
		    {
		        cost = 72;
		    }
		    case 9:
		    {
		        cost = 42;
		    }
		    case 11:
		    {
		        cost = 62;
		    }
		    case 12:
		    {
		        cost = 12;
		    }
		    case 14:
		    {
		        cost = 63;
		    }
		    case 15:
		    {
		        cost = 28;
		    }
		    case 16:
		    {
		        cost = 83;
		    }
		    case 17:
		    {
		        cost = 23;
		    }
		    case 18:
		    {
		        cost = 62;
		    }
		    case 19:
		    {
		        cost = 75;
		    }
		    case 21:
		    {
		        cost = 27;
		    }
		}
		return cost;
	}
	return 0;
}

public ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "---");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return 1;
}

public ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "---");
		switch (fish)
		{
		    case 1:
		    {
		        strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight1] = 0;
		        Fishes[playerid][pFid1] = 0;
		    }
		    case 2:
		    {
		        strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight2] = 0;
		        Fishes[playerid][pFid2] = 0;
		    }
		    case 3:
		    {
		        strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight3] = 0;
		        Fishes[playerid][pFid3] = 0;
		    }
		    case 4:
		    {
		        strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight4] = 0;
		        Fishes[playerid][pFid4] = 0;
		    }
		    case 5:
		    {
		        strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight5] = 0;
		        Fishes[playerid][pFid5] = 0;
		    }
		}
	}
	return 1;
}

public ClearCooking(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Cooking[playerid][pCookID1] = 0; Cooking[playerid][pCookID2] = 0; Cooking[playerid][pCookID3] = 0;
		Cooking[playerid][pCookID4] = 0; Cooking[playerid][pCookID5] = 0;
		Cooking[playerid][pCWeight1] = 0; Cooking[playerid][pCWeight2] = 0; Cooking[playerid][pCWeight3] = 0;
		Cooking[playerid][pCWeight4] = 0; Cooking[playerid][pCWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nothing");
		strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
	}
	return 1;
}

public ClearCookingID(playerid, cook)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nothing");
		switch (cook)
		{
		    case 1:
		    {
		        strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight1] = 0;
		        Cooking[playerid][pCookID1] = 0;
		    }
		    case 2:
		    {
		        strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight2] = 0;
		        Cooking[playerid][pCookID2] = 0;
		    }
		    case 3:
		    {
		        strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight3] = 0;
		        Cooking[playerid][pCookID3] = 0;
		    }
		    case 4:
		    {
		        strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight4] = 0;
		        Cooking[playerid][pCookID4] = 0;
		    }
		    case 5:
		    {
		        strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight5] = 0;
		        Cooking[playerid][pCookID5] = 0;
		    }
		}
	}
	return 1;
}

public ClearGroceries(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
	    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
	    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
	}
	return 1;
}

public Lotto(number)
{
	new JackpotFallen = 0;
	new string[256];
	new winner[MAX_PLAYER_NAME];
	format(string, sizeof(string), "El numero premiado de hoy es: %d.", number);
    OOCOff(COLOR_WHITE, string);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLottoNr] > 0)
		    {
			    if(PlayerInfo[i][pLottoNr] == number)
			    {
			        JackpotFallen = 1;
			        GetPlayerName(i, winner, sizeof(winner));
					format(string, sizeof(string), "Ganador: %s, ha ganado el bote acumulado de de $%d.", winner, Jackpot);
					OOCOff(COLOR_DBLUE, string);
					format(string, sizeof(string), "* Enhorabuena, has ganado $%d gracias a la loteria.", Jackpot);
					SendClientMessage(i, COLOR_YELLOW, string);
					//ConsumingMoney[i] = 1;
					SafeGivePlayerMoney(i, Jackpot);
			    }
			    else
			    {
			        SendClientMessage(i, COLOR_WHITE, "* Lo sentimos, no has tenido suerte esta vez.");
			    }
			}
			PlayerInfo[i][pLottoNr] = 0;
		}
	}
	if(JackpotFallen)
	{
	    new rand = random(125000);
		rand += 157890;
	    Jackpot = rand;
	    SaveStuff();
	    format(string, sizeof(string), "El bote ha sido reiniciado en $%d, enhora buena.", Jackpot);
		OOCOff(COLOR_WHITE, string);
	}
	else
	{
	    new rand = random(15000); rand += 2158;
	    Jackpot += rand;
	    SaveStuff();
	    format(string, sizeof(string), "El bote de hoy alcanzo $%d, mas suerte para la proxima vez.", Jackpot);
		OOCOff(COLOR_DBLUE, string);
	}
	format(string, sizeof(string), "Recuerda que puedes comprar tu boleto en el banco de la ciudad, Gracias.");
	OOCOff(COLOR_WHITE, string);
	return 1;
}

//------------------------------------------------------------------------------------------------------
public OnPlayerDisconnect(playerid, reason)
{
    DeleteClosestStrip(playerid);
    DestroyObject(PlayerInfo[playerid][pbono20]);
    PlayerInfo[playerid][pbono20] = 0;
	gActivePlayers[playerid]--;
	numplayers--;
	//------------------------lineas baloncesto
    HavingBall[playerid] = 0;
    Anim[playerid] = 0;
    if(HavingBall[playerid]) Baller = 999;
    //------------------------lineas baloncesto
    PlayerInfo[playerid][pbono5] = 0;//whisky
    PlayerInfo[playerid][pbono6] = 0;//refresco  pCasco
    PlayerInfo[playerid][pbono7] = 0; //cerveza
    Delete3DTextLabel(descripcion[playerid]);// descripción
	if(reason == 0)
	{
	    PlayerInfo[playerid][pCrashed] = 1;
	    for(new slot = 0; slot != 12; slot++)
	    {
	        new wep, ammo;
	        GetPlayerWeaponData(playerid, slot, wep, ammo);
	        
	        if(wep != 0 && ammo != 0)
	        {
	            if(PlayerInfo[playerid][pGun1] == 0) { PlayerInfo[playerid][pGun1] = wep; PlayerInfo[playerid][pAmmo1] = ammo; }
	            else if(PlayerInfo[playerid][pGun2] == 0) { PlayerInfo[playerid][pGun2] = wep; PlayerInfo[playerid][pAmmo2] = ammo; }
	            else if(PlayerInfo[playerid][pGun3] == 0) { PlayerInfo[playerid][pGun3] = wep; PlayerInfo[playerid][pAmmo3] = ammo; }
	            else if(PlayerInfo[playerid][pGun4] == 0) { PlayerInfo[playerid][pGun4] = wep; PlayerInfo[playerid][pAmmo4] = ammo; }
	        }
	    }
	}
	/*if(!IsPlayerNPC(playerid)){
		KillTimer(FiringZOMBIETimer[playerid]);
	}*/
	OnPlayerUpdate(playerid);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(TaxiAccepted[i] < 999)
	        {
		        if(TaxiAccepted[i] == playerid)
		        {
		            TaxiAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Left the game", 5000, 1);
		            TaxiCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	        else if(BusAccepted[i] < 999)
	        {
		        if(BusAccepted[i] == playerid)
		        {
		            BusAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Bus Caller~n~~r~Left the game", 5000, 1);
		            BusCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	    }
	}
	/*if(GettingCK[playerid] < 999)
	{
	    if(IsPlayerConnected(GettingCK[playerid]))
	    {
	        SendClientMessage(GettingCK[playerid], COLOR_YELLOW, "Your Character Kill has left the server, try again later.");
	        OnCK[GettingCK[playerid]] = 999;
	    }
	}*/
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
	    if(IsPlayerConnected(TransportDriver[playerid]))
		{
		    new string[64];
		    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
		    TransportTime[TransportDriver[playerid]] = 0;
		    TransportCost[TransportDriver[playerid]] = 0;
		    format(string, sizeof(string), "~w~Passenger left~n~~g~Earned $%d",TransportCost[playerid]);
		    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
		}
	}
	if(GotHit[playerid] > 0)
	{
	    if(GetChased[playerid] < 999)
	    {
	        if(IsPlayerConnected(GetChased[playerid]))
	        {
	        	SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Your Hit has left the server.");
	            GoChase[GetChased[playerid]] = 999;
			}
	    }
	}
	if(PlayerPaintballing[playerid] != 0)
	{
	    PaintballPlayers --;
	}
	if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
	{
	    KartingPlayers --;
	}
	if(PlayersChannel[playerid] < 999)
	{
		IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	}
	if(HireCar[playerid] != 999)
	{
		gLastDriver[HireCar[playerid]] = 1000;
		gCarLock[HireCar[playerid]] = 0;
		UnLockCar(HireCar[playerid]);
		if(reason != 0)
		{
			SetVehicleToRespawn(HireCar[playerid]);
		}
	}
	if(GangCar[playerid] != 512)
	{
		gLastDriver[GangCar[playerid]] = 520;
		gCarLock[GangCar[playerid]] = 0;
		UnLockCar(GangCar[playerid]);
	}
	if (gLastCar[playerid] > 0)
	{
		gLastDriver[gLastCar[playerid]] = 300;
		if(PlayerInfo[playerid][pPhousekey] != gLastCar[playerid]-1)
		{
			gCarLock[gLastCar[playerid]] = 0;
			UnLockCar(gLastCar[playerid]);
		}
	}
	if(PlayerBoxing[playerid] > 0)
	{
	    if(Boxer1 == playerid)
	    {
	        if(IsPlayerConnected(Boxer2))
	        {
	        	PlayerBoxing[Boxer2] = 0;
	        	SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer2, 5);
	        	PlayerInfo[Boxer2][pInt] = 5;
	        	GameTextForPlayer(Boxer2, "~r~Match interupted", 5000, 1);
			}
	    }
	    else if(Boxer2 == playerid)
	    {
	        if(IsPlayerConnected(Boxer1))
	        {
	        	PlayerBoxing[Boxer1] = 0;
	        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer1, 5);
	        	PlayerInfo[Boxer2][pInt] = 5;
	        	GameTextForPlayer(Boxer1, "~r~Match interupted", 5000, 1);
			}
	    }
	    InRing = 0;
     	RoundStarted = 0;
		Boxer1 = 255;
		Boxer2 = 255;
		TBoxer = 255;
	}
    if(TransportDuty[playerid] == 1)
	{
		TaxiDrivers -= 1;
	}
    else if(TransportDuty[playerid] == 2)
	{
		BusDrivers -= 1;
	}
/*	if(PlayerInfo[playerid][pJob] == 11)
	{
	    if(JobDuty[playerid] == 1) { Medics -= 1; }
	}*/
	else if(PlayerInfo[playerid][pJob] == 7)
	{
	    if(JobDuty[playerid] == 1) { Mechanics -= 1; }
	}
	else if(PlayerInfo[playerid][pJob] == 17)
	{
		if(JobDuty[playerid] == 1) { PizzaBoys -= 1; }
	}
	if (PlayerInfo[playerid][pRoadblock] != 0)
	{
		RemoveRoadblock(playerid);
	}
	
	/*for(new i = 0; i < sizeof(Objects); i++)
	{
		if(Player[playerid][view][i])
		{
			Player[playerid][view][i] = false;
			DestroyPlayerObject(playerid,Player[playerid][objid][i]);
		}
	}*/
	
	BusrouteEast[playerid][0] = 0;
	BusrouteWest[playerid][0] = 0;
	new string[256];
	new plname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, plname, sizeof(plname));
	format(string, 256, "Administración: %s se ha desconectado.", plname);
	ABroadCast(COLOR_YELLOW,string);
}
public puertacasa96t()
{
      MoveObject(puertacasa96,200.742050, -1386.638184, 49.465435, 0.97);
      return 1;
}
public puertacasa17t()
{
      MoveObject(puertacasa17,1090.330566, -628.153564, 112.337761, 0.97);
      return 1;
}
public puertacasa80t()
{
      MoveObject(puertacasa80,310.439026, -1555.198486, 32.785419, 0.97);
      return 1;
}
public puertacasa104t()
{
      MoveObject(puertacasa104,281.931976, -1321.063232, 54.43249, 0.97);
      return 1;
}
public puertacasa23t()
{
      MoveObject(puertacasa23,1003.262939, -644.940674, 122.071396, 0.97);
      return 1;
}
public puertacasa20t()
{
      MoveObject(puertacasa20,1281.191162, -615.143127, 103.654678, 0.97);
      return 1;
}
public puertacasa103t()
{
      MoveObject(puertacasa103,264.819061, -1333.852295, 53.931007, 0.97);
      return 1;
}
public puertacasa14t()
{
      MoveObject(puertacasa14,2423.869629, -1775.136597, 14.221565, 0.97);
      return 1;
}
public puertacasa95t()
{
      MoveObject(puertacasa95,261.721436, -1231.391724, 74.339172, 0.97);
      return 1;
}
public puertacasa85t()
{
      MoveObject(puertacasa85,2313.688965, -1217.056641, 24.769321, 0.97);
      return 1;
}

public GateClose(playerid)
{
      MoveObject(pdgate1,1589.053344,-1638.123168,14.122960, 0.97);
      PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
      return 1;
}

public GateClose2()
{
      MoveObject(armygate1,2720.3772, -2409.7523, 12.6, 2.5);
      MoveObject(armygate2,2720.3772, -2508.3069, 12.6, 2.5);
      MoveObject(hangar, 2774.397,-2455.854,12.886,2.5);
      return 1;
}

public GateClose3()
{
      MoveObject(fbigate, 1534.9020,-1451.5979,14.4882, 1.5);
      return 1;
}

public GateClose4()
{
      MoveObject(hspdgate, 1643.3379,-1714.9338,15.3067, 1.5);
      return 1;
}

public GateClose5()
{
      DestroyObject( pdgate3 );
      pdgate2 = CreateObject(968,1544.700317,-1630.735717,13.096980,-1.000000,-91.000000,269.972869);
      return 1;
}

public GateClose6()
{
      MoveObject(lucianogate, 1246.0033,-767.3727,91.1473, 1.5);
	  return 1;
}

public GateCloseosafa()
{
      MoveObject(vallaosafa, 1014.1152, -1520.3447, -64.2368, 1.5);
	  return 1;
}

public GateClose7()
{
      MoveObject(mecanicagate, 1812.708,-2073.065,14.227, 1.5);
      MoveObject(tallergate,1795.1171875,-2037.2724609375,15.429308891296,1.5);
      MoveObject(platagate,1808.1685791016, -2025.3188476563, 13.446762084961,1.5);
      MoveObject(plata2gate,1810.0477294922, -2025.3192138672, 13.44552230835,1.5);
	  return 1;
}
public GateClose8()
{
      MoveObject(yakuzagate, 785.29998779297, -1152.5, 25.39999961853, 1.5);
      MoveObject(yakuzagate2, 659.79998779297, -1227.1999511719, 17.799999237061, 1.5);
      MoveObject(yakuzagate3, 664.90002441406, -1309.3000488281, 15.199999809265, 1.5);
	  return 1;
}
/*public GateClose9()
{
      MoveObject(lstagate, 1106.503906, -1740.825439, 13.247808, 1.5);
	  return 1;
}*/
public GateClose10()
{
      MoveObject(puretagate, 1014.383179 ,-1540.533936 ,16.209253, 1.5);
	  return 1;
}
public GateClose11()
{
      MoveObject(bomberosgate, 2248.918457, -2201.388672, 15.282555, 1.5);
	  return 1;
}
public elevator1(playerid)
{
      SetPlayerPos(playerid,1174.9591,-1374.8761,23.9736);
      return 1;
}

public elevator2(playerid)
{
      SetPlayerPos(playerid,1174.9100,-1361.7330,13.9876);
	  return 1;
}

public SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		//-------------------------------------------------------------ARMAS INICIALES // by DryilZas
	    if (PlayerInfo[playerid][pDrugPerk] == 1)
    	{
    		SafeGivePlayerWeapon(playerid, 22, 51);
    	}
    	if (PlayerInfo[playerid][pDrugPerk] == 2)
    	{
    		SafeGivePlayerWeapon(playerid, 22, 51);
    		SafeGivePlayerWeapon(playerid, 28, 150);
    	}
    	if (PlayerInfo[playerid][pDrugPerk] == 3)
    	{
    		SafeGivePlayerWeapon(playerid, 22, 102);
    		SafeGivePlayerWeapon(playerid, 28, 300);
    	}
    	//----------------------------------------------------
    	//-------------------------------------------------------------ESCUDO INICIAL // by DryilZas
    	if (PlayerInfo[playerid][pAlcoholPerk] == 1)
    	{
    		SetPlayerArmour(playerid, 10);
    	}
    	if (PlayerInfo[playerid][pAlcoholPerk] == 2)
    	{
    		SetPlayerArmour(playerid, 20);
    	}
    	if (PlayerInfo[playerid][pAlcoholPerk] == 3)
    	{
    		SetPlayerArmour(playerid, 30);
    	}
    	if (PlayerInfo[playerid][pAlcoholPerk] == 4)
    	{
    		SetPlayerArmour(playerid, 40);
    	}
    	if (PlayerInfo[playerid][pAlcoholPerk] == 5)
    	{
    		SetPlayerArmour(playerid, 50);
    	}
    	if (PlayerInfo[playerid][pAlcoholPerk] == 6)
    	{
    		SetPlayerArmour(playerid, 60);
    	}
    	if (PlayerInfo[playerid][pAlcoholPerk] == 7)
    	{
    		SetPlayerArmour(playerid, 70);
    	}
    	if (PlayerInfo[playerid][pAlcoholPerk] == 8)
    	{
    		SetPlayerArmour(playerid, 80);
    	}
    	if (PlayerInfo[playerid][pAlcoholPerk] == 9)
    	{
    		SetPlayerArmour(playerid, 90);
    	}
    	if (PlayerInfo[playerid][pAlcoholPerk] == 10)
    	{
    		SetPlayerArmour(playerid, 100);
    	}
    	//----------------------------------------------------
	    if(PlayerInfo[playerid][pTut] == 0)
	    {
			gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
			SetPlayerInterior(playerid, 3);
			PlayerInfo[playerid][pInt] = 3;
			SetPlayerPos(playerid, 330.6825,163.6688,1014.1875);
			SetPlayerFacingAngle(playerid, 280);
			TogglePlayerControllable(playerid, 0);
			RegistrationStep[playerid] = 1;
			SendClientMessage(playerid, COLOR_YELLOW, "Bienvenido al Servidor Spanish Pc Gamers. Responda a estas cuestiones:");
			SendClientMessage(playerid, COLOR_LIGHTRED, "Primera Pregunta: Eres hombre o mujer? (escribe la respuesta).");
			SafeResetPlayerMoney(playerid);
			SafeGivePlayerMoney(playerid, 1500);
			return 1;
	    }
	    else if(AdminSpec[playerid] == 1)
		{
		    return 1;
		}
		else if(PlayerPaintballing[playerid] != 0)
		{
		    new rand;
		    SafeResetPlayerWeapons(playerid);
      		SafeGivePlayerWeapon(playerid, 29, 999);
		    rand = random(sizeof(PaintballSpawns));
			SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
			SetPlayerInterior(playerid, 10);
		    return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 1)
		{
		    SetPlayerInterior(playerid, 6);
		    PlayerInfo[playerid][pInt] = 6;
			SetPlayerPos(playerid,264.6288,77.5742,1001.0391);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sentencia incompleta, vuelves a la carcel.");
			return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 2)
		{
		    SetPlayerInterior(playerid, 0);
		    PlayerInfo[playerid][pInt] = 0;
			SetPlayerPos(playerid,268.5777,1857.9351,9.8133);
			SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
			return 1;
		}
  		else if(PlayerInfo[playerid][pDeaths] > 5)
		{
		    //new rand;
	    	new string[256];
	    	PlayerInfo[playerid][pAccount] = PlayerInfo[playerid][pAccount]-2500;
			//EconomyInfo[eArcas] += 2500;
			format(string, sizeof(string), "** Hospital: Lo lamentamos mucho, usted ha sufrido ya demasiadas heridas y ha sido ingresado. REPITO");
			SendClientMessage(playerid, TEAM_CYAN_COLOR, string);

			//PlayerInfo[playerid][pDeaths] -= 3;

			SetPlayerHealth(playerid, 25.0);
  			//SetPlayerInterior(playerid, 6);
  			//PlayerInfo[playerid][pInt] = 6;
  			SetPlayerPos(playerid, 1161.1190,-1316.7296,6.4444);

    		//rand = random(sizeof(gMedicSpawns));
			//SetPlayerPos(playerid, gMedicSpawns[rand][0], gMedicSpawns[rand][1], gMedicSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, 89);

  			TogglePlayerControllable(playerid, 0);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Necesitas recuperarte ...", 30000, 3);
			SetTimerEx("ClearKnock", 30000, false, "i", playerid);
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);


			PlayerInfo[playerid][pmuriedote] = 1;
  			PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);
    		return 1;
		}
		else if(JustDied[playerid] == 1)
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    if(GetPlayerVirtualWorld(playerid) != 0 || PlayerInfo[playerid][pVirWorld] != 0)
		    {
		        SetPlayerVirtualWorld(playerid, 0);
		        PlayerInfo[playerid][pVirWorld] = 0;
		    }
		    SetPlayerPos(playerid, 1182.5638,-1323.5256,13.5790);
		    SetPlayerFacingAngle(playerid, 270.0);
		    SetPlayerInterior(playerid,0);
		    PlayerInfo[playerid][pInt] = 0;
		    return 1;
		}
		else if(PlayerInfo[playerid][pCrashed] == 1)
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    if(TutTime[playerid] == 0 && PlayerInfo[playerid][pTut] == 1 && RegistrationStep[playerid] == 0 && AfterTutorial[playerid] == 0 && FirstSpawn[playerid] == 1)
		    {
		        SetPlayerVirtualWorld(playerid,PlayerInfo[playerid][pVirWorld]);
		        SetPlayerInterior(playerid,PlayerInfo[playerid][pInt]);
		    	SetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z] + 1);
		    	//SendClientMessage(playerid, COLOR_WHITE, "Crashed, returning where you been.");
		    	//GameTextForPlayer(playerid, "~p~Crashed~n~~w~returning where you been", 5000, 1);
		    	return 1;
			}
		}
		else if(PlayerInfo[playerid][pPcarkey] >= 599 && PlayerInfo[playerid][pPcarkey]<= 604 && PlayerInfo[playerid][pbono1] == 1) //carabana
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    new carabana = PlayerInfo[playerid][pPcarkey];
		    if(PlayerInfo[playerid][pbono1] == 1) //Si decide salir en la carabana con el comando /carabana
		    {
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0); //HouseInfo[house][hInt]
				SetPlayerVirtualWorld(playerid, 0); //HouseInfo[house][hWorld]
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(carabana, cwx2, cwy2, cwz2);
				SetPlayerPos(playerid, cwx2+5, cwy2, cwz2);
				if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
				return 1;
			}
		}
		else if(PlayerInfo[playerid][pPcarkey2] >= 599 && PlayerInfo[playerid][pPcarkey2]<= 604 && PlayerInfo[playerid][pbono1] == 1) //carabana
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    new carabana = PlayerInfo[playerid][pPcarkey2];
		    if(PlayerInfo[playerid][pbono1] == 1) //Si decide salir en la carabana con el comando /carabana
		    {
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0); //HouseInfo[house][hInt]
				SetPlayerVirtualWorld(playerid, 0); //HouseInfo[house][hWorld]
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(carabana, cwx2, cwy2, cwz2);
				SetPlayerPos(playerid, cwx2+5, cwy2, cwz2);
				if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
				return 1;
			}
		}
		else if(PlayerInfo[playerid][pPcarkey3] >= 599 && PlayerInfo[playerid][pPcarkey3]<= 604 && PlayerInfo[playerid][pbono1] == 1) //carabana
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    new carabana = PlayerInfo[playerid][pPcarkey3];
		    if(PlayerInfo[playerid][pbono1] == 1) //Si decide salir en la carabana con el comando /carabana
		    {
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0); //HouseInfo[house][hInt]
				SetPlayerVirtualWorld(playerid, 0); //HouseInfo[house][hWorld]
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(carabana, cwx2, cwy2, cwz2);
				SetPlayerPos(playerid, cwx2+5, cwy2, cwz2);
				if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
				return 1;
			}
		}
		else if(PlayerInfo[playerid][pPcarkey4] >= 599 && PlayerInfo[playerid][pPcarkey4]<= 604 && PlayerInfo[playerid][pbono1] == 1) //carabana
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    new carabana = PlayerInfo[playerid][pPcarkey4];
		    if(PlayerInfo[playerid][pbono1] == 1) //Si decide salir en la carabana con el comando /carabana
		    {
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0); //HouseInfo[house][hInt]
				SetPlayerVirtualWorld(playerid, 0); //HouseInfo[house][hWorld]
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(carabana, cwx2, cwy2, cwz2);
				SetPlayerPos(playerid, cwx2+5, cwy2, cwz2);
				if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
				return 1;
			}
		}
		else if(PlayerInfo[playerid][pPcarkey5] >= 599 && PlayerInfo[playerid][pPcarkey5]<= 604 && PlayerInfo[playerid][pbono1] == 1) //carabana
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    new carabana = PlayerInfo[playerid][pPcarkey5];
		    if(PlayerInfo[playerid][pbono1] == 1) //Si decide salir en la carabana con el comando /carabana
		    {
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0); //HouseInfo[house][hInt]
				SetPlayerVirtualWorld(playerid, 0); //HouseInfo[house][hWorld]
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(carabana, cwx2, cwy2, cwz2);
				SetPlayerPos(playerid, cwx2+5, cwy2, cwz2);
				if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
				return 1;
			}
		}
		else if(PlayerInfo[playerid][pPhousekey] !=255)
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    new house = PlayerInfo[playerid][pPhousekey];
		    if(SpawnChange[playerid]) //If 1, then you get to your house, else spawn somewhere else
		    {
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0); //HouseInfo[house][hInt]
				SetPlayerVirtualWorld(playerid, 0); //HouseInfo[house][hWorld]
				SetPlayerPos(playerid, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]); // Warp the player
				//PlayerInfo[playerid][pLocal] = house;
				//HouseEntered[playerid] = house;
				PlayerInfo[playerid][pInt] = 0; //HouseInfo[house][hInt]
				if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
				return 1;
			}
		}
		else if(PlayerInfo[playerid][pLeader] == 7)//Mayor spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 3);
		    SetPlayerPos(playerid, 356.2998,151.9914,1025.7891);
		    PlayerInfo[playerid][pInt] = 3;
			PlayerInfo[playerid][pLocal] = 241;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    return 1;
		}
		else if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)//Police Force spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    new rand;
			SetPlayerToTeamColor(playerid);
			SetPlayerInterior(playerid,6);
		    rand = random(sizeof(gCopPlayerSpawns));
			SetPlayerPos(playerid, gCopPlayerSpawns[rand][0], gCopPlayerSpawns[rand][1], gCopPlayerSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, 270.0);
			PlayerInfo[playerid][pInt] = 6;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
			return 1;
	    }
	    else if (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)//FBI spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
			SetPlayerToTeamColor(playerid);
			SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid, 299.7097,183.1322,1007.1719);
			SetPlayerFacingAngle(playerid, 90);
			PlayerInfo[playerid][pInt] = 3;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
			return 1;
	    }
		else if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)//National Guard spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 2731.5229,-2451.3643,17.5937);
		    PlayerInfo[playerid][pInt] = 0;
		    if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    return 1;
		}
		else if (PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)//Fire/Ambulance spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerPos(playerid, 1180.0491,-1299.5562,5.5610);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 124);
			//PlayerInfo[playerid][pInt] = 6;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    return 1;
		}
		else if (PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)//13th street spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 2517.6597,-2017.2141,13.5469);
		    PlayerInfo[playerid][pInt] = 0;
		    SafeGivePlayerWeapon(playerid, 5, 1);
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		    if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    return 1;
		}
		else if (PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)//La Famiglia Sinatra spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 1282.5840,-817.4489,84.1406);
		    PlayerInfo[playerid][pInt] = 0;
		    SafeGivePlayerWeapon(playerid, 22, 30);
		    if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    return 1;
		}
	    else if (PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) //Hitman spawn Salida
	    {
	        if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
	        SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid, 1531.2402,-1479.2437,9.5000);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SafeGivePlayerWeapon(playerid, 23, 57);
			SafeGivePlayerWeapon(playerid, 1, 1);
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
	        return 1;
	    }
	    else if (PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9) //News spawn CNN
	    {
	        if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
	        SetPlayerToTeamColor(playerid);
	        SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid, 2034.5703,-1405.6526,17.2285);
			PlayerInfo[playerid][pInt] = 0;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
	        return 1;
	    }
	   else if (PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10) //Taxi Cab Company spawn
	    {
	        if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
	        SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid, 1107.5825,-1796.4374,16.5938);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
	        return 1;
	    }
   		else if (PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)//MECANICOS
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
			SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 1787.0411,-2049.0874,13.5660);
		    PlayerInfo[playerid][pInt] = 0;
		    if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    return 1;
		}
	    else if (PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)//YaKuza spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 673.6741,-1297.8074,13.6328);
		    SetPlayerFacingAngle(playerid, 90);
		    PlayerInfo[playerid][pInt] = 1;
		    if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    SafeGivePlayerWeapon(playerid, 8, 1);
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		    return 1;
		}
		else if (PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)//Latin XIV Clicka' spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 2649.2532,-2018.6039,13.5515);
		    SetPlayerFacingAngle(playerid, 90);
		    PlayerInfo[playerid][pInt] = 0;
		    if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    SafeGivePlayerWeapon(playerid, 4, 1);
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		    return 1;
		}
		else if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)//groove spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 2495.2839,-1687.6996,13.5159);
		    SetPlayerFacingAngle(playerid, 0);
		    PlayerInfo[playerid][pInt] = 0;
		    if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    SafeGivePlayerWeapon(playerid, 5, 1);
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		    return 1;
		}
		/*else if (PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)// Notrh Street Gang spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 2144.6270,-1685.4293,15.0859);
		    PlayerInfo[playerid][pInt] = 0;
		    if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    SafeGivePlayerWeapon(playerid, 5, 1);
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		    return 1;
		}
		else if (PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)// Los Cobras spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 11);
		    SetPlayerPos(playerid, 508.3122,-79.6947,998.9609);
		    PlayerInfo[playerid][pInt] = 11;
		    if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    SafeGivePlayerWeapon(playerid, 7, 1);
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		    return 1;
		}*/
		else if (PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)// Bomberos
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 2278.9126,-2189.2983,13.5212);
		    SetPlayerFacingAngle(playerid, 36.4612);
		    PlayerInfo[playerid][pInt] = 0;
		    if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    SafeGivePlayerWeapon(playerid, 42, 999);
		    SafeGivePlayerWeapon(playerid, 9, 999);
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		    return 1;
		}
		else if (PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)// los puretas spawn
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 970.3820,-1521.1364,13.5513);
		    SetPlayerFacingAngle(playerid, 200.4612);
		    PlayerInfo[playerid][pInt] = 0;
		    if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
		    SafeGivePlayerWeapon(playerid, 15, 1);
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		    return 1;
		}
	    /*if(IsAnInstructor(playerid) || PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) //Driving/Flying School spawn
	    {
	        if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid, 1494.4991,1308.9163,1093.2845);
			SetPlayerFacingAngle(playerid, 180);
			PlayerInfo[playerid][pInt] = 3;
	        return 1;
	    }*/
	    else if ((gTeam[playerid]) == 1)
	    {
	        if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
	        new rand;
			SetPlayerToTeamColor(playerid);
			rand = random(sizeof(gMedPlayerSpawns));
			SetPlayerPos(playerid, gMedPlayerSpawns[rand][0], gMedPlayerSpawns[rand][1], gMedPlayerSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, 270.0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
			return 1;
		}
		/*if(PlayerInfo[playerid][pFMember] != 255)
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
		    new family = PlayerInfo[playerid][pFMember];
		    SetPlayerToTeamColor(playerid);
		    SetPlayerInterior(playerid, FamilyInfo[family][FamilyInterior]);
		    SetPlayerPos(playerid, FamilyInfo[family][FamilySpawn][0],FamilyInfo[family][FamilySpawn][1],FamilyInfo[family][FamilySpawn][2]);
		    SetPlayerFacingAngle(playerid, FamilyInfo[family][FamilySpawn][3]);
		    return 1;
		}*/
		else if (PlayerInfo[playerid][pOrigin] == 2)
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
			SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid,1685.6605,-2203.0527,13.5469);
			SetPlayerFacingAngle(playerid, 0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
			return 1;
		}
		else if (PlayerInfo[playerid][pOrigin] == 3)
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
			SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid,1685.6605,-2203.0527,13.5469);
			SetPlayerFacingAngle(playerid, 0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
			return 1;
		}
		else if (PlayerInfo[playerid][pOrigin] == 4)
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
			SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid,1685.6605,-2203.0527,13.5469);
			SetPlayerFacingAngle(playerid, 0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
			return 1;
		}
		else if (PlayerInfo[playerid][pOrigin] == 5) // hotel astrium
		{
		    if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
			SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid,1727.6842,-1668.3142,22.6094);
			SetPlayerFacingAngle(playerid, 24.6015);
			SetPlayerInterior(playerid,18);
			PlayerInfo[playerid][pInt] = 18;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
			return 1;
		}
     	else
	    {
	        if(PlayerInfo[playerid][pmuriedote] != 0) {return 1;}
			SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid,1727.6842,-1668.3142,22.6094);
			SetPlayerFacingAngle(playerid, 0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			if(PlayerInfo[playerid][pDonateRank] == 1){PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;GivePlayerWeapon(playerid, 24, 35);} // arma premium
			return 1;
		}
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------

public OnPlayerDeath(playerid, killerid, reason)
{
	//----------------linea baloncesto
    HavingBall[playerid] = 0;
    if(HavingBall[playerid]) Baller = 999;
    //----------------linea baloncesto
    //sistema poker
    PlayerInfo[playerid][pCards] = 0;
    PlayerInfo[playerid][pCard1] = 0;
    PlayerInfo[playerid][pCard2] = 0;
	new name[MAX_PLAYER_NAME];
	new string[256];
	//new dmessage[128];
	//new deathreason[20];
	new playercash;
	new victimteam;
	new Float:px,Float:py,Float:pz;
	new killerteam;
	DestroyObject(PlayerInfo[playerid][pbono20]); //linea grafiti
//	DestroyObject(PlayerInfo[playerid][pcasco]);
//	DestroyObject(PlayerInfo[playerid][pmask]);
	
    new matado[MAX_PLAYER_NAME];
    new matador[MAX_PLAYER_NAME];
    
    new mirdako;
    mirdako = PlayerInfo[playerid][pDeaths]+1;
    PlayerInfo[playerid][pDeaths] = mirdako;
    OnPlayerUpdate(playerid);
    
    GetPlayerName(playerid, matado, sizeof(matado));
	GetPlayerName(killerid, matador, sizeof(matador));
	
	if(gPlayerUsingLoopingAnim[playerid]) {
        gPlayerUsingLoopingAnim[playerid] = 0;
        //TextDrawHideForPlayer(playerid,txtAnimHelper);
	}
	
    if(reason == 255)
    {
    	format(string, 256, "Administracion: %s ha muerto misteriosamente.",matado);
		ABroadCast(COLOR_YELLOW,string);
    }
    else if(reason == 54)
    {
    	format(string, 256, "Administracion: %s ha muerto de una caida.",matado);
		ABroadCast(COLOR_YELLOW,string);
    }
    else if(reason == 38)
    {
    	format(string, 256, "Administracion: %s ha matado a %s con una MINIGUN.",matador,matado);
		ABroadCast(COLOR_YELLOW,string);
    }
    else if(reason == 35)
    {
    	format(string, 256, "Administracion: %s ha matado a %s con un LANZALLAMAS.",matador,matado);
		ABroadCast(COLOR_YELLOW,string);
    }
    else if(reason == 9)
    {
    	format(string, 256, "Administracion: %s ha matado a %s con una MOTOSIERRA.",matador,matado);
		ABroadCast(COLOR_YELLOW,string);
    }
    else if(reason == 16)
    {
    	format(string, 256, "Administracion: %s ha matado a %s con GRANADAS.",matador,matado);
		ABroadCast(COLOR_YELLOW,string);
    }
    else if(reason == 18)
    {
    	format(string, 256, "Administracion: %s ha matado a %s con MOLOTOVS.",matador,matado);
		ABroadCast(COLOR_YELLOW,string);
    }
    else if(IsPlayerInAnyVehicle(killerid))
    {
    	format(string, 256, "Administracion: %s ha matado a %s haciendo DRIVE-BY.",matador,matado);
		ABroadCast(COLOR_YELLOW,string);
    }
    else
    {
    	format(string, 256, "Administracion: %s ha matado a %s con arma (ID:%d).",matador,matado,reason);
		ABroadCast(COLOR_YELLOW,string);
    }

	victimteam = gTeam[playerid];
	killerteam = gTeam[killerid];
	gPlayerSpawned[playerid] = 0;
	PlayerInfo[playerid][pInvWeapon] = 0;
 	PlayerInfo[playerid][pInvAmmo] = 0;
	GetPlayerName(playerid, name, sizeof(name));
	PlayerInfo[playerid][pLocal] = 255;
	GetPlayerPos(playerid, px, py, pz);
	ConCas[playerid] = 0; // casco al morir
	if(killerid != 255)
	{
		if(GetPlayerState(killerid) == 2)
		{
		    if(ProxDetectorS(20, killerid, playerid))
		    {
		        if(!IsPlayerInAnyVehicle(playerid))
		        {
					if(PlayerInfo[killerid][pMember] == 1||PlayerInfo[killerid][pLeader] == 1||PlayerInfo[killerid][pMember] == 2||PlayerInfo[killerid][pLeader] ==2)
		    		{
		    		    SendClientMessage(killerid, COLOR_YELLOW, "That was a drive-by kill. Don't abuse it.");
						return 1;
					}
					SetPlayerCriminal(killerid,255,"Asesinar");
					SetPlayerWantedLevel(killerid, GetPlayerWantedLevel(killerid)+1);
					return 1;
				}
			}
		}
	}
	if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}
	new caller = Mobile[playerid];
	if(caller != 255)
	{
		if(caller < 255)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "   The line just went dead....");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = 255;
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
	}
	ClearCrime(playerid);
	if(PlayerPaintballing[playerid] != 0)
	{
	    PlayerPaintballKills[killerid] ++;
	    PlayerInfo[playerid][pDeaths] -= 1; //bug paintball
	    if(PlayerPaintballKills[killerid] > PaintballWinnerKills)
	    {
	        new killer[MAX_PLAYER_NAME];
	        PaintballWinner = killerid;
	        PaintballWinnerKills = PlayerPaintballKills[killerid];
	        GetPlayerName(killerid, killer, sizeof(killer));
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
	                if(PlayerPaintballing[i] != 0)
	                {
	                    format(string, sizeof(string), "* %s is in the lead with %d Kills.",killer,PaintballWinnerKills);
						SendClientMessage(i, COLOR_WHITE, string);
	                }
	            }
	        }
	    }
	    return 1;
	}
	if(GettingCK[playerid] < 999)
	{
	    if(IsPlayerConnected(killerid))
	    {
	        if(OnCK[killerid] < 999)
	        {
	            new killer[MAX_PLAYER_NAME];
	            new dier[MAX_PLAYER_NAME];
	            GetPlayerName(playerid, dier, sizeof(dier));
				GetPlayerName(killerid, killer, sizeof(killer));
	            format(string, sizeof(string), "* %s has performed a Character Kill on you, you aren't able to play with this Character anymore.",killer);
	            SendClientMessage(playerid, COLOR_LIGHTRED, string);
	            format(string, sizeof(string), "** %s has Character Killed %s **",killer,dier);
	            CKLog(string);
	            BroadCast(COLOR_LIGHTRED, string);
	            PlayerInfo[playerid][pCK] = 1;
	            if(GettingCK[playerid] < 999) { GettingCK[playerid] = 999; }
	            else if(OnCK[playerid] < 999) { OnCK[playerid] = 999; }
	            if(GettingCK[killerid] < 999) { GettingCK[killerid] = 999; }
	            else if(OnCK[killerid] < 999) { OnCK[killerid] = 999; }
	            KickPlayer[playerid] = 1;
	        }
	    }
	}
	if(PlayerInfo[playerid][pHeadValue] > 0)
	{
	    if(IsPlayerConnected(killerid))
	    {
		    if(gTeam[killerid] == 10 || PlayerInfo[killerid][pLeader] == 8)
		    {
		        if(GoChase[killerid] == playerid)
		        {
		            //ConsumingMoney[killerid] = 1;
					new killer[MAX_PLAYER_NAME];
					GetPlayerName(killerid, killer, sizeof(killer));
					SafeGivePlayerMoney(killerid, PlayerInfo[playerid][pHeadValue]);
					format(string,128,"<< Hitman %s has fulfilled the contract on %s and collected $%d >>",killer,name,PlayerInfo[playerid][pHeadValue]);
					SendFamilyMessage(8, COLOR_YELLOW, string);
					PlayerInfo[playerid][pHeadValue] = 0;
					GotHit[playerid] = 0;
					GetChased[playerid] = 999;
					GoChase[killerid] = 999;
				}
			}
		}
	}
	if(victimteam >= 4)
	{
	    if(IsPlayerConnected(killerid))
	    {
			//new killer[MAX_PLAYER_NAME];
			//GetPlayerName(killerid, killer, sizeof(killer));
			new slice = 100; //$100
			playercash = GetPlayerMoney(playerid);
			if(gTeam[killerid] != 2) { WantedPoints[killerid] += 2; } //+ 2 wanted points
			if(SafeTime[playerid] <= 0)
			{
				if(gTeam[killerid] != gTeam[playerid])
				{
					if(GetPlayerState(killerid) == 1)
					{
						PlayerInfo[killerid][pKills] = PlayerInfo[killerid][pKills] + 2;
					}
					else
					{
						PlayerInfo[killerid][pKills]++;
					}
					PlayerInfo[playerid][pKills]--;
				}
			}
			/*if (strlen(deathreason) > 0)// patch
			{
				if (((gTeam[killerid]) == 1) || ((gTeam[killerid]) == 3 && civnokill) || gTeam[killerid] == gTeam[playerid])//med kill criminal
				{
					format(string, sizeof(string), ".: %s murdered %s. (%s) :.", killer, name, deathreason);
				}
				else
				{
					format(string, sizeof(string), ".: %s murdered %s. (%s) for $%d :.", killer, name, deathreason, slice);
				}

			}
			else
			{
				if (((gTeam[killerid]) == 1) || ((gTeam[killerid]) == 3 && civnokill || gTeam[killerid] == gTeam[playerid]))
				{
					format(string, sizeof(string), ".: %s murdered %s :.", killer, name);
				}
				else
				{
					format(string, sizeof(string), ".: %s murdered %s for $%d :.", killer, name, slice);
				}
			}*/
			if (((gTeam[killerid]) == 1) || ((gTeam[killerid]) == 3 && civnokill) || (gTeam[killerid] == gTeam[playerid] && gTeam[playerid] != 4))
			{
				slice = 0;
			}
			if (((gTeam[killerid]) != 4) && ((gTeam[killerid]) == gTeam[playerid]))//no team kill
			{
				slice = 0;
			}
			if (playercash > 0)
			{
				SafeGivePlayerMoney(playerid, -slice);
			}
			else
			{
				slice = slice+500;
			}
			//SafeGivePlayerMoney(killerid, slice);
			//GameTextForPlayer(playerid, dmessage, 5000, 2);
			PlayerPlaySound(killerid, 1083, 0.0, 0.0, 0.0);
			if (((gTeam[killerid]) == 3) && reason != 49)
			{
				SetPlayerCriminal(killerid,255, "Asesinato");
			}
			else if (((gTeam[killerid]) == 3) && reason == 49)
			{
				SetPlayerCriminal(killerid,255, "Asesinato");
			}
		}
	}
	else if (victimteam == 2)
	{
	    if(IsPlayerConnected(killerid))
	    {
			//new killer[MAX_PLAYER_NAME];
			//GetPlayerName(killerid, killer, sizeof(killer));
			// Cop kill
			PlayerInfo[playerid][pKills]--;
			if (gTeam[killerid] == 2)//cops kill cop
			{
				//format(string,128,".: Officer %s murdered Officer %s (%s) and was sued for $%d :.",killer,name,deathreason,suecost);
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(killerid, -suecost);
				SafeGivePlayerMoney(playerid, suecost+100);//+100pays hospital bill
			}
			else
			{
				//format(string,128,".: %s murdered Officer %s (%s) :.",killer,name,deathreason);
		    }
			if (gTeam[killerid] >= 3)
			{
			    WantedPoints[killerid] += 2; //+ 2 wanted points
				if(reason != 49)
				{
					SetPlayerCriminal(killerid,255, "Asesinato");
				}
				else if (reason == 49)
				{
					SetPlayerCriminal(killerid,255, "Asesinato");
				}
			}
			if(gTeam[killerid] >= 5 && SafeTime[playerid] <= 0)
			{
				if(GetPlayerState(killerid) == 1)
				{
					PlayerInfo[killerid][pKills] = PlayerInfo[killerid][pKills]+2;
				}
				else
				{
					PlayerInfo[killerid][pKills]++;
				}
				WantedPoints[killerid]+=2;
			}
			//BroadCast(COLOR_RED, string);
		}
	}
	else if (victimteam == 3)
	{
	    if(IsPlayerConnected(killerid))
	    {
			//new killer[MAX_PLAYER_NAME];
			//GetPlayerName(killerid, killer, sizeof(killer));
			// Civ kill
			if ((gTeam[killerid]) == 2)//cops kill civ
			{
			    if(WantedLevel[playerid] < 1)
			    {
					//format(string,128,".: Officer %s murdered %s (%s) and was sued for $%d :.",killer,name,deathreason,suecost);
					PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
					SafeGivePlayerMoney(killerid, -suecost);
					SafeGivePlayerMoney(playerid, suecost+10);//+100pays hospital bill
				}
			}
			else
			{
				//format(string,128,".: %s murdered %s (%s) :.",killer,name,deathreason);
				WantedPoints[killerid] += 2;
		    }
			if (((gTeam[killerid]) >= 3 || (gTeam[killerid]) == 1) && reason != 49)
			{
				SetPlayerCriminal(killerid,255, "Asesinato");
			}
			else if (((gTeam[killerid]) >= 3 || (gTeam[killerid]) == 1) && reason == 49)
			{
				SetPlayerCriminal(killerid,255, "Asesinato");
			}
		    //BroadCast(COLOR_RED, string);
		}
	}
	else if (victimteam == 1)
	{
	    if(IsPlayerConnected(killerid))
	    {
			//new killer[MAX_PLAYER_NAME];
			//GetPlayerName(killerid, killer, sizeof(killer));
			// Civ kill
			if ((gTeam[killerid]) == 2)//cops kill civ
			{
				//format(string,128,".: Officer %s murdered Paramedic %s (%s) and was sued for $%d :.",killer,name,deathreason,suecost);
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(killerid, -suecost);
				SafeGivePlayerMoney(playerid, suecost+10);//+100pays hospital bill
			}
			else if ((gTeam[killerid]) == 1)//med kill civ
			{
				//format(string,128,".: Paramedic %s murdered %s (%s) and was sued for $%d :.",killer,name,deathreason,suecost);
				PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
				SafeGivePlayerMoney(killerid, -suecost);
				SafeGivePlayerMoney(playerid, suecost+10);//+100pays hospital bill
			}
			else
			{
				//format(string,128,".: %s murdered %s (%s) :.",killer,name,deathreason);
		    }
			if (((gTeam[killerid]) == 4) && reason != 49)
			{
				SetPlayerCriminal(killerid,255, "Asesinato");
			}
			else if (((gTeam[killerid]) == 3) && reason == 49)
			{
				SetPlayerCriminal(killerid,255, "Asesinato");
			}
		    //BroadCast(COLOR_RED, string);
		}
	}
	if (victimteam >= 3 && WantedPoints[playerid] > 0 && killerteam == 2)
	{
	    SetPlayerFree(playerid,killerid, "Got Killed");
	}
	if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0)
	{
		if (BusrouteEast[playerid][0] != 0) BusrouteEnd(playerid, BusrouteEast[playerid][1]);
		else if (BusrouteWest[playerid][0] != 0) BusrouteEnd(playerid, BusrouteWest[playerid][1]);
		else BusrouteEnd(playerid, 0);
	}
	if(FarmerVar[playerid] != 0)
	{
	    FarmerVar[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	if(DrugFarmerVar[playerid] != 0)
	{
		DrugFarmerVar[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	if(SmugglerWork[playerid] != 0)
	{
	    SmugglerWork[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	killerid = INVALID_PLAYER_ID;
	SetPlayerColor(playerid,COLOR_GRAD2);
	return 1;
}

public OnPlayerSpawn(playerid)
{
    if(IsPlayerNPC(playerid)) // spawnnpc
    {
        new npcname[MAX_PLAYER_NAME];
        GetPlayerName(playerid, npcname, sizeof(npcname));
  		if(!strcmp(npcname,"FBI_9",true))
	    {
        SetPlayerSkin(playerid, 90);
        return 1;
	    }
 		if(!strcmp(npcname,"[BOT]Johnson",true))
	    {
        PutPlayerInVehicle(playerid, police, 2);
        SetPlayerSkin(playerid, 280);
        return 1;
	    }
        /*if(IsPlayerNPC(playerid))
		{
	    	if(!strfind(PlayerName(playerid),ZOMBIE_NAME,true))
			{
   				SetupZombie(playerid);
	    	}
		}*/
		/*if(ZombieKill[playerid] != -1)
		{
	    	Zombies[ZombieKill[playerid]][ZombieKilling] = -1;
	    	ZombieKill[playerid] = -1;
		}*/
		return 1;
	}
	
	if(!gPlayerAnimLibsPreloaded[playerid]) {
   		PreloadAnimLib(playerid,"BOMBER");
   		PreloadAnimLib(playerid,"RAPPING");
    	PreloadAnimLib(playerid,"SHOP");
   		PreloadAnimLib(playerid,"BEACH");
   		PreloadAnimLib(playerid,"SMOKING");
    	PreloadAnimLib(playerid,"FOOD");
    	PreloadAnimLib(playerid,"ON_LOOKERS");
    	PreloadAnimLib(playerid,"DEALER");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		PreloadAnimLib(playerid,"PED");
		PreloadAnimLib(playerid,"BSKTBALL");
		PreloadAnimLib(playerid,"PAULNMAC");
		PreloadAnimLib(playerid,"BLOWJOBZ");
		PreloadAnimLib(playerid,"SWAT");
		PreloadAnimLib(playerid,"WUZI");
		PreloadAnimLib(playerid,"FIGHT_B");
		PreloadAnimLib(playerid,"FIGHT_C");
		PreloadAnimLib(playerid,"FIGHT_D");
		PreloadAnimLib(playerid,"FIGHT_E");
		PreloadAnimLib(playerid,"FIGHT_E");
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	
	
	InitLockDoors(playerid);
	STDPlayer[playerid] = 0;
	gTeam[playerid] = PlayerInfo[playerid][pTeam]; //Set the Team
	/*if(IsPlayerNPC(playerid)) //Checks if the player that just spawned is an NPC.
    {
        new npcname[MAX_PLAYER_NAME];
        GetPlayerName(playerid, npcname, sizeof(npcname)); //Getting the NPC's name.
        if(!strcmp(npcname, "Latino_1", true)) //Checking if the NPC's name is MyFirstNPC
    	{
    		SetPlayerSkin(playerid, 110)
    		SetPlayerColor(playerid,TEAM_HIT_COLOR);
    	}
    	if(!strcmp(npcname, "Policia_1", true)) //Checking if the NPC's name is MyFirstNPC
    	{
    		SetPlayerSkin(playerid, 284)
    		SetPlayerColor(playerid,TEAM_HIT_COLOR);
    	}
    	if(!strcmp(npcname, "Policia_2", true)) //Checking if the NPC's name is MyFirstNPC
    	{
    		SetPlayerSkin(playerid, 280)
    		SetPlayerColor(playerid,TEAM_HIT_COLOR);
    	}
    	if(!strcmp(npcname, "Policia_3", true)) //Checking if the NPC's name is MyFirstNPC
    	{
    		SetPlayerSkin(playerid, 281)
    		SetPlayerColor(playerid,TEAM_HIT_COLOR);
    	}
    	if(!strcmp(npcname, "Policia_Patruya", true)) //Checking if the NPC's name is MyFirstNPC
    	{
    		SetPlayerSkin(playerid, 281)
    		SetPlayerColor(playerid,TEAM_HIT_COLOR);
    		PutPlayerInVehicle(playerid, 5, 0);
    	}
    	if(!strcmp(npcname, "SpG_Bot", true)) //Checking if the NPC's name is MyFirstNPC
    	{
    		SetPlayerSkin(playerid, 290)
    		SetPlayerColor(playerid,TEAM_VAGOS_COLOR);
    	}
        return 1;
    }*/
    //-------------------------------------------------------------Nivel de Armas // by DryilZas
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 0);
	if (PlayerInfo[playerid][pMiserPerk] == 1)
    {
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 200);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 200);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 200);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 200);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 200);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 200);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 200);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 200);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 200);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 200);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 200);
    }
    if (PlayerInfo[playerid][pMiserPerk] == 2)
    {
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 350);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 350);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 350);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 350);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 350);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 350);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 350);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 350);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 350);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 350);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 350);
    }
    if (PlayerInfo[playerid][pMiserPerk] == 3)
    {
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 500);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 500);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 500);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 500);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 500);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 500);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 500);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 500);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 500);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 500);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 500);
    }
    if (PlayerInfo[playerid][pMiserPerk] == 4)
    {
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 800);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 800);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 800);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 800);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 800);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 800);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 800);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 800);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 800);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 800);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 800);
    }
    if (PlayerInfo[playerid][pMiserPerk] == 5)
    {
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 1000);
    }
    //-------------------------------------------------------------ARMAS INICIALES // by DryilZas
    /*if (PlayerInfo[playerid][pDrugPerk] == 1)
    {
    	SafeGivePlayerWeapon(playerid, 22, 51);
    }
    if (PlayerInfo[playerid][pDrugPerk] == 2)
    {
    	SafeGivePlayerWeapon(playerid, 22, 51);
    	SafeGivePlayerWeapon(playerid, 28, 150);
    }
    if (PlayerInfo[playerid][pDrugPerk] == 3)
    {
    	SafeGivePlayerWeapon(playerid, 22, 102);
    	SafeGivePlayerWeapon(playerid, 28, 300);
    }*/
    //------------------------------------------------
	if (gTeam[playerid] == 4) //medic / criminal reset team
	{
		gTeam[playerid] = 3;
	}
	if(gPlayerLogged[playerid] == 0)
	{
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** This server requires a Login BEFORE spawn (Kicked) **");
        KickPlayer[playerid] = 1;
 	}
	if(gTeam[playerid] == 11 && PlayerInfo[playerid][pLeader] < 1)
	{
	    MedicBill[playerid] = 0;
	    new rand = random(sizeof(CIV));
		SendClientMessage(playerid, COLOR_LIGHTRED, "You are not an Approved Leader, you are now a Civilian !");
		PlayerInfo[playerid][pTeam] = 3;
		gTeam[playerid] = 3;
		SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
		PlayerInfo[playerid][pModel] = CIV[rand];
		SpawnPlayer(playerid);
	}
	if(gTeam[playerid] == 5)
	{
	    if(PlayerInfo[playerid][pMember] < 1)
	    {
	        MedicBill[playerid] = 0;
	        new rand = random(sizeof(CIV));
			SendClientMessage(playerid, COLOR_LIGHTRED, "You are not a Family Member, you are now a Civilian !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
            SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
			PlayerInfo[playerid][pModel] = CIV[rand];
			SpawnPlayer(playerid);
		}
	}
	if(gTeam[playerid] == 10)
	{
	    if(PlayerInfo[playerid][pMember] != 8)
	    {
	        MedicBill[playerid] = 0;
	        new rand = random(sizeof(CIV));
			SendClientMessage(playerid, COLOR_LIGHTRED, "You are not a Member of this Agency, you are now a Civilian !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
            SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
			PlayerInfo[playerid][pModel] = CIV[rand];
			SpawnPlayer(playerid);
		}
	}
	if(gTeam[playerid] == 2 && PlayerInfo[playerid][pMember] > 3)
	{
	    MedicBill[playerid] = 0;
		new rand = random(sizeof(CIV));
		SendClientMessage(playerid, COLOR_LIGHTRED, "You haven't applied for being an Officer / FBI / National Guard, you are now a Civilian !");
		PlayerInfo[playerid][pTeam] = 3;
		gTeam[playerid] = 3;
		SetSpawnInfo(playerid, gTeam[playerid], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
		PlayerInfo[playerid][pModel] = CIV[rand];
		SpawnPlayer(playerid);
	}
	if(gTeam[playerid] == 3)
	{
	    if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
	    {
			SendClientMessage(playerid, COLOR_LIGHTRED, "You are part of a Family/Force, you've been forced to the right Class + Char !");
			MedicBill[playerid] = 0;
			new model = PlayerInfo[playerid][pChar];
			if(PlayerInfo[playerid][pMember] == 1) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 2) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 3) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 4) { SetSpawnInfo(playerid, 1, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 1; gTeam[playerid] = 1; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 5) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 6) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 7) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 8) { SetSpawnInfo(playerid, 10, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 10; gTeam[playerid] = 10; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 9) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
		//	else if(PlayerInfo[playerid][pJob] == 13) { SetSpawnInfo(playerid, 12, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 19) { SetSpawnInfo(playerid, 2, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 14) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 15) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 16) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pMember] == 17) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; } // Notrh Street Gang
			else if(PlayerInfo[playerid][pMember] == 18) { SetSpawnInfo(playerid, 5, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; PlayerInfo[playerid][pModel] = model; } // Los Cobras
			
			else if(PlayerInfo[playerid][pLeader] == 1) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 2) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 3) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 4) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 5) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 6) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 7) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 8) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 9) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			//else if(PlayerInfo[playerid][pLeader] == 10) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 19) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 14) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 15) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 16) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 17) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			else if(PlayerInfo[playerid][pLeader] == 18) { SetSpawnInfo(playerid, 11, model,0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; PlayerInfo[playerid][pModel] = model; }
			//SetSpawnInfo(playerid, team, model,0.0,0.0,0.0,0,0,0,0,0,0,0);
			SpawnPlayer(playerid);
		}
	}
	/*if(PlayerInfo[playerid][pDonateRank] == 1)
	{
	    PlayerInfo[playerid][pGun1] = 24; PlayerInfo[playerid][pAmmo1] = 35;
	    GivePlayerWeapon(playerid, 24, 35);
	    
	}*/
	if(PlayerInfo[playerid][pChar] > 0) { SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]); }
	else { SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]); }
	SetPlayerWeapons(playerid);
	SetPlayerSpawn(playerid);
	SetPlayerToTeamColor(playerid);
	PlayerFixRadio(playerid);
	for(new i = 0; i < sizeof(Turfs); i++)
	{
	    GangZoneShowForPlayer(playerid, i, TurfInfo[i][zColor]);
	    GangZoneShowForPlayer(playerid, surenos, COLOR_LIGHTGREEN);//COLOR_LIGHTBLUE
	    GangZoneShowForPlayer(playerid, mafiia, 0x000000C2);
	    GangZoneShowForPlayer(playerid, pachinos, COLOR_LIGHTRED);
	    GangZoneShowForPlayer(playerid, loscobras, 0x000000C2);
	    GangZoneShowForPlayer(playerid, nortgang, COLOR_PURPLE);
		GangZoneShowForPlayer(playerid, nortenos, COLOR_YELLOW);
		GangZoneShowForPlayer(playerid, street_zone, COLOR_LIGHTBLUE);//COLOR_LIGHTGREEN
		GangZoneShowForPlayer(playerid, mafiia2, 0x000000C2);
		GangZoneShowForPlayer(playerid, mafiia3, 0x000000C2);
		
		GangZoneShowForPlayer(playerid, superlux1, COLOR_WHITE);
		GangZoneShowForPlayer(playerid, superlux2, COLOR_WHITE);
 		GangZoneShowForPlayer(playerid, superlux3, COLOR_WHITE);
        return 1;
	}
    if(MapIconsShown[playerid] != 1)
	{
	    MapIconsShown[playerid] = 1;
	    for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			SetPlayerMapIcon(playerid,i + 1,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],36,COLOR_LIGHTRED);
		}/*
		for(new i = 0; i < sizeof(SBizzInfo); i++)
		{
		    SetPlayerMapIcon(playerid,i + 20,SBizzInfo[i][sbEntranceX],SBizzInfo[i][sbEntranceY],SBizzInfo[i][sbEntranceZ],36,COLOR_LIGHTRED);
		}*/
	}
	/*for(new i = 0; i < sizeof(HouseInfo); i++)
	{
	    if(HouseInfo[i][hOwned] == 0)
	    {
	        SetPlayerMapIcon(playerid,i+14,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez],31,COLOR_LIGHTRED);
	    }
	}*/
	/*PlayerObjectUpdate(playerid);*/
	
	return 1;
}

public CKLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ck.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public PayLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("pay.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public KickLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("kick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public BanLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ban.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public OnPlayerEnterCheckpoint(playerid)
{
	new string[128];
	new string2[128];
	new name[MAX_PLAYER_NAME];
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
	    TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] < 999)
	{
	    BusAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		BusCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid]==1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
		    PlayerInfo[playerid][pJackSkill] ++;
			if(PlayerInfo[playerid][pJackSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Ladron de Vehiculos es de Nivel 2, ahora ganas mas dinero."); }
			else if(PlayerInfo[playerid][pJackSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Ladron de Vehiculos es de Nivel 3, ahora ganas mas dinero."); }
			else if(PlayerInfo[playerid][pJackSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Ladron de Vehiculos es de Nivel 4, ahora ganas mas dinero."); }
			else if(PlayerInfo[playerid][pJackSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Ladron de Vehiculos es de Nivel 5, ahora ganas mas dinero."); }
			new level = PlayerInfo[playerid][pJackSkill];
			if(level >= 0 && level <= 50)
			{
			    new rand = random(sizeof(SELLCAR1));
			    format(string, sizeof(string), "Entregas el Vehiculo por %d$, ahora tienes que esperar 6 Minutos para robar otro.", SELLCAR1[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SafeGivePlayerMoney(playerid, SELLCAR1[rand]);
			    PlayerInfo[playerid][pCarTime] = 360;
			}
			else if(level >= 51 && level <= 100)
			{
			    new rand = random(sizeof(SELLCAR2));
			    format(string, sizeof(string), "Entregas el Vehiculo por %d$, ahora tienes que esperar 6 Minutos para robar otro.", SELLCAR2[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SafeGivePlayerMoney(playerid, SELLCAR2[rand]);
			    PlayerInfo[playerid][pCarTime] = 360;
			}
			else if(level >= 101 && level <= 200)
			{
			    new rand = random(sizeof(SELLCAR3));
			    format(string, sizeof(string), "Entregas el Vehiculo por %d$, ahora tienes que esperar 6 Minutos para robar otro.", SELLCAR3[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SafeGivePlayerMoney(playerid, SELLCAR3[rand]);
			    PlayerInfo[playerid][pCarTime] = 360;
			}
			else if(level >= 201 && level <= 400)
			{
			    new rand = random(sizeof(SELLCAR4));
			    format(string, sizeof(string), "Entregas el Vehiculo por %d$, ahora tienes que esperar 6 Minutos para robar otro.", SELLCAR4[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SafeGivePlayerMoney(playerid, SELLCAR4[rand]);
			    PlayerInfo[playerid][pCarTime] = 360;
			}
			else if(level >= 401)
			{
			    new money = 2250;
			    format(string, sizeof(string), "Entregas el Vehiculo por %d$, ahora tienes que esperar 6 Minutos para robar otro.", money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SafeGivePlayerMoney(playerid, money);
			    PlayerInfo[playerid][pCarTime] = 360;
			}
		//	EconomyInfo[eArcas] += 1000;
			GameTextForPlayer(playerid, "~y~Vehiculo Entregado", 2500, 1);
			KillTimer(AdiosLadron(playerid));
			CP[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
		else
		{
		    GameTextForPlayer(playerid, "No estas en un Coche", 5000, 1);
		}
	}
    else if(CP[playerid]==151)
	{
        if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	    {
           new preciomerca = 800;
	       format(string, sizeof(string), "Has Descargado el Container de Mercancia, te pagan por el viaje %d$", preciomerca);
	       SendClientMessage(playerid, TEAM_JOB_COLOR, string);
           SafeGivePlayerMoney(playerid, preciomerca);
         //  EconomyInfo[eArcas] += 5000;
	       GameTextForPlayer(playerid, "~y~Container ~n~~w~Descargado", 2500, 1);
	       CP[playerid] = 151;
	       DisablePlayerCheckpoint(playerid);
	       return 1;
        }
   		else
		{
		    GameTextForPlayer(playerid, "No Tienes Mercancia para Entregar", 5000, 1);
		    return 1;
		}
	}
	else if(CP[playerid]==150)
	{
        if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	    {
	       format(string, sizeof(string), "Has Cargado el Container de Mercancia, ahora tienes que entregala");
	       SendClientMessage(playerid, TEAM_JOB_COLOR, string);
	       GameTextForPlayer(playerid, "~y~Container ~n~~w~Cargado", 2500, 1);
	       SetPlayerCheckpoint(playerid,2316.7458,-2311.4902,13.5469,9.0);
	       CP[playerid] = 151;
	       return 1;
        }
   		else
		{
		    GameTextForPlayer(playerid, "No Hay donde cargar la Mercancia", 5000, 1);
		    return 1;
		}
	}
	else if(CP[playerid]==110)
	{
        if(PlayerInfo[playerid][pJob] == 16)
	    {
	        new rand = random(sizeof(COMERCIAL));
	        format(string, sizeof(string), "Realizas el Pedido del Negocio y Ganas de Comision %d$", COMERCIAL[rand]);
	        SendClientMessage(playerid, TEAM_JOB_COLOR, string);
	        SafeGivePlayerMoney(playerid, COMERCIAL[rand]);
	     //   EconomyInfo[eArcas] += 10000;
	        PlayerInfo[playerid][pCarTime] = 0;
			GameTextForPlayer(playerid, "~y~Pedido ~n~~w~Realizado", 2500, 1);
			CP[playerid] = 110;
		    DisablePlayerCheckpoint(playerid);
            new rand2;
            rand2 = random(sizeof(comercialCP));
            SetPlayerCheckpoint(playerid,comercialCP[rand2][0],comercialCP[rand2][1],comercialCP[rand2][2],5.0);
		    return 1;
		}
		else
		{
		    GameTextForPlayer(playerid, "No eres Comercial", 5000, 1);
		    return 1;
		}
	}
	else if(CP[playerid]==90)
	{
        new newcar = GetPlayerVehicleID(playerid);
        if(newcar == 81 || newcar == 82 || newcar == 83 || newcar == 84)
	    {
		    PlayerInfo[playerid][pCarSkill] ++;
			if(PlayerInfo[playerid][pCarSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Mozo de Almacen es de Nivel 2, ahora Ganaras mas Dinero."); }
			else if(PlayerInfo[playerid][pCarSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Mozo de Almacen es de Nivel 3, ahora Ganaras mas Dinero."); }
			else if(PlayerInfo[playerid][pCarSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Mozo de Almacen es de Nivel 4, ahora Ganaras mas Dinero."); }
			else if(PlayerInfo[playerid][pCarSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Mozo de Almacen es de Nivel 5, ahora Ganaras mas Dinero."); }
			new level = PlayerInfo[playerid][pCarSkill];
			if(level >= 0 && level <= 50)
			{
			    new rand = random(sizeof(MERCANCIA1));
			    format(string, sizeof(string), "Has movido mercancias y te pagan %d$", MERCANCIA1[rand]);
				SendClientMessage(playerid, TEAM_JOB_COLOR, string);
				SafeGivePlayerMoney(playerid, MERCANCIA1[rand]);
				PlayerInfo[playerid][pCarTime] = 0;
			}
			else if(level >= 51 && level <= 100)
			{
			    new rand = random(sizeof(MERCANCIA2));
			    format(string, sizeof(string), "Has movido mercancia y te pagan %d$", MERCANCIA2[rand]);
				SendClientMessage(playerid, TEAM_JOB_COLOR, string);
				SafeGivePlayerMoney(playerid, MERCANCIA2[rand]);
				PlayerInfo[playerid][pCarTime] = 0;
			}
			else if(level >= 101 && level <= 200)
			{
			    new rand = random(sizeof(MERCANCIA3));
			    format(string, sizeof(string), "Has movido mercancia y te pagan %d$", MERCANCIA3[rand]);
				SendClientMessage(playerid, TEAM_JOB_COLOR, string);
				SafeGivePlayerMoney(playerid, MERCANCIA3[rand]);
				PlayerInfo[playerid][pCarTime] = 0;
			}
			else if(level >= 201 && level <= 400)
			{
			    new rand = random(sizeof(MERCANCIA4));
			    format(string, sizeof(string), "Has movido mercancia y te pagan %d$", MERCANCIA4[rand]);
				SendClientMessage(playerid, TEAM_JOB_COLOR, string);
				SafeGivePlayerMoney(playerid, MERCANCIA4[rand]);
				PlayerInfo[playerid][pCarTime] = 0;
			}
			else if(level >= 401)
			{
			    new money = 95;
			    format(string, sizeof(string), "Has movido mercancia y te pagan %d$", money);
				SendClientMessage(playerid, TEAM_JOB_COLOR, string);
				SafeGivePlayerMoney(playerid, money);
				PlayerInfo[playerid][pCarTime] = 0;
			}
			new rand;
			GameTextForPlayer(playerid, "~y~Mercancia ~n~~w~Colocada", 2500, 1);
		// 	EconomyInfo[eArcas] += 200;
		    DisablePlayerCheckpoint(playerid);
		    CP[playerid] = 90;
		    rand = random(sizeof(mozoCP));
            SetPlayerCheckpoint(playerid,mozoCP[rand][0],mozoCP[rand][1],mozoCP[rand][2],9.0);
		    return 1;
		}
		else
		{
		    GameTextForPlayer(playerid, "No estas en un Montacargas", 5000, 1);
		    return 1;
		}
	}
//**********************************************
	else if(CP[playerid]==80)
	{
        new newcar = GetPlayerVehicleID(playerid);
        if(newcar == 665 || newcar == 666 || newcar == 667 || newcar == 668)
	    {
		    PlayerInfo[playerid][pCarSkill] ++;
			if(PlayerInfo[playerid][pCarSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Minero es de Nivel 2, ahora Ganarás más Dinero."); }
			else if(PlayerInfo[playerid][pCarSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Minero es de Nivel 3, ahora Ganarás más Dinero."); }
			else if(PlayerInfo[playerid][pCarSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Minero es de Nivel 4, ahora Ganarás más Dinero."); }
			else if(PlayerInfo[playerid][pCarSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Minero es de Nivel 5, ahora Ganarás más Dinero."); }
			new level = PlayerInfo[playerid][pCarSkill];
			if(level >= 0 && level <= 50)
			{
			    new rand = random(sizeof(MINERIA1));
			    format(string, sizeof(string), "Has minado y te pagan %d$", MINERIA1[rand]);
				SendClientMessage(playerid, TEAM_JOB_COLOR, string);
				SafeGivePlayerMoney(playerid, MINERIA1[rand]);
				PlayerInfo[playerid][pCarTime] = 0;
			}
			else if(level >= 51 && level <= 100)
			{
			    new rand = random(sizeof(MINERIA2));
			    format(string, sizeof(string), "Has minado y te pagan %d$", MINERIA2[rand]);
				SendClientMessage(playerid, TEAM_JOB_COLOR, string);
				SafeGivePlayerMoney(playerid, MINERIA2[rand]);
				PlayerInfo[playerid][pCarTime] = 0;
			}
			else if(level >= 101 && level <= 200)
			{
			    new rand = random(sizeof(MINERIA3));
			    format(string, sizeof(string), "Has minado y te pagan %d$", MINERIA3[rand]);
				SendClientMessage(playerid, TEAM_JOB_COLOR, string);
				SafeGivePlayerMoney(playerid, MINERIA3[rand]);
				PlayerInfo[playerid][pCarTime] = 0;
			}
			else if(level >= 201 && level <= 400)
			{
			    new rand = random(sizeof(MINERIA4));
			    format(string, sizeof(string), "Has minado y te pagan %d$", MINERIA4[rand]);
				SendClientMessage(playerid, TEAM_JOB_COLOR, string);
				SafeGivePlayerMoney(playerid, MINERIA4[rand]);
				PlayerInfo[playerid][pCarTime] = 0;
			}
			else if(level >= 401)
			{
			    new money = 95;
			    format(string, sizeof(string), "Has minado y te pagan %d$", money);
				SendClientMessage(playerid, TEAM_JOB_COLOR, string);
				SafeGivePlayerMoney(playerid, money);
				PlayerInfo[playerid][pCarTime] = 0;
			}
			new rand;
			GameTextForPlayer(playerid, "~y~Piedras ~n~~w~Colocadas", 2500, 1);
		// 	EconomyInfo[eArcas] += 200;
		    DisablePlayerCheckpoint(playerid);
		    CP[playerid] = 80;
		    rand = random(sizeof(mineroCP));
            SetPlayerCheckpoint(playerid,mineroCP[rand][0],mineroCP[rand][1],mineroCP[rand][2],9.0);
		    return 1;
		}
		else
		{
		    GameTextForPlayer(playerid, "No estas en un vehículo de minero", 5000, 1);
		    return 1;
		}
	}
//***********************************************
	else if(CP[playerid] == 5)
	{
	    GameTextForPlayer(playerid, "~y~At the Missions Checkpoint", 2500, 1);
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 9)//Karting
	{
		GameTextForPlayer(playerid, "~r~Wait here for more Kart Racers", 4000, 3);
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 10) { CP[playerid] = 11; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2258.7874,-2402.9712,12.7035,8.0); }
	else if(CP[playerid] == 11) { CP[playerid] = 12; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2225.8755,-2461.3875,12.7190,8.0); }
	else if(CP[playerid] == 12) { CP[playerid] = 13; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2276.9983,-2662.8328,12.8580,8.0); }
	else if(CP[playerid] == 13) { CP[playerid] = 14; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2449.1399,-2663.0562,12.8138,8.0); }
	else if(CP[playerid] == 14) { CP[playerid] = 15; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2566.9814,-2504.5686,12.7692,8.0); }
	else if(CP[playerid] == 15) { CP[playerid] = 16; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2719.0520,-2503.5962,12.7706,8.0); }
	else if(CP[playerid] == 16) { CP[playerid] = 17; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2720.7881,-2405.6589,12.7441,8.0); }
	else if(CP[playerid] == 17) { CP[playerid] = 18; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2571.5195,-2401.1531,12.7528,8.0); }
	else if(CP[playerid] == 18) { CP[playerid] = 19; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2406.6995,-2423.1182,12.6641,8.0); }
	else if(CP[playerid] == 19) { CP[playerid] = 20; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2322.9194,-2341.5715,12.6664,8.0); }
	else if(CP[playerid] == 20)//End of Karting
	{
	    CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    GetPlayerName(playerid, name, sizeof(name));
	    if(FirstKartWinner == 999)
	    {
	        FirstKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s finished First in the Kart Race.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(SecondKartWinner == 999)
	    {
	        SecondKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s finished Second in the Kart Race.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(ThirdKartWinner == 999)
	    {
	        ThirdKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s finished Third in the Kart Race.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		                SendClientMessage(i, COLOR_WHITE, "** Karting Race Over **");
		                CP[i] = 0;
		                DisablePlayerCheckpoint(i);
		            }
				}
	        }
	    }
	}
	else if(MissionCheckpoint[playerid] > 0 && PlayMission[kToggle] == 1)//Missions + Checkpoint on toggle
	{
        	RingTone[playerid] = 20;
		    switch(MissionCheckpoint[playerid])
		    {
	        	case 1:
		        {
					format(string, sizeof(string), "%s", PlayMission[kGText1]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText4]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText5]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText6]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP2][0], PlayMission[kCP2][1], PlayMission[kCP2][2], 8);
					MissionCheckpoint[playerid] = 2;
		        }
		        case 2:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText2]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText7]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText8]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText9]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP3][0], PlayMission[kCP3][1], PlayMission[kCP3][2], 8);
					MissionCheckpoint[playerid] = 3;
		        }
		        case 3:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText3]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText10]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText11]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText12]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP4][0], PlayMission[kCP4][1], PlayMission[kCP4][2], 8);
					MissionCheckpoint[playerid] = 4;
		        }
		        case 4:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText4]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText13]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText14]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText15]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP5][0], PlayMission[kCP5][1], PlayMission[kCP5][2], 8);
					MissionCheckpoint[playerid] = 5;
		        }
		        case 5:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText5]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText16]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText17]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText18]);
					SendClientMessage(playerid, COLOR_YELLOW2, string);
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpoint(playerid, PlayMission[kCP6][0], PlayMission[kCP6][1], PlayMission[kCP6][2], 8);
					MissionCheckpoint[playerid] = 6;
		        }
		        case 6:
		        {
		            format(string, sizeof(string), "%s", PlayMission[kGText6]);
					GameTextForPlayer(playerid, string, 8000, 3);
					format(string, sizeof(string), "..:: Mission Passed : %s | Reward received: $%d ::..", PlayMission[kTitle], PlayMission[kReward]);
					SendClientMessage(playerid, COLOR_GREEN, string);
					DisablePlayerCheckpoint(playerid);
					SafeGivePlayerMoney(playerid, PlayMission[kReward]);
					PlayerInfo[playerid][pMissionNr] = PlayerOnMission[playerid];
					MissionCheckpoint[playerid] = 0;
					PlayerOnMission[playerid] = 0;
		        }
		    }
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
		    {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				GameTextForPlayer(playerid, "~w~Estas en casa", 5000, 1);
		    }
		}
	}
	if (BusrouteEast[playerid][0] != 0)
	{
		if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
		{
			new nextstop[64];
			BusrouteWest[playerid][0] = 0;
		    switch(BusrouteEast[playerid][0])
		    {
		        case 1:
		        {
					nextstop = "Airport";
		            SetPlayerCheckpoint(playerid, 1979.7369,-2171.4861,13.5363, 5.0);
					AdvertiseToPlayersAtBusStop(1979.7369,-2171.4861,13.5363, 0);
				}
				case 2:
				{
					nextstop = "Willowfield Factory";
				    SetPlayerCheckpoint(playerid, 2227.6953,-2201.9053,13.5164, 5.0);
					AdvertiseToPlayersAtBusStop(2227.6953,-2201.9053,13.5164, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 3:
				{
					nextstop = "Loco";
				    SetPlayerCheckpoint(playerid, 2719.9419,-2030.2104,13.5076, 5.0);
					AdvertiseToPlayersAtBusStop(2719.9419,-2030.2104,13.5076, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 4:
				{
					nextstop = "6 Street Plaza";
				    SetPlayerCheckpoint(playerid, 2470.8059,-1926.7136,13.5125, 5.0);
					AdvertiseToPlayersAtBusStop(2470.8059,-1926.7136,13.5125, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 5:
				{
					nextstop = "10 Green Bottles";
				    SetPlayerCheckpoint(playerid, 2348.0249,-1695.8247,13.5286, 5.0);
					AdvertiseToPlayersAtBusStop(2348.0249,-1695.8247,13.5286, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 6:
				{
					nextstop = "Pigpen";
				    SetPlayerCheckpoint(playerid, 2422.4092,-1251.1915,23.9176, 5.0);
					AdvertiseToPlayersAtBusStop(2422.4092,-1251.1915,23.9176, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 7:
				{
					nextstop = "Golden Palm";
				    SetPlayerCheckpoint(playerid, 2717.7463,-1218.8141,64.9276, 5.0);
					AdvertiseToPlayersAtBusStop(2717.7463,-1218.8141,64.9276, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 8:
				{
					nextstop = "Jefferson Motel";
				    SetPlayerCheckpoint(playerid, 2173.1165,-1114.3069,25.4259, 5.0);
					AdvertiseToPlayersAtBusStop(2173.1165,-1114.3069,25.4259, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 9:
				{
					nextstop = "Glen Park";
				    SetPlayerCheckpoint(playerid, 2028.4354,-1259.1379,23.9287, 5.0);
					AdvertiseToPlayersAtBusStop(2028.4354,-1259.1379,23.9287, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 10:
				{
					nextstop = "Bus Station";
				    SetPlayerCheckpoint(playerid, 1203.5101,-1833.5771,13.4946, 5.0);
					AdvertiseToPlayersAtBusStop(1203.5101,-1833.5771,13.4946, 0);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 11:
				{
					nextstop = "end";
					TogglePlayerControllable(playerid, 0);
	                SendClientMessage(playerid, COLOR_YELLOW, "Linea completada, usa /ruta1 o /ruta2 para hacer una nueva ruta.");
					SendClientMessage(playerid, COLOR_YELLOW, "Usa /salir para salir del bus.");
				    DisablePlayerCheckpoint(playerid);
				}
			}
			BusrouteEast[playerid][0]++;
			if (strcmp(nextstop, "end", true) != 0)
			{
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~r~$10 Bonus~n~~n~~g~Siguiente parada: %s", nextstop);
				format(string2, sizeof(string2), "~n~~n~~n~~n~~n~~n~~n~~g~Siguiente parada: %s", nextstop);
			}
			else
			{
				string = "~g~Fin de ruta~n~~n~~r~$20 bonus completado~n~~n~~w~/ruta1 para continuar con tu ruta";
				string2 = "~n~~g~Final de ruta~n~~n~~w~Porfavor deje el autobus o espere a la siguiente ruta";
				//BusrouteEast[playerid][0] = 0;
				SafeGivePlayerMoney(playerid, 20);
			// 	EconomyInfo[eArcas] += 1000;
			}
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			for (new i=0; i<=MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i) &&  GetPlayerVehicleID(i) == BusrouteEast[playerid][1])
				{
					if (BusrouteEast[i][0] != 0) GameTextForPlayer(i, string, 10000, 3);
					else GameTextForPlayer(i, string2, 10000, 3);
				}
			}
			SafeGivePlayerMoney(playerid, 10);
			return 1;
		}
	}
	else if (BusrouteWest[playerid][0] != 0)
	{
		if (IsPlayerInAnyVehicle(playerid))
		{
			new nextstop[64];
			BusrouteEast[playerid][0] = 0;
		    switch(BusrouteWest[playerid][0])
		    {
		        case 1:
		        {
					nextstop = "Alhambra";
		            SetPlayerCheckpoint(playerid, 1826.8738,-1634.5306,13.5588, 5.0);
					AdvertiseToPlayersAtBusStop(1826.8738,-1634.5306,13.5588, 1);
				}
				case 2:
				{
					nextstop = "Glen Park";
				    SetPlayerCheckpoint(playerid, 1856.7260,-1211.7167,20.3898, 5.0);
					AdvertiseToPlayersAtBusStop(1856.7260,-1211.7167,20.3898, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 3:
				{
					nextstop = "Vinewood Burger";
					PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
				    SetPlayerCheckpoint(playerid, 1208.0479,-929.9481,42.9049, 5.0);
					AdvertiseToPlayersAtBusStop(1208.0479,-929.9481,42.9049, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 4:
				{
					nextstop = "Vice Theater";
				    SetPlayerCheckpoint(playerid, 1119.0096,-1137.8805,23.7597, 5.0);
					AdvertiseToPlayersAtBusStop(1119.0096,-1137.8805,23.7597, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 5:
				{
					nextstop = "Bank";
					SetPlayerCheckpoint(playerid, 1443.0234,-1028.7131,23.8281, 5.0);
					AdvertiseToPlayersAtBusStop(1443.0234,-1028.7131,23.8281, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 6:
				{
					nextstop = "Rodeo";
				    SetPlayerCheckpoint(playerid, 526.6218,-1480.9631,14.5567, 5.0);
					AdvertiseToPlayersAtBusStop(526.6218,-1480.9631,14.5567, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 7:
				{
					nextstop = "Sana Maria Beach";
				    SetPlayerCheckpoint(playerid, 443.9078,-1724.8008,10.0896, 5.0);
					AdvertiseToPlayersAtBusStop(443.9078,-1724.8008,10.0896, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 8:
				{
					nextstop = "Verona Beach";
				    SetPlayerCheckpoint(playerid, 836.2728,-1788.8121,13.9260, 5.0);
					AdvertiseToPlayersAtBusStop(836.2728,-1788.8121,13.9260, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 9:
				{
					nextstop = "Pershing Square";
				    SetPlayerCheckpoint(playerid, 1508.7136,-1735.5184,13.4921, 5.0);
					AdvertiseToPlayersAtBusStop(1508.7136,-1735.5184,13.4921, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 10:
				{
					nextstop = "Bus Station";
				    SetPlayerCheckpoint(playerid, 1203.5101,-1833.5771,13.4946, 5.0);
					AdvertiseToPlayersAtBusStop(1203.5101,-1833.5771,13.4946, 1);
					SetTimerEx("busroutestoptimer", 10000, false, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Tienes que esperar 10 segundos.");
				}
				case 11:
				{
					nextstop = "end";
					TogglePlayerControllable(playerid, 0);
	                SendClientMessage(playerid, COLOR_YELLOW, "Ruta completada usa /ruta1 o /ruta2 para comenzar de nuevo.");
					SendClientMessage(playerid, COLOR_YELLOW, "Usa /salir para salir del bus.");
				    DisablePlayerCheckpoint(playerid);
	          	}
			}
			BusrouteWest[playerid][0]++;
			if (strcmp(nextstop, "end", true) != 0)
			{
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~r~$10 Bonus~n~~n~~g~Siguiente parada: %s", nextstop);
				format(string2, sizeof(string2), "~n~~n~~n~~n~~n~~n~~n~~g~Siguiente parada: %s", nextstop);
			}
			else
			{
				string = "~g~Fin de ruta~n~~n~~r~$20 bonus completado~n~~n~~w~/ruta2 para continuar";
				string2 = "~n~~g~Fin de ruta~n~~n~~w~Porfavor deje el autobus";
				//BusrouteWest[playerid][0] = 0;
				SafeGivePlayerMoney(playerid, 20);
			// 	EconomyInfo[eArcas] += 1000;
			}
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			for (new i=0; i<=MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i) &&  GetPlayerVehicleID(i) == BusrouteWest[playerid][1])
				{
					if (BusrouteWest[i][0] != 0) GameTextForPlayer(i, string, 10000, 3);
					else GameTextForPlayer(i, string2, 10000, 3);
				}
			}
			SafeGivePlayerMoney(playerid, 10);
			return 1;
		}
	}
	if (BusShowLocationC[playerid] == 1)
	{
		DisablePlayerCheckpoint(playerid);
		BusShowLocationC[playerid] = 0;
		return 1;
	}
	if(FarmerVar[playerid] == 1)
	{
	    if (IsPlayerInAnyVehicle(playerid))
		{
		    new carid = GetPlayerVehicleID(playerid);
		    new cash = 50;
		    if(IsAHarvest(carid))
		    {
		        switch(FarmerPickup[playerid][0])
		        {
		            case 0:
		        	{
		            	SetPlayerCheckpoint(playerid, -205.9348,-1332.2749,10.4056, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 1:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 2:
		        	{
		        	    if(JustStarted[playerid] != 1)
		        	    {
		        	        SafeGivePlayerMoney(playerid,cash);
		            		format(string, sizeof(string), "~w~Ganas por cosecha ~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		            	SetPlayerCheckpoint(playerid, -548.5396,-1329.0653,19.6210, 5.0);
					}
					case 3:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 4:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        SafeGivePlayerMoney(playerid,cash);
		            		format(string, sizeof(string), "~w~Ganas por cosecha ~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -370.9486,-1281.1089,29.8698, 5.0);
					}
					case 5:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 6:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        SafeGivePlayerMoney(playerid,cash);
		            		format(string, sizeof(string), "~w~Ganas por cosecha ~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -258.3272,-1387.9211,10.1292, 5.0);
					}
					case 7:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 8:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        SafeGivePlayerMoney(playerid,cash);
		            		format(string, sizeof(string), "~w~Ganas por cosecha ~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
		        	        JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -288.8517,-1385.0117,9.8957, 5.0);
					}
					case 9:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 10:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        SafeGivePlayerMoney(playerid,cash);
		            		format(string, sizeof(string), "~w~Ganas por cosecha ~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -283.1325,-1338.2822,7.4280, 5.0);
					}
					case 11:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 12:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        SafeGivePlayerMoney(playerid,cash);
		            		format(string, sizeof(string), "~w~Ganas por cosecha ~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -224.5992,-1509.1902,7.4473, 5.0);
					}
					case 13:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 14:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        SafeGivePlayerMoney(playerid,cash);
		            		format(string, sizeof(string), "~w~Ganas por cosecha ~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -247.2859,-1528.8744,6.5904, 5.0);
					}
					case 15:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 16:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        SafeGivePlayerMoney(playerid,cash);
		            		format(string, sizeof(string), "~w~Ganas por cosecha ~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -283.9610,-1549.7180,6.4975, 5.0);
					}
					case 17:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 18:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        SafeGivePlayerMoney(playerid,cash);
		            		format(string, sizeof(string), "~w~Ganas por cosecha ~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -431.6107,-1334.0961,28.6561, 5.0);
					}
					case 19:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 20:
		        	{
		            	if(JustStarted[playerid] != 1)
		        	    {
		        	        SafeGivePlayerMoney(playerid,cash);
		            		format(string, sizeof(string), "~w~Ganas por cosecha ~n~~g~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		        	    }
		        	    else
		        	    {
                   			JustStarted[playerid] = 0;
		        	    }
		        	    SetPlayerCheckpoint(playerid, -476.4104,-1391.6769,20.4733, 5.0);
					}
					case 21:
		        	{
		            	SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0);
		            	if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
					}
					case 22:
		        	{
		            	/*DisablePlayerCheckpoint(playerid);
		            	TogglePlayerControllable(playerid, 0);
		            	GameTextForPlayer(playerid, "~w~Use /exit to leave a harvest~n~~r~Bonus 100$ in cash", 5000, 1);*/
		            	FarmerPickup[playerid][0] = 0;
						PayDaySecure[playerid] = 0;
					 	SetPlayerCheckpoint(playerid, -205.9348,-1332.2749,10.4056, 5.0);
		            	SafeGivePlayerMoney(playerid,cash);
	            		format(string, sizeof(string), "~w~Ganas por cosecha ~n~~g~$%d",cash);
	            		GameTextForPlayer(playerid, string, 5000, 1);
					}
		        }
		       //  EconomyInfo[eArcas] += 500;
		        FarmerPickup[playerid][0]++;
		        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		    }
		}
		return 1;
	}
	if(MatsHolding[playerid] == 100)
	{
		if(PlayerInfo[playerid][pJob] == 22)
		{
		    DisablePlayerCheckpoint(playerid);
		    PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			SafeGivePlayerMoney(playerid, 1000);
			SendClientMessage(playerid, COLOR_WHITE, "Has vendido 100 materiales al mercado negro.");
			MatsHolding[playerid] = 0;
			matssys[MatsAmmount] += 100;
			GameTextForPlayer(playerid, "~w~Materiales importados", 5000, 1);
			SaveMatsSystem();
		}
	    return 1;
	}
	if(IsPuttingMaterials[playerid] == 1)
	{
	    if(PlayerInfo[playerid][pJob] == 23)
	    {
	        if(PlayerInfo[playerid][pMats] < CreatingGunPrice[playerid])
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Not enough materials ");
	            return 1;
	        }
	        DisablePlayerCheckpoint(playerid);
	        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	        GameTextForPlayer(playerid, "~w~Materials delivered successfuly", 5000, 1);
	        PlayerInfo[playerid][pMats] -= CreatingGunPrice[playerid];
	        CreatingGunPrice[playerid] = 0;
	        IsPuttingMaterials[playerid] = 0;
			new randomize = random(3)+1;
	        if(randomize == 1) ProxDetector(40.0, playerid, "Factory speaker: Take da gat outside homie !",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        else if(randomize == 2) ProxDetector(40.0, playerid, "Factory speaker: Chea' ya blasta is outside !",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        else ProxDetector(40.0, playerid, "Factory speaker: Damn nice ass gun i made. It's waiting for ya outside !",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        IsTakingGun[playerid] = 1;
	        SetPlayerCheckpoint(playerid, 2163.3430,-2271.9934,13.3293, 1.0);
	        return 1;
	    }
	    return 1;
	}
	if(IsTakingGun[playerid] == 1)
	{
	    if(PlayerInfo[playerid][pJob] == 23)
	    {
	        if(CreatingGun[playerid] == 0 || CreatingGunAmmo[playerid] == 0)
	        {
	            return 1;
	        }
	        DisablePlayerCheckpoint(playerid);
	        new gunname[128];
	        GetWeaponName(CreatingGun[playerid],gunname,sizeof(gunname));
	        format(string, sizeof(string), "   You took %s from the ground.", gunname);
	        SendClientMessage(playerid, COLOR_GREY, string);
	        SafeGivePlayerWeapon(playerid, CreatingGun[playerid], CreatingGunAmmo[playerid]);
	        CreatingGun[playerid] = 0;
	        CreatingGunAmmo[playerid] = 0;
	        IsTakingGun[playerid] = 0;
	        return 1;
	    }
	    return 1;
	}
	if(DrugFarmerVar[playerid] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    new carid = GetPlayerVehicleID(playerid);
		    new cash=250;
		    if(IsADrugHarvest(carid))
		    {
		        switch(DrugFarmerPickup[playerid][0])
		        {
		            case 0:
		            {
                        SetPlayerCheckpoint(playerid, -181.4144,167.2931,7.8413, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 1:
		            {
                        SetPlayerCheckpoint(playerid, -184.1222,-66.2325,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 2:
		            {
                        SetPlayerCheckpoint(playerid, -39.6705,-102.2681,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 3:
		            {
                        SetPlayerCheckpoint(playerid, 35.3907,-74.2866,0.9706, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 4:
		            {
                        SetPlayerCheckpoint(playerid, 58.6579,-3.7121,1.6909, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 5:
		            {
                        SetPlayerCheckpoint(playerid, 19.7974,43.5431,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 6:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 7:
		            {//drop-off
		                if(JustStarted[playerid] != 1)
		                {
		                	SafeGivePlayerMoney(playerid,cash);
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~ganas por cosechas~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, 30.2059,20.1222,3.1172, 5.0);
		            }
		            case 8:
		            {
                        SetPlayerCheckpoint(playerid, -21.3052,-60.9220,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 9:
		            {
                        SetPlayerCheckpoint(playerid, -191.6069,-70.8331,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 10:
		            {
                        SetPlayerCheckpoint(playerid, -253.8518,-3.7909,2.5041, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 11:
		            {
                        SetPlayerCheckpoint(playerid, -178.0497,128.4783,3.8665, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 12:
		            {
                        SetPlayerCheckpoint(playerid, -110.8844,143.1536,3.1144, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 13:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 14:
		            {//drop-off
		                if(JustStarted[playerid] != 1)
		                {
		                	SafeGivePlayerMoney(playerid,cash);
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~ganas por cosechas~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, -164.3909,28.9677,3.1172, 5.0);
		            }
		            case 15:
		            {
                        SetPlayerCheckpoint(playerid, -213.1695,-26.4404,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 16:
		            {
                        SetPlayerCheckpoint(playerid, -11.7208,-10.7312,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 17:
		            {
                        SetPlayerCheckpoint(playerid, 11.4609,-90.3436,2.0164, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 18:
		            {
                        SetPlayerCheckpoint(playerid, 63.1697,-22.5562,1.2136, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 19:
		            {
                        SetPlayerCheckpoint(playerid, 23.2130,30.9418,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 20:
		            {
                        SetPlayerCheckpoint(playerid, -134.6788,151.1453,3.9566, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 21:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 22:
		            {//drop-off
		                if(JustStarted[playerid] != 1)
		                {
		                	SafeGivePlayerMoney(playerid,cash);
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~ganas por cosechas~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, 45.6651,35.6647,2.1518, 5.0);
		            }
		            case 23:
		            {
                        SetPlayerCheckpoint(playerid, 65.9438,-13.9811,1.3468, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 24:
		            {
                        SetPlayerCheckpoint(playerid, 17.1980,-86.7067,1.7758, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 25:
		            {
                        SetPlayerCheckpoint(playerid, -7.0889,-19.7445,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 26:
		            {
                        SetPlayerCheckpoint(playerid, -185.1862,155.1479,6.5185, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 27:
		            {
                        SetPlayerCheckpoint(playerid, -184.7949,-57.7402,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 28:
		            {
                        SetPlayerCheckpoint(playerid, -263.0331,-45.5427,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 29:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 30:
		            {//drop-off
		                if(JustStarted[playerid] != 1)
		                {
		                	SafeGivePlayerMoney(playerid,cash);
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	drugsys[DrugAmmount]++;
		                	format(string, sizeof(string), "~w~ganas por cosechas~n~~b~$%d",cash);
		            		GameTextForPlayer(playerid, string, 5000, 1);
		            		SaveDrugSystem();
						}
						else
						{
						    JustStarted[playerid] = 0;
						}
                        SetPlayerCheckpoint(playerid, -255.7015,-3.0833,2.4276, 5.0);
		            }
		            case 31:
		            {
                        SetPlayerCheckpoint(playerid, -171.7835,-59.3110,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 32:
		            {
                        SetPlayerCheckpoint(playerid, -153.4347,143.9473,4.1833, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 33:
		            {
                        SetPlayerCheckpoint(playerid, 49.4775,24.9682,1.8078, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 34:
		            {
                        SetPlayerCheckpoint(playerid, -9.5707,-36.4109,3.1172, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 35:
		            {
                        SetPlayerCheckpoint(playerid, 35.6805,-95.6367,0.6169, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 36:
		            {
                        SetPlayerCheckpoint(playerid, -34.1614,73.9170,3.1096, 5.0);
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		            case 37:
		            {//last drop-off
             	        SafeGivePlayerMoney(playerid,cash);
             	        drugsys[DrugAmmount]++;
             	        drugsys[DrugAmmount]++;
             			drugsys[DrugAmmount]++;
             			drugsys[DrugAmmount]++;
             			drugsys[DrugAmmount]++;
             			drugsys[DrugAmmount]++;
             			drugsys[DrugAmmount]++;
             			drugsys[DrugAmmount]++;
             	        format(string, sizeof(string), "~w~ganas por cosechas~n~~b~$%d",cash);
            		    GameTextForPlayer(playerid, string, 5000, 1);
            		    SaveDrugSystem();
                        //DisablePlayerCheckpoint(playerid);
						DrugFarmerPickup[playerid][0] = 0;
						PayDaySecure[playerid] = 0;
					 	SetPlayerCheckpoint(playerid, -181.4144,167.2931,7.8413, 5.0);
					 	WantedPoints[playerid]+=2;
					 	SetPlayerCriminal(playerid,255, "Recolectar drogas");
                        /*TogglePlayerControllable(playerid, 0);
                        GameTextForPlayer(playerid, "~w~sal usando /salir~n~~w~Usa otra maquina~n~para seguir trabajando", 5000, 1);*/
                        if(JustStarted[playerid] != 0)
                        {
                        	JustStarted[playerid] = 0;
					 	}
		            }
		        }
		      //   EconomyInfo[eArcas] += 500;
		        DrugFarmerPickup[playerid][0]++;
		        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		    }
		}
		return 1;
	}
	if(SmugglerWork[playerid] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new carid = GetPlayerVehicleID(playerid);
	        if(IsASmuggleCar(carid))
	        {
	            switch (SmugglerWork[playerid])
	            {
	                case 1:
	                {
	                    TogglePlayerControllable(playerid, 0);
	            		SendClientMessage(playerid, COLOR_WHITE, "Drogas entregadas, pon /salir.");
	            		PlayerInfo[playerid][pDrugs] += SmuggledDrugs[playerid];
	            		format(string, sizeof(string), "~b~%d ~w~Gramos importados",SmuggledDrugs[playerid]);
           				GameTextForPlayer(playerid, string, 5000, 1);
	            		DisablePlayerCheckpoint(playerid);
	            		SmuggledDrugs[playerid] = 0;
	            		SmugglerWork[playerid] = 0;
	            		OnPlayerUpdate(playerid);
	                }
	            }
	            
	        }
	    }
	    return 1;
	}
	if(PlayerIsSweeping[playerid] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new carid = GetPlayerVehicleID(playerid);
	        if(IsASweeper(carid))
	        {
	            new cashes=100;
	            PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	            format(string, sizeof(string), "~g~%d$ ~w~ ganados por barrer calle",cashes);
	            GameTextForPlayer(playerid, string, 5000, 1);
	            DisablePlayerCheckpoint(playerid);
	            SafeGivePlayerMoney(playerid, cashes)
	            new randomss;
		        randomss = random(sizeof(gSweeperPoints));
		        SetPlayerCheckpoint(playerid, gSweeperPoints[randomss][0], gSweeperPoints[randomss][1], gSweeperPoints[randomss][2], 5.0);
	        }
	    }
	    return 1;
	}
	if(PlayerIsBasuras[playerid] == 1) //basurero
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new carid = GetPlayerVehicleID(playerid);
	        if(IsABasura(carid))
	        {
	            new cashes=150;
	            PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	            format(string, sizeof(string), "~g~%d$ ~w~ ganados recoger la basura de la calle",cashes);
	            GameTextForPlayer(playerid, string, 5000, 1);
	            DisablePlayerCheckpoint(playerid);
	            SafeGivePlayerMoney(playerid, cashes)
	            new randomss;
		        randomss = random(sizeof(gBasuraPoints));
		        SetPlayerCheckpoint(playerid, gBasuraPoints[randomss][0], gBasuraPoints[randomss][1], gBasuraPoints[randomss][2], 5.0);
	        }
	    }
	    return 1;
	}
	if (InAFoodPlace[playerid] != 0)
	{
		TogglePlayerControllable(playerid, 0);
		switch (InAFoodPlace[playerid])
		{
			case 1: // chicken
			{
				ShowMenuForPlayer(chickenmenu, playerid);
				SetPlayerPos(playerid,368.9714,-6.2486,1001.8516);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 2: // burger
			{
				ShowMenuForPlayer(burgermenu, playerid);
				SetPlayerPos(playerid,376.8571,-67.6620,1001.5151);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 3: // pizza
			{
				ShowMenuForPlayer(pizzamenu, playerid);
				SetPlayerPos(playerid,375.6895,-118.9683,1001.4995);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 4: // donut
			{
				ShowMenuForPlayer(donutshop, playerid);
				SetPlayerPos(playerid,379.0611,-186.6032,1000.6328);
				SetPlayerFacingAngle(playerid, 280);
			}
		}
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	DisablePlayerCheckpoint(playerid);
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
    new i = Baller;
    if(ShootingBall == 2)
    {
		BallDown2(i);
		return 1;
    }
    else if(ShootingBall == 3)
    {
		BallDown3(i);
		return 1;
    }
    else if(ShootingBall == 4)
    {
		BallDown4(i);
		return 1;
    }
    else if(ShootingBall == 5)
    {
		BallDown5(i);
		return 1;
    }
    else if(ShootingBall == 6)
    {
        ApplyAnimation(i,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
		HavingBall[i] = 1;
		Anim[i] = 0;
    }
    if(BallBounce == 1)
    {
        new Float:x, Float:y, Float:z;
	    GetObjectPos(Ball, x, y, z);
	    MoveObject(Ball, x, y, z+1.2, 4);
	    BallBounce = 2;
	}
	else if(BallBounce == 2)
    {
        new Float:x, Float:y, Float:z;
	    GetObjectPos(Ball, x, y, z);
	    MoveObject(Ball, x, y, z-1.2, 4);
	    BallBounce = 3;
	}
	else if(BallBounce == 3)
    {
        new Float:x, Float:y, Float:z;
	    GetObjectPos(Ball, x, y, z);
	    MoveObject(Ball, x, y, z+0.8, 3);
	    BallBounce = 4;
	}
	else if(BallBounce == 4)
    {
        new Float:x, Float:y, Float:z;
	    GetObjectPos(Ball, x, y, z);
	    MoveObject(Ball, x, y, z-0.8, 3);
	    BallBounce = 5;
	}
	else if(BallBounce == 5)
    {
        new Float:x, Float:y, Float:z;
	    GetObjectPos(Ball, x, y, z);
	    MoveObject(Ball, x, y, z+0.5, 2);
	    BallBounce = 6;
	}
	else if(BallBounce == 6)
    {
        new Float:x, Float:y, Float:z;
	    GetObjectPos(Ball, x, y, z);
	    MoveObject(Ball, x, y, z-0.5, 2);
	    BallBounce = 7;
	}
	else if(BallBounce == 7)
    {
        new Float:x, Float:y, Float:z;
	    GetObjectPos(Ball, x, y, z);
	    MoveObject(Ball, x, y, z+0.2, 1);
	    BallBounce = 8;
	}
	else if(BallBounce == 8)
    {
        new Float:x, Float:y, Float:z;
	    GetObjectPos(Ball, x, y, z);
	    MoveObject(Ball, x, y, z-0.2, 1);
	    BallBounce = 0;
	}
    if(!HavingBall[i]) return 1;
	new Keys, ud, lr;
	GetPlayerKeys(i, Keys, ud, lr);
    if(Anim[i])
    {
        switch(BallStatus)
	    {
			case 0:
			{
				BallStatus = 1;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
		 	    GetXYInFrontOfPlayer(i, x2, y2, 0.4);
				MoveObject(Ball, x2, y2, z+0.1, 5.5);
			}
			case 1:
			{
        		BallStatus = 0;
        		new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 0.4);
				MoveObject(Ball, x2, y2, z-0.8, 5.5);
			}
		}
		return 1;
    }
    if(Keys & KEY_SPRINT)
	{
        ApplyAnimation(i,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
        switch(BallStatus)
		{
			case 0:
			{
				BallStatus = 1;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
		        GetXYInFrontOfPlayer(i, x2, y2, 1.5);
				MoveObject(Ball, x2, y2, z+0.1, 8);
			}
			case 1:
			{
        		BallStatus = 0;
        		new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 1.5);
				MoveObject(Ball, x2, y2, z-0.8, 8);
			}
		}
		return 1;
    }
    else
    {
        ApplyAnimation(i,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
    }
	switch(BallStatus)
	{
		case 0:
		{
			BallStatus = 1;
			new Float:x, Float:y, Float:z;
			GetPlayerPos(i, x, y, z);
			StopObject(Ball);
			new Float:x2, Float:y2;
		    GetXYInFrontOfPlayer(i, x2, y2, 1.2);
			MoveObject(Ball, x2, y2, z+0.1, 5);
		}
		case 1:
		{
        	BallStatus = 0;
        	new Float:x, Float:y, Float:z;
			GetPlayerPos(i, x, y, z);
			StopObject(Ball);
			new Float:x2, Float:y2;
			GetXYInFrontOfPlayer(i, x2, y2, 1.2);
			MoveObject(Ball, x2, y2, z-0.8, 5);
		}
	}
    return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(pickupid == pu[0]) { // pickup at los santos airport

		if(istraveling) return SendClientMessage(playerid,COLOR_YELLOW,"Vuelo en marcha, espera al siguiente vuelo");
        istraveling = playerid + 1;
        chkpoint[playerid] = 98;
		TogglePlayerControllable(playerid,false);
		ShowMenuForPlayer(shuttlemenu,playerid);
	    return 1;
	}
	else if(pickupid == pu[1]) { // pickup at las venturas airport

		if(istraveling) return SendClientMessage(playerid,COLOR_YELLOW,"Vuelo en marcha, espera al siguiente vuelo");
		istraveling = playerid + 1;
		chkpoint[playerid] = 97;
		TogglePlayerControllable(playerid,false);
		ShowMenuForPlayer(shuttlemenu,playerid);
	    return 1;
	}
	else if(pickupid == pu[2]) { // pickup at san fiero airport

		if(istraveling) return SendClientMessage(playerid,COLOR_YELLOW,"Vuelo en marcha, espera al siguiente vuelo");
		istraveling = playerid + 1;
		chkpoint[playerid] = 99;
		TogglePlayerControllable(playerid,false);
		ShowMenuForPlayer(shuttlemenu,playerid);
	    return 1;
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    new Menu:CurrentMenu = GetPlayerMenu(playerid); // what menu does the player look at
	if(CurrentMenu == shuttlemenu) // if the player look at the shuttle menu ...
	{
        if(GetPlayerMoney(playerid) < 999 && PlayerInfo[playerid][pbono4] == 0)
        {
         SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero ni Pasaje para cojer el avion !");
         OnPlayerExitedMenu(playerid);
         HideMenuForPlayer(shuttlemenu, playerid);
         return 1; //OnPlayerExitedMenu
        }
  		switch(row)
  		{
			case 0: { // goto LAS VENTURAS(98) from LAS VENTURA
				if(chkpoint[playerid] == 98) {
                    GameTextForPlayer(playerid,"~w~Tu estas aqui!!",8000,6);
                    ShowMenuForPlayer(shuttlemenu,playerid);
				}
				else if(chkpoint[playerid] == 99) { //goto LAS VENTURAS(98) from FROM SAN FIERRO
                	planemode = 3;
					planedest = 98;
					planedep = 99;
					travel(playerid);
					SendClientMessage(playerid,COLOR_TXT,"Acabas de despegar del Aeropuerto de San Fierro");
                    if(PlayerInfo[playerid][pbono4] == 0)
                    {
                    SafeGivePlayerMoney(playerid, - 1000);
                    }
                    if(GetPlayerMoney(playerid) < 999)
                    {
                    PlayerInfo[playerid][pbono4] -= 1;
                    }
				}
				else if(chkpoint[playerid] == 97) { //goto LAS VENTURAS(98) from FROM LOS SANTOS
                	planemode = 5;
					planedest = 98;
					planedep = 97;
					SendClientMessage(playerid,COLOR_TXT,"Acabas de despegar del Aeropuerto de Los Santos");
                    if(PlayerInfo[playerid][pbono4] == 0)
                    {
                    SafeGivePlayerMoney(playerid, - 1000);
                    }
                    if(GetPlayerMoney(playerid) < 999)
                    {
                    PlayerInfo[playerid][pbono4] -= 1;
                    }
					travel(playerid);
				}
			}
			case 1: { // go to SAN FIERO(99) from SAN FIERO
				if(chkpoint[playerid] == 99) {
                    GameTextForPlayer(playerid,"~w~Tu estas aqui!!!",8000,6);
                    ShowMenuForPlayer(shuttlemenu,playerid);
				}
				else if(chkpoint[playerid] == 98) { //goto SAN FIERO(99) from FROM LAS VENTURAS
                	planemode = 1;
					planedest = 99;
					planedep = 98;
					SendClientMessage(playerid,COLOR_TXT,"Acabas de despegar del Aeropuerto de Las Venturas");
                    if(PlayerInfo[playerid][pbono4] == 0)
                    {
                    SafeGivePlayerMoney(playerid, - 1000);
                    }
                    if(GetPlayerMoney(playerid) < 999)
                    {
                    PlayerInfo[playerid][pbono4] -= 1;
                    }
					travel(playerid);
				}
				else if(chkpoint[playerid] == 97) { //goto SAN FIERO(99) from FROM LOS SANTOS
                	planemode = 5;
					planedest = 99;
					planedep = 97;
					SendClientMessage(playerid,COLOR_TXT,"Acabas de despegar del Aeropuerto de Los Santos");
                    if(PlayerInfo[playerid][pbono4] == 0)
                    {
                    SafeGivePlayerMoney(playerid, - 1000);
                    }
                    if(GetPlayerMoney(playerid) < 999)
                    {
                    PlayerInfo[playerid][pbono4] -= 1;
                    }
					travel(playerid);
				}
			}
			case 2: { // goto LOS SANTOS(97) from LOS SANTOS
				if(chkpoint[playerid] == 97) {
                    GameTextForPlayer(playerid,"~w~Tu estas aqui!!!",8000,6);
                    ShowMenuForPlayer(shuttlemenu,playerid);
				}
				else if(chkpoint[playerid] == 98) { //goto LOS SANTOS(97) from FROM LAS VENTURAS
                	planemode = 1;
					planedest = 97;
					planedep = 98;
					SendClientMessage(playerid,COLOR_TXT,"Acabas de despegar del Aeropuerto de Las Venturas");
                    if(PlayerInfo[playerid][pbono4] == 0)
                    {
                    SafeGivePlayerMoney(playerid, - 1000);
                    }
                    if(GetPlayerMoney(playerid) < 999)
                    {
                    PlayerInfo[playerid][pbono4] -= 1;
                    }
					travel(playerid);
				}
				else if(chkpoint[playerid] == 99) { //goto LOS SANTOS(97) from FROM SAN FIERRO
                	planemode = 3;
					planedest = 97;
					planedep = 99;
					SendClientMessage(playerid,COLOR_TXT,"Acabas de despegar del Aeropuerto de San Fierro");
                    if(PlayerInfo[playerid][pbono4] == 0)
                    {
                    SafeGivePlayerMoney(playerid, - 1000);
                    }
                    if(GetPlayerMoney(playerid) < 999)
                    {
                    PlayerInfo[playerid][pbono4] -= 1;
                    }
					travel(playerid);
				}
			}
	 	    case 3:
	        {
               OnPlayerExitedMenu(playerid);
               HideMenuForPlayer(shuttlemenu, playerid);
       		   return 1;
		 	}
  		}
	}
    new Menu:Current = GetPlayerMenu(playerid);/*
    new Float:PlayerHealth;
    new Health = GetPlayerHealth(playerid, PlayerHealth);
    if(Current == BurgerShot)
	{
	 	switch(row)
	 	{
	  		case 0:
	  		{
	  			GivePlayerMoney(playerid, -3);
	  			if(Health <= 74.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+25);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Burger Shot: Thank you for buying the Baby Burger, have a nice meal and good afternoon!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 1:
	  		{
	  			GivePlayerMoney(playerid, -6);
	  			if(Health <= 49.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+50);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Burger Shot: Thank you for buying the Double Cheese, have a Cheesy meal and good afternoon!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 2:
	  		{
	  			GivePlayerMoney(playerid, -9);
	  			SetPlayerHealth(playerid, 100);
	  			SendClientMessage(playerid, 0xFFC801C8, "Burger Shot: Thank you for buying the Tripple Whopper, have a nice feast and good afternoon!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 3:
			{
			    if(PlayerTied[playerid] != 1 || PlayerCuffed[playerid] != 1)
			    {
			        TogglePlayerControllable(playerid, 1);
			    	
				}
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
			    return 1;
			}
		}
	}
	if(Current == CluckinBell)
	{
	 	switch(row)
	 	{
	  		case 0:
	  		{
	  			GivePlayerMoney(playerid, -3);
	  			if(Health <= 74.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+25);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Cluckin' Bell: Thank you for your interest in our food, good afternoon!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 1:
	  		{
	  			GivePlayerMoney(playerid, -6);
	  			if(Health <= 49.9)
	  			{
	  				SetPlayerHealth(playerid, PlayerHealth+50);
				}
				else
				{
				    SetPlayerHealth(playerid, 100.0);
				}
	  			SendClientMessage(playerid, 0xFFC801C8, "Cluckin' Bell: we thank you and hope you enjoy your Chicken Wing, have a good day!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 2:
	  		{
	  			GivePlayerMoney(playerid, -9);
	  			SetPlayerHealth(playerid, 100);
	  			SendClientMessage(playerid, 0xFFC801C8, "Cluckin' Bell: We hope you eat it all, have a nice day!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				TogglePlayerControllable(playerid, 1);
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
				return 1;
			}
			case 3:
			{
			    if(PlayerTied[playerid] != 1 || PlayerCuffed[playerid] != 1)
			    {
			        TogglePlayerControllable(playerid, 1);

				}
				SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
			    return 1;
			}
		}
	}
   	if(Current == burgermenu || Current == chickenmenu || Current == pizzamenu || Current == donutshop)
	{
		TogglePlayerControllable(playerid, 1);
		if (row != 10) // 10 = Leave
		{
			if (GetPlayerMoney(playerid) <= 0)
			{
				GameTextForPlayer(playerid, "~r~No tienes dinero", 5000, 1);
				return 1;
			}
			new actstring[128];
			new sendername[64];
			new Float:health;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerHealth(playerid, health);
			if (row == 7 || row == 8) // Drink
			{
				format(actstring, sizeof(actstring), "* %s bebe.", sendername);
				SafeGivePlayerMoney(playerid, -1);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			else // Meal
			{
				switch (row)
				{
					case 1:
					{
					    if(Current == donutshop) format(actstring, sizeof(actstring), "* %s come.", sendername);
						else format(actstring, sizeof(actstring), "* %s come.", sendername);
						SafeGivePlayerMoney(playerid, -2);
						SetPlayerHealth(playerid, health + 20);
					}
					case 2:
					{
						if (Current == chickenmenu) format(actstring, sizeof(actstring), "* %s come.", sendername);
						else if (Current == pizzamenu) format(actstring, sizeof(actstring), "* %s come.", sendername);
						else if (Current == donutshop) format(actstring, sizeof(actstring), "* %s come.", sendername);
						else format(actstring, sizeof(actstring), "* %s come,", sendername);
						SafeGivePlayerMoney(playerid, -4);
						SetPlayerHealth(playerid, health + 50);
					}
					case 3:
					{
						if (Current == pizzamenu) format(actstring, sizeof(actstring), "* %s come", sendername);
						else if (Current == donutshop) format(actstring, sizeof(actstring), "* %s come", sendername);
						else format(actstring, sizeof(actstring), "* %s come", sendername);
						SafeGivePlayerMoney(playerid, -5);
						SetPlayerHealth(playerid, health + 80);
					}
					case 4:
					{
					    if (Current == donutshop) format(actstring, sizeof(actstring), "* %s come.", sendername);
					    else format(actstring, sizeof(actstring), "* %s come.", sendername);
						SafeGivePlayerMoney(playerid, -3);
						SetPlayerHealth(playerid, health + 35);
					}
				}
				if (Current == burgermenu) ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,1);
				else if (Current == chickenmenu) ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.1,0,1,1,0,1);
				else if (Current == pizzamenu) ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,0,1);
				else if (Current == donutshop) ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,0,1);
				if (GetPlayerMoney(playerid) > 100) SetPlayerHealth(playerid, 100);
			}
			ProxDetector(30.0, playerid, actstring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}*/
	if(Current == Licenses)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bienvenido al centro de las licencias. Si usted desea comprar licencias de conducir Usa: /comprarconduccion *");
	    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Esperamos que sea cuidadoso en las calles de Los Santos! Por favor, conduzca con cuidado! *");
	    		SendClientMessage(playerid, COLOR_LIGHTRED, "* [Licencia Conduccion Precio: 3,500$] *");
	    		TogglePlayerControllable(playerid,1);
		 	}
    		case 1:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bienvenido al centro de las licencias. Si usted desea comprar licencias de vuelo Usa: /comprarvuelo *");
	    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Esperamos que sea cuidadoso con el trafico aereo de Los Santos! Por favor, vuele con cuidado! *");
                SendClientMessage(playerid, COLOR_LIGHTRED, "* [Licencia Vuelo Precio: 10,500$] *");
				TogglePlayerControllable(playerid,1);
		 	}
		 	case 2:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bienvenido al centro de las licencias. Si usted desea comprar licencias de navegacion Usa: /comprarbarco *");
	    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Esperamos que sea cuidadoso con el trafico maritimo de Los Santos! Por favor, navegue con cuidado! *");
                SendClientMessage(playerid, COLOR_LIGHTRED, "* [Licencia Navegacion Precio: 5,500$] *");
				TogglePlayerControllable(playerid,1);
		 	}
		 	case 3:
	        {
         		HideMenuForPlayer(Licenses, playerid);
	            TogglePlayerControllable(playerid,1);
		 	}
		}
	}
	if(Current == LegalJobs)
	{
	    switch(row)
	    {
	        case 0:
	        {
	        	SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Detective, and get a 5 hour Contract.");
	    		SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
		   		SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Detective, type /aceptar job.");
	    		GettingJob[playerid] = 1;
	    		TogglePlayerControllable(playerid,1);
		 	}
		 	case 1:
		 	{
		 	    SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Lawyer, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Lawyer, type /aceptar job.");
				GettingJob[playerid] = 2;
				TogglePlayerControllable(playerid,1);
			}
			case 2:
			{
   				SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Waiter, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Waiter, type /aceptar job.");
				GettingJob[playerid] = 6;
				TogglePlayerControllable(playerid,1);
			}
			case 3:
			{
   				SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Boxer, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Boxer, type /aceptar job.");
				GettingJob[playerid] = 12;
				TogglePlayerControllable(playerid,1);
			}
 			case 4:
			{
   				SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Trucker, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Trucker, type /aceptar job.");
				GettingJob[playerid] = 16;
				TogglePlayerControllable(playerid,1);
			}
  			case 5:
			{
   				SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Farmer, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Farmer, type /aceptar job.");
				GettingJob[playerid] = 18;
				TogglePlayerControllable(playerid,1);
			}
   			case 6:
			{
   				SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Stuntman, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Stuntman, type /aceptar job.");
				GettingJob[playerid] = 11;
				TogglePlayerControllable(playerid,1);
			}
			case 7:
			{
	            HideMenuForPlayer(LegalJobs, playerid);
	            ShowMenuForPlayer(LegalJobs2, playerid);
			}
 			case 8:
			{
	            HideMenuForPlayer(LegalJobs, playerid);
	            TogglePlayerControllable(playerid,1);
			}
		}
	}
	if(Current == LegalJobs2)
	{
	    switch(row)
	    {
	        case 0:
	        {
	        	SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Taxi Driver, and get a 5 hour Contract.");
	    		SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
		   		SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Taxi Driver, type /aceptar job.");
	    		GettingJob[playerid] = 13;
	    		TogglePlayerControllable(playerid,1);
		 	}
		 	case 1:
		 	{
		 	    SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Bus Driver, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Bus Driver, type /aceptar job.");
				GettingJob[playerid] = 14;
				TogglePlayerControllable(playerid,1);
			}
			case 2:
			{
   				SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Paper Boy, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Paper Boy, type /aceptar job.");
				GettingJob[playerid] = 15;
				TogglePlayerControllable(playerid,1);
			}
			case 3:
			{
   				SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Pizza Boy, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Pizza Boy, type /aceptar job.");
				GettingJob[playerid] = 17;
				TogglePlayerControllable(playerid,1);
			}
 			case 4:
			{
   				SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Street Sweeper, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Street Sweeper, type /aceptar job.");
				GettingJob[playerid] = 21;
				TogglePlayerControllable(playerid,1);
			}
  			case 5:
			{
   				SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Car Mechanic, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Car Mechanic, type /aceptar job.");
				GettingJob[playerid] = 7;
				TogglePlayerControllable(playerid,1);
			}
   			case 6:
			{
   				SendClientMessage(playerid, COLOR_WHITE, "* You are about to become a Body Guard, and get a 5 hour Contract.");
				SendClientMessage(playerid, COLOR_WHITE, "* You have to forfill this Contract first, if you want to Quit the job later.");
				SendClientMessage(playerid, COLOR_WHITE, "* If you are sure to become a Body Guard, type /aceptar job.");
				GettingJob[playerid] = 8;
				TogglePlayerControllable(playerid,1);
			}
 			case 7:
			{
	            HideMenuForPlayer(LegalJobs2, playerid);
	            ShowMenuForPlayer(LegalJobs, playerid);
			}
  			case 8:
			{
	            HideMenuForPlayer(LegalJobs2, playerid);
	            TogglePlayerControllable(playerid,1);
			}
		}
	}
	if(Current == Guide)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "______________Normas Servidor_______________");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Jugar siempre dentro del Rol de tu Personaje.");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Recuerda que usamos normas de un servidor de Rol normal.");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Intenta evitar el (DM,MG,PG,RK...).");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Si no sabes rolear, avisa a un administrador /p [id admin].");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Cualquier duda que tengas utiliza; /du.");
	            SendClientMessage(playerid, COLOR_GRAD5, "* No usar Chetos.");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Usamos los modos de chat IC y OOC.");
	            SendClientMessage(playerid, COLOR_GRAD5, "* No insultar por OOC.");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Para leer el resto de normas visita: www.spg-roleplay.com.");
	            SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	            TogglePlayerControllable(playerid,1);
	        }
	        case 1:
	        {
	            HideMenuForPlayer(Guide, playerid);
	            ShowMenuForPlayer(JobLocations, playerid);
	        }
	        case 2:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "Centro de Licencias se ha marcado en el Mapa (Punto Rojo).");
	            SendClientMessage(playerid, COLOR_WHITE, "TIP: type /licensers for a list of licensers online");
	            SetPlayerCheckpoint(playerid,2048.352,-1900.153,13.5538,5.0);
	            TogglePlayerControllable(playerid,1);
	        }
	        case 3:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "Una de las Ventas de Coches se ha marcado en el mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,355.257,-1823.574,3.881,5.0);
	            TogglePlayerControllable(playerid,1);
	        }
	        case 4:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "Una de las Tiendas de Ropa se ha marcado en el mapa (Punto Rojo).");
	            SendClientMessage(playerid, COLOR_WHITE, "Servidor: Escribe /ropa para elegir tu skin.");
	            SendClientMessage(playerid, COLOR_WHITE, "Servidor: Escribe /comprarinformal para tener una ropa almacenada.");
	            SetPlayerCheckpoint(playerid,2244.3423,-1665.5542,15.4766,5.0);
	            TogglePlayerControllable(playerid,1);
	        }
	        case 5:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "______________Futbol Playa______________________________________");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Ve a la playa con tus amigos y Disfruta de este Deporte :");
	            SendClientMessage(playerid, COLOR_GRAD5, "* -Para poder jugar con la pelota usa /futbol");
	            SendClientMessage(playerid, COLOR_GRAD5, "* -Para llevar la pelota manten pulsado boton :APUNTAR:");
	            SendClientMessage(playerid, COLOR_GRAD5, "* -Para pases largos pulsa boton :ESPRINTAR:");
	            SendClientMessage(playerid, COLOR_GRAD5, "* -Si pierdes la pelota usa /balon para que vuelva al centro");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Ya tienes marcado un Punto Rojo en el mapa donde");
	            SendClientMessage(playerid, COLOR_GRAD5, "* puedes encontrar el Campo de Juego.");
	            SendClientMessage(playerid, COLOR_GREEN, "_________________________________________________________________");
	            TogglePlayerControllable(playerid,1);
	            SetPlayerCheckpoint(playerid,236.0063,-1811.2773,3.8461,5.0);
	        }
	        case 6:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "______________Estadio Ls______________________________________");
	            SendClientMessage(playerid, COLOR_GRAD5, "* La entra a el Estadio Los Santos cuesta 500.");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Podras encontrar 4 tipos de locales : ");
	            SendClientMessage(playerid, COLOR_GRAD5, "* -Pista Karting y Hostring en 8 ");
	            SendClientMessage(playerid, COLOR_GRAD5, "* -Zona para Trial");
	            SendClientMessage(playerid, COLOR_GRAD5, "* -Destruccion Derby");
	            SendClientMessage(playerid, COLOR_GRAD5, "* -Pista Motocross");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Ya tienes marcado un Punto Rojo en el mapa donde encontrarlo");
	            SendClientMessage(playerid, COLOR_GREEN, "_______________________________________________________________");
	            TogglePlayerControllable(playerid,1);
	            SetPlayerCheckpoint(playerid,2695.5750,-1704.5773,11.8438,5.0);
	        }
	        case 7:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "______________Lanzarse Paracaidas______________________________");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Si te gusta el lanzamiento en paracaidas");
	            SendClientMessage(playerid, COLOR_GRAD5, "* este sera el lugar perfecto para ti");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Una vez pongas /entrar en la entrada pagaras 500");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Y te llevara dentro de un avion donde comenzara");
	            SendClientMessage(playerid, COLOR_GRAD5, "* una cuenta atras con el primer usuario que entre");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Pasados los 20 segundos de la cuenta atras");
	            SendClientMessage(playerid, COLOR_GRAD5, "* todos los ocupantes del avion seran LANZADOS!!");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Ya tienes marcado un Punto Rojo en el mapa donde encontrarlo");
	            SendClientMessage(playerid, COLOR_GREEN, "_________________________________________________________________");
	            TogglePlayerControllable(playerid,1);
	            SetPlayerCheckpoint(playerid,1952.8578,-2178.7393,13.5469,5.0);
	        }
	        case 8:
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "______________INFORMACIÓN HERIDAS_______________");
	            SendClientMessage(playerid, COLOR_GRAD5, "* El sistema de heridas consiste en que cuando mueres");
	            SendClientMessage(playerid, COLOR_GRAD5, "* o te matan, se te suma una herida en /estado.");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Cuantas más veces te maten, más acumularas.");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Las heridas puede curartelas un médico dentro del");
	            SendClientMessage(playerid, COLOR_GRAD5, "* hospital, pero en el caso de que no haya ninguno");
	            SendClientMessage(playerid, COLOR_GRAD5, "* conectado, tienes una sala donde puedes curartelas");
	            SendClientMessage(playerid, COLOR_GRAD5, "* automáticamente.");
	            SendClientMessage(playerid, COLOR_GRAD5, "* Si no te las curas, cuantas más acumules, más dinero");
	            SendClientMessage(playerid, COLOR_GRAD5, "* perderás en el banco, es más, puedes llegar a estar en");
	            SendClientMessage(playerid, COLOR_GRAD5, "* número negativos. (Para subir/bajar consola, presionar");
	            SendClientMessage(playerid, COLOR_GRAD5, "* la tecla RePág y AvPág.");
	            SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	            TogglePlayerControllable(playerid,1);
	            SetPlayerCheckpoint(playerid, 418.7112,-1429.3812,32.4777,5.0);
	        }
	        case 9:
	        {
	            HideMenuForPlayer(Guide, playerid);
	            TogglePlayerControllable(playerid,1);
	        }
	    }
	}
	if(Current == JobLocations)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Detective se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,1474.3314,-1862.4025,13.5469,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 1:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de taxista se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,1137.0293,-1757.5895,13.5863,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 2:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Vendedor Drogas se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,2072.5486,-1582.8029,13.4741,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 3:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Basurero se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,383.3972,-2087.1975,7.8359,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 4:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Camionero se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,2281.6797,-2364.6204,13.5469,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 5:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Granjero se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,-381.2316,-1438.8787,25.7266,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 6:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Mozo de almacén se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,2450.3831,-2620.5769,13.6646,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 7:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Comercial se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,1247.9318,-1561.0044,13.5556,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 8:
			{
				HideMenuForPlayer(JobLocations, playerid);
				ShowMenuForPlayer(JobLocations2, playerid);
			}
			case 9:
			{
			    HideMenuForPlayer(JobLocations, playerid);
	            ShowMenuForPlayer(Guide, playerid);
			}
	    }
	}
	if(Current == JobLocations2)
	{
	    switch(row)
	    {
	        case 0:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Minero se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,816.4208,856.9929,12.7891,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 1:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Rep.Pizzas se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,2121.8718,-1784.8073,12.9765,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 2:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Barrendero se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,1629.2969,-1903.3669,13.5531,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 3:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Ladrón Vehículos se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,965.5573,-1252.2561,16.9734,5.0);
	            TogglePlayerControllable(playerid,1);
			}
 			case 4:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Guardaespaldas se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,616.0538,-1530.2815,15.1988,5.0);
	            TogglePlayerControllable(playerid,1);
			}
  			case 5:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Mendigo se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,1815.9800,-1808.7660,3.9844,5.0);
	            TogglePlayerControllable(playerid,1);
			}
   			case 6:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Prostituta se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,1087.7284,-923.1658,43.3906,5.0);
	            TogglePlayerControllable(playerid,1);
			}
			case 7:
			{
				HideMenuForPlayer(JobLocations2, playerid);
				ShowMenuForPlayer(JobLocations3, playerid);
			}
 			case 8:
			{
				HideMenuForPlayer(JobLocations2, playerid);
				ShowMenuForPlayer(JobLocations, playerid);
			}
			case 9:
			{
			    HideMenuForPlayer(JobLocations2, playerid);
			    ShowMenuForPlayer(Guide, playerid);
			}
	    }
	}
 	if(Current == JobLocations3)
	{
	    switch(row)
	    {
 	        case 0:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Agricultor Drogas se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid, -86.1251,2.6412,3.1172,5.0);
	            TogglePlayerControllable(playerid,1);
			}
  	        case 1:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Proveedor Drogas se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,-38.8664,56.3031,3.1172,5.0);
	            TogglePlayerControllable(playerid,1);
			}
   	        case 2:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Prov. Materiales se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,213.8549,-230.5761,1.7786,5.0);
	            TogglePlayerControllable(playerid,1);
			}
   			case 3:
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "El Trabajo de Vendedor de Armas se ha marcado en el Mapa (Punto Rojo).");
	            SetPlayerCheckpoint(playerid,2137.6624,-2282.3455,20.6719,5.0);
	            TogglePlayerControllable(playerid,1);
			}
  			case 4:
			{
				HideMenuForPlayer(JobLocations3, playerid);
				ShowMenuForPlayer(JobLocations2, playerid);
			}
 			case 5:
			{
			    HideMenuForPlayer(JobLocations3, playerid);
			    ShowMenuForPlayer(Guide, playerid);
			}
	    }
	}
//=-=-=-=[Interior]=-=-=-=//
	if(CurrentMenu == Interior)
    {
    switch(row)
    {
    case 0:
    {
    ShowMenuForPlayer(TwentyFourSeven, playerid);
    }
    case 1:
    {
    ShowMenuForPlayer(Airports, playerid);
    }
    case 2:
    {
    ShowMenuForPlayer(Ammunations, playerid);
    }
    case 3:
    {
    ShowMenuForPlayer(House, playerid);
    }
    case 4:
    {
    ShowMenuForPlayer(Missions, playerid);
    }
    case 5:
    {
    ShowMenuForPlayer(Missions1, playerid);
    }
    case 6:
    {
    ShowMenuForPlayer(Unus, playerid);
    }
    case 7:
    {
    ShowMenuForPlayer(CenShop, playerid);
    }
    case 8:
    {
    ShowMenuForPlayer(Garages, playerid);
    }
   	}
   	}
//=-=-=-=[24/7]=-=-=-=//
	if(CurrentMenu == TwentyFourSeven)
    {
    switch(row)
    {
    case 0:
    {
   	SetPlayerPos(playerid,-25.884499,-185.868988,1003.549988);
    SetPlayerInterior(playerid,17);
   	TogglePlayerControllable(playerid,1);
    }
    case 1:
    {
   	SetPlayerPos(playerid,-6.091180,-29.271898,1003.549988);
    SetPlayerInterior(playerid,10);
   	TogglePlayerControllable(playerid,1);
   	}
    case 2:
    {
   	SetPlayerPos(playerid,-30.946699,-89.609596,1003.549988);
    SetPlayerInterior(playerid,18);
   	TogglePlayerControllable(playerid,1);
    }
    case 3:
    {
   	SetPlayerPos(playerid,-25.132599,-139.066986,1003.549988);
    SetPlayerInterior(playerid,16);
   	TogglePlayerControllable(playerid,1);
    }
    case 4:
    {
   	SetPlayerPos(playerid,-27.312300,-29.277599,1003.549988);
    SetPlayerInterior(playerid,4);
   	TogglePlayerControllable(playerid,1);
    }
    case 5:
    {
   	SetPlayerPos(playerid,-26.691599,-55.714897,1003.549988);
    SetPlayerInterior(playerid,6);
   	TogglePlayerControllable(playerid,1);
    }
    case 6:
    {
	ShowMenuForPlayer(Interior,playerid);
    }
   	}
   	}
//=-=-=-=[Airports]=-=-=-=//
	if(CurrentMenu == Airports)
    {
    switch(row)
    {
    case 0:
    {
   	SetPlayerPos(playerid,-1827.147338,7.207418,1061.143554);
    SetPlayerInterior(playerid,14);
   	TogglePlayerControllable(playerid,1);
    }
    case 1:
    {
   	SetPlayerPos(playerid,-1855.568725,41.263156,1061.143554);
    SetPlayerInterior(playerid,14);
   	TogglePlayerControllable(playerid,1);
   	}
    case 2:
    {
   	SetPlayerPos(playerid,315.856170,1024.496459,1949.797363);
    SetPlayerInterior(playerid,9);
   	TogglePlayerControllable(playerid,1);
    }
    case 3:
    {
   	SetPlayerPos(playerid,2.384830,33.103397,1199.849976);
    SetPlayerInterior(playerid,1);
   	TogglePlayerControllable(playerid,1);
    }
    case 4:
    {
	ShowMenuForPlayer(Interior,playerid);
    }
   	}
   	}
//=-=-=-=[Ammunations]=-=-=-=//
	if(CurrentMenu == Ammunations)
    {
    switch(row)
    {
    case 0:
    {
   	SetPlayerPos(playerid,286.148987,-40.644398,1001.569946);
    SetPlayerInterior(playerid,1);
   	TogglePlayerControllable(playerid,1);
    }
    case 1:
    {
   	SetPlayerPos(playerid,286.800995,-82.547600,1001.539978);
    SetPlayerInterior(playerid,4);
   	TogglePlayerControllable(playerid,1);
   	}
    case 2:
    {
   	SetPlayerPos(playerid,296.919983,-108.071999,1001.569946);
    SetPlayerInterior(playerid,6);
   	TogglePlayerControllable(playerid,1);
    }
    case 3:
    {
   	SetPlayerPos(playerid,314.820984,-141.431992,999.661987);
    SetPlayerInterior(playerid,7);
   	TogglePlayerControllable(playerid,1);
    }
    case 4:
    {
   	SetPlayerPos(playerid,316.524994,-167.706985,999.661987);
    SetPlayerInterior(playerid,6);
   	TogglePlayerControllable(playerid,1);
    }
    case 5:
    {
   	SetPlayerPos(playerid,302.292877,-143.139099,1004.062500);
    SetPlayerInterior(playerid,7);
   	TogglePlayerControllable(playerid,1);
    }
    case 6:
    {
   	SetPlayerPos(playerid,280.795104,-135.203353,1004.062500);
    SetPlayerInterior(playerid,7);
   	TogglePlayerControllable(playerid,1);
    }
    case 7:
    {
	ShowMenuForPlayer(Interior,playerid);
    }
   	}
   	}
//=-=-=-=[House]=-=-=-=//
	if(CurrentMenu == House)
    {
    switch(row)
    {
    case 0:
    {
   	SetPlayerPos(playerid,235.508994,1189.169897,1080.339966);
    SetPlayerInterior(playerid,3);
   	TogglePlayerControllable(playerid,1);
    }
    case 1:
    {
   	SetPlayerPos(playerid,225.756989,1240.000000,1082.149902);
    SetPlayerInterior(playerid,2);
   	TogglePlayerControllable(playerid,1);
   	}
    case 2:
    {
   	SetPlayerPos(playerid,223.043991,1289.259888,1082.199951);
    SetPlayerInterior(playerid,1);
   	TogglePlayerControllable(playerid,1);
    }
    case 3:
    {
   	SetPlayerPos(playerid,225.630997,1022.479980,1084.069946);
    SetPlayerInterior(playerid,7);
   	TogglePlayerControllable(playerid,1);
    }
    case 4:
    {
   	SetPlayerPos(playerid,295.138977,1474.469971,1080.519897);
    SetPlayerInterior(playerid,15);
   	TogglePlayerControllable(playerid,1);
    }
    case 5:
    {
   	SetPlayerPos(playerid,328.493988,1480.589966,1084.449951);
    SetPlayerInterior(playerid,15);
   	TogglePlayerControllable(playerid,1);
    }
    case 6:
    {
   	SetPlayerPos(playerid,385.803986,1471.769897,1080.209961);
    SetPlayerInterior(playerid,15);
   	TogglePlayerControllable(playerid,1);
    }
    case 7:
    {
	ShowMenuForPlayer(Interior,playerid);
    }
   	}
   	}
//=-=-=-=[Missions]=-=-=-=//
	if(CurrentMenu == Missions)
    {
    switch(row)
    {
    case 0:
    {
   	SetPlayerPos(playerid,1726.18,-1641.00,20.23);
    SetPlayerInterior(playerid,18);
   	TogglePlayerControllable(playerid,1);
   	new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, 1726.18,-1641.00,20.23);
    LinkVehicleToInterior(tmpcar,18);
    }
    case 1:
    {
   	SetPlayerPos(playerid,2567.52,-1294.59,1063.25);
    SetPlayerInterior(playerid,2);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, 2567.52,-1294.59,1063.25);
    LinkVehicleToInterior(tmpcar,2);
   	}
    case 2:
    {
   	SetPlayerPos(playerid,-1394.20,987.62,1023.96);
    SetPlayerInterior(playerid,15);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -1394.20,987.62,1023.96);
    LinkVehicleToInterior(tmpcar,15);
    }
    case 3:
    {
   	SetPlayerPos(playerid,2338.32,-1180.61,1027.98);
    SetPlayerInterior(playerid,5);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, 2338.32,-1180.61,1027.98);
    LinkVehicleToInterior(tmpcar,5);
    }
    case 4:
    {
   	SetPlayerPos(playerid,2807.63,-1170.15,1025.57);
    SetPlayerInterior(playerid,8);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, 2807.63,-1170.15,1025.57);
    LinkVehicleToInterior(tmpcar,8);
    }
    case 5:
    {
   	SetPlayerPos(playerid,664.19,-570.73,16.34);
    SetPlayerInterior(playerid,0);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, 664.19,-570.73,16.34);
    LinkVehicleToInterior(tmpcar,1);
    }
    case 6:
    {
   	SetPlayerPos(playerid,-1830.81,16.83,1061.14);
    SetPlayerInterior(playerid,14);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -1830.81,16.83,1061.14);
    LinkVehicleToInterior(tmpcar,14);
    }
    case 7:
    {
   	SetPlayerPos(playerid,2220.26,-1148.01,1025.80);
    SetPlayerInterior(playerid,15);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, 2220.26,-1148.01,1025.80);
    LinkVehicleToInterior(tmpcar,15);
    }
    case 8:
    {
   	SetPlayerPos(playerid,-1410.72,1591.16,1052.53);
    SetPlayerInterior(playerid,14);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -1410.72,1591.16,1052.53);
    LinkVehicleToInterior(tmpcar,14);
    }
    case 9:
    {
   	SetPlayerPos(playerid,-750.80,491.00,1371.70);
    SetPlayerInterior(playerid,1);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -750.80,491.00,1371.70);
    LinkVehicleToInterior(tmpcar,1);
    }
    case 10:
    {
   	SetPlayerPos(playerid,-1870.80,59.81,1056.25);
    SetPlayerInterior(playerid,14);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -1870.80,59.81,1056.25);
    LinkVehicleToInterior(tmpcar,14);
    }
    case 11:
    {
	ShowMenuForPlayer(Interior,playerid);
    }
   	}
   	}
//=-=-=-=[Missions1]=-=-=-=//
	if(CurrentMenu == Missions1)
    {
    switch(row)
    {
    case 0:
    {
   	SetPlayerPos(playerid,-2637.69,1404.24,906.46);
    SetPlayerInterior(playerid,3);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -2637.69,1404.24,906.46);
    LinkVehicleToInterior(tmpcar,3);
    }
    case 1:
    {
   	SetPlayerPos(playerid,-1079.99,1061.58,1343.04);
    SetPlayerInterior(playerid,10);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -1079.99,1061.58,1343.04);
    LinkVehicleToInterior(tmpcar,10);
   	}
    case 2:
    {
   	SetPlayerPos(playerid,-1079.99,1061.58,1343.04);
    SetPlayerInterior(playerid,2);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -1079.99,1061.58,1343.04);
    LinkVehicleToInterior(tmpcar,2);
    }
    case 3:
    {
   	SetPlayerPos(playerid,-2042.42,178.59,28.84);
    SetPlayerInterior(playerid,1);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -2042.42,178.59,28.84);
    LinkVehicleToInterior(tmpcar,1);
    }
    case 4:
    {
   	SetPlayerPos(playerid,2535.83,-1674.32,1015.50);
    SetPlayerInterior(playerid,1);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, 2535.83,-1674.32,1015.50);
    LinkVehicleToInterior(tmpcar,1);
    }
    case 5:
    {
   	SetPlayerPos(playerid,681.66,-453.32,-25.61);
    SetPlayerInterior(playerid,1);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, 681.66,-453.32,-25.61);
    LinkVehicleToInterior(tmpcar,1);
    }
    case 6:
    {
   	SetPlayerPos(playerid,-2158.72,641.29,1052.38);
    SetPlayerInterior(playerid,1);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -2158.72,641.29,1052.38);
    LinkVehicleToInterior(tmpcar,1);
    }
    case 7:
    {
   	SetPlayerPos(playerid,-1395.958,-208.197,1051.170);
    SetPlayerInterior(playerid,7);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -1395.958,-208.197,1051.170);
    LinkVehicleToInterior(tmpcar,7);
    }
    case 8:
    {
   	SetPlayerPos(playerid,-1424.9319,-664.5869,1059.8585);
    SetPlayerInterior(playerid,4);
   	TogglePlayerControllable(playerid,1);
    new tmpcar = GetPlayerVehicleID(playerid);
    SetVehiclePos(tmpcar, -1424.9319,-664.5869,1059.8585);
    LinkVehicleToInterior(tmpcar,4);
    }
    case 9:
    {
	ShowMenuForPlayer(Interior,playerid);
    }
   	}
    }
//=-=-=-=[Unused]=-=-=-=//
	if(CurrentMenu == Unus)
    {
    switch(row)
    {
    case 0:
    {
   	SetPlayerPos(playerid,246.40,110.84,1003.22);
    SetPlayerInterior(playerid,10);
   	TogglePlayerControllable(playerid,1);
    }
    case 1:
    {
   	SetPlayerPos(playerid,2324.33,-1144.79,1050.71);
    SetPlayerInterior(playerid,12);
   	TogglePlayerControllable(playerid,1);
   	}
    case 2:
    {
	ShowMenuForPlayer(Interior,playerid);
   	}
    }
    }
//=-=-=-=[Casino&Shop]=-=-=-=//
	if(CurrentMenu == CenShop)
    {
    switch(row)
    {
    case 0:
    {
   	SetPlayerPos(playerid,-203.0764,-24.1658,1002.2734);
    SetPlayerInterior(playerid,16);
   	TogglePlayerControllable(playerid,1);
    }
    case 1:
    {
   	SetPlayerPos(playerid,363.4129,-74.5786,1001.5078);
    SetPlayerInterior(playerid,10);
   	TogglePlayerControllable(playerid,1);
   	}
    case 2:
    {
   	SetPlayerPos(playerid,372.3520,-131.6510,1001.4922);
    SetPlayerInterior(playerid,5);
   	TogglePlayerControllable(playerid,1);
    }
    case 3:
    {
   	SetPlayerPos(playerid,365.7158,-9.8873,1001.8516);
    SetPlayerInterior(playerid,9);
   	TogglePlayerControllable(playerid,1);
   	}
    case 4:
    {
   	SetPlayerPos(playerid,2233.8032,1712.2303,1011.7632);
    SetPlayerInterior(playerid,1);
   	TogglePlayerControllable(playerid,1);
    }
    case 5:
    {
   	SetPlayerPos(playerid,2016.2699,1017.7790,996.8750);
    SetPlayerInterior(playerid,10);
   	TogglePlayerControllable(playerid,1);
   	}
    case 6:
    {
   	SetPlayerPos(playerid,378.026,-190.5155,1000.6328);
    SetPlayerInterior(playerid,17);
   	TogglePlayerControllable(playerid,1);
    }
    case 7:
    {
	ShowMenuForPlayer(Interior,playerid);
   	}
    }
    }
//=-=-=-=[Garages]=-=-=-=//
	if(CurrentMenu == Garages)
    {
    switch(row)
    {
    case 0:
    {
   	SetPlayerPos(playerid,616.7820,-74.8151,997.6350);
    SetPlayerInterior(playerid,2);
   	TogglePlayerControllable(playerid,1);
    }
    case 1:
    {
   	SetPlayerPos(playerid,615.2851,-124.2390,997.6350);
    SetPlayerInterior(playerid,3);
   	TogglePlayerControllable(playerid,1);
   	}
    case 2:
    {
   	SetPlayerPos(playerid,617.5380,-1.9900,1000.6829);
    SetPlayerInterior(playerid,1);
   	TogglePlayerControllable(playerid,1);
   	}
    case 3:
    {
	ShowMenuForPlayer(Interior,playerid);
   	}
    }
    }
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	new Menu:Current = GetPlayerMenu(playerid);
	if(!IsValidMenu(Current)) return 1;
	ShowMenuForPlayer(Current, playerid);
	TogglePlayerControllable(playerid,1);
	SetTimerEx("CanDriveThruAgain", 7000, 0, "i", playerid);
	if(istraveling - 1 == playerid) {
		istraveling = 0;
		TogglePlayerControllable(playerid,true);
		//SendClientMessage(playerid,COLOR_YELLOW,"Acabas de aterrizar en este aeropuerto.");
	}
	return 1;
}

public travel(playerid) //TAKE OFF AND LANDING PART
{

	TogglePlayerControllable(playerid,false);
	istraveling = playerid + 1;
	curstep = 0;

	if(planemode == 1){ //runway 1 depart 98
        step = 200;
		depart[0] = 1477.4100, depart[1] = 1798.0630, depart[2] = 10.8125;
		arriver[0] = 1477.3818, arriver[1] = 1159.1018, arriver[2] = 20.8203;
		diff[0] = (arriver[0] - depart[0])/step;
		diff[1] = (arriver[1] - depart[1])/step;
		diff[2] = (arriver[2] - depart[2])/step;
		FAplane = 180.2063;

	}
	else if(planemode == 2){ //runway 1 arrival 98
        step = 200;
		arriver[0] = 1477.4100, arriver[1] = 1798.0630, arriver[2] = 10.8125;
		depart[0] = 1477.3818, depart[1] = 1159.1018, depart[2] = 20.8203;
		diff[0] = (arriver[0] - depart[0])/step;
		diff[1] = (arriver[1] - depart[1])/step;
		diff[2] = (arriver[2] - depart[2])/step;
		FAplane = 0.2063;

	}
	else if(planemode == 3){ //runway 2 depart 99
        step = 200;
		arriver[0] = -1072.6376, arriver[1] = 417.9915, arriver[2] = 24.3868;
		depart[0] = -1638.0334, depart[1] = -145.4222, depart[2] = 14.1484;
		diff[0] = (arriver[0] - depart[0])/step;
		diff[1] = (arriver[1] - depart[1])/step;
		diff[2] = (arriver[2] - depart[2])/step;
		FAplane = 313.4224;

	}
	else if(planemode == 4){ //runway 2 arrival 99
        step = 200;
		depart[0] = -1072.6376, depart[1] = 417.9915, depart[2] = 24.3868;
		arriver[0] = -1638.0334, arriver[1] = -145.4222, arriver[2] = 14.1484;
		diff[0] = (arriver[0] - depart[0])/step;
		diff[1] = (arriver[1] - depart[1])/step;
		diff[2] = (arriver[2] - depart[2])/step;
		FAplane = 133.4224;

	}
	else if(planemode == 5){ //runway 3 depart 97
        step = 200;
		arriver[0] = 1439.9664, arriver[1] = -2493.8862, arriver[2] = 23.5547;
		depart[0] = 2050.7563, depart[1] = -2493.7925, depart[2] = 13.5469;
		diff[0] = (arriver[0] - depart[0])/step;
		diff[1] = (arriver[1] - depart[1])/step;
		diff[2] = (arriver[2] - depart[2])/step;
		FAplane = 90.7839;

	}
	else if(planemode == 6){ //runway 3 arrival 97
        step = 200;
		depart[0] = 1439.9664, depart[1] = -2493.8862, depart[2] = 23.5547;
		arriver[0] = 2050.7563, arriver[1] = -2493.7925, arriver[2] = 13.5469;
		diff[0] = (arriver[0] - depart[0])/step;
		diff[1] = (arriver[1] - depart[1])/step;
		diff[2] = (arriver[2] - depart[2])/step;
		FAplane = 270.7839;

	}
	else if(planemode == 99){
        step = 800;
        depart[0] = arriver[0], depart[1] = arriver[1], depart[2] = arriver[2];
        arriver[0] = -1072.6376, arriver[1] = 417.9915, arriver[2] = 24.3868;
		diff[0] = (arriver[0] - depart[0])/step;
		diff[1] = (arriver[1] - depart[1])/step;
		diff[2] = (arriver[2] - depart[2])/step;
		if(planedep == 98) FAplane = 107.4023;
		else if(planedep == 97) FAplane = 37.2251;
	}
	else if(planemode == 98){
        step = 800;
        depart[0] = arriver[0], depart[1] = arriver[1], depart[2] = arriver[2];
        arriver[0] = 1477.3818, arriver[1] = 1159.1018, arriver[2] = 20.8203;
		diff[0] = (arriver[0] - depart[0])/step;
		diff[1] = (arriver[1] - depart[1])/step;
		diff[2] = (arriver[2] - depart[2])/step;
		if(planedep == 99) FAplane = 287.4023;
		else if(planedep == 97) FAplane = 358.0436;
	}
	else if(planemode == 97){
        step = 800;
        depart[0] = arriver[0], depart[1] = arriver[1], depart[2] = arriver[2];
        arriver[0] = 1439.9664, arriver[1] = -2493.8862, arriver[2] = 23.5547;
		diff[0] = (arriver[0] - depart[0])/step;
		diff[1] = (arriver[1] - depart[1])/step;
		diff[2] = (arriver[2] - depart[2])/step;
		if(planedep == 99) FAplane = 220.7751;
		else if(planedep == 98) FAplane = 180.1597;
	}
	campos[0] = depart[0];
	campos[1] = depart[1];
	campos[2] = depart[2] + 6;
	SetPlayerCameraPos(playerid,campos[0],campos[1],campos[2]);
	SetPlayerCameraLookAt(playerid,arriver[0],arriver[1],arriver[2]);
    traveltimmer = SetTimer("traveling",11,true);
	plane = CreateObject(1681,campos[0],campos[1],campos[2],0.0,0.0,0.0);
    SetObjectRot(plane,0.0,0.0,FAplane);

	return 1;
}
//lineas avion

public traveling() // THE ACTUAL TRAVEL BRAIN
{
	curstep++;
	campos[0] += diff[0];
	campos[1] += diff[1];
	if(planemode < 20) campos[2] += diff[2];
	else if(curstep <= step/3) campos[2] += (diff[2] + 0.9); //CLIMBING ON 1/3 OF TRIP
	else if(curstep > (step/3)*2) campos[2] += (diff[2] - 0.9);//DESCENDING ON 2/3 OF TRIP
	SetObjectPos(plane,campos[0]+15.0*floatsin(-FAplane,degrees),campos[1]+15.0*floatcos(-FAplane,degrees),campos[2]);
	if(planemode < 20 ) {
		if(planemode == 1 || planemode == 2) SetPlayerCameraPos(istraveling -1,1553.4186,1449.7456,33.7954);
		else if(planemode == 3 || planemode == 4) SetPlayerCameraPos(istraveling -1,-1299.8624,80.1844,34.1484);
        else if(planemode == 5 || planemode == 6) SetPlayerCameraPos(istraveling -1,1752.2567,-2534.6309,33.5469);
		SetPlayerCameraLookAt(istraveling - 1,campos[0],campos[1],campos[2]);
	}
	else if(step - curstep > 62){//dont move the camera for the last frame of the flight
		SetPlayerCameraPos(istraveling - 1,campos[0],campos[1],campos[2]+6);
		SetPlayerCameraLookAt(istraveling - 1,arriver[0],arriver[1],arriver[2]);
	}

	if(curstep >= step) {
		new playerid = istraveling - 1;
		DestroyObject(plane);
		curstep = 0;
		istraveling = 0;
		if(planedest) {
			if(planemode < 20) {
	            KillTimer(traveltimmer);
				planemode = planedest;
				travel(playerid);
				return 1;
			}
			else if(planedest == 99){
	            KillTimer(traveltimmer);
				planemode = 4;
				travel(playerid);
				planedest = 0;
				SetPlayerPos(playerid,-1430.1033,-286.6475,14.1484);
				SetPlayerFacingAngle(playerid,226.9848);
				return 1;
			}
			else if(planedest == 98){
	            KillTimer(traveltimmer);
				planemode = 2;
				travel(playerid);
				planedest = 0;
				SetPlayerPos(playerid,1698.0863,1474.4852,10.7626);
				SetPlayerFacingAngle(playerid,93.0495);
				return 1;
			}
			else if(planedest == 97){
	            KillTimer(traveltimmer);
				planemode = 6;
				travel(playerid);
				planedest = 0;
				SetPlayerPos(playerid,1683.3916,-2287.8235,13.5102);
				SetPlayerFacingAngle(playerid,93.2929);
				return 1;
			}
		}
        else //SendClientMessage(playerid,COLOR_YELLOW,"Acabas de aterrizar en este aeropuerto.");
		KillTimer(traveltimmer);
		planemode = 0;
        SetCameraBehindPlayer(playerid);
		DestroyObject(plane);
		istraveling = 0;
		TogglePlayerControllable(playerid,true);
	}
	return 1;
}


public RefreshMenuHeader(playerid,Menu:menu,text[])
{
	SetMenuColumnHeader(menu,0,text);
	ShowMenuForPlayer(menu,playerid);
}

public SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
			if (num != 255)
			{
				gPlayerCheckpointStatus[i] = num;
			}
		}
	}

}

public SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gTeam[i] == 2)
			{
				SetPlayerCheckpoint(i,allx,ally,allz, radi);
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(newstate == PLAYER_STATE_ONFOOT)	TextDrawHideForPlayer(playerid, Textdraw[0]), TextDrawHideForPlayer(playerid, Textdraw[1]), TextDrawHideForPlayer(playerid, Textdraw[2]), TextDrawHideForPlayer(playerid, Textdraw[3]);
	else if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		if(Velocimetro[playerid] == 1) TextDrawShowForPlayer(playerid, Textdraw[0]), TextDrawShowForPlayer(playerid, Textdraw[1]);
		if(Acelerometro[playerid] == 1) TextDrawShowForPlayer(playerid, Textdraw[2]), TextDrawShowForPlayer(playerid, Textdraw[3]);
	}//--------Lineas
    if(AdminDuty[playerid] == 1){return 1;}
	new string[256];
	new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
	new vehicle = GetPlayerVehicleID(playerid);
	if(newstate == PLAYER_STATE_DRIVER && (pveh != 509 && pveh != 481 && pveh != 510) && IsPlayerInAnyVehicle(playerid) && !IsAPlane(vehicle) && !IsAHarvest(vehicle) && !IsADrugHarvest(vehicle) && !IsASweeper(vehicle) && !IsAcarretilla(vehicle))
	{
		SetTimerEx("Startup", 5, false, "ii", playerid, vehicle);
		SetTimerEx("engine2", 5, false, "ii", playerid);
	}
	else if(newstate == PLAYER_STATE_DRIVER && (pveh != 509 && pveh != 481 && pveh != 510) && IsPlayerInAnyVehicle(playerid) && !IsAPlane(vehicle) && !IsAHarvest(vehicle) && !IsADrugHarvest(vehicle) && !IsASweeper(vehicle) && !IsAcarretilla(vehicle))
	{
		SetTimerEx("Startup", 5, false, "ii", playerid, vehicle);
		SetTimerEx("engine2", 5, false, "ii", playerid);
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
		{
		    PlayerInKart[playerid] = 0;
		    KartingPlayers --;
		}
	    if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
			    BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* You are now Off Duty and earned $%d.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SafeGivePlayerMoney(playerid, TransportMoney[playerid]);
			/*ConsumingMoney[playerid] = 1;*/ TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
		}
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
		    if(IsPlayerConnected(TransportDriver[playerid]))
			{
			    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			    TransportTime[TransportDriver[playerid]] = 0;
			    TransportCost[TransportDriver[playerid]] = 0;
			    format(string, sizeof(string), "~w~The ride cost~n~~r~$%d",TransportCost[playerid]);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    format(string, sizeof(string), "~w~Passenger left the taxi~n~~g~Earned $%d",TransportCost[playerid]);
			    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
				SafeGivePlayerMoney(playerid, -TransportCost[playerid]);
				TransportCost[playerid] = 0;
				TransportTime[playerid] = 0;
				TransportDriver[playerid] = 999;
			}
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    new vehicleid = GetPlayerVehicleID(playerid);
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
	            if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
	            {
	                if(GetPlayerMoney(playerid) < TransportValue[i])
	                {
	                    format(string, sizeof(string), "* You need $%d to enter.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						RemovePlayerFromVehicle(playerid);
	                }
	                else
	                {
	                    if(TransportDuty[i] == 1)
	                    {
	                        format(string, sizeof(string), "* You paid $%d to the Taxi Driver.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Passenger %s has entered your Taxi.", name);
							SendClientMessage(i, COLOR_WHITE, string);
							TransportTime[i] = 1;
	                    	TransportTime[playerid] = 1;
	                    	TransportCost[playerid] = TransportValue[i];
	                    	TransportCost[i] = TransportValue[i];
	                    	TransportDriver[playerid] = i;
	                    }
	                    else if(TransportDuty[i] == 2)
	                    {
	                        format(string, sizeof(string), "* You paid $%d to the Bus Driver.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Passenger %s has entered your Bus.", name);
							SendClientMessage(i, COLOR_WHITE, string);
	                    }
						SafeGivePlayerMoney(playerid, - TransportValue[i]);
						TransportMoney[i] += TransportValue[i];
	                }
	            }
	        }
	    }
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
		if(WantedLevel[playerid] >= 1)
		{
		    new price = WantedLevel[playerid] * 1000;
			new count;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(gTeam[i] == 2 && CrimInRange(30.0, playerid,i))
				    {
						count = 1;
						format(string, sizeof(string), "~w~Running Suspect~r~Killed~n~Bonus~g~$%d", price);
						GameTextForPlayer(i, string, 5000, 1);
						//ConsumingMoney[i] = 1;
						SafeGivePlayerMoney(i, price / 2);
						PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
					}
				}
			}
			if(count == 1)
			{
				SafeGivePlayerMoney(playerid, - price);
				PlayerInfo[playerid][pWantedDeaths] += 1;
				PlayerInfo[playerid][pJailed] = 1;
			    PlayerInfo[playerid][pJailTime] = (WantedLevel[playerid])*(600);
			    format(string, sizeof(string), "* Has sodo encarcelado durante %d segundos, pierdes $%d.", PlayerInfo[playerid][pJailTime], price);
			    SendClientMessage(playerid, COLOR_LIGHTRED, string);
			    WantedPoints[playerid] = 0;
				WantedLevel[playerid] = 0;
			}
		}
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{// 38 / 49 / 56 = SS
		new newcar = GetPlayerVehicleID(playerid);
		new oldcar = gLastCar[playerid];
		new housecar = PlayerInfo[playerid][pPhousekey]+1;
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		if(IsABoat(newcar))
		{
		    if(PlayerInfo[playerid][pBoatLic] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No tienes la licencia de barco");
			    RemovePlayerFromVehicle(playerid);
			    TogglePlayerControllable(playerid, 1);
			}
		}
		else if(IsAPlane(newcar))
		{
		    if(PlayerInfo[playerid][pFlyLic] < 1)
			{
			    if(TakingLesson[playerid] == 1) { }
			    else {
			    SendClientMessage(playerid, COLOR_GREY, "   No tienes licencia de vuelo !");
			    RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, 1); }
			}
		}
		else
		{
			if(PlayerInfo[playerid][pCarLic] < 0)
			{
			    if(PlayerDrunk[playerid] >= 5)
				{
				    WantedPoints[playerid] += 1;
					SetPlayerCriminal(playerid,255, "Esto es ilegal");
				}

			}
			else if(PlayerDrunk[playerid] >= 5)
			{
			    WantedPoints[playerid] += 1;
				SetPlayerCriminal(playerid,255, "ESto es ilegal");
			}
			
			if(PlayerInfo[playerid][pCarLic] < 1)
			{
			    if(IsABike(newcar) || IsAOBike(newcar)) { }
			    else
			    {
	                /*if(PlayerInfo[playerid][pCarLic] < 1)
					{
					    WantedPoints[playerid] += 1;
						SetPlayerCriminal(playerid,255, "Driving without License");
					}*/
					if(TakingLesson[playerid] == 1) { }
					else {
					SendClientMessage(playerid, COLOR_YELLOW, "   No tienes la licencia para conducir este vehiculo, cuidado con la policia.");
	              }
				}
			}
		}//Done with car check
		if(IsACopCar(newcar))
		{
		    if(IsACop(playerid)) { }
		    else { RemovePlayerFromVehicle(playerid);}
		}
		if(IsATank(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pLeader] == 3) { }
		    else { RemovePlayerFromVehicle(playerid);}
		}
		if(IsAnFbiCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 2) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Tu no tienes las llaves de este Vehiculo.");}
		}
		if(IsNgCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 3||PlayerInfo[playerid][pMember] == 3) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Tu no tienes las llaves de este Vehiculo.");}
		}
		if(IsAGovernmentCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 3||PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 7||PlayerInfo[playerid][pMember] == 7) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"No tienes las llaves de este vehiculo.");}
		}
		if(IsAHspdCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pMember] == 1 && PlayerInfo[playerid][pRank] > 2) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"No tienes las llaves de este vehiculo.");}
		}
		else if(IsAnAmbulance(newcar))
		{
		    if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4) { }
		    else { RemovePlayerFromVehicle(playerid); SetTimerEx("tiemposalicoche",100,false,"i",playerid);}
		}
		else if(IsAnFiretruck(newcar))
		{
		    if(PlayerInfo[playerid][pMember] == 19||PlayerInfo[playerid][pLeader] == 19) { }
		    else { RemovePlayerFromVehicle(playerid); }
		}
		if(IsAGangCar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 5||PlayerInfo[playerid][pMember] == 5) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Tu no tienes las llaves de este vehiculo.");}
		}
		if(IsAGangCar2(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 6||PlayerInfo[playerid][pMember] == 6) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Tu no tienes las llaves de este vehiculo.");}
		}
		if(IsAGangCar3(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 14||PlayerInfo[playerid][pMember] == 14) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Tu no tienes las llaves de este vehiculo.");}
		}
		if(IsAGangCar4(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 15||PlayerInfo[playerid][pMember] == 15) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Tu no tienes las llaves de este vehiculo.");}
		}
		if(IsAGangCar5(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 16||PlayerInfo[playerid][pMember] == 16) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"No tienes las llaves de este vehiculo.");}
		}/*
		if(IsAGangCar6(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 17||PlayerInfo[playerid][pMember] == 17) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"No tienes las llaves de este vehiculo.");
			new Float:cx, Float:cy, Float:cz;
			GetPlayerPos(playerid, cx, cy, cz);
			SetPlayerPos(playerid, cx,  cy, cz);}
		}
		if(IsAGangCar7(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 18||PlayerInfo[playerid][pMember] == 18) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"No tienes las llaves de este vehiculo.");
			new Float:cx, Float:cy, Float:cz;
			GetPlayerPos(playerid, cx, cy, cz);
			SetPlayerPos(playerid, cx,  cy, cz);}
		}
		if(IsAGangCar8(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 19||PlayerInfo[playerid][pMember] == 19) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"No tienes las llaves de este vehiculo.");
			new Float:cx, Float:cy, Float:cz;
			GetPlayerPos(playerid, cx, cy, cz);
			SetPlayerPos(playerid, cx,  cy, cz);}
		}*/
		if(IsAGangCar9(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 20||PlayerInfo[playerid][pMember] == 20) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"No tienes las llaves de este vehiculo.");}
		}
		if(IsAPizzabike(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 17) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Tu no tienes las llaves de esta moto.");}
		}
		if(IsASweeper(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 21) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Tu no tienes las llaves de este vehiculo.");}
		}
	/*	if(IsABasura(newcar)) //basurero
		{
		    if(PlayerInfo[playerid][pJob] == 25) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Tu no tienes las llaves de este vehiculo.");}
		}*/
		if(IsABasura(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 25)
			{
				SendClientMessage(playerid, COLOR_WHITE, "USA: /Basura /nobasura ");
			}
			else
			{
	        	RemovePlayerFromVehicle(playerid);
	        	SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"No tienes las llaves de este vehiculo.");
			}
		}
		if (IsABus(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 24)
			{
				GameTextForPlayer(playerid, "~w~Usa /ruta1 o /ruta para comenzar su ruta de autobús", 5000, 3);
				SendClientMessage(playerid, COLOR_YELLOW2, "Has entrado en un autobús, para cancelar la ruta escribe /exit.");
				//GangZoneShowForPlayer(playerid, buszonewest, COLOR_RED);
				//GangZoneShowForPlayer(playerid, buszoneeast, COLOR_BLUE);
				SendClientMessage(playerid, COLOR_YELLOW2, "Para comenzar a hacer la ruta de oeste, use /ruta2. Para comenzar a hacer la ruta del este, use /ruta1.");
				new routezonecheck = IsInBusrouteZone(playerid);
				if (routezonecheck == 0) SendClientMessage(playerid, COLOR_YELLOW, "Nota: Su ruta mas cercana es la del este.");
				else if (routezonecheck == 1) SendClientMessage(playerid, COLOR_YELLOW, "Nota: Su ruta mas cercana es la del oeste.");
				TogglePlayerControllable(playerid, 0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Sólo los conductores del autobús son calificados para conducir un autobús.");
				SetTimerEx("tiemposalicoche",100,false,"i",playerid);
				RemovePlayerFromVehicle(playerid);
			}
		}
		if(IsATowcar(newcar))
		{
		    if(PlayerInfo[playerid][pLeader] == 13||PlayerInfo[playerid][pMember] == 13) { }
		    else {
	        RemovePlayerFromVehicle(playerid);
	        SendClientMessage(playerid, COLOR_GREY,"Tu no tienes las llaves de este vehiculo.");}
		}
		if(IsATruck(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 16)
			{
				format(string, sizeof(string), "Products: %d/%d", PlayerHaul[newcar][pLoad],PlayerHaul[newcar][pCapasity]);
				SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
				SendClientMessage(playerid, COLOR_WHITE, "INFO: You can deliver Products to Businesses.");
				SendClientMessage(playerid, COLOR_WHITE, "INFO: Commands are /load /comprarprods /venderprods");
			}
			else
			{
	        	RemovePlayerFromVehicle(playerid);
	        	SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"No tienes las llaves de este vehiculo.");
			}
		}
		if(IsASweeper(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 21)
		    {
		        if(PlayerIsSweeping[playerid] == 0)
		        {
		        	TogglePlayerControllable(playerid, 0);
		        	GameTextForPlayer(playerid, "~g~/barrer ~w~ para comenzar~n~Escribe ~r~/salir ~w~ para salir del vehiculo", 5000, 3);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Para parar usa /nobarrer .");
				}
		    }
		    else
		    {
		        RemovePlayerFromVehicle(playerid);
		        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"No tienes las llaves de este vehiculo.");
		    }
		}
		if(IsABasura(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 25)
		    {
		        if(PlayerIsBasuras[playerid] == 0)
		        {
		        	TogglePlayerControllable(playerid, 0);
		        	GameTextForPlayer(playerid, "~g~/basura ~w~ para comenzar~n~Escribe ~r~/salir ~w~ para salir del vehiculo", 5000, 3);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Para parar usa /nobasura .");
				}
		    }
		    else
		    {
		        RemovePlayerFromVehicle(playerid);
		        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
	        	SendClientMessage(playerid, COLOR_GREY,"No tienes las llaves de este vehiculo.");
		    }
		}
	/*	if(PlayerKarting[playerid] != 0)
		{
		    new kart = GetPlayerVehicleID(playerid);
		    if(kart >=500 && kart <= 500)
		    {
		        PlayerInKart[playerid] = 1;
		    	KartingPlayers ++;
			}
		}
		if(newcar == 500)
		{
		    if(PlayerInfo[playerid][pRank] >= 3) { }
		    else
		    {
		        SendClientMessage(playerid,COLOR_GREY,"   You must be Rank 3 atleast to fly this !");
		        RemovePlayerFromVehicle(playerid);
		    }
		}*/
		if(newcar >= 26 && newcar <= 32||newcar==654) //TAXISTAS
		{
		    if(PlayerInfo[playerid][pJob] == 24) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"   Tu no tienes las llaves de este vehiculo!");
		        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar >= 51 && newcar <= 54)  // vehiculos cnn
		{
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9){ }
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Tu no tienes las llaves de este vehiculo !");
       			SetTimerEx("tiemposalicoche",100,false,"i",playerid);
			    RemovePlayerFromVehicle(playerid);
			}
		}
	/*	if(newcar >= 500 && newcar <= 500)
		{
		    if(PlayerKarting[playerid] != 1)
		    {
		        RemovePlayerFromVehicle(playerid);
		    }
		}*/
		if(newcar >= 171 && newcar <= 177 || newcar >= 85 && newcar <= 95 || newcar == 33)
		{
			if (HireCar[playerid] != newcar)
			{
				format(string, sizeof(string), "~w~Vehiculo para Alquilar~n~CostE:~g~$%d~n~~w~Para alquilar ~g~/alquilar~w~~n~para salir ~r~/salir",1000);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, string, 5000, 3);
			}
		}
		if(newcar >= 153 && newcar <= 170)// || newcar >= 292 && newcar <= 314)
		{
		    if (HireCar[playerid] != newcar)
			{
				new preciobici = 200;
				format(string, sizeof(string), "~w~bicicleta para alquilar~n~CostE:~g~$%d~n~~w~Usa para alquilarla ~g~/bicicleta~w~~n~para salir ~r~/salir",preciobici);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, string, 5000, 3);
			}
		}
		if(newcar >= 178 && newcar <= 180) //VEHICULOS GROVES
		{
		    if(PlayerInfo[playerid][pMember] == 5||PlayerInfo[playerid][pLeader] == 5) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"   No eres de la banda Groves pon /salir!");
		        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        RemovePlayerFromVehicle(playerid);
		        TogglePlayerControllable(playerid, 0);
		    }
		}
		if(newcar >= 181 && newcar <= 183) //VEHICULOS latin
		{
		    if(PlayerInfo[playerid][pMember] == 15||PlayerInfo[playerid][pLeader] == 15) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"   No eres de la banda Latin XIV pon /salir!");
		        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        RemovePlayerFromVehicle(playerid);
		        TogglePlayerControllable(playerid, 0);
		    }
		}
		if(newcar >= 46 && newcar <= 50) //VEHICULOS HITMAN
		{
		    if(PlayerInfo[playerid][pMember] == 8||PlayerInfo[playerid][pLeader] == 8) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"   No tienes la llave de este vehiculo !");
		        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar >= 77 && newcar <= 80) //VEHICULOS Guardaespaldas
		{
		    if(PlayerInfo[playerid][pJob] == 8) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"   No eres Guardaespaldas !");
		        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar >= 643 && newcar <= 648) //VEHICULOS Camionero
		{
		    if(PlayerInfo[playerid][pJob] == 9) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"   No eres Camionero !");
		        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar >= 81 && newcar <= 84) //VEHICULOS Mozo de almacen
		{
		    if(PlayerInfo[playerid][pJob] == 10) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"   No eres Mozo de Almacen !");
		        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(newcar >= 665 && newcar <= 668) //VEHICULOS Minero
		{
		    if(PlayerInfo[playerid][pJob] == 11) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"   No eres Minero !");
		        SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(IsAHarvest(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 18)
			{
			    if(FarmerVar[playerid] == 0)
			    {
			    	SendClientMessage(playerid, COLOR_RED, "___________Guia Granjero___________");
			    	SendClientMessage(playerid, COLOR_WHITE, "** Granjero ** /recolectar, /norecolectar o /salir");
			    	SendClientMessage(playerid, COLOR_RED, "__________________________________");
			    	TogglePlayerControllable(playerid, 0);
				}
				else { }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No tienes la llave de este vehiculo !");
			    SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        RemovePlayerFromVehicle(playerid);
			}
		}
		if(IsADrugHarvest(newcar))
		{
			if(PlayerInfo[playerid][pJob] == 19)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "____________Jardinero especial___________");
			    SendClientMessage(playerid, COLOR_WHITE, "** Plantacion ** /comenzardroga, /parardroga o /salir");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "_________________________________________");
			    TogglePlayerControllable(playerid, 0);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No trabajas aqui !!");
			    SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        RemovePlayerFromVehicle(playerid);
			}
		}
		if(IsASmuggleCar(newcar))
		{
		    if(PlayerInfo[playerid][pJob] == 20)
		    {

				SendClientMessage(playerid, COLOR_YELLOW, "NOTA: Ahora mismo, puedes mover drogas !");
    		}
      		else
        	{
         		SendClientMessage(playerid, COLOR_GREY, "   No eres transportista !");
	    		SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        RemovePlayerFromVehicle(playerid);
       		}
		}
		if(oldcar != 1001)
		{
			if((housecar != oldcar && oldcar != 0) && (HireCar[playerid] != oldcar && newcar != housecar))
			{
				if(gLastDriver[oldcar] == playerid && oldcar != newcar)
				{
					gLastDriver[oldcar] = 1000;
					gCarLock[oldcar] = 0;
					UnLockCar(oldcar);
				}
			}
		}
		if(IsAnOwnableCar(newcar))
		{
		    if(CarInfo[newcar][cOwned]==0)
		    {
		        TogglePlayerControllable(playerid, 0);
		        /*format(string,sizeof(string),"~w~Vehiculo: %s~n~Precio: ~g~%d~n~~w~/v buy para comprarlo~n~~r~/salir ~w~para bajarte",CarInfo[newcar][cDescription],CarInfo[newcar][cValue]);
				GameTextForPlayer(playerid,string,5000,5);*/
				
		        SendClientMessage(playerid, COLOR_GREEN, "______Compra________");
				format(string,sizeof(string)," - Precio: $%d (ID:%d)",CarInfo[newcar][cValue],newcar);
				SendClientMessage(playerid, COLOR_GREEN, string);
				SendClientMessage(playerid, COLOR_WHITE, " - /v buy (Comprar), /salir");
				SendClientMessage(playerid, COLOR_GREEN, "____________________");
		    }
		    if(CarInfo[newcar][cOwned]==1)
		    {
		        format(string,sizeof(string),"Propietario del Vehiculo %s",CarInfo[newcar][cOwner]);
				SendClientMessage(playerid, COLOR_BLUE, string);
				/*if(keycar != vehicle)
				{
				    RemovePlayerFromVehicle(playerid);
				    SendClientMessage(playerid, COLOR_GREY, "You don't have a key of this vehicle");
				}*/
				if(PlayerInfo[playerid][pPcarkey] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey2] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey3] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey4] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey5] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey6] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey7] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey8] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey9] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey10] == vehicle) { }
				else if(HireCar[playerid] == vehicle) { }
				else
				{
				    if(PlayerInfo[playerid][pJob] == 5 )
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Estas Robando un Vehiculo !");
						TogglePlayerControllable(playerid, 0)
					}
					else if(PlayerInfo[playerid][pAdministrador] == 1 && AdminDuty[playerid] == 1)
					{
					}
				    else
				    {
				    	RemovePlayerFromVehicle(playerid);
        				SendClientMessage(playerid, COLOR_GREY, "Tu no tienes las llaves de este Vehiculo");
				    	SetTimerEx("tiemposalicoche",100,false,"i",playerid);
		        		RemovePlayerFromVehicle(playerid);
					}
				}
		    }
		}
		gLastCar[playerid] = newcar;
		gLastDriver[newcar] = playerid;
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || PlayerToPoint(1000.0, playerid, -1041.9,-1868.4,79.1)) //the highest land point in sa = 526.8
		{
			SetPlayerSpawn(playerid);
		}
		if(WantedPoints[playerid] > 0)
		{
		    new dstring[128];
			new wanted = WantedPoints[playerid];
			new diecash = 0;
		    while(WantedPoints[playerid] > 0)
		    {
		        diecash += 500;
		        WantedPoints[playerid] --;
		    }
		    format(dstring, sizeof(dstring), "You lost $%d for dieing with %d Wanted Points.", diecash, wanted);
		    SendClientMessage(playerid, COLOR_YELLOW, dstring);
		    SafeGivePlayerMoney(playerid, - diecash);
		    PlayerInfo[playerid][pWantedDeaths] += 1;
		}
		if(PlayerOnMission[playerid] > 0)
		{
			GameTextForPlayer(playerid, "~r~Mission failed", 5000, 3);
			PlayerOnMission[playerid] = 0;
		    PlayerInfo[playerid][pMissionNr] = 0;
		}
		WantedPoints[playerid] = 0;
		WantedLevel[playerid] = 0;
		if(PlayerInfo[playerid][pDonateRank] == 1) { SetPlayerHealth(playerid, 100.0); }
		else { SetPlayerHealth(playerid, 50.0+PlayerInfo[playerid][pSHealth]); }
		MedicBill[playerid] = 1;
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
	}
	return 1;
}

public HireCost(carid)
{
	switch (carid)
	{
		case 69:
		{
			return 90000; //bullit
		}
		case 70:
		{
			return 130000; //infurnus
		}
		case 71:
		{
			return 100000; //turismo
		}
		case 72:
		{
			return 80000;
		}
		case 73:
		{
			return 70000;
		}
		case 74:
		{
			return 60000;
		}
	}
	return 0;
}

public CarCheck()
{
	new string[256];
	for(new j = 0; j<MAX_PLAYERS; j++)
	{
	    if(IsPlayerConnected(j))
	    {
	        /*SetVehicleParamsForPlayer(99, j, 0, 0);
	        SetVehicleParamsForPlayer(100, j, 0, 0);
	        SetVehicleParamsForPlayer(101, j, 0, 0);
	        SetVehicleParamsForPlayer(102, j, 0, 0);
	        SetVehicleParamsForPlayer(103, j, 0, 0);
	        SetVehicleParamsForPlayer(104, j, 0, 0);
	        SetVehicleParamsForPlayer(105, j, 0, 0);
	        SetVehicleParamsForPlayer(106, j, 0, 0);
	        SetVehicleParamsForPlayer(107, j, 0, 0);
	        SetVehicleParamsForPlayer(108, j, 0, 0);
	        SetVehicleParamsForPlayer(109, j, 0, 0);*/
		    new Float:health;
		    GetPlayerHealth(j, health);
			if(STDPlayer[j]==1)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 5.0);
			    SendClientMessage(j, COLOR_WHITE, "* Lost 4 health due to STD.");
			}
			else if(STDPlayer[j]==2)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 12.0);
			    SendClientMessage(j, COLOR_WHITE, "* Lost 8 health due to STD.");
			}
			else if(STDPlayer[j]==3)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 20.0);
			    SendClientMessage(j, COLOR_WHITE, "* Lost 12 health due to STD.");
			}

			if(GetPlayerMoney(j) < 0)
			{
			    if(MoneyMessage[j]==0)
			    {
				    format(string, sizeof(string), "Estas en numeros rojos, consigue algo de dinero o iras a la carcel", GetPlayerMoney(j));
					SendClientMessage(j, COLOR_LIGHTRED, string);
					MoneyMessage[j] = 1;
				}
			}
			else
			{
			    MoneyMessage[j] = 0;
			}
		}
	}
	for(new c = 1; c < 254; c++)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if (PlayerInfo[i][pJob] == 5)
				{
					SetVehicleParamsForPlayer(c, i, 0, 0);
				}
			}
		}
		if (gLastDriver[c] == 301)
		{
//			CarRespawn(c);
		}
		if (gLastDriver[c] >= 300)
		{
			gLastDriver[c]++;
		}
		//foundowner = -1;
	}
	return 1;
}

public CarInit()
{
	for(new c = 1; c < 254; c++)
	{
 		gLastDriver[c] = 299;
	}
	gLastDriver[301]=255;
	return 1;
}

/*public CarTow(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid) || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	SetVehiclePos(carid,HouseCarSpawns[carid-1][0], HouseCarSpawns[carid-1][1], HouseCarSpawns[carid-1][2]);
	SetVehicleZAngle(carid, HouseCarSpawns[carid-1][3]);
	return 1;
}

public CarRespawn(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid) || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	SetVehicleToRespawn(carid);
	gLastDriver[carid] = 299;
	return 1;
}*/

public LockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetVehicleParamsForPlayer(carid,i,0,1);
		}
	}
}

public UnLockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(!IsAPlane(carid))
			{
				SetVehicleParamsForPlayer(carid,i,0,0);
			}
		}
	}
}

public InitLockDoors(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		new c;
		while (c < 254)
		{
			c++;
			if (gCarLock[c] == 1)
			{
				SetVehicleParamsForPlayer(c,playerid,0,1);
			}
		}
	}
	return 1;
}

public TuneThisCar(vehicleid)// plantilla tuning
{
		if(TuneCar[vehicleid][mod1]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod1]); }
		if(TuneCar[vehicleid][mod2]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod2]); }
		if(TuneCar[vehicleid][mod3]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod3]); }
		if(TuneCar[vehicleid][mod4]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod4]); }
		if(TuneCar[vehicleid][mod5]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod5]); }
		if(TuneCar[vehicleid][mod6]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod6]); }
		if(TuneCar[vehicleid][mod7]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod7]); }
		if(TuneCar[vehicleid][mod8]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod8]); }
		if(TuneCar[vehicleid][mod9]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod9]); }
		if(TuneCar[vehicleid][mod10]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod10]); }
		if(TuneCar[vehicleid][mod11]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod11]); }
		if(TuneCar[vehicleid][mod12]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod12]); }
		if(TuneCar[vehicleid][mod13]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod13]); }
		if(TuneCar[vehicleid][mod14]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod14]); }
		if(TuneCar[vehicleid][mod15]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod15]); }
		if(TuneCar[vehicleid][mod16]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod16]); }
		if(TuneCar[vehicleid][mod17]!=0) { AddVehicleComponent(vehicleid,TuneCar[vehicleid][mod17]); }
		if(TuneCar[vehicleid][paintjob]!=0) { ChangeVehiclePaintjob(vehicleid,TuneCar[vehicleid][paintjob]); }
		return 1;
}
InitComponents(componentid)
{
	new i;
	for(i=0; i<20; i++)
	{
	    if(spoiler[i][0]==componentid) { return 1; }
	}
	for(i=0; i<3; i++)
	{
	    if(nitro[i][0]==componentid) { return 2; }
	}
	for(i=0; i<23; i++)
	{
	    if(fbumper[i][0]==componentid) { return 3; }
	}
	for(i=0; i<22; i++)
	{
	    if(rbumper[i][0]==componentid) { return 4; }
	}
	for(i=0; i<28; i++)
	{
	    if(exhaust[i][0]==componentid) { return 5; }
	}
	for(i=0; i<2; i++)
	{
	    if(bventr[i][0]==componentid) { return 6; }
	}
	for(i=0; i<2; i++)
	{
	    if(bventl[i][0]==componentid) { return 7; }
	}
	for(i=0; i<4; i++)
	{
	    if(bscoop[i][0]==componentid) { return 8; }
	}
	for(i=0; i<13; i++)
	{
	    if(rscoop[i][0]==componentid) { return 9; }
	}
	for(i=0; i<21; i++)
	{
	    if(lskirt[i][0]==componentid) { return 10; }
	}
	for(i=0; i<21; i++)
	{
	    if(rskirt[i][0]==componentid) { return 11; }
	}
	if(hydraulics[0][0]==componentid) { return 12; }
	if(base[0][0]==componentid) { return 13; }
	for(i=0; i<2; i++)
	{
	    if(rbbars[i][0]==componentid) { return 14; }
	}
	for(i=0; i<2; i++)
	{
	    if(fbbars[i][0]==componentid) { return 15; }
	}
	for(i=0; i<17; i++)
	{
	    if(wheels[i][0]==componentid) { return 16; }
	}
	for(i=0; i<2; i++)
	{
	    if(lights[i][0]==componentid) { return 17; }
	}
	return 0;
}
//
public OnVehicleMod(playerid,vehicleid,componentid)
{
new Varz=InitComponents(componentid);
switch (Varz)
{
case 1: { TuneCar[vehicleid][mod1]=componentid; }
case 2: { TuneCar[vehicleid][mod2]=componentid; }
case 3: { TuneCar[vehicleid][mod3]=componentid; }
case 4: { TuneCar[vehicleid][mod4]=componentid; }
case 5: { TuneCar[vehicleid][mod5]=componentid; }
case 6: { TuneCar[vehicleid][mod6]=componentid; }
case 7: { TuneCar[vehicleid][mod7]=componentid; }
case 8: { TuneCar[vehicleid][mod8]=componentid; }
case 9: { TuneCar[vehicleid][mod9]=componentid; }
case 10: { TuneCar[vehicleid][mod10]=componentid; }
case 11: { TuneCar[vehicleid][mod11]=componentid; }
case 12: { TuneCar[vehicleid][mod12]=componentid; }
case 13: { TuneCar[vehicleid][mod13]=componentid; }
case 14: { TuneCar[vehicleid][mod14]=componentid; }
case 15: { TuneCar[vehicleid][mod15]=componentid; }
case 16: { TuneCar[vehicleid][mod16]=componentid; }
case 17: { TuneCar[vehicleid][mod17]=componentid; }
}
printf("Component Added: %d",componentid);
SaveModsForAll(vehicleid);
return 1;
}

public OnVehiclePaintjob(playerid,vehicleid, paintjobid)
{
TuneCar[vehicleid][paintjob]=paintjobid;
return 1;
}
//

public LoadModsForAll(vehicleid)
{
new formatLD[256];
format(formatLD,sizeof(formatLD),"blackfox_carlist/%d.mods",vehicleid);
if(dini_Exists(formatLD))
{
TuneCar[vehicleid][mod1] = dini_Int(formatLD, "mod1");
TuneCar[vehicleid][mod2] = dini_Int(formatLD, "mod2");
TuneCar[vehicleid][mod3] = dini_Int(formatLD, "mod3");
TuneCar[vehicleid][mod4] = dini_Int(formatLD, "mod4");
TuneCar[vehicleid][mod5] = dini_Int(formatLD, "mod5");

TuneCar[vehicleid][mod6] = dini_Int(formatLD, "mod6");
TuneCar[vehicleid][mod7] = dini_Int(formatLD, "mod7");
TuneCar[vehicleid][mod8] = dini_Int(formatLD, "mod8");
TuneCar[vehicleid][mod9] = dini_Int(formatLD, "mod9");
TuneCar[vehicleid][mod10] = dini_Int(formatLD, "mod10");

TuneCar[vehicleid][mod11] = dini_Int(formatLD, "mod11");
TuneCar[vehicleid][mod12] = dini_Int(formatLD, "mod12");
TuneCar[vehicleid][mod13] = dini_Int(formatLD, "mod13");
TuneCar[vehicleid][mod14] = dini_Int(formatLD, "mod14");
TuneCar[vehicleid][mod15] = dini_Int(formatLD, "mod15");

TuneCar[vehicleid][mod16] = dini_Int(formatLD, "mod16");
TuneCar[vehicleid][mod17] = dini_Int(formatLD, "mod17");
TuneCar[vehicleid][paintjob] = dini_Int(formatLD, "paintjob");

}
else
{
dini_Create(formatLD);
}
return 0;
}
public SaveModsForAll(vehicleid)
{
new formatLD[256];
format(formatLD,sizeof(formatLD),"blackfox_carlist/%d.mods",vehicleid);
if(dini_Exists(formatLD))
{
dini_IntSet(formatLD,"mod1",TuneCar[vehicleid][mod1]);
dini_IntSet(formatLD,"mod2",TuneCar[vehicleid][mod2]);
dini_IntSet(formatLD,"mod3",TuneCar[vehicleid][mod3]);
dini_IntSet(formatLD,"mod4",TuneCar[vehicleid][mod4]);
dini_IntSet(formatLD,"mod5",TuneCar[vehicleid][mod5]);
dini_IntSet(formatLD,"mod6",TuneCar[vehicleid][mod6]);
dini_IntSet(formatLD,"mod7",TuneCar[vehicleid][mod8]);
dini_IntSet(formatLD,"mod9",TuneCar[vehicleid][mod9]);
dini_IntSet(formatLD,"mod10",TuneCar[vehicleid][mod10]);
dini_IntSet(formatLD,"mod11",TuneCar[vehicleid][mod11]);
dini_IntSet(formatLD,"mod12",TuneCar[vehicleid][mod12]);
dini_IntSet(formatLD,"mod13",TuneCar[vehicleid][mod13]);
dini_IntSet(formatLD,"mod14",TuneCar[vehicleid][mod14]);
dini_IntSet(formatLD,"mod15",TuneCar[vehicleid][mod15]);
dini_IntSet(formatLD,"mod16",TuneCar[vehicleid][mod16]);
dini_IntSet(formatLD,"mod17",TuneCar[vehicleid][mod17]);
dini_IntSet(formatLD,"paintjob",TuneCar[vehicleid][paintjob]);

}
else
{
dini_Create(formatLD);
dini_IntSet(formatLD,"mod1",TuneCar[vehicleid][mod1]);
dini_IntSet(formatLD,"mod2",TuneCar[vehicleid][mod2]);
dini_IntSet(formatLD,"mod3",TuneCar[vehicleid][mod3]);
dini_IntSet(formatLD,"mod4",TuneCar[vehicleid][mod4]);
dini_IntSet(formatLD,"mod5",TuneCar[vehicleid][mod5]);
dini_IntSet(formatLD,"mod6",TuneCar[vehicleid][mod6]);
dini_IntSet(formatLD,"mod7",TuneCar[vehicleid][mod8]);
dini_IntSet(formatLD,"mod9",TuneCar[vehicleid][mod9]);
dini_IntSet(formatLD,"mod10",TuneCar[vehicleid][mod10]);
dini_IntSet(formatLD,"mod11",TuneCar[vehicleid][mod11]);
dini_IntSet(formatLD,"mod12",TuneCar[vehicleid][mod12]);
dini_IntSet(formatLD,"mod13",TuneCar[vehicleid][mod13]);
dini_IntSet(formatLD,"mod14",TuneCar[vehicleid][mod14]);
dini_IntSet(formatLD,"mod15",TuneCar[vehicleid][mod15]);
dini_IntSet(formatLD,"mod16",TuneCar[vehicleid][mod16]);
dini_IntSet(formatLD,"mod17",TuneCar[vehicleid][mod17]);
dini_IntSet(formatLD,"paintjob",TuneCar[vehicleid][paintjob]);

}
return 0;
}


public OnPlayerExitVehicle(playerid, vehicleid)
{
    if (cinturon[playerid] == 1)
	{
       new string[256];
       new sendername[MAX_PLAYER_NAME];
       GetPlayerName(playerid, sendername, sizeof(sendername));
       format(string, sizeof(string), "* %s se quita el cinturón.", sendername);
       ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   cinturon[playerid] = 0;
       return 1;
	}
	if (GetPlayerState(playerid) == 1)
	{
		return 1;
	}
	/*if(IsAnOwnableCar(vehicleid))
	{
	   	new Float:x,Float:y,Float:z;
		new Float:a;
		GetVehiclePos(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, a);
		CarInfo[vehicleid][cLocationx] = x;
		CarInfo[vehicleid][cLocationy] = y;
		CarInfo[vehicleid][cLocationz] = z;
		CarInfo[vehicleid][cAngle] = a;
		OnPropUpdate();
	}
	if(CarAutolock[vehicleid] == 1)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i))
			{
				SetVehicleParamsForPlayer(vehicleid,i,0,1);
				GameTextForPlayer(playerid,"~w~Car~n~~r~Autolocked",2500,3);
				return 1;
			}
		}
	}*/
/*	new keycar = PlayerInfo[playerid][pPcarkey];
	new keycar2 = PlayerInfo[playerid][pPcarkey2];
	new keycar3 = PlayerInfo[playerid][pPcarkey3];
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsAnOwnableCar(vehicleid))
	{
	   	if(keycar == vehicleid)
		{
	   		for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if (IsPlayerConnected(i))
			    {
			       	SetVehicleParamsForPlayer(vehicleid,i,0,1);
			    }
				GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
				CarInfo[keycar][cLock] = 1;
   			}
		}
		else if(keycar2 == vehicleid)
		{
	   		for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if (IsPlayerConnected(i))
			    {
			       	SetVehicleParamsForPlayer(vehicleid,i,0,1);
			    }
				GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
				CarInfo[keycar2][cLock] = 1;
   			}
		}
		else if(keycar3 == vehicleid)
		{
	   		for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if (IsPlayerConnected(i))
			    {
			       	SetVehicleParamsForPlayer(vehicleid,i,0,1);
			    }
				GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
				CarInfo[keycar3][cLock] = 1;
   			}
		}
	}*/
	if(IsAHarvest(vehicleid))
	{
	    if(FarmerVar[playerid] == 1)
	    {
			if(IsPlayerConnected(playerid))
	    	{
	        if(FarmerVar[playerid] == 0)
			{
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 18)
			{
			    if(IsAHarvest(vehicleid))
			    {
			        TogglePlayerControllable(playerid, 1);
			        RemovePlayerFromVehicle(playerid);
			    }
			    if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22)
				{
					FarmerPickup[playerid][0]--;
				}
				JustStarted[playerid] = 0;
			    FarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			    GameTextForPlayer(playerid, "~w~Dejas de trabajar", 5000, 3);
			}
	    }
	    return 1;
	    }
	}
	if(IsADrugHarvest(vehicleid))
	{
	    if(DrugFarmerVar[playerid] == 1)
	    {
			if(IsPlayerConnected(playerid))
	    	{
     		if(DrugFarmerVar[playerid] == 0)
			{
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 19)
			{
			    if(IsADrugHarvest(vehicleid))
			    {
			        TogglePlayerControllable(playerid, 1);
			        RemovePlayerFromVehicle(playerid);
			    }
			    if(DrugFarmerPickup[playerid][0] >= 1 && DrugFarmerPickup[playerid][0] <= 37)
				{
					DrugFarmerPickup[playerid][0]--;
				}
				JustStarted[playerid] = 0;
				DrugFarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			    GameTextForPlayer(playerid, "~w~Dejas de trabajar", 5000, 3);
			}
	    }
	    return 1;
	    }
	}
	if(IsASmuggleCar(vehicleid))
	{
	    if(SmugglerWork[playerid] == 1)
	    {
	        SetTimer("SmugglerExit", 30000, 0);
	        GameTextForPlayer(playerid, "~n~~w~Tienes ~r~30~w~ segundos~n~para volver", 5000, 3);
		}
	}
	if(gGas[playerid] == 1)
	{
	    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~Left car", 500, 3);
	}
	if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0)
	{
		BusrouteEnd(playerid, vehicleid);
	}
	if (IsABus(vehicleid))
	{
		for (new i=0; i<=MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i))
			{
				if (BusrouteEast[i][0] != 0 && BusrouteEast[i][1] == vehicleid)
				{
					//BusrouteEast[i][2] --;
					GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~g~Pasajero bajó del autobús", 5000, 3);
				}
				else if (BusrouteWest[i][0] != 0 && BusrouteWest[i][1] == vehicleid)
				{
					//BusrouteWest[i][2] --;
					GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~g~Pasajero bajó del autobús", 5000, 3);
				}
			}
		}
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)  //inicio registro
{
	//new string[128];
//	PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
//	PlayerInfo[playerid][pModel] = Peds[classid][0];

    /*if(IsPlayerNPC(playerid))
    {
		new playername[64];
		GetPlayerName(playerid,playername,64);

 		if(!strcmp(playername,"PilotLS",true))
		{
	    	SetSpawnInfo(playerid,69,61,0.0,0.0,0.0,0.0,-1,-1,-1,-1,-1,-1);
		}
	}*/

	if(IsPlayerNPC(playerid)) return 1;
	if (RegistrationStep[playerid] == 0 && gPlayerLogged[playerid] != 1)
	{
		ClearChatbox(playerid, 10);
		//format(string, sizeof(string), "Bienvenido a SpG-Rp %s", SCRIPT_VERSION);
		//SendClientMessage(playerid, COLOR_YELLOW, string);
		SendClientMessage(playerid, COLOR_YELLOW2, "Bienvenido a SPG - RolePlay.");
		//------------------------------
		new string[256];
  		new sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "users/%s.ini", sendername);
		new File: hFile = fopen(string, io_read);
		if (hFile)
		//if (gPlayerAccount[playerid] != 0)
		{
			 //SendClientMessage(playerid, COLOR_YELLOW2, "SERVIDOR: Usa /login <Contraseña> para cargar tu cuenta en el juego.");
			 //SendClientMessage(playerid, COLOR_LIGHTRED, "Tienes 30 segundos para cargar tu cuenta, sino seras expulsado!");
			new loginmsg[256+1];
	    	new loginname[MAX_PLAYER_NAME+1];
	    	GetPlayerName(playerid,loginname,MAX_PLAYER_NAME);
	     	format(loginmsg,256,"Bienvenido a SPG - RolePlay.\n\nCuenta:\t%s\n\nIntroduzca su contraseña:",loginname);
		 	ShowPlayerDialog(playerid,1,DIALOG_STYLE_INPUT,"www.spg-roleplay.info",loginmsg,"Loguear","Salir");
		}
		else
		{
			 //SendClientMessage(playerid, COLOR_YELLOW2, "Usted necesita registrarse, por favor use estos comandos:");
			 //SendClientMessage(playerid, COLOR_WHITE, "SERVIDOR: /registro [Contraseña] ,si ya tienes una cuenta creada usa /login [Contraseña]");
			new loginmsg[256+1];
	    	new loginname[MAX_PLAYER_NAME+1];
	    	GetPlayerName(playerid,loginname,MAX_PLAYER_NAME);
	     	format(loginmsg,256,"Registre su cuenta en SPG - RolePlay.\n\nNombre:\t%s\n\nIntroduzca su contraseña:",loginname);
		 	ShowPlayerDialog(playerid,2,DIALOG_STYLE_INPUT,"www.spg-roleplay.info",loginmsg,"Registrar","Salir");
		}
//		SetPlayerCameraPos(playerid, 1276.7112,-2148.8574,42.5994);  //original//SetPlayerCameraPos(playerid, 81.1132,-1837.6357,52.7521);
 //       SetPlayerCameraPos(playerid, 846.7787,-1320.4628,52.5534);
//		SetPlayerCameraLookAt(playerid, 2023.9972,-1792.2917,61.6005);  //original//SetPlayerCameraLookAt(playerid, 1810.9386,-1818.8710,13.5425);
		PlayerPlaySound(playerid, 1185, 0.0, 0.0, 0.0); //1097
//		PlayerInfo[playerid][pModel] = Peds[classid][0];  camara mover
	//	SetPlayerTeamFromClass(playerid,classid);
	}
	else SpawnPlayer(playerid);
	return false;
	
 	/*if (classid == 1)
	{
			format(string, sizeof(string), "~y~> ~p~Police Chief ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 2)
	{
			format(string, sizeof(string), "~y~> ~p~FBI/ATF Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 3)
	{
			format(string, sizeof(string), "~y~> ~p~National Guard General ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 4)
	{
			format(string, sizeof(string), "~y~> ~p~Fire/Ambulance Chief ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 5)
	{
			format(string, sizeof(string), "~y~> ~p~Espana Drogas Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 6)
	{
			format(string, sizeof(string), "~y~> ~p~Luciano Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 7)
	{
			format(string, sizeof(string), "~y~> ~p~Mayor ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 8)
	{
			format(string, sizeof(string), "~y~> ~p~Hitman Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 9)
	{
			format(string, sizeof(string), "~y~> ~p~News Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 10)
	{
			format(string, sizeof(string), "~y~> ~p~Taxi Cab Company Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 11)
	{
			format(string, sizeof(string), "~y~> ~p~License Faction Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 14)
	{
			format(string, sizeof(string), "~y~> ~p~Nortenos Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 15)
	{
			format(string, sizeof(string), "~y~> ~p~Grove Street Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else if (classid == 16)
	{
			format(string, sizeof(string), "~y~> ~p~Jefferson Saints Leader ~y~< ~n~Leaders only!");
			GameTextForPlayer(playerid,string,3500,6);
	}
	else
	{
		format(string, sizeof(string), "~y~> ~g~Civilian ~y~<");
		GameTextForPlayer(playerid,string,3500,6);
	}
	SetPlayerTeamFromClass(playerid,classid);
	SetupPlayerForClassSelection(playerid);
	return 1;*/
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]) // by DryilZas yeaahhh!!!
{
	if(dialogid == 1)
	{ // Loguear
		if(response)
		{
			new tmp[256];
			new idx;
		    tmp = strtok(inputtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, 0xFFFFFFFF, "Tienes que poner una contraseña.");
	    		SendClientMessage(playerid, 0xFFFFFFFF, "Has sido inmediatamente expulsado.");
		    	SendClientMessage(playerid, 0xFFFFFFFF, "Para salir usa: /Quit");
				return 1;
			}
		    if(IsPlayerConnected(playerid))
	    	{
				OnPlayerLogin(playerid,inputtext);
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "Has seleccionado Salir del servidor.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Gracias por visitar Spanish Pc Gamers RP.");
		    SendClientMessage(playerid, 0xFFFFFFFF, "Para salir usa: /Quit");
		    Kick(playerid);
		}
		return 1; // we processed it.
	}
	if(dialogid == 2)
	{ // Registrar
		if(IsPlayerConnected(playerid))
	    {
	        new tmp[256];
			new idx;
		    tmp = strtok(inputtext, idx);
	        if(!strlen(tmp))
			{
			    SendClientMessage(playerid, 0xFFFFFFFF, "Tienes que poner una contraseña.");
	    		SendClientMessage(playerid, 0xFFFFFFFF, "Has sido inmediatamente expulsado.");
		    	SendClientMessage(playerid, 0xFFFFFFFF, "Para salir usa: /Quit");
				return 1;
			}
	        new string[256];
	        new sendername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "users/%s.ini", sendername);
			new File: hFile = fopen(string, io_read);
			if (hFile)
			{
				GameTextForPlayer(playerid,"~y~~n~~n~~n~~n~~n~~n~~r~ Este nombre ya esta registrado",6000,5);
				fclose(hFile);
				new loginmsg[256+1];
	    		new loginname[MAX_PLAYER_NAME+1];
	    		GetPlayerName(playerid,loginname,MAX_PLAYER_NAME);
	    		format(loginmsg,256,"Registre su cuenta en SPG - RolePlay.\n\nNombre:\t%s\n\nIntroduzca su contraseña:",loginname);
				ShowPlayerDialog(playerid,2,DIALOG_STYLE_INPUT,"www.spg-roleplay.info",loginmsg,"Registrar","Salir");
				return 1;
			}
			OnPlayerRegister(playerid,inputtext);
		}
		return 1; // we processed it.
	}
	if(dialogid == 5) // fustaca
	{ // 24 7 Compra
		if(response)
		{
			if(listitem == 0)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1544.2194,-1353.4695,329.4740);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1544.2194,-1353.4695,329.4740);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 1)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1916.8442,-1209.8379,19.7157);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1916.8442,-1209.8379,19.7157);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 2)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1871.2704,-1408.8197,13.5703);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1871.2704,-1408.8197,13.5703);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 3)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1129.7074,-1456.8744,15.7969);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1129.7074,-1456.8744,15.7969);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 4)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 153.3898,-1937.3004,3.7734);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 153.3898,-1937.3004,3.7734);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 5)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, -53.3662,-12.1136,3.1172);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, -53.3662,-12.1136,3.1172);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 6)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 861.4625,32.2631,87.1682);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 861.4625,32.2631,87.1682);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 7)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1729.4324,471.5518,30.2491);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1729.4324,471.5518,30.2491);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 8)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2377.8137,92.9432,26.4844);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 2377.8137,92.9432,26.4844);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 9)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2493.7058,-1670.6538,13.3359);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 2493.7058,-1670.6538,13.3359);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 10)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2681.6194,-1691.0338,9.4186);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 2681.6194,-1691.0338,9.4186);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 11)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1531.9833,-1693.7388,13.3828);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1531.9833,-1693.7388,13.3828);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 12)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2759.5503,-2454.8889,13.5397);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 2759.5503,-2454.8889,13.5397);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 13)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1153.0242,-2036.0908,69.0078);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1153.0242,-2036.0908,69.0078);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 14)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1206.5527,-1325.4393,13.3984);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1206.5527,-1325.4393,13.3984);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 15)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1467.3315,-1032.4114,23.6563);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1467.3315,-1032.4114,23.6563);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 16)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2114.7224,-1219.2053,23.7995);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 2114.7224,-1219.2053,23.7995);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 17)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1963.7994,-2168.4746,13.3828);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1963.7994,-2168.4746,13.3828);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 18)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2056.0176,-1911.9297,13.5469);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 2056.0176,-1911.9297,13.5469);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 19)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2129.3354,-1113.0577,25.1973);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 2129.3354,-1113.0577,25.1973);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 20)
			{
				new listitems[] = "1\t: Consecionario Playa.\n2\t: Consecionario Lujo.\n3\t: Consecionario Nuevo.\n4\t: 24/7 Norte.\n5\t: 24/7 Unity.\n6\t: Granja.\n7\t: HQ-Latina.\n8\t: HQ-grooves.\n9\t: HQ-Hitman.\n10\t: HQ-Japonesa.\n11\t: HQ-Italiana.\n12\t: Ammu Nation.\n13\t: Zona de Pesca.\n14\t: Anterior...";
	    		ShowPlayerDialog(playerid,6,DIALOG_STYLE_LIST,"Menu de Localizaciones ordinarias",listitems,"Tele","Salir");
				return 1;
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "Ha decidido Salir");
		}
		return 1;
	}
	if(dialogid == 6) // fustaca2
	{ 
		if(response)
		{
			if(listitem == 0)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 349.3292,-1772.3915,5.1309);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 349.3292,-1772.3915,5.1309);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 1)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 552.6555,-1248.5292,16.8749);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 552.6555,-1248.5292,16.8749);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 2)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1738.0602,-1071.5363,23.9609);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1738.0602,-1071.5363,23.9609);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 3)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1311.9495,-920.7078,38.3182);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1311.9495,-920.7078,38.3182);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 4)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1822.1124,-1844.2498,13.4141);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1822.1124,-1844.2498,13.4141);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 5)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, -374.1776,-1443.0587,25.7266);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, -374.1776,-1443.0587,25.7266);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 6)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 2265.2861,-1027.7968,59.2818);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 2265.2861,-1027.7968,59.2818);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 7)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1690.0409,-2110.9263,13.3828);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1690.0409,-2110.9263,13.3828);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 8)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1532.5703,-1442.9017,13.3828);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1532.5703,-1442.9017,13.3828);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 9)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1020.5529,-1140.1378,23.6563);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1020.5529,-1140.1378,23.6563);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 10)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1236.4851,-833.5798,84.1478);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1236.4851,-833.5798,84.1478);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 11)
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1358.6172,-1281.1204,13.3196);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 1358.6172,-1281.1204,13.3196);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 12) // calabaza
			{
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 383.9538,-2077.9167,7.8359);
						TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
					}
					else
					{
						SetPlayerPos(playerid, 383.9538,-2077.9167,7.8359);
					}
					SendClientMessage(playerid, COLOR_GRAD1, "   Te has teletransportado !");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
			}
			if(listitem == 13)
			{
					new listitems[] = "1\t: Alto de la torre con H.\n2\t: Glen Park.\n3\t: Skate Park.\n4\t: Zona Premiums.\n5\t: Faro de la Playa.\n6\t: Huerta de droga.\n7\t: Montaña Norte.\n8\t: Autopista LS-LV.\n9\t: Palomino Creek.\n10\t: Groove Street.\n11\t: Estadio.\n12\t: Comisaria.\n13\t: Base Militar.\n14\t: Zona Administrativa.\n15\t: Hospital.\n16\t: Banco.\n17\t: Tienda de Ropa.\n18\t: Aeropuerto.\n19\t: Licencias.\n20\t: Consecionario Motos.\n21\t: Siguiente...";
	    			ShowPlayerDialog(playerid,5,DIALOG_STYLE_LIST,"Menu de Localizaciones ordinarias",listitems,"Tele","Salir");
					return 1;
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "Ha decidido Salir");
		}
		return 1;
	}
	if(dialogid == 3)
	{ // 24 7 Compra
		if(response)
		{
			if(listitem == 0)
			{
			    new string[256];
			    if(GetPlayerMoney(playerid) < 150)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
		        	new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	            	ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }
				if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 5000 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 5000 - price;
			        format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
			    }
			    else
			    {
			        format(string, sizeof(string), "~r~-$%d", 1000);
					GameTextForPlayer(playerid, string, 1000, 1);
					SafeGivePlayerMoney(playerid,-1000);
					SBizzInfo[9][sbTill] += 1000;
					ExtortionSBiz(9, 1000);
			    }
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new randphone = 100000 + random(899999);//minimum 1000  max 9999
				PlayerInfo[playerid][pPnumber] = randphone;
				format(string, sizeof(string), "   Teléfono móvil comprado el nuevo número es %d", randphone);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Puedes comprobarlo escribiendo /estado");
				SendClientMessage(playerid, COLOR_WHITE, "Servidor: Ahora puede escribir /ayuda para ver los comandos de teléfono móvil.");
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	        	ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
				return 1;
			}
			if(listitem == 1)
			{
			    new string[256];
			    if(GetPlayerMoney(playerid) < 500)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	            	ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }
				if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 500 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 500 - price;
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,-500);
					SBizzInfo[9][sbTill] += 500;
					ExtortionSBiz(9, 500);
					format(string, sizeof(string), "~r~-$%d", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new prize;
				new symb1[32]; new symb2[32]; new symb3[32];
				new randcard1 = random(10);//minimum 1000  max 9999
				new randcard2 = random(10);//minimum 1000  max 9999
				new randcard3 = random(10);//minimum 1000  max 9999
				if(randcard1 >= 5)
				{
					format(symb1, sizeof(symb1), "~b~]");
					randcard1 = 1;
				}
				else if(randcard1 <= 4 && randcard1 >= 2)
				{
					format(symb1, sizeof(symb1), "~g~]");
					randcard1 = 2;
				}
				else if(randcard1 < 2)
				{
					format(symb1, sizeof(symb1), "~y~]");
					randcard1 = 3;
				}
				if(randcard2 >= 5)
				{
					format(symb2, sizeof(symb2), "~b~]");
					randcard2 = 1;
				}
				else if(randcard2 <= 4 && randcard2 >= 2)
				{
					format(symb2, sizeof(symb2), "~g~]");
					randcard2 = 2;
				}
				else if(randcard2 < 2)
				{
					format(symb2, sizeof(symb2), "~y~]");
					randcard2 = 3;
				}
				if(randcard3 >= 5)
				{
					format(symb3, sizeof(symb3), "~b~]");
					randcard3 = 1;
				}
				else if(randcard3 <= 4 && randcard3 >= 2)
				{
					format(symb3, sizeof(symb3), "~g~]");
					randcard3 = 2;
				}
				else if(randcard3 < 2)
				{
					format(symb3, sizeof(symb3), "~y~]");
					randcard3 = 3;
				}
				if(randcard1 == randcard2 && randcard1 == randcard3)
				{
					if(randcard1 > 5)
					{
						prize = 2500;
					}
					if(randcard1 <= 4 && randcard1 >= 2)
					{
						prize = 1500;
					}
					if(randcard1 < 2)
					{
						prize = 500;
					}
					SafeGivePlayerMoney(playerid,prize);
					SBizzInfo[9][sbTill] -= prize;
					ExtortionSBiz(9, prize);
					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~g~$%d",symb1,symb2,symb3, prize);
				}
				else
				{
					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~r~$0",symb1,symb2,symb3);
				}
				GameTextForPlayer(playerid, string, 3000, 3);
				return 1;
				}
			}
			if(listitem == 2)
			{
			    new string[256];
			    if(GetPlayerMoney(playerid) < 10)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	                ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }
				if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
					GameTextForPlayer(playerid, "~r~-$10", 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,- 10);
					SBizzInfo[9][sbTill] += 10;
					ExtortionSBiz(9, 10);
					format(string, sizeof(string), "~r~-$%d", 100);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                PlayerInfo[playerid][pPhoneBook] = 1;
				format(string, sizeof(string), "   Has comprado una agenda telefonica !");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Servidor: Escribe /numero <ID del jugador>.");
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	    	    ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
				return 1;
			}
			if(listitem == 3) //tabaco
			{
			    new string[256];
                if(GetPlayerMoney(playerid) < 10)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	            	ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }
				if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 500 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 500 - price;
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,-500);
					SBizzInfo[9][sbTill] += 500;
					ExtortionSBiz(9, 500);
					format(string, sizeof(string), "~r~-$%d", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pCigarettes] = 5;
				format(string, sizeof(string), "Has comprado Tabaco (Contiene 5 Cigarros la Cajetilla).");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Servidor: escribe /fumar ");
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	        	ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			}
			if(listitem == 4)
			{
			    //new string[256];
				SendClientMessage(playerid, 0xFFFFFFFF, "Esto no esta ACTIVO !");
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	        	ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
		    	return 1;
			}
			if(listitem == 5)
			{
			    new string[256];
			    if(GetPlayerMoney(playerid) < 1)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	        	    ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }
				if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 1 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 1 - price;
					SafeGivePlayerMoney(playerid,- payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,-1);
					format(string, sizeof(string), "~r~-$%d", 1);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				Condom[playerid] ++;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Has comprado un preservativo.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	        	ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			}
			if(listitem == 6)//mochila
			{
			    new string[256];
			    if(GetPlayerMoney(playerid) < 200)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
			        new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	        	    ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }
    			if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 200 / 10;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 200 - price;
					SafeGivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 200);
					format(string, sizeof(string), "~r~-$%d", 200);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                SafeGivePlayerWeapon(playerid, 46, 1);
			    new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	            ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			}
			if(listitem == 7) //mascara
			{
			    new string[256];
			    if(GetPlayerMoney(playerid) < 750)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
                new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	            ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }
				if(PlayerInfo[playerid][pLevel] < 5)
			    {
					SendClientMessage(playerid, COLOR_GREY, "Necesitas ser nivel 5 para comprar esto");
 			    new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	            ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
					return 1;
			    }
			    if(PlayerInfo[playerid][pMask] != 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Ya dispones de una");
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	            ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
					return 1;
			    }
			    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			    {
                    GameTextForPlayer(playerid, "~w~Free", 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 750);
					format(string, sizeof(string), "~r~-$%d", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Has comprado una mascara.");
				GameTextForPlayer(playerid, string, 5000, 1);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Servidor: usa /maskon o /maskoff");
				PlayerInfo[playerid][pMask] = 1;
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	            ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			}
			if(listitem == 8)//mechero
			{
			    new string[256];
			    if(GetPlayerMoney(playerid) < 100)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
			    new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	            ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }
			    SafeGivePlayerMoney(playerid, - 100);
			    format(string, sizeof(string), "~r~-$%d", 100);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    format(string, sizeof(string), "Has comprado un Mechero.");
			    SendClientMessage(playerid, COLOR_GRAD4, string);
			    PlayerInfo[playerid][pLighter] = 200;
			    new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	            ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			}
			if (listitem == 9 && GetPlayerMoney(playerid) > 399) //casco
            {
                PlayerInfo[playerid][pCasco] = 1;
                SafeGivePlayerMoney(playerid,-400);
                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                SendClientMessage(playerid, COLOR_WHITE, "Casco Comprado.");
                SendClientMessage(playerid, COLOR_WHITE, "Para ponertelo usa /casco. Para quitartelo usa /qcasco.");
                GameTextForPlayer(playerid, "~r~-$400", 5000, 1);
                SBizzInfo[9][sbTill] += 400;
                new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	            ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
                return 1;
            }
			{
				////////////////
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "Ha decidido Salir");
		}
		//-------[Radio]-------
	/*	if(dialogid == 100) //La id anteriormente definida
			{
			if(response)
			{
				if(listitem == 0) //La primera canción
			{
				StopAudioStreamForPlayer(playerid); //Detiene la música que esté en curso
				PlayAudioStreamForPlayer(playerid,"El link de la canción."); // Reproduce la música.
			}
				if(listitem == 1) //La segunda.
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid,"El link de la canción");
			}
				if(listitem == 2) //La tercera
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid,"El link de la canción");
			}
				if(listitem == 3) //Apaga la radio
			{
			StopAudioStreamForPlayer(playerid);
			SendClientMessage(playerid,COLOR_ROJO,"Radio apagada");
		}

		//---------*/
		
    if(dialogid == 4)
	{ // sex shop
		if(response)
		{
			if(listitem == 0)
			{
			    new string[256];
			    if(GetPlayerMoney(playerid) < 300)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
      				new listitems[] = "1\t: Dildo Morado $300\n2\t: Dildo Mini $300\n3\t: Dildo XXL $300\n4\t: Dildo Metalico $300";
 					ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"Sex Shop (Mayores d 18) |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }
			    
       			format(string, sizeof(string), "~r~-$%d", 300);
				GameTextForPlayer(playerid, string, 5000, 1);
				SafeGivePlayerMoney(playerid,-300);


				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "   Has comprado un juguete sexual, disfrutalo.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				
				SafeGivePlayerWeapon(playerid, 10, 1);
				
                new listitems[] = "1\t: Dildo Morado $300\n2\t: Dildo Mini $300\n3\t: Dildo XXL $300\n4\t: Dildo Metalico $300";
				ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"Sex Shop (Mayores d 18) |Productos en Venta|",listitems,"Comprar","Salir");
				return 1;
			}
			if(listitem == 1)
			{
			    new string[256];
			    if(GetPlayerMoney(playerid) < 300)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
      				new listitems[] = "1\t: Dildo Morado $300\n2\t: Dildo Mini $300\n3\t: Dildo XXL $300\n4\t: Dildo Metalico $300";
 					ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"Sex Shop (Mayores d 18) |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }

       			format(string, sizeof(string), "~r~-$%d", 300);
				GameTextForPlayer(playerid, string, 5000, 1);
				SafeGivePlayerMoney(playerid,-300);


				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "   Has comprado un juguete sexual, disfrutalo.");
				SendClientMessage(playerid, COLOR_GRAD4, string);

				SafeGivePlayerWeapon(playerid, 11, 1);

                new listitems[] = "1\t: Dildo Morado $300\n2\t: Dildo Mini $300\n3\t: Dildo XXL $300\n4\t: Dildo Metalico $300";
				ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"Sex Shop (Mayores d 18) |Productos en Venta|",listitems,"Comprar","Salir");
				return 1;
			}
			if(listitem == 3)
			{
			    new string[256];
			    if(GetPlayerMoney(playerid) < 300)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
      				new listitems[] = "1\t: Dildo Morado $300\n2\t: Dildo Mini $300\n3\t: Dildo XXL $300\n4\t: Dildo Metalico $300";
 					ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"Sex Shop (Mayores d 18) |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }

       			format(string, sizeof(string), "~r~-$%d", 300);
				GameTextForPlayer(playerid, string, 5000, 1);
				SafeGivePlayerMoney(playerid,-300);


				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "   Has comprado un juguete sexual, disfrutalo.");
				SendClientMessage(playerid, COLOR_GRAD4, string);

				SafeGivePlayerWeapon(playerid, 13, 1);

                new listitems[] = "1\t: Dildo Morado $300\n2\t: Dildo Mini $300\n3\t: Dildo XXL $300\n4\t: Dildo Metalico $300";
				ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"Sex Shop (Mayores d 18) |Productos en Venta|",listitems,"Comprar","Salir");
				return 1;
			}
			if(listitem == 2)
			{
			    new string[256];
			    if(GetPlayerMoney(playerid) < 300)
			    {
			    	SendClientMessage(playerid, 0xFFFFFFFF, "Insuficiente dinero.");
      				new listitems[] = "1\t: Dildo Morado $300\n2\t: Dildo Mini $300\n3\t: Dildo XXL $300\n4\t: Dildo Metalico $300";
 					ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"Sex Shop (Mayores d 18) |Productos en Venta|",listitems,"Comprar","Salir");
			    	return 1;
			    }

       			format(string, sizeof(string), "~r~-$%d", 300);
				GameTextForPlayer(playerid, string, 5000, 1);
				SafeGivePlayerMoney(playerid,-300);


				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "   Has comprado un juguete sexual, disfrutalo.");
				SendClientMessage(playerid, COLOR_GRAD4, string);

				SafeGivePlayerWeapon(playerid, 12, 1);

                new listitems[] = "1\t: Dildo Morado $300\n2\t: Dildo Mini $300\n3\t: Dildo XXL $300\n4\t: Dildo Metalico $300";
				ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"Sex Shop (Mayores d 18) |Productos en Venta|",listitems,"Comprar","Salir");
				return 1;
			}
			if(listitem == 14)
			{
				////////////////
			}
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "Ha decidido Salir");
		}
	}
	return 1; // we processed it.
}

public SetupPlayerForClassSelection(playerid)
{
	/*switch (gTeam[playerid])
	{
		case TEAM_BLUE:
		{
			SetPlayerInterior(playerid,5);
			SetPlayerPos(playerid,323.4,305.6,999.1);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,323.4-1.5-1.0,305.6,999.1+0.7);
			SetPlayerCameraLookAt(playerid,323.4-1.0,305.6,999.1+0.7);

		}
		case TEAM_ADMIN:
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid,-2654.4,1424.2,912.4);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,-2654.4-1.5,1424.2,912.4+0.7);
			SetPlayerCameraLookAt(playerid,-2654.4,1424.2,912.4+0.7);
		}
		default:
		{
		    SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid,361.8270,174.0347,1008.3893);
			SetPlayerFacingAngle(playerid,90);
		    SetPlayerCameraPos(playerid, 361.7270,169.0347,1008.3893);
		    SetPlayerCameraLookAt(playerid,361.8270,174.0347,1008.3893);
		}
	}*/
}

//---------------------------------------------------------

public SetPlayerTeamFromClass(playerid,classid)
{
 	/*if (classid >= 1 && classid <= 14)
	{
		gTeam[playerid] = 11; //admin
		PlayerInfo[playerid][pTeam] = 11;
	}
	else
	{
	    gTeam[playerid] = 3;
	    PlayerInfo[playerid][pTeam] = 3;
	}*/
}

//---------------------------------------------------------

public SetPlayerCriminal(playerid,declare,reason[])
{//example: SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle");
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
	    new points = WantedPoints[playerid];
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new wantedmes[128];
		new wlevel;
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if (declare == 255)
		{
			format(turner, sizeof(turner), "Satélite Espía");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		format(turnmes, sizeof(turnmes), "Has cometido un delito: %s. Avistado por: %s.",reason,turner);
		SendClientMessage(playerid, COLOR_DARKNICERED, turnmes);
		if(points > 0)
		{
		    new yesno;
			if(points == 3) { if(WantedLevel[playerid] != 1) { WantedLevel[playerid] = 1; wlevel = 1; yesno = 1; } }
			else if(points >= 4 && points <= 5) { if(WantedLevel[playerid] != 2) { WantedLevel[playerid] = 2; wlevel = 2; yesno = 1; } }
			else if(points >= 6 && points <= 7) { if(WantedLevel[playerid] != 3) { WantedLevel[playerid] = 3; wlevel = 3; yesno = 1; } }
			else if(points >= 8 && points <= 9) { if(WantedLevel[playerid] != 4) { WantedLevel[playerid] = 4; wlevel = 4; yesno = 1; } }
			else if(points >= 10 && points <= 11) { if(WantedLevel[playerid] != 5) { WantedLevel[playerid] = 5; wlevel = 5; yesno = 1; } }
			else if(points >= 12 && points <= 13) { if(WantedLevel[playerid] != 6) { WantedLevel[playerid] = 6; wlevel = 6; yesno = 1; } }
			else if(points >= 14) { if(WantedLevel[playerid] != 10) { WantedLevel[playerid] = 10; wlevel = 10; yesno = 1; } }
			if(WantedLevel[playerid] >= 1) { if(gTeam[playerid] == 3) { gTeam[playerid] = 4; } }
			if(yesno)
			{
				format(wantedmes, sizeof(wantedmes), "Nivel de busqueda: %d", wlevel);
				SendClientMessage(playerid, COLOR_YELLOW, wantedmes);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
					    {
							format(cbjstore, sizeof(turnmes), "HQ: A todas las unidades: Denunciante: %s",turner);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
							format(cbjstore, sizeof(turnmes), "HQ: Delito: %s, Sospechoso: %s",reason,turned);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
						}
					}
				}
			}
		}
	}//not connected
}
//---------------------------------------------------------

public SetPlayerCriminalEx(playerid,declare,reason[])
{//example: SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle");
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrimes] += 1;
	    new points = WantedPoints[playerid];
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new wantedmes[128];
		new wlevel;
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if (declare == 255)
		{
			format(turner, sizeof(turner), "Satélite Espía");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		format(turnmes, sizeof(turnmes), "Has cometido un delito: %s. Avistado por: %s.",reason,turner);
		//SendClientMessage(playerid, COLOR_DARKNICERED, turnmes);
		if(points > 0)
		{
		    new yesno;
			if(points == 3) { if(WantedLevel[playerid] != 1) { WantedLevel[playerid] = 1; wlevel = 1; yesno = 1; } }
			else if(points >= 4 && points <= 5) { if(WantedLevel[playerid] != 2) { WantedLevel[playerid] = 2; wlevel = 2; yesno = 1; } }
			else if(points >= 6 && points <= 7) { if(WantedLevel[playerid] != 3) { WantedLevel[playerid] = 3; wlevel = 3; yesno = 1; } }
			else if(points >= 8 && points <= 9) { if(WantedLevel[playerid] != 4) { WantedLevel[playerid] = 4; wlevel = 4; yesno = 1; } }
			else if(points >= 10 && points <= 11) { if(WantedLevel[playerid] != 5) { WantedLevel[playerid] = 5; wlevel = 5; yesno = 1; } }
			else if(points >= 12 && points <= 13) { if(WantedLevel[playerid] != 6) { WantedLevel[playerid] = 6; wlevel = 6; yesno = 1; } }
			else if(points >= 14) { if(WantedLevel[playerid] != 10) { WantedLevel[playerid] = 10; wlevel = 10; yesno = 1; } }
			if(WantedLevel[playerid] >= 1) { if(gTeam[playerid] == 3) { gTeam[playerid] = 4; } }
			if(yesno)
			{
				format(wantedmes, sizeof(wantedmes), "Nivel de busqueda: %d", wlevel);
				SendClientMessage(playerid, COLOR_YELLOW, wantedmes);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
					    {
							format(cbjstore, sizeof(turnmes), "HQ: All Units APB: Reporter: %s",turner);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
							format(cbjstore, sizeof(turnmes), "HQ: Crime: %s, Suspect: %s",reason,turned);
							SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
						}
					}
				}
			}
		}
	}//not connected
}
//---------------------------------------------------------

public SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrime(playerid);
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new crbjstore[128];
		if (declare == 255)
		{
			format(turner, sizeof(turner), "911");
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}
		GetPlayerName(playerid, turned, sizeof(turned));
		format(turnmes, sizeof(turnmes), "SMS: %s, Because you %s, you are no longer a Criminal, Sender: MOLE (555)",turned,reason);
		RingTone[playerid] = 20;
		SendClientMessage(playerid, COLOR_YELLOW, turnmes);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
			    {
					format(crbjstore, sizeof(crbjstore), "HQ: All Units Officer %s Has Completed Assignment",turner);
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
					format(crbjstore, sizeof(crbjstore), "HQ: %s Has Been Processed, %s",turned,reason);
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
				}
			}
		}
	}
}

public RingToner()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 6)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 20)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
			}
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return 1;
}

public RingTonerRev()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 5)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 19)
			{
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
				RingTone[i] = 0;
			}
		}
	}
	SetTimer("RingToner", 1000, 0);
	return 1;
}

public GlobalDescCheck()
{
	    for(new ii = 0; ii < MAX_PLAYERS; ii++)
		{
			if(dActivada[ii] == 1)
			{
			    Delete3DTextLabel(descripcion[ii]);
				descripcion[ii] = Create3DTextLabel(dTextVar[ii],COLOR_LIGHTGREEN,30.0,40.0,5.0,40.0,1); //Aquí el color y la posición
   				Attach3DTextLabelToPlayer(descripcion[ii], ii, 0.0, 0.0, 0.40);
			}
			if(dActivada[ii] == 0)
			{
				Delete3DTextLabel(descripcion[ii]);
			}
		}
}

public GlobalHackCheck()
{
	/*
	 *               DUCK anticheat v1.0
	 *                   by LordMan
	 *
	 *  This function is called every second the check each
	 *  player's money/weapons to ensure they're not hacking
	 *
	 */

	new curHour, curMinute, curSecond;
	new string[256], /*banip[16],*/ plname[64];
	new weaponid, ammo;
	//new hacking;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    for(new ii = 0; ii < MAX_PLAYERS; ii++)
		{
 			if(IsPlayerConnected(ii))
   			{
   			    if(PlayerInfo[i][pMaskuse] == 1)
   			    {
   					ShowPlayerNameTagForPlayer(ii, i, 0);
   				}
			}
		}
	    if(IsPlayerConnected(i) && PlayerInfo[i][pAdministrador] != 1 && AdminDuty[i] != 1)
	    {
			gettime(curHour, curMinute, curSecond);
			GetPlayerWeaponData(i, 7, weaponid, ammo);
			new pSpecialAction = GetPlayerSpecialAction(i);
			if (weaponid > 1 || pSpecialAction == SPECIAL_ACTION_USEJETPACK)
			{
				TogglePlayerControllable(i, 0);
				OnPlayerUpdate(i);
				GetPlayerName(i, plname, sizeof(plname));
				format(string, sizeof(string), "Administración: %s ha sido baneado por Rocco_Perez, razon: Uso de trampas (volar)", plname);
				Ban(i);
				SendClientMessageToAll(COLOR_LIGHTRED, string);
			}
		}
	}
}


public OtherTimer()
{
    new Float:maxspeed = 175.0;
    new plname[MAX_PLAYER_NAME];
	new string[256];
	new Float:oldposx, Float:oldposy, Float:oldposz;
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if (GetPlayerState(i) == 1) CheckForWalkingTeleport(i); // IF THE PLAYER IS IN A TELEPORT ZONE, TELEPORT THEM
	        new vehicleid = GetPlayerVehicleID(i);
            if(SafeTime[i] > 0)
			{
				SafeTime[i]--;
			}
			if(SafeTime[i] == 1)
			{
				if(gPlayerAccount[i] == 1 && gPlayerLogged[i] == 0)
				{
					SendClientMessage(i, COLOR_WHITE, "SERVIDOR: Ahora se puede acceder tecleando /login <Contraseña>");
				}
			}
		    if(GetPlayerState(i) == 2)
		    {
				GetPlayerPos(i, TelePos[i][3], TelePos[i][4], TelePos[i][5]);
				if(TelePos[i][5] > 550.0)
				{
					TelePos[i][0] = 0.0;
					TelePos[i][1] = 0.0;
				}
				if(TelePos[i][0] != 0.0)
				{
					new Float:xdist = TelePos[i][3]-TelePos[i][0];
					new Float:ydist = TelePos[i][4]-TelePos[i][1];
					new Float:sqxdist = xdist*xdist;
					new Float:sqydist = ydist*ydist;
					new Float:distance = (sqxdist+sqydist)/31;
					if ((BusrouteEast[i][0] == 0 && BusrouteWest[i][0] == 0))
					{
						if(gSpeedo[i] == 2)
						{
							if(distance <10)
							{
								format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph :   ~w~%.0f",distance);
							}
							if(distance > 10 && distance < 100)
							{
								format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph :  ~w~%.0f",distance);
							}
							if(distance > 100)
							{
								format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph : ~w~%.0f",distance);
							}
							GameTextForPlayer(i, string, 2000, 5);
						}
						if(distance > maxspeed && PlayerInfo[i][pAdministrador] != 1)
						{
							new tmpcar = GetPlayerVehicleID(i);
							if(!IsAPlane(tmpcar))
							{
								GetPlayerName(i, plname, sizeof(plname));
								format(string, 256, "Administración: [%d]%s %.0f mph",i,plname,distance);
								ABroadCast(COLOR_YELLOW,string);
							}
						}
					}
				}
				if(TelePos[i][5] < 550.0 && TelePos[i][3] != 0.0)
				{
					TelePos[i][0] = TelePos[i][3];
					TelePos[i][1] = TelePos[i][4];
				}
			}
		    if(PlayerInfo[i][pLocal] != 255 && PlayerInfo[i][pInt] != 0)
			{
				new house = PlayerInfo[i][pLocal];
				GetPlayerPos(i, oldposx, oldposy, oldposz);
				if(oldposz != 0.0)
				{
					if(oldposz < 600.0)
					{
						/*if(house > 10000)
						{
							new tmpcar = GetPlayerVehicleID(i);
							if (!PlayerToPoint(6, i,1040.6,-1021.0,31.7) && house == 10001 ||!PlayerToPoint(6, i,-2720.5,217.5,4.1) && house == 10002 ||!PlayerToPoint(6, i,2644.6,-2044.9,13.3) && house == 10003)
							{
								if (GetPlayerState(i) == 2)
								{
									SetVehiclePos(tmpcar, HouseCarSpawns[tmpcar-1][0], HouseCarSpawns[tmpcar-1][1], HouseCarSpawns[tmpcar-1][2]);
									SetVehicleZAngle(tmpcar, HouseCarSpawns[tmpcar-1][3]);
								}
								else
								{
									SetPlayerPos(i, HouseCarSpawns[tmpcar-1][0], HouseCarSpawns[tmpcar-1][1], HouseCarSpawns[tmpcar-1][2]);
								}
								new oldcash = gSpentCash[i];
								new Total = GetPlayerMoney(i) - oldcash;
								printf("Total %d = GetPlayerMoney(playerid) %d - oldcash %d",Total,GetPlayerMoney(i),oldcash);
								new name[MAX_PLAYER_NAME];
								GetPlayerName(i, name, sizeof(name));
								format(string,128,"<< %s has left the homemodshop with $%d >>",name,Total);
								PayLog(string);
								gSpentCash[i] = 0;
								TelePos[i][0] = 0.0;
								TelePos[i][1] = 0.0;
								PlayerInfo[i][pLocal] = 255;
								SetPlayerInterior(i,0);
								PlayerInfo[i][pInt] = 0;
								Spectate[i] = 255;
							}
						}*/
						if(house == 242)
						{
						    SetPlayerInterior(i,0);
							SetPlayerPos(i,-2518.5967,-623.2701,132.7679);
							PlayerInfo[i][pInt] = 0;
							PlayerInfo[i][pLocal] = 255;
						}
						/*if(house >= 99 && house != 10000)
						{
							SetPlayerPos(i, BizzInfo[house-99][bEntranceX], BizzInfo[house-99][bEntranceY],BizzInfo[house-99][bEntranceZ]); // Warp the player
							PlayerInfo[i][pLocal] = 255;
							SetPlayerInterior(i,0);
							PlayerInfo[i][pInt] = 0;
						}*/
						else if(house < 99 && house != 10000)
						{
							SetPlayerPos(i, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]); // Warp the player
							PlayerInfo[i][pLocal] = 255;
							SetPlayerInterior(i,0);
							PlayerInfo[i][pInt] = 0;
						}
					}
				}
			}  //el fallo puede estar aqui pa arriba
		    if(CellTime[i] > 0)
			{
				if (CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
					if(Mobile[Mobile[i]] == i)
					{
						CallCost[i] = CallCost[i]+callcost;
					}
				}
				CellTime[i] = CellTime[i] +1;
				if (Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
				{
				    if(IsPlayerConnected(Mobile[i]))
				    {
						new called[MAX_PLAYER_NAME];
						GetPlayerName(Mobile[i], called, sizeof(called));
						format(string, sizeof(string), "*El Telefono de %s esta sonando.", called);
						RingTone[Mobile[i]] = 10;
						ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
				format(string, sizeof(string), "~w~The call cost~n~~r~$%d",CallCost[i]);
				SafeGivePlayerMoney(i, -CallCost[i]);
				SBizzInfo[2][sbTill] += CallCost[i];
				ExtortionSBiz(2, CallCost[i]);
				GameTextForPlayer(i, string, 5000, 1);
				CallCost[i] = 0;
			}
			if(TransportTime[i] > 0)
			{//Taxi driver and passenger only
			    if(TransportTime[i] >= 16)
				{
					TransportTime[i] = 1;
					if(TransportDriver[i] < 999)
					{
						if(IsPlayerConnected(TransportDriver[i]))
						{
	      					TransportCost[i] += TransportValue[TransportDriver[i]];
						    TransportCost[TransportDriver[i]] = TransportCost[i];
						}
					}
				}
			    TransportTime[i] += 1;
			    format(string, sizeof(string), "~r~%d ~w~: ~g~$%d",TransportTime[i],TransportCost[i]);
			    GameTextForPlayer(i, string, 15000, 6);
			}
			if (BusrouteEast[i][0] != 0 || BusrouteWest[i][0] != 0)
			{
				if (!IsPlayerInAnyVehicle(i) || !IsABus(GetPlayerVehicleID(i)))
				if (vehicleid != 0)
				{
					if (!IsABus(vehicleid))
					{
						if (BusrouteEast[i][0] != 0) BusrouteEnd(i, BusrouteEast[i][1]);
						else if (BusrouteWest[i][0] != 0) BusrouteEnd(i, BusrouteWest[i][1]);
					}
				}
				else
				{
					if (BusrouteEast[i][0] != 0) BusrouteEnd(i, BusrouteEast[i][1]);
					else if (BusrouteWest[i][0] != 0) BusrouteEnd(i, BusrouteWest[i][1]);
				}
			}
			/*if (IsABus(vehicleid) && GetPlayerState(i) == 2 && PlayerInfo[i][pMember] != 10 || IsABus(vehicleid) && GetPlayerState(i) == 2 && PlayerInfo[i][pLeader] != 10)
			{
				SetVehicleToRespawn(vehicleid);
			}*/
		}
	}
	return 1;
}

public SetPlayerUnjail()
{
//	new plname[MAX_PLAYER_NAME];
	new string[256];
	if(PaintballPlayers >= 2 && PaintballRound != 1 && StartingPaintballRound != 1)
	{
		StartingPaintballRound = 1;
	   	SetTimer("PreparePaintball", 15000, 0);
	}
	if(KartingPlayers >= 2 && KartingRound != 1 && StartingKartRound != 1)
	{
	    StartingKartRound = 1;
	    SetTimer("PrepareKarting", 15000, 0);
	}
	if(KartingRound != 0 && KartingPlayers < 2)
	{
	    StartingKartRound = 0;
	    KartingRound = 0;
	    EndingKartRound = 1;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			new newcar = GetPlayerVehicleID(i);
			new level = PlayerInfo[i][pLevel];
			if(level >= 0 && level <= 2) { PlayerInfo[i][pPayCheck] += 1; }
			else if(level >= 3 && level <= 4) { PlayerInfo[i][pPayCheck] += 2; }
			else if(level >= 5 && level <= 6) { PlayerInfo[i][pPayCheck] += 3; }
			else if(level >= 7 && level <= 8) { PlayerInfo[i][pPayCheck] += 4; }
			else if(level >= 9 && level <= 10) { PlayerInfo[i][pPayCheck] += 5; }
			else if(level >= 11 && level <= 12) { PlayerInfo[i][pPayCheck] += 6; }
			else if(level >= 13 && level <= 14) { PlayerInfo[i][pPayCheck] += 7; }
			else if(level >= 15 && level <= 16) { PlayerInfo[i][pPayCheck] += 8; }
			else if(level >= 17 && level <= 18) { PlayerInfo[i][pPayCheck] += 9; }
			else if(level >= 19 && level <= 20) { PlayerInfo[i][pPayCheck] += 10; }
			else if(level >= 21) { PlayerInfo[i][pPayCheck] += 11; }
		    if(PlayerInfo[i][pJailed] > 0)
		    {
				if(PlayerInfo[i][pJailTime] > 0 && WantLawyer[i] == 0)
				{
					PlayerInfo[i][pJailTime]--;
				}
				if(PlayerInfo[i][pJailTime] <= 0 && WantLawyer[i] == 0)
				{
				    PlayerInfo[i][pJailTime] = 0;
					if(PlayerInfo[i][pJailed] == 1)
					{
						SetPlayerInterior(i, 6);
						PlayerInfo[i][pInt] = 6;
						SetPlayerPos(i,246.8439,70.0776,1003.6406);
					}
					else if(PlayerInfo[i][pJailed] == 2)
					{
					    SetPlayerWorldBounds(i,20000.0000,-20000.0000,20000.0000,-20000.0000); //Reset world to player
					    SetPlayerInterior(i, 0);
					    PlayerInfo[i][pInt] = 0;
					    SetPlayerPos(i, 90.2101,1920.4854,17.9422);
					}
					PlayerInfo[i][pJailed] = 0;
					SendClientMessage(i, COLOR_GRAD1,"Departamento: Has sido liberado de tu arresto.");
					format(string, sizeof(string), "~g~POLICIA:~n~~w~Intenta ser un buen ciudadano");
					GameTextForPlayer(i, string, 5000, 1);
					if(gTeam[i] == 4) { gTeam[i] = 3; }
					ClearCrime(i);
					SetPlayerToTeamColor(i);
				}
			}
			if(GetPlayerMoney(i) - CurrentMoney[i] > 500)
		    {
		        new nombre[MAX_PLAYER_NAME];

				GetPlayerName(i, nombre, sizeof(nombre));
		        if(ConsumingMoney[i])
		        {
                    CurrentMoney[i] = GetPlayerMoney(i);
					ConsumingMoney[i] = 0;
		        }
		        else
		        {
			        format(string, 256, "Dinero: [%s] pasa de $%d a $%d.",nombre,CurrentMoney[i],GetPlayerMoney(i));
					ABroadCast(COLOR_YELLOW,string);
					PayLog(string);
			        CurrentMoney[i] = GetPlayerMoney(i);
		        }
		    }
		    else
		    {
		        CurrentMoney[i] = GetPlayerMoney(i);
		    }
		    if(IsABoat(newcar))
			{
			    if(PlayerInfo[i][pBoatLic] < 1 && GetPlayerState(i) == 2)
				{
				    RemovePlayerFromVehicle(i);
				}
			}
			else if(IsAPlane(newcar))
			{
			    if(PlayerInfo[i][pFlyLic] < 1 && GetPlayerState(i) == 2)
				{
				    if(TakingLesson[i] == 1) { }
				}
			}
			else
			{
				if(PlayerInfo[i][pCarLic] < 1 && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == 2)
				{
					if(TakingLesson[i] == 1) { }
				}
			}//Done with car check
		    if(UsedFind[i] >= 1)
		    {
		        UsedFind[i] += 1;
				if(UsedFind[i] >= 120)
				{
				    UsedFind[i] = 0;
				}
		    }
   			if(MedicTime[i] > 0)
			{
			    if(MedicTime[i] == 3)
			    {
			        SetPlayerInterior(i, 3);
			        PlayerInfo[i][pInt] = 3;
			        new Float:X, Float:Y, Float:Z;
			        GetPlayerPos(i, X,Y,Z);
			        SetPlayerCameraPos(i, X - 3, Y, Z);
			        SetPlayerCameraLookAt(i,X,Y,Z);
			    }
			    MedicTime[i] ++;
			    if(MedicTime[i] >= NeedMedicTime[i])
			    {
					new cut = deathcost; //PlayerInfo[playerid][pLevel]*deathcost;
					//SafeGivePlayerMoney(i, -cut);
					format(string, sizeof(string), "Doctor: Hemos podido hacerle una recuperacion completa.", cut);
					SendClientMessage(i, TEAM_CYAN_COLOR, string);
					TogglePlayerControllable(i, 1);
			        MedicBill[i] = 0;
			        MedicTime[i] = 0;
			        NeedMedicTime[i] = 0;
			        PlayerInfo[i][pDeaths] += 1;
			        PlayerFixRadio(i);
			        ClearAnimations(i);
			        SpawnPlayer(i);
			    }
			}
			if(WantLawyer[i] >= 1)
			{
			    CallLawyer[i] = 111;
			    if(WantLawyer[i] == 1)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "Hay abogados conectados, desea un abogado (Diga Si o No)");
				}
				WantLawyer[i] ++;
				if(WantLawyer[i] == 8)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "Hay abogados conectados, desea un abogado (Diga Si o No)");
				}
	            if(WantLawyer[i] == 15)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "Hay abogados conectados, desea un abogado (Diga Si o No)");
				}
				if(WantLawyer[i] == 20)
				{
				    SendClientMessage(i, COLOR_YELLOW2, "No hay abogados conectados, sentencia comenzada.");
				    WantLawyer[i] = 0;
				    CallLawyer[i] = 0;
				}
			}
			if(TutTime[i] >= 1)
			{
			    TutTime[i] += 1;
                if(TutTime[i] == 3)
			    {
			        ClearChatbox(i, 10);
			        SendClientMessage(i, COLOR_WHITE, "So you are new here? We'll show you some places and give you some tips.");
			        SendClientMessage(i, COLOR_WHITE, "If you don't know how to RP, then leave this server.");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SetPlayerCameraPos(i, 2247.0215,-1655.0173,17.2856);
					SetPlayerCameraLookAt(i, 2244.6536,-1663.9304,15.4766);
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 99);
					SetPlayerPos(i, 2256.3555,-1646.6377,15.4959);
			        SendClientMessage(i, COLOR_YELLOW, ":: CLOTHES SHOP ::");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW2, "First of all you'll need some clothes, you can buy them at any clothes shop.");
			        SendClientMessage(i, COLOR_YELLOW2, "When you're in the shop type /ropa and then type next untill you find the clothes that you like.");
			    }
			    else if(TutTime[i] == 16)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 2089.6624,-1901.7891,13.5469);
			        SetPlayerCameraPos(i, 2070.8093,-1914.6747,18.5469);
					SetPlayerCameraLookAt(i, 2055.2405,-1906.4608,13.5469);
					SetPlayerInterior(i, 0);
			        SendClientMessage(i, COLOR_YELLOW, ":: Licenses Center ::");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW2, "You still have no driving/flying/sailing licenses? Shame on you!");
			        SendClientMessage(i, COLOR_YELLOW2, "You must first buy any of a kind licenses to get a license.");
			        SendClientMessage(i, COLOR_YELLOW2, "You can see the list of buyable licenses by just typing /licenci.");
			    }
			    else if(TutTime[i] == 32)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1514.3059,-1667.8116,14.0469);
			        SetPlayerCameraPos(i, 1535.9584,-1676.1428,18.3828);
					SetPlayerCameraLookAt(i, 1553.7861,-1676.4270,16.1953);
					SetPlayerInterior(i, 0);
			        SendClientMessage(i, COLOR_YELLOW, ":: LOS ANGELES POLICE DEPARTMENT ::");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW2, "The Los Angeles Police Department and FBI are in the city for your protection.");
			        SendClientMessage(i, COLOR_YELLOW2, "People who commit crimes will dealt with swiftly and with force if necessary.");
			        SendClientMessage(i, COLOR_YELLOW2, "To call a oficial de policia, call the emergency hotline using /llamar 911.");
			    }
			    else if(TutTime[i] == 54)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1221.7010,-1328.6449,13.4821);
			        SetPlayerCameraPos(i, 1204.3781,-1313.3323,16.3984);
					SetPlayerCameraLookAt(i, 1174.7167,-1323.4485,14.5938);
					SetPlayerInterior(i, 0);
			        SendClientMessage(i, COLOR_YELLOW, ":: ALL SAINTS GENERAL HOSPITAL ::");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW2, "Feeling sick? You need to see the doctor of Los Angeles.");
			        SendClientMessage(i, COLOR_YELLOW2, "To call a paramedic, call the emergency hotline using /llamar 911");
			        SendClientMessage(i, COLOR_YELLOW2, "You'll spawn here after death");
			    }
			    else if(TutTime[i] == 76)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1786.1758,-1258.4976,13.6417);
			        SetPlayerCameraPos(i, 1779.4259,-1275.1025,15.6328);
					SetPlayerCameraLookAt(i, 1785.7263,-1296.0200,13.4213);
					SetPlayerInterior(i, 0);
			        SendClientMessage(i, COLOR_YELLOW, ":: ABC STUDIO ::");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW2, "Got some fresh news to announce? Go to the ABC Studio reporters and ask them to do it.");
			        SendClientMessage(i, COLOR_YELLOW2, "You can also post your advertisment at local newspaper.");
			    }
			    else if(TutTime[i] == 98)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerPos(i, 1475.7020,-1050.9489,23.8246);
			        SetPlayerCameraPos(i, 1458.3872,-1042.2423,24.8281);
					SetPlayerCameraLookAt(i, 1458.5930,-1019.9205,24.5264);
					SetPlayerInterior(i, 0);
			        SendClientMessage(i, COLOR_YELLOW, ":: BANK OF THE STATE ::");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW2, "You won't keep all your money in your pocket, someone will try to steal it.");
			        SendClientMessage(i, COLOR_YELLOW2, "You can /deposit, or /withdraw your money at the bank.");
			        SendClientMessage(i, COLOR_YELLOW2, "You'll get you payday at your bank account too.");
			    }
			    else if(TutTime[i] == 110)
			    {
			        ClearChatbox(i, 10);
			        SetPlayerInterior(i, 3);
			        SetPlayerPos(i, 330.6825,163.6688,1014.1875);
			        SetCameraBehindPlayer(i);
			        SetPlayerVirtualWorld(i, 0);
			        SendClientMessage(i, COLOR_YELLOW, ":: END OF TUTORIAL ::");
			        SendClientMessage(i, COLOR_WHITE, " ");
			        SendClientMessage(i, COLOR_YELLOW2, "There are a lot of places in Los Angeles, but you need to discover them on your own.");
			        SendClientMessage(i, COLOR_YELLOW2, "Don't forget Role-Play rules, because non-rping causes warns and bans!");
			        SendClientMessage(i, COLOR_YELLOW2, "Greetings from: Los Angeles Roleplay admin team.");
			    }
			    else if(TutTime[i] == 119)
			    {
			        ClearChatbox(i, 10);
			        SendClientMessage(i, COLOR_YELLOW2, "Welcome to the Los Angeles.");
			        SendClientMessage(i, COLOR_YELLOW2, "You should read Los Angeles newspaper in order to get GPS system available.(It's Marked On Your Map)");
			        SendClientMessage(i, COLOR_GRAD1, "Hint: To call a taxi or bus use /llamar 444 or /llamar 222");
			        SendClientMessage(i, COLOR_GRAD1, "Hint: To change your outfit you have to go to clothes shop");
					SendClientMessage(i, COLOR_GRAD1, " ");
			        TutTime[i] = 0; PlayerInfo[i][pTut] = 1;
					gOoc[i] = 0; gNews[i] = 0; gFam[i] = 0;
					TogglePlayerControllable(i, 1);
					MedicBill[i] = 0;
					AfterTutorial[i] = 1;
					SetTimerEx("UnsetAfterTutorial", 2500, false, "i", i);
					SetTimerEx("UnsetFirstSpawn", 5000, false, "i", i);
					SetPlayerSpawn(i);
					//SetPlayerCheckpoint(i,1505.2416,-1694.5597,14.0469,5.0);
			    }
			}
			if(PlayerTazeTime[i] >= 1)
			{
			    PlayerTazeTime[i] += 1;
			    if(PlayerTazeTime[i] == 15)
			    {
                    PlayerTazeTime[i] = 0;
			    }
			    else
			    {
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					SetPlayerFacingAngle(i, angle + 90);
			    }
			}
			if(PlayerDrunk[i] >= 5)
			{
			    PlayerDrunkTime[i] += 1;
			    if(PlayerDrunkTime[i] == 8)
			    {
			        PlayerDrunkTime[i] = 0;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
						}
					}
					else
					{
					    ApplyAnimation(i,"PED", "WALK_DRUNK",4.0,0,1,0,0,0);
					}
			    }
			}
			if(PlayerStoned[i] >= 2)
			{
		        PlayerStoned[i] += 0;
			    if(PlayerStoned[i] == 0)
			    {
			        PlayerStoned[i] = 2;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 0);
						}
					}
					else
					{
					    SetPlayerFacingAngle(i, angle + 0);
					}
			    }
			}
			if(PlayerInfo[i][pCarTime] > 0)
			{
			    if(PlayerInfo[i][pCarTime] <= 0)
			    {
			        PlayerInfo[i][pCarTime] = 0;
			    }
			    else
			    {
			        PlayerInfo[i][pCarTime] -= 1;
			    }
			}
			if(BoxWaitTime[i] > 0)
			{
			    if(BoxWaitTime[i] >= BoxDelay)
				{
				    BoxDelay = 0;
					BoxWaitTime[i] = 0;
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
					GameTextForPlayer(i, "~g~Match Started", 5000, 1);
					TogglePlayerControllable(i, 1);
					RoundStarted = 1;
				}
			    else
				{
				    format(string, sizeof(string), "%d", BoxDelay - BoxWaitTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					BoxWaitTime[i] += 1;
				}
			}
			if(RoundStarted > 0)
			{
			    if(PlayerBoxing[i] > 0)
			    {
			        new trigger = 0;
			        new Lost = 0;
		        	new Float:angle;
		            new Float:health;
					GetPlayerHealth(i, health);
		            if(health < 12)
					{
					    if(i == Boxer1) { Lost = 1; trigger = 1; }
			            else if(i == Boxer2) { Lost = 2; trigger = 1; }
					}
			        if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
			        if(trigger)
			        {
			            new winner[MAX_PLAYER_NAME];
			            new loser[MAX_PLAYER_NAME];
			            new titel[MAX_PLAYER_NAME];
			            if(Lost == 1)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
					        	PlayerInfo[Boxer1][pInt] = 5; PlayerInfo[Boxer2][pInt] = 5;
			                	GetPlayerName(Boxer1, loser, sizeof(loser));
			                	GetPlayerName(Boxer2, winner, sizeof(winner));
		                		if(PlayerInfo[Boxer1][pJob] == 12) { PlayerInfo[Boxer1][pLoses] += 1; }
								if(PlayerInfo[Boxer2][pJob] == 12) { PlayerInfo[Boxer2][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer2)
				                	    {
				                	        if(PlayerInfo[Boxer2][pJob] == 12)
				                	        {
				                	            TBoxer = Boxer2;
				                	            GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Boxing News: %s has Won the fight against Champion %s and is now the new Boxing Champion.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
				                	        }
				                	        else
				                	        {
				                	            SendClientMessage(Boxer2, COLOR_WHITE, "* You would have been the Champion if you had the Boxer Job !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Boxing News: Boxing Champion %s has Won the fight against %s.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer2][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
								SendClientMessage(Boxer1, COLOR_WHITE, string);
								GameTextForPlayer(Boxer1, "~r~You lost", 3500, 1);
								format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
								SendClientMessage(Boxer2, COLOR_WHITE, string);
								GameTextForPlayer(Boxer2, "~r~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, "* You feel exhausted from the Fight, go eat somewhere.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, "* You feel perfect, even after the Fight.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, "* You feel exhausted from the Fight, go eat somewhere.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, "* You feel perfect, even after the Fight.");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);
								if(PlayerInfo[Boxer2][pJob] == 12) { PlayerInfo[Boxer2][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            else if(Lost == 2)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
					        	PlayerInfo[Boxer1][pInt] = 5; PlayerInfo[Boxer2][pInt] = 5;
			                	GetPlayerName(Boxer1, winner, sizeof(winner));
			                	GetPlayerName(Boxer2, loser, sizeof(loser));
		                		if(PlayerInfo[Boxer2][pJob] == 12) { PlayerInfo[Boxer2][pLoses] += 1; }
								if(PlayerInfo[Boxer1][pJob] == 12) { PlayerInfo[Boxer1][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer1)
				                	    {
				                	        if(PlayerInfo[Boxer1][pJob] == 12)
				                	        {
					                	        TBoxer = Boxer1;
					                	        GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Boxing News: %s has Won the fight against Champion %s and is now the new Boxing Champion.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
											}
				                	        else
				                	        {
				                	            SendClientMessage(Boxer1, COLOR_WHITE, "* You would have been the Champion if you had the Boxer Job !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Boxing News: Boxing Champion %s has Won the fight against %s.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer1][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
								SendClientMessage(Boxer2, COLOR_WHITE, string);
								GameTextForPlayer(Boxer2, "~r~You lost", 3500, 1);
								format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
								SendClientMessage(Boxer1, COLOR_WHITE, string);
								GameTextForPlayer(Boxer1, "~g~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, "* You feel exhausted from the Fight, go eat somewhere.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_WHITE, "* You feel perfect, even after the Fight.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, "* You feel exhausted from the Fight, go eat somewhere.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_WHITE, "* You feel perfect, even after the Fight.");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);
								if(PlayerInfo[Boxer1][pJob] == 12) { PlayerInfo[Boxer1][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            InRing = 0;
			            RoundStarted = 0;
			            Boxer1 = 255;
			            Boxer2 = 255;
			            TBoxer = 255;
			            trigger = 0;
			        }
			    }
			}
			if(StartingPaintballRound == 1 && AnnouncedPaintballRound == 0)
			{
			    AnnouncedPaintballRound = 1;
			    if(PlayerPaintballing[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "Paintball Match will be announced in 15 seconds (For getting more Paintball players).");
			    }
			}
			if(StartingKartRound == 1 && AnnouncedKartRound == 0)
			{
			    AnnouncedKartRound = 1;
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "Karting Race will be announced in 15 seconds (For getting more Kart Racers).");
			    }
			}
			if(EndingKartRound == 1)
			{
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        DisablePlayerCheckpoint(i);
			        CP[i] = 0;
			    }
			}
			if(FindTime[i] > 0)
			{
			    if(FindTime[i] == FindTimePoints[i]) { FindTime[i] = 0; FindTimePoints[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Desactivada marca", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					FindTime[i] += 1;
				}
			}
			if(TaxiCallTime[i] > 0)
			{
			    if(TaxiAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(TaxiAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(TaxiAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(BusCallTime[i] > 0)
			{
			    if(BusAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(BusAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(MedicCallTime[i] > 0)
			{
			    if(MedicCallTime[i] == 90) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 90 - MedicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MedicCallTime[i] += 1;
				}
			}
			if(MechanicCallTime[i] > 0)
			{
			    if(MechanicCallTime[i] == 30) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MechanicCallTime[i] += 1;
				}
			}
			if(PizzaCallTime[i] > 0)
   			{
       			if(PizzaCallTime[i] == 90) { PizzaCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
       			else
    			{
        			format(string, sizeof(string), "%d", 90 - PizzaCallTime[i]);
     				GameTextForPlayer(i, string, 1500, 6);
     				PizzaCallTime[i] += 1;
    			}
   			}
			if(Robbed[i] == 1)
			{
			    if(RobbedTime[i] <= 0)
			    {
			        RobbedTime[i] = 0;
					Robbed[i] = 0;
			    }
			    else
			    {
			        RobbedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 1)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        TogglePlayerControllable(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			        PlayerTazeTime[i] = 1;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 2)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        GameTextForPlayer(i, "~r~You broke the Cuffs, you are free!", 2500, 3);
			        TogglePlayerControllable(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
		/*	if(IsSmoking[i] > 0)
			{
			    if(IsSmoking[i] == 1)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
				    if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s termina su cigarrillo.", sendername); }
					else { format(string, sizeof(string), "* %s termina su cigarrillo.", sendername); }
				    ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    new Float:PlayerHealth;
				    GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
				    if(UsingSmokeAnim[i] == 1)
				    {
				        UsingSmokeAnim[i] = 0;
				        ClearAnimations(i);
				    }
			    }
			    if(IsSmoking[i] == 51)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s flicks from his cigarette.", sendername); }
					else { format(string, sizeof(string), "* %s flicks from her cigarette.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    if(IsSmoking[i] == 31)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s flicks from his cigarette.", sendername); }
					else { format(string, sizeof(string), "* %s flicks from her cigarette.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    if(IsSmoking[i] == 11)
			    {
			        new sendername[MAX_PLAYER_NAME];
			        GetPlayerName(i, sendername, sizeof(sendername));
			        if(PlayerInfo[i][pSex] == 1) { format(string, sizeof(string), "* %s flicks from his cigarette.", sendername); }
					else { format(string, sizeof(string), "* %s flicks from her cigarette.", sendername); }
			        ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        new Float:PlayerHealth;
			        GetPlayerHealth(i, PlayerHealth);
				    SetPlayerHealth(i, PlayerHealth+7);
			    }
			    IsSmoking[i] -= 1;
			}*/
			/*if(PlayerToPoint(20, i,2015.4500,1017.0900,996.8750))
			{//Four Dragons
			    GameTextForPlayer(i, "~r~Closed", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			else if(PlayerToPoint(20, i,2233.9099,1710.7300,1011.2987))
			{//Caligula
			    GameTextForPlayer(i, "~r~Closed", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			else if(PlayerToPoint(10, i,2265.7900,1619.5800,1090.4453))
			{//Caligula Roof 1
			    GameTextForPlayer(i, "~r~Closed", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			else if(PlayerToPoint(10, i,2265.7800,1675.9301,1090.4453))
			{//Caligula Roof 2
			    GameTextForPlayer(i, "~r~Closed", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
			else if(PlayerToPoint(20, i,1133.0699,-9.5731,1000.6797))
			{//West Casino place 12
			    GameTextForPlayer(i, "~r~Closed", 5000, 1);
			    SetPlayerInterior(i, 0);
			    PlayerInfo[i][pInt] = 0;
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}*/
			else if(PlayerToPoint(20, i,292.0274,-36.0291,1001.5156))
			{//Ammunation 1
			    GameTextForPlayer(i, "~r~A la carcel por ir al ammu", 5000, 1);
			    SetPlayerInterior(i, 6);
			    PlayerInfo[i][pInt] = 6;
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,308.2740,-141.2833,999.6016))
			{//Ammunation 2
			    GameTextForPlayer(i, "~r~A la carcel por ir al ammu", 5000, 1);
			    SetPlayerInterior(i, 6);
			    PlayerInfo[i][pInt] = 6;
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,294.3212,-108.7869,1001.5156))
			{//Ammunation 3 (small one's)
			    GameTextForPlayer(i, "~r~A la carcel por ir al ammu", 5000, 1);
			    SetPlayerInterior(i, 6);
			    PlayerInfo[i][pInt] = 6;
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,288.8592,-80.4535,1001.5156))
			{//Ammunation 4 (small one's)
			    GameTextForPlayer(i, "~r~A la carcel por ir al ammu", 5000, 1);
			    SetPlayerInterior(i, 6);
			    PlayerInfo[i][pInt] = 6;
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
			else if(PlayerToPoint(20, i,316.9583,-165.4707,999.6010))
			{//Ammunation 5 (Unprotected)
			    GameTextForPlayer(i, "~r~A la carcel por ir al ammu", 5000, 1);
			    SetPlayerInterior(i, 6);
			    PlayerInfo[i][pInt] = 6;
				SetPlayerPos(i,264.6288,77.5742,1001.0391);
				PlayerInfo[i][pJailTime] = 300;
				PlayerInfo[i][pJailed] = 1;
			}
		}
	}
}

public CheckGas()
{
	new string[256];
	for(new i=0;i<MAX_PLAYERS;i++)
	{
    	if(IsPlayerConnected(i))
       	{
       	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
       	    {
	       		new vehicle = GetPlayerVehicleID(i);
	        	if(Gas[vehicle] >= 1)
		   		{
		   		    if(Gas[vehicle] <= 10)
				    {
			   			PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0);
			   			if(gGas[i] == 0) {
			   				GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~GASOLINA BAJA",5000,3);
						}
				    }
		   		    if(gGas[i] == 1) {
		   		    if(IsAPlane(vehicle) || IsABoat(vehicle) || IsABike(vehicle) || IsAHarvest(vehicle) || IsADrugHarvest(vehicle) || IsASweeper(vehicle) || IsABasura(vehicle) || IsAcarretilla(vehicle))
		   		    {
		      			format(string, sizeof(string), "~b~~n~~n~~n~~n~~n~~n~~n~~n~~n~GASOLINA:~w~ N/A");
					}
					else
					{
                        format(string, sizeof(string), "~b~~n~~n~~n~~n~~n~~n~~n~~n~~n~GASOLINA:~w~ %d%",Gas[vehicle]);
					}
		      		GameTextForPlayer(i,string,20500,3); }
					if(IsAPlane(vehicle) || IsABoat(vehicle) || IsABike(vehicle) || IsAHarvest(vehicle) || IsADrugHarvest(vehicle) || IsASweeper(vehicle) || IsABasura(vehicle) || IsAcarretilla(vehicle) || engineOn[vehicle] == 0) { Gas[vehicle]++; }
					 	         Gas[vehicle]--;
		   		}
	   			else
	           	{
	              	NoFuel[i] = 1;
	              	TogglePlayerControllable(i, 0);
		        	GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~NO QUEDA GASOLINA",1500,3);
				}
			}
    	}
	}
	return 1;
}

public Fillup()
{
	for(new i=0; i<MAX_PLAYERS; i++)
   	{
	   	if(IsPlayerConnected(i))
	   	{
		    new VID;
		    new FillUp;
		    new string[256];
		    VID = GetPlayerVehicleID(i);
		    FillUp = GasMax - Gas[VID];
			if(Refueling[i] == 1)
		    {
		        if(IsACopCar(VID) || IsAnFbiCar(VID) || IsAnAmbulance(VID) || IsAnFiretruck(VID) || IsNgCar(VID) || IsAGovernmentCar(VID) || IsAHspdCar(VID))
		        {
		            Gas[VID] += FillUp;
		            FillUp = FillUp * SBizzInfo[3][sbEntranceCost];
		            format(string,sizeof(string),"* Vehiculo repostado, Precio: $%d.",FillUp);
	    			SendClientMessage(i,COLOR_WHITE,string);
	    			GameTextForPlayer(i, "~w~Government has paid for a gas.", 5000, 1);
					SBizzInfo[3][sbTill] += FillUp;
					ExtortionSBiz(3, FillUp);
					Refueling[i] = 0;
					TogglePlayerControllable(i, 1);
		        }
		        else
		        {
					if(GetPlayerMoney(i) >= FillUp+4)
					{
						Gas[VID] += FillUp;
						FillUp = FillUp * SBizzInfo[3][sbEntranceCost];
				    	format(string,sizeof(string),"* Vehiculo repostado, Precio: $%d.",FillUp);
				    	SendClientMessage(i,COLOR_WHITE,string);
						SafeGivePlayerMoney(i, - FillUp);
						SBizzInfo[3][sbTill] += FillUp;
						ExtortionSBiz(3, FillUp);
						Refueling[i] = 0;
						TogglePlayerControllable(i, 1);
					}
			   		else
			   		{
			   	    	format(string,sizeof(string),"* No tienes dinero suficiente, repostar tu vehiculo cuesta $%d ",FillUp);
				    	SendClientMessage(i,COLOR_WHITE,string);
				    	TogglePlayerControllable(i, 1);
			   		}
				}
		 	}
		}
	}
	return 1;
}

public StoppedVehicle()
{
	new Float:x,Float:y,Float:z;
	new Float:distance,value;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInAnyVehicle(i))
			{
				new VID;
				VID = GetPlayerVehicleID(i);
				GetPlayerPos(i, x, y, z);
				distance = floatsqroot(floatpower(floatabs(floatsub(x,SavePlayerPos[i][LastX])),2)+floatpower(floatabs(floatsub(y,SavePlayerPos[i][LastY])),2)+floatpower(floatabs(floatsub(z,SavePlayerPos[i][LastZ])),2));
				value = floatround(distance * 3600);
				if(UpdateSeconds > 1)
				{
					value = floatround(value / UpdateSeconds);
				}
				if(SpeedMode)
				{
	            }
				if(value == 0)
				{
					Gas[VID]++;
				}
				SavePlayerPos[i][LastX] = x;
				SavePlayerPos[i][LastY] = y;
				SavePlayerPos[i][LastZ] = z;
			}
		}
	}
	return 1;
}

public SetPlayerWeapons(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    SafeResetPlayerWeapons(playerid);
	    if(PlayerInfo[playerid][pJailed] < 1)
	    {
		/*	if(gTeam[playerid] == 2 || IsACop(playerid))
			{
				if(OnDuty[playerid] == 1)//Cops & FBI/ATF
				{
				    SafeGivePlayerWeapon(playerid, 41, 500); //spray
					SafeGivePlayerWeapon(playerid, 24, 200);
					SafeGivePlayerWeapon(playerid, 3, 1);
					if(PlayerInfo[playerid][pChar] == 285)//SWAT
					{
					    SafeGivePlayerWeapon(playerid, 24, 200);
					    SafeGivePlayerWeapon(playerid, 29, 450);
						SafeGivePlayerWeapon(playerid, 31, 600);
					}
					else if(PlayerInfo[playerid][pChar] == 287)//Army
					{
					    SafeGivePlayerWeapon(playerid, 24, 200);
					    SafeGivePlayerWeapon(playerid, 29, 450);
					    SafeGivePlayerWeapon(playerid, 31, 500);
					}
				}
				if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)//National Guard
				{
				    SafeGivePlayerWeapon(playerid, 24, 200);
				    SafeGivePlayerWeapon(playerid, 31, 600);
				    SafeGivePlayerWeapon(playerid, 29, 600);
				}
			}*/
			if(gTeam[playerid] >= 3)
			{
				SafeGivePlayerWeapon(playerid, 0, 0);
			}
			if(PlayerInfo[playerid][pDonateRank] == 1)
			{
				if (PlayerInfo[playerid][pGun1] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
					PlayerInfo[playerid][pGun1] = 0; PlayerInfo[playerid][pAmmo1] = 0;
				}
				if (PlayerInfo[playerid][pGun2] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
					PlayerInfo[playerid][pGun2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
				}
				if (PlayerInfo[playerid][pGun3] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun3], PlayerInfo[playerid][pAmmo3]);
					PlayerInfo[playerid][pGun3] = 0; PlayerInfo[playerid][pAmmo3] = 0;
				}
				if (PlayerInfo[playerid][pGun4] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun4], PlayerInfo[playerid][pAmmo4]);
					PlayerInfo[playerid][pGun4] = 0; PlayerInfo[playerid][pAmmo4] = 0;
				}
			}
			else
			{
			    if (PlayerInfo[playerid][pGun1] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
					PlayerInfo[playerid][pGun1] = 0; PlayerInfo[playerid][pAmmo1] = 0;
				}
				if (PlayerInfo[playerid][pGun2] > 0)
				{
					SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
					PlayerInfo[playerid][pGun2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
				}
			}
		}
	}
}

public PrintSBizInfo(playerid,targetid)
{
	if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s ***",SBizzInfo[targetid][sbMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Cerrado: %d EntryFee: $%d Till: $%d", SBizzInfo[targetid][sbLocked], SBizzInfo[targetid][sbEntranceCost], SBizzInfo[targetid][sbTill]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Products: %d/%d Extortion By: %s", SBizzInfo[targetid][sbProducts],SBizzInfo[targetid][sbMaxProducts],SBizzInfo[targetid][sbExtortion]);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}

public PrintBizInfo(playerid,targetid)
{
    if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		format(coordsstring, sizeof(coordsstring),"*** %s ***",BizzInfo[targetid][bMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Cerrado: %d Precio Entrada: $%d Dinero: $%d", BizzInfo[targetid][bLocked], BizzInfo[targetid][bEntranceCost], BizzInfo[targetid][bTill]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Encargado: %s  Precio Producto: $%d", BizzInfo[targetid][bExtortion], BizzInfo[targetid][bPriceProd]);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		if(targetid == 0)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Bate de Beisbol (/vbate para venderlo)(/cbate compra automatica)");
		}
		if(targetid == 1)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Reloj (/vreloj para venderlo)(/creloj compra automatica)");
		}
		if(targetid == 1)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: CD Reproductor (/vcd para venderlo)(/ccd compra automatica)");
		}
		if(targetid == 2)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Spray (/vspray para venderlo)(/cspray compra automatica)");
		}
		if(targetid == 3)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Patines (/vpatines para venderlo)(/cpatines compra automatica)");
		}
		if(targetid == 4)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Comida (/vcomida para venderlo)(/ccomida compra automatica)");
		}
		if(targetid == 5)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Diccionario Aleman (/valeman para venderlo)(/caleman compra automatica)");
		}
		if(targetid == 6)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Ramo de Flores (/vflores para venderlo)(/cflores compra automatica)");
		}
		if(targetid == 7)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Movil (/vmovil para venderlo)(/cmovil compra automatica)");
		}
		if(targetid == 8)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Cuerda (/vcuerda para venderlo)(/ccuerda compra automatica)");
		}
		if(targetid == 9)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Pasaje Avion (/vpasaje para venderlo)(/cpasaje compra automatica)");
		}
		if(targetid == 10)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Whisky (/vwhisky para venderlo)(/cwhisky compra automatica)");
		}
		if(targetid == 11)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Caña Pescar (/vpesca para venderlo)(/cpesca compra automatica)");
		}
		if(targetid == 12)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Refresco (/vrefresco2 para venderlo)(/crefresco2 compra automatica)");
		}
		if(targetid == 13)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Refresco (/vrefresco3 para venderlo)(/crefresco3 compra automatica)");
		}
		if(targetid == 14)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Refresco (/vrefresco4 para venderlo)(/crefresco4 compra automatica)");
		}
		if(targetid == 15)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Refresco (/vrefresco5 para venderlo)(/crefresco5 compra automatica)");
		}
		if(targetid == 16)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Dados (/vdado para venderlo)(/cdado compra automatica)");
		}
		if(targetid == 16)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Cartas (/vcartas para venderlo)(/ccartas compra automatica)");
		}
		if(targetid == 17)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Cerveza (/vcerveza para venderlo)(/ccerveza compra automatica)");
		}
		if(targetid == 18)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Whisky (/vwhisky2 para venderlo)(/cwhisky2 compra automatica)");
		}
		if(targetid == 19)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Whisky (/vwhisky3 para venderlo)(/cwhisky3 compra automatica)");
		}
		if(targetid == 20)
		{
		SendClientMessage(playerid, COLOR_GRAD2,"Producto: Cerveza (/vcerveza2 para venderlo)(/ccerveza2 compra automatica)");
		}
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}

public ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new cash =  GetPlayerMoney(targetid);
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "hombre"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "mujer"; }
  		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "Extranjero"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Playa"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Barrio"; }
		else if(PlayerInfo[targetid][pOrigin] == 4) { otext = "Centro"; }
		new ttext[20];
		if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4) { ttext = "LSMD"; }
		else if(gTeam[targetid] == 3 || gTeam[targetid] == 4) { ttext = "Civil"; }
		else if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1) { ttext = "Estado"; }
		else if(PlayerInfo[targetid][pMember] == 2 || PlayerInfo[targetid][pLeader] == 2) { ttext = "Estado"; }
		else if(PlayerInfo[targetid][pMember] == 3 || PlayerInfo[targetid][pLeader] == 3) { ttext = "Estado"; }
		else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4) { ttext = "Estado"; }
		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5) { ttext = "Banda"; }
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6) { ttext = "Mafia"; }
		else if(PlayerInfo[targetid][pMember] == 7 || PlayerInfo[targetid][pLeader] == 7) { ttext = "Estado"; }
		else if(PlayerInfo[targetid][pMember] == 8 || PlayerInfo[targetid][pLeader] == 8) { ttext = "Mafia"; }
		else if(PlayerInfo[targetid][pMember] == 9 || PlayerInfo[targetid][pLeader] == 9) { ttext = "Empresa"; }
		else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10) { ttext = "Empresa"; }
		else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 11) { ttext = "Empresa"; }
		else if(PlayerInfo[targetid][pMember] == 13 || PlayerInfo[targetid][pLeader] == 13) { ttext = "Empresa"; }
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14) { ttext = "Mafia"; }
		else if(PlayerInfo[targetid][pMember] == 15 || PlayerInfo[targetid][pLeader] == 15) { ttext = "Banda"; }
		else if(PlayerInfo[targetid][pMember] == 16 || PlayerInfo[targetid][pLeader] == 16) { ttext = "Banda"; }
		else if(PlayerInfo[targetid][pMember] == 17 || PlayerInfo[targetid][pLeader] == 17) { ttext = "Banda Libre"; }
		else if(PlayerInfo[targetid][pMember] == 18 || PlayerInfo[targetid][pLeader] == 18) { ttext = "Banda Libre"; }
		else if(PlayerInfo[targetid][pMember] == 19 || PlayerInfo[targetid][pLeader] == 19) { ttext = "Estado"; }
		else if(PlayerInfo[targetid][pMember] == 20 || PlayerInfo[targetid][pLeader] == 20) { ttext = "Banda Libre"; }
		new dtext[20];
		if(STDPlayer[targetid] == 1) { dtext = "Sida"; }
		else if(STDPlayer[targetid] == 2) { dtext = "Gonorrea"; }
		else if(STDPlayer[targetid] == 3) { dtext = "Sifilis"; }
		else { dtext = "---"; }
	    new ftext[30];
	    if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1)
		{ ftext = "Cuerpo Policia"; }
		else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 2)
		{ ftext = "FBI"; }
		else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 3)
		{ ftext = "El Ejercito"; }
        else if(PlayerInfo[targetid][pMember] == 4 || PlayerInfo[targetid][pLeader] == 4)
		{ ftext = "LSMD"; }
  		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5)
		{ ftext = "Groves Street Gang"; }
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6)
		{ ftext = "La Cosa Nostra"; }
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 7)
		{ ftext = "Indefinido"; }
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 8)
		{ ftext = "Agencia Hitman"; }
		else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10)
		{ ftext = "Compañia Taxista"; }
		else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 11)
		{ ftext = "Instructor"; }
		else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 12)
		{ ftext = "Indefinido"; }
		else if(PlayerInfo[targetid][pMember] == 11 || PlayerInfo[targetid][pLeader] == 13)
		{ ftext = "Mecanicos S.A"; }
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14)
		{ ftext = "YaKuza"; }
		else if(PlayerInfo[targetid][pMember] == 15 || PlayerInfo[targetid][pLeader] == 15)
		{ ftext = "Latin XIV Clicka'"; }
		else if(PlayerInfo[targetid][pMember] == 16 || PlayerInfo[targetid][pLeader] == 16)
		{ ftext = "18th Street"; }
		else if(PlayerInfo[targetid][pMember] == 17 || PlayerInfo[targetid][pLeader] == 17)
		{ ftext = "Notrh Street Gang"; }
		else if(PlayerInfo[targetid][pMember] == 18 || PlayerInfo[targetid][pLeader] == 18)
		{ ftext = "Los Cobras"; }
		else if(PlayerInfo[targetid][pMember] == 19 || PlayerInfo[targetid][pLeader] == 19)
		{ ftext = "Cuerpo de Bomberos"; }
		else if(PlayerInfo[targetid][pMember] == 20 || PlayerInfo[targetid][pLeader] == 20)
		{ ftext = "Los Puretas"; }
		else
		{ ftext = "---"; }
		new f2text[20];
	    if(PlayerInfo[targetid][pFMember] < 255) { f2text = FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyName]; }
		else { f2text = "---"; }
	    new rtext[64];
	    /*if(gTeam[targetid] == 5 || PlayerInfo[targetid][pFMember] < 255)//The 2 Organisations
	    {
        	if(PlayerInfo[targetid][pRank] == 1) { rtext = "Outsider"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Associate"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Soldier"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Capo"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Underboss"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Godfather"; }
			else { rtext = "Outsider"; }
		}*/
		if(PlayerInfo[targetid][pMember] == 1 || PlayerInfo[targetid][pLeader] == 1)//PD Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Policia"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Oficial de policia"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Sub-Inspector"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Inspector"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Inspector Jefe"; }
	        else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Comisario"; }
			else { rtext = "Policia"; }
		}
		else if(PlayerInfo[targetid][pMember] == 2 || PlayerInfo[targetid][pLeader] == 2)//FBI Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Professional Staff"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Special Agent Trainee"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Special Agent"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Special Agent in Charge"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Assistant Director in Charge"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Director"; }
			else { rtext = "Intern"; }
		}
		else if(PlayerInfo[targetid][pMember] == 3 || PlayerInfo[targetid][pLeader] == 3)//NG Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Soldado"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Cabo"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Sargento"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Teniente"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Comandante"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Coronel"; }
			else { rtext = "Soldado"; }
		}
		else if(PlayerInfo[targetid][pMember] == 5 || PlayerInfo[targetid][pLeader] == 5)//Groves Rangos
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Asociado"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Miembro"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Hardcore"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Right Hand"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Underboss"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Eazyrider"; }
			else { rtext = "Guero"; }
		}
		else if(PlayerInfo[targetid][pMember] == 6 || PlayerInfo[targetid][pLeader] == 6)//La Famiglia Sinatra Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Capullo"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Asociado"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Soldado"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Capo"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Consiglieri"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Don"; }
			else { rtext = "Capullo"; }
		}
		else if(PlayerInfo[targetid][pMember] == 7)//Mayor ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Mayor's driver"; }
		    else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Mayor's bodyguard"; }
		    else { rtext = "---"; }
		}
		else if(PlayerInfo[targetid][pMember] == 8 || PlayerInfo[targetid][pLeader] == 8)//Hitman Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Maton"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Buscador"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Agente"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Agente Especial"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Vice-Director"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Director"; }
			else { rtext = "Maton"; }
		}
		else if(PlayerInfo[targetid][pMember] == 9 || PlayerInfo[targetid][pLeader] == 9)//NR Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "R.Aprendiz"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "R.Local"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "R.Especializado"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Presentador"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Co-Productor"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Productor-CNN"; }
			else { rtext = "R.Aprendiz"; }
		}
		else if(PlayerInfo[targetid][pMember] == 10 || PlayerInfo[targetid][pLeader] == 10)//Taxi Company Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Taxista"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Taxi Rookie"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Cabbie"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Dispatcher"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Shift Supervisor"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Taxi Company Owner"; }
			else { rtext = "Taxista"; }
		}
		/*else if(IsAnInstructor(targetid))//Driving/Flying School Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Trainee"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Instructor"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Senior Instructor"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Manager"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Under Boss"; }
		    else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Boss"; }
			else { rtext = "Trainee"; }
		}*/
		else if(PlayerInfo[targetid][pMember] == 14 || PlayerInfo[targetid][pLeader] == 14)//Yamaguchi ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Senshi"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Chuunin"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Jounin"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Sennin"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Migi te"; }
  			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Riidaa"; }
			else { rtext = "Gaij in"; }
		}
		else if(PlayerInfo[targetid][pMember] == 15 || PlayerInfo[targetid][pLeader] == 15)//Latin XIV Clicka
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Recluta"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Aprendiz"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Miembro"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Sangre amarilla"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Mano derecha"; }
			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Boss"; }
			else { rtext = "Recluta"; }
		}
		else if(PlayerInfo[targetid][pMember] == 16 || PlayerInfo[targetid][pLeader] == 16)//18th street Ranks
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Iniciado"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Recluta"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Pandillero"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Mano Derecha"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Sub-jefe"; }
			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Jefe"; }
		    else if(PlayerInfo[targetid][pRank] == 7) { rtext = "Jefe"; }
		    else if(PlayerInfo[targetid][pRank] == 8) { rtext = "Jefe"; }
		    else if(PlayerInfo[targetid][pRank] == 9) { rtext = "Jefe"; }
			else { rtext = "Iniciado"; }
		}
		else if(PlayerInfo[targetid][pMember] == 17 || PlayerInfo[targetid][pLeader] == 17)//Notrh Street Gang
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Callejero"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Pandilero"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Pandillero"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Pandilero"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Pandilero"; }
			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Lider"; }
		    else if(PlayerInfo[targetid][pRank] == 7) { rtext = "Lider"; }
		    else if(PlayerInfo[targetid][pRank] == 8) { rtext = "Lider"; }
		    else if(PlayerInfo[targetid][pRank] == 9) { rtext = "Lider"; }
			else { rtext = "Callejero"; }
		}
		else if(PlayerInfo[targetid][pMember] == 18 || PlayerInfo[targetid][pLeader] == 18)//Notrh Street Gang
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Heavy"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Motero"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Motero"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Motero"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Motero"; }
			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Lider"; }
		    else if(PlayerInfo[targetid][pRank] == 7) { rtext = "Lider"; }
		    else if(PlayerInfo[targetid][pRank] == 8) { rtext = "Lider"; }
		    else if(PlayerInfo[targetid][pRank] == 9) { rtext = "Lider"; }
			else { rtext = "Heavy"; }
		}
		else if(PlayerInfo[targetid][pMember] == 19 || PlayerInfo[targetid][pLeader] == 19)//Bomberos
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Recluta"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Agente"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Agente"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Agente"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Oficial"; }
			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Sargente"; }
		    else if(PlayerInfo[targetid][pRank] == 7) { rtext = "Capitan"; }
		    else if(PlayerInfo[targetid][pRank] == 8) { rtext = "Comandante"; }
		    else if(PlayerInfo[targetid][pRank] == 9) { rtext = "Jefe"; }
			else { rtext = "Recluta"; }
		}
		else if(PlayerInfo[targetid][pMember] == 20 || PlayerInfo[targetid][pLeader] == 20)//Los Puretas
		{
		    if(PlayerInfo[targetid][pRank] == 1) { rtext = "Campechano"; }
			else if(PlayerInfo[targetid][pRank] == 2) { rtext = "Gallo de Batalla"; }
			else if(PlayerInfo[targetid][pRank] == 3) { rtext = "Boina ROJA"; }
			else if(PlayerInfo[targetid][pRank] == 4) { rtext = "Licenciado"; }
			else if(PlayerInfo[targetid][pRank] == 5) { rtext = "Hermano"; }
			else if(PlayerInfo[targetid][pRank] == 6) { rtext = "Patrón"; }
			else { rtext = "Campechano"; }
		}
		else
		{
		    rtext = "---";
		}
        new jtext[20];
        if(PlayerInfo[targetid][pJob] == 1) { jtext = "Detective"; }
        else if(PlayerInfo[targetid][pJob] == 2) { jtext = "Abogado"; }
        else if(PlayerInfo[targetid][pJob] == 3) { jtext = "Prostituta"; }
        else if(PlayerInfo[targetid][pJob] == 4) { jtext = "Vendedor de drogas"; }
        else if(PlayerInfo[targetid][pJob] == 5) { jtext = "Ladron de Vehiculos"; }
        else if(PlayerInfo[targetid][pMember] == 9) { jtext = "Reportero"; }
        else if(PlayerInfo[targetid][pLeader] == 9) { jtext = "Reportero"; }
        else if(PlayerInfo[targetid][pJob] == 7) { jtext = "Mecanico"; }
        else if(PlayerInfo[targetid][pJob] == 8) { jtext = "Guardaespaldas"; }
        else if(PlayerInfo[targetid][pJob] == 9) { jtext = "Camionero"; }
        else if(PlayerInfo[targetid][pJob] == 10) { jtext = "Mozo de Almacen"; }
        else if(PlayerInfo[targetid][pJob] == 11) { jtext = "minero"; } //
		else if(PlayerInfo[targetid][pJob] == 12) { jtext = "Boxeador"; }
		else if(PlayerInfo[targetid][pJob] == 13) { jtext = "Mendigo"; }
        else if(PlayerInfo[targetid][pJob] == 14) { jtext = "Bus Driver"; }
        else if(PlayerInfo[targetid][pJob] == 15) { jtext = "Rep.Periodicos"; }
        else if(PlayerInfo[targetid][pJob] == 16) { jtext = "Comercial"; }
        else if(PlayerInfo[targetid][pJob] == 17) { jtext = "Rep.Pizzas"; }
        else if(PlayerInfo[targetid][pJob] == 18) { jtext = "Granjero"; }
        else if(PlayerInfo[targetid][pJob] == 19) { jtext = "Agricultor Drogas"; }
        else if(PlayerInfo[targetid][pJob] == 20) { jtext = "Proveedor Drogas"; }
        else if(PlayerInfo[targetid][pJob] == 21) { jtext = "Barrendero"; }
        else if(PlayerInfo[targetid][pJob] == 22) { jtext = "Prov. Materiales"; }
        else if(PlayerInfo[targetid][pJob] == 23) { jtext = "Vendedor de Armas"; }
        else if(PlayerInfo[targetid][pJob] == 24) { jtext = "Taxista"; }
        else if(PlayerInfo[targetid][pJob] == 25) { jtext = "Basurero"; }
        else { jtext = "---"; }
		new drank[20];
		new lastip[256];
		GetPlayerIp( playerid,lastip,sizeof(lastip));
		if(PlayerInfo[targetid][pDonateRank] == 1) { drank = "Activada"; }
		/*else if(PlayerInfo[targetid][pDonateRank] >= 2) { drank = "Activada"; }*/
		else { drank = "Desactivada"; }
		/*new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);*/
	//	new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectTime];
		//new lotto = PlayerInfo[targetid][pLottoNr];
		//new deaths = PlayerInfo[targetid][pDeaths];
		//new fishes = PlayerInfo[targetid][pFishes];
		new bigfish = PlayerInfo[targetid][pBiggestFish];
		//new crimes = PlayerInfo[targetid][pCrimes];
		new arrests = PlayerInfo[targetid][pArrested];
		new cagadas = PlayerInfo[targetid][pDeaths];
		//new warrests = PlayerInfo[targetid][pWantedDeaths];
		new drugs = PlayerInfo[targetid][pDrugs];
		new mats = PlayerInfo[targetid][pMats];
		//new wanted = WantedLevel[targetid];
		new level = PlayerInfo[targetid][pLevel];
		new exp = PlayerInfo[targetid][pExp];
		//new kills = PlayerInfo[targetid][pKills];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new account = PlayerInfo[targetid][pAccount];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;
		new expamount = nxtlevel*levelexp;
		//new costlevel = nxtlevel*levelcost;//10k for testing purposes
		new housekey = PlayerInfo[targetid][pPhousekey];
		new bizkey = PlayerInfo[targetid][pPbiskey];
		new carkey = PlayerInfo[targetid][pPcarkey];
		new carkey2 = PlayerInfo[targetid][pPcarkey2];
		new carkey3 = PlayerInfo[targetid][pPcarkey3];
		new carkey4 = PlayerInfo[targetid][pPcarkey4];
		new carkey5 = PlayerInfo[targetid][pPcarkey5];
		//new carkey6 = PlayerInfo[targetid][pPcarkey6];
		//new carkey7 = PlayerInfo[targetid][pPcarkey7];
		//new carkey8 = PlayerInfo[targetid][pPcarkey8];
		//new carkey9 = PlayerInfo[targetid][pPcarkey9];
		//new carkey10 = PlayerInfo[targetid][pPcarkey10];
		new intir = PlayerInfo[targetid][pInt];
		new virworld = PlayerInfo[targetid][pVirWorld];
		new local = PlayerInfo[targetid][pLocal];
		//mejoras
		new cigas = PlayerInfo[playerid][pCigarettes];
		new whisky = PlayerInfo[playerid][pbono5];
		new refres = PlayerInfo[playerid][pbono6];
		new cerve = PlayerInfo[playerid][pbono7];
		new delitos = PlayerInfo[playerid][pCrimes];
		new mechero = PlayerInfo[playerid][pLighter];
	   // new health = PlayerInfo[targetid][pHealth];
		new Float:health = PlayerInfo[targetid][pHealth];
		new name[MAX_PLAYER_NAME];
		GetPlayerName(targetid, name, sizeof(name));
		GetPlayerHealth(targetid,health);
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid, px, py, pz);
		new coordsstring[256];  // /estado
		format(coordsstring, sizeof(coordsstring),"____________________| %s |____________________",name);  // lo q se ve en cuenta
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Nivel:[%d] Sexo:[%s] Salud:[%.1f] Cartera:[$%d] Banco:[$%d] Ph:[%d] Heridas:[%d]", level,atext,health,cash,account,pnumber,cagadas);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Horas jugadas:[%d] Pez mas grande:[%d] Veces arrestado:[%d] Trabajo:[%s] Respeto:[%d/%d] Delitos:[%d]", ptime,bigfish,arrests,jtext,exp,expamount,delitos);
		SendClientMessage(playerid, COLOR_GRAD3,coordsstring);
		format(coordsstring, sizeof(coordsstring), "IP: [%s] Drogas:[%d] Materiales:[%d] Equipo:[%s] Organizacion:[%s] Rango:[%s]",lastip, drugs,mats,ttext,ftext,rtext);
		SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
        format(coordsstring, sizeof(coordsstring), "Casa [%d] Negocio [%d] Veh1 [%d] Veh2 [%d] Veh3 [%d] Alquilado [%d] Interior:[%d] Mundo:[%d] Local[%d]", housekey,bizkey,carkey,carkey2,carkey3,HireCar[targetid],intir,virworld,local);
        SendClientMessage(playerid, COLOR_GRAD6,coordsstring);
        format(coordsstring, sizeof(coordsstring), "Premium:  Cuenta premium:[%s] Veh4 [%d] Veh5 [%d]", drank,carkey4,carkey5);
        SendClientMessage(playerid, COLOR_GRAD6,coordsstring);
        format(coordsstring, sizeof(coordsstring), "Articulos:  Whisky:[%d] Refrescos:[%d] Cervezas:[%d] Tabaco:[%d] Gas Mechero:[%d]", whisky,refres,cerve,cigas,mechero);
        SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		if (PlayerInfo[targetid][pPcarkey] != 9999)
		{
		    format(coordsstring, sizeof(coordsstring), "Vehiculo-1| Marca:[%s] Precio:[%d] Color1:[%d] Color2:[%d] Bloq:[%d]", CarInfo[carkey][cDescription], CarInfo[carkey][cValue], CarInfo[carkey][cColorOne], CarInfo[carkey][cColorTwo], CarInfo[carkey][cLock]);
		    SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		}
		if (PlayerInfo[targetid][pPcarkey2] != 9999)
		{
		    format(coordsstring, sizeof(coordsstring), "Vehiculo-2| Marca:[%s] Precio:[%d] Color1:[%d] Color2:[%d] Bloq:[%d]", CarInfo[carkey2][cDescription], CarInfo[carkey2][cValue], CarInfo[carkey2][cColorOne], CarInfo[carkey2][cColorTwo], CarInfo[carkey2][cLock]);
		    SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		}
		if (PlayerInfo[targetid][pPcarkey3] != 9999)
		{
		    format(coordsstring, sizeof(coordsstring), "Vehiculo-3| Marca:[%s] Precio:[%d] Color1:[%d] Color2:[%d] Bloq:[%d]", CarInfo[carkey3][cDescription], CarInfo[carkey3][cValue], CarInfo[carkey3][cColorOne], CarInfo[carkey3][cColorTwo], CarInfo[carkey3][cLock]);
		    SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		}
		if (PlayerInfo[targetid][pPcarkey4] != 9999)
		{
		    format(coordsstring, sizeof(coordsstring), "Vehiculo-4| Marca:[%s] Precio:[%d] Color1:[%d] Color2:[%d] Bloq:[%d]", CarInfo[carkey4][cDescription], CarInfo[carkey4][cValue], CarInfo[carkey4][cColorOne], CarInfo[carkey4][cColorTwo], CarInfo[carkey4][cLock]);
		    SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		}
		if (PlayerInfo[targetid][pPcarkey5] != 9999)
		{
		    format(coordsstring, sizeof(coordsstring), "Vehiculo-5| Marca:[%s] Precio:[%d] Color1:[%d] Color2:[%d] Bloq:[%d]", CarInfo[carkey5][cDescription], CarInfo[carkey5][cValue], CarInfo[carkey5][cColorOne], CarInfo[carkey5][cColorTwo], CarInfo[carkey5][cLock]);
		    SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		}
		format(coordsstring, sizeof(coordsstring),"____________________________________________");
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
	}
}
//---------------------------------------------------------

public SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
	    /* if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
        SetPlayerColor(playerid,COLOR_DBLUE);
        if (PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
        SetPlayerColor(playerid,COLOR_BLACK);
        if (PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 1)
        SetPlayerColor(playerid,cop_color);
        if (PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
        SetPlayerColor(playerid,COLOR_DARKNICERED);
        if (PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
        SetPlayerColor(playerid,COLOR_GROVE); */
	}
}

//---------------------------------------------------------

/*public GameModeInitExitFunc()
{
	new string[128];
	format(string, sizeof(string), "Traveling...");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			DisablePlayerCheckpoint(i);
			gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
			GameTextForPlayer(i, string, 4000, 5);
			SetPlayerCameraPos(i,1460.0, -1324.0, 287.2);
			SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0);
			OnPlayerUpdate(i);
			gPlayerLogged[i] = 0;
		}
	}
	SetTimer("GameModeExitFunc", 4000, 0);
	return 1;
}*/

public GameModeExitFunc()
{
	KillTimer(synctimer);
	KillTimer(hackchecktimer);
	KillTimer(desctimer);
	KillTimer(newmistimer);
	KillTimer(unjailtimer);
	KillTimer(othtimer);
	KillTimer(cartimer);
	KillTimer(accountstimer);
	KillTimer(hambre);
	KillTimer(checkgastimer);
	KillTimer(idletimer);
	KillTimer(pickuptimer);
	KillTimer(productiontimer);
	KillTimer(spectatetimer);
	KillTimer(stoppedvehtimer);
	KillTimer(turftimer);
	KillTimer(checkcarhealthtimer);
//	KillTimer(burgertimer);
//	KillTimer(chickentimer);
	KillTimer(tracetimer);
	//KillTimer(updateplayerpos);
	DestroyMenu(Licenses);
	DestroyMenu(LegalJobs);
	DestroyMenu(LegalJobs2);
	DestroyMenu(Guide);
	DestroyMenu(JobLocations);
	DestroyMenu(JobLocations2);
	DestroyMenu(JobLocations3);
	GameModeExit();
}

//------------------------------------------------------------------------------------------------------
public SaveMission(playerid,name[])
{
	if(IsPlayerConnected(playerid))
	{
	    new coordsstring[256];
	    new missionname[64];
		new var[128];
		new makername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, makername, sizeof(makername));
		new rand = random(999);
		if(rand == 0) { rand = 1; }
		new number = rand;
		if(MissionInfo[mToggle] == 0 || MissionInfo[mToggle] == 1) { }
		else { MissionInfo[mToggle] = 1; }
		format(missionname, sizeof(missionname), "%s.mis",name);
		new File: hFile = fopen(missionname, io_write);
		format(var, 128, "Title=%s\n", MissionInfo[mTitle]);fwrite(hFile, var);
		format(var, 128, "Maker=%s\n", makername);fwrite(hFile, var);
		format(var, 128, "Text1=%s\n", MissionInfo[mText1]);fwrite(hFile, var);
		format(var, 128, "Text2=%s\n", MissionInfo[mText2]);fwrite(hFile, var);
		format(var, 128, "Text3=%s\n", MissionInfo[mText3]);fwrite(hFile, var);
		format(var, 128, "Text4=%s\n", MissionInfo[mText4]);fwrite(hFile, var);
		format(var, 128, "Text5=%s\n", MissionInfo[mText5]);fwrite(hFile, var);
		format(var, 128, "Text6=%s\n", MissionInfo[mText6]);fwrite(hFile, var);
		format(var, 128, "Text7=%s\n", MissionInfo[mText7]);fwrite(hFile, var);
		format(var, 128, "Text8=%s\n", MissionInfo[mText8]);fwrite(hFile, var);
		format(var, 128, "Text9=%s\n", MissionInfo[mText9]);fwrite(hFile, var);
		format(var, 128, "Text10=%s\n", MissionInfo[mText10]);fwrite(hFile, var);
		format(var, 128, "Text11=%s\n", MissionInfo[mText11]);fwrite(hFile, var);
		format(var, 128, "Text12=%s\n", MissionInfo[mText12]);fwrite(hFile, var);
		format(var, 128, "Text13=%s\n", MissionInfo[mText13]);fwrite(hFile, var);
		format(var, 128, "Text14=%s\n", MissionInfo[mText14]);fwrite(hFile, var);
		format(var, 128, "Text15=%s\n", MissionInfo[mText15]);fwrite(hFile, var);
		format(var, 128, "Text16=%s\n", MissionInfo[mText16]);fwrite(hFile, var);
		format(var, 128, "Text17=%s\n", MissionInfo[mText17]);fwrite(hFile, var);
		format(var, 128, "Text18=%s\n", MissionInfo[mText18]);fwrite(hFile, var);
		format(var, 128, "GText1=%s\n", MissionInfo[mGText1]);fwrite(hFile, var);
		format(var, 128, "GText2=%s\n", MissionInfo[mGText2]);fwrite(hFile, var);
		format(var, 128, "GText3=%s\n", MissionInfo[mGText3]);fwrite(hFile, var);
		format(var, 128, "GText4=%s\n", MissionInfo[mGText4]);fwrite(hFile, var);
		format(var, 128, "GText5=%s\n", MissionInfo[mGText5]);fwrite(hFile, var);
		format(var, 128, "GText6=%s\n", MissionInfo[mGText6]);fwrite(hFile, var);
		format(var, 128, "CP1X=%f\n", MissionInfo[mCP1][0]);fwrite(hFile, var);
		format(var, 128, "CP1Y=%f\n", MissionInfo[mCP1][1]);fwrite(hFile, var);
		format(var, 128, "CP1Z=%f\n", MissionInfo[mCP1][2]);fwrite(hFile, var);
		format(var, 128, "CP2X=%f\n", MissionInfo[mCP2][0]);fwrite(hFile, var);
		format(var, 128, "CP2Y=%f\n", MissionInfo[mCP2][1]);fwrite(hFile, var);
		format(var, 128, "CP2Z=%f\n", MissionInfo[mCP2][2]);fwrite(hFile, var);
		format(var, 128, "CP3X=%f\n", MissionInfo[mCP3][0]);fwrite(hFile, var);
		format(var, 128, "CP3Y=%f\n", MissionInfo[mCP3][1]);fwrite(hFile, var);
		format(var, 128, "CP3Z=%f\n", MissionInfo[mCP3][2]);fwrite(hFile, var);
		format(var, 128, "CP4X=%f\n", MissionInfo[mCP4][0]);fwrite(hFile, var);
		format(var, 128, "CP4Y=%f\n", MissionInfo[mCP4][1]);fwrite(hFile, var);
		format(var, 128, "CP4Z=%f\n", MissionInfo[mCP4][2]);fwrite(hFile, var);
		format(var, 128, "CP5X=%f\n", MissionInfo[mCP5][0]);fwrite(hFile, var);
		format(var, 128, "CP5Y=%f\n", MissionInfo[mCP5][1]);fwrite(hFile, var);
		format(var, 128, "CP5Z=%f\n", MissionInfo[mCP5][2]);fwrite(hFile, var);
		format(var, 128, "CP6X=%f\n", MissionInfo[mCP6][0]);fwrite(hFile, var);
		format(var, 128, "CP6Y=%f\n", MissionInfo[mCP6][1]);fwrite(hFile, var);
		format(var, 128, "CP6Z=%f\n", MissionInfo[mCP6][2]);fwrite(hFile, var);
		format(var, 128, "Number=%d\n", number);fwrite(hFile, var);
		format(var, 128, "Reward=%d\n", MissionInfo[mReward]);fwrite(hFile, var);
		format(var, 128, "Toggle=%d\n", MissionInfo[mToggle]);fwrite(hFile, var);
		fclose(hFile);
		format(coordsstring, sizeof(coordsstring), "%s Mission Saved.",name);
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
	}
	return 1;
}

public LoadMission(playerid,name[])
{
	if(IsPlayerConnected(playerid))
	{
		new strFromFile2[128];
		new missionname[64];
		format(missionname, sizeof(missionname), "%s.mis",name);
		new File: file = fopen(missionname, io_read);
		if (file)
		{
		    new key[ 256 ] , val[ 256 ];
		    new Data[ 256 ];
		    while ( fread( file , Data , sizeof( Data ) ) )
			{
				key = ini_GetKey( Data );
				if( strcmp( key , "Title" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kTitle], val, 0, strlen(val), 255); }
				if( strcmp( key , "Maker" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kMaker], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text1" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText1], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText2], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text3" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText3], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text4" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText4], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text5" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText5], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text6" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText6], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text7" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText7], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text8" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText8], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text9" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText9], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text10" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText10], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text11" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText11], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text12" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText12], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text13" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText13], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text14" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText14], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text15" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText15], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text16" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText16], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text17" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText17], val, 0, strlen(val), 255); }
				if( strcmp( key , "Text18" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kText18], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText1" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText1], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText2], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText3" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText3], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText4" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText4], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText5" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText5], val, 0, strlen(val), 255); }
				if( strcmp( key , "GText6" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayMission[kGText6], val, 0, strlen(val), 255); }
				if( strcmp( key , "CP1X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP1][0] = floatstr( val ); }
				if( strcmp( key , "CP1Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP1][1] = floatstr( val ); }
				if( strcmp( key , "CP1Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP1][2] = floatstr( val ); }
				if( strcmp( key , "CP2X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP2][0] = floatstr( val ); }
				if( strcmp( key , "CP2Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP2][1] = floatstr( val ); }
				if( strcmp( key , "CP2Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP2][2] = floatstr( val ); }
				if( strcmp( key , "CP3X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP3][0] = floatstr( val ); }
				if( strcmp( key , "CP3Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP3][1] = floatstr( val ); }
				if( strcmp( key , "CP3Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP3][2] = floatstr( val ); }
				if( strcmp( key , "CP4X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP4][0] = floatstr( val ); }
				if( strcmp( key , "CP4Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP4][1] = floatstr( val ); }
				if( strcmp( key , "CP4Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP4][2] = floatstr( val ); }
				if( strcmp( key , "CP5X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP5][0] = floatstr( val ); }
				if( strcmp( key , "CP5Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP5][1] = floatstr( val ); }
				if( strcmp( key , "CP5Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP5][2] = floatstr( val ); }
				if( strcmp( key , "CP6X" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP6][0] = floatstr( val ); }
				if( strcmp( key , "CP6Y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP6][1] = floatstr( val ); }
				if( strcmp( key , "CP6Z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kCP6][2] = floatstr( val ); }
				if( strcmp( key , "Number" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kNumber] = strval( val ); }
				if( strcmp( key , "Reward" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kReward] = strval( val ); }
				if( strcmp( key , "Toggle" , true ) == 0 ) { val = ini_GetValue( Data ); PlayMission[kToggle] = strval( val ); }
			}
			fclose(file);
			format(strFromFile2, sizeof(strFromFile2), "%s Evento iniciado.",name);
			SendClientMessage(playerid, COLOR_GREEN,strFromFile2);
			format(strFromFile2, sizeof(strFromFile2), "Ha comenzado un evento: %s, | Premio: $%d",PlayMission[kTitle],PlayMission[kReward]);
			SendClientMessageToAll(COLOR_GREEN, strFromFile2);
			format(strFromFile2, sizeof(strFromFile2), "Para aceptarlo usar /Evento.");
			SendClientMessageToAll(COLOR_GREEN, strFromFile2);
			MissionPlayable = PlayMission[kNumber];
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN,"error 693.");
		}
	}
	return 1;
}

public LoadBoxer()
{
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("boxer.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Titel[TitelWins] = strval(arrCoords[0]);
		strmid(Titel[TitelName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
		Titel[TitelLoses] = strval(arrCoords[2]);
		fclose(file);
	}
	return 1;
}

public SaveBoxer()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%s,%d", Titel[TitelWins],Titel[TitelName],Titel[TitelLoses]);
	new File: file2 = fopen("boxer.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadStuff()
{
	new arrCoords[4][64];
	new strFromFile2[256];
	new File: file = fopen("stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		Tax = strval(arrCoords[1]);
		TaxValue = strval(arrCoords[2]);
		Security = strval(arrCoords[3]);
		fclose(file);
		if(Security == 0 || Security == 1)
		{
		}
		else
		{
		    GameModeExit();
		}
	}
	else
	{
	    GameModeExit();
	}
	return 1;
}

public SaveStuff()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d", Jackpot,Tax,TaxValue,Security);
	new File: file2 = fopen("stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadIRC()
{
	new arrCoords[5][64];
	new strFromFile2[256];
	new File: file = fopen("channels.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(IRCInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(IRCInfo[idx][iAdmin], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(IRCInfo[idx][iMOTD], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(IRCInfo[idx][iPassword], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			IRCInfo[idx][iNeedPass] = strval(arrCoords[3]);
			IRCInfo[idx][iLock] = strval(arrCoords[4]);
			printf("IRC:%d Admin:%s MOTD: %s Password: %s NeedPass: %d Lock: %d",idx,IRCInfo[idx][iAdmin],IRCInfo[idx][iMOTD],IRCInfo[idx][iPassword],IRCInfo[idx][iNeedPass],IRCInfo[idx][iLock]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveIRC()
{
	new idx;
	new File: file2;
	while (idx < sizeof(IRCInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%s|%d|%d\n",
		IRCInfo[idx][iAdmin],
		IRCInfo[idx][iMOTD],
		IRCInfo[idx][iPassword],
		IRCInfo[idx][iNeedPass],
		IRCInfo[idx][iLock]);
		if(idx == 0)
		{
			file2 = fopen("channels.cfg", io_write);
		}
		else
		{
			file2 = fopen("channels.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadTurfs()
{
	new arrCoords[6][64];
	new strFromFile2[256];
	new File: file = fopen("turfs.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(TurfInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(TurfInfo[idx][zOwner], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(TurfInfo[idx][zColor], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			TurfInfo[idx][zMinX] = floatstr(arrCoords[2]);
			TurfInfo[idx][zMinY] = floatstr(arrCoords[3]);
			TurfInfo[idx][zMaxX] = floatstr(arrCoords[4]);
			TurfInfo[idx][zMaxY] = floatstr(arrCoords[5]);
			//printf("Turf:%d Name: %s Owner:%s MinX:%f MinY:%f MinZ:%f MaxX:%f MaxY:%f MaxZ:%f\n",
			//idx,TurfInfo[idx][zName],TurfInfo[idx][zOwner],TurfInfo[idx][zMinX],TurfInfo[idx][zMinY],TurfInfo[idx][zMinZ],TurfInfo[idx][zMaxX],TurfInfo[idx][zMaxY],TurfInfo[idx][zMaxZ]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveTurfs()
{
	new idx;
	new File: file2;
	while (idx < sizeof(TurfInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%f|%f|%f|%f|%f|%f\n",
		TurfInfo[idx][zOwner],
		TurfInfo[idx][zColor],
		TurfInfo[idx][zMinX],
		TurfInfo[idx][zMinY],
		TurfInfo[idx][zMaxX],
		TurfInfo[idx][zMaxY]);
		if(idx == 0)
		{
			file2 = fopen("turfs.cfg", io_write);
		}
		else
		{
			file2 = fopen("turfs.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadCK()
{
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("ck.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(CKInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(CKInfo[idx][cSendername], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(CKInfo[idx][cGiveplayer], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			CKInfo[idx][cUsed] = strval(arrCoords[2]);
			printf("CK:%d Taken: %d Sendername:%s Giveplayer: %s",
			idx,CKInfo[idx][cUsed],CKInfo[idx][cSendername],CKInfo[idx][cGiveplayer]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveCK()
{
	new idx;
	new File: file2;
	while (idx < sizeof(CKInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%d\n",
		CKInfo[idx][cSendername],
		CKInfo[idx][cGiveplayer],
		CKInfo[idx][cUsed]);
		if(idx == 0)
		{
			file2 = fopen("ck.cfg", io_write);
		}
		else
		{
			file2 = fopen("ck.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadFamilies()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("families.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(FamilyInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			FamilyInfo[idx][FamilyTaken] = strval(arrCoords[0]);
			strmid(FamilyInfo[idx][FamilyName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(FamilyInfo[idx][FamilyMOTD], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(FamilyInfo[idx][FamilyColor], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			strmid(FamilyInfo[idx][FamilyLeader], arrCoords[4], 0, strlen(arrCoords[4]), 255);
			FamilyInfo[idx][FamilyMembers] = strval(arrCoords[5]);
			FamilyInfo[idx][FamilySpawn][0] = floatstr(arrCoords[6]);
			FamilyInfo[idx][FamilySpawn][1] = floatstr(arrCoords[7]);
			FamilyInfo[idx][FamilySpawn][2] = floatstr(arrCoords[8]);
			FamilyInfo[idx][FamilySpawn][3] = floatstr(arrCoords[9]);
			FamilyInfo[idx][FamilyInterior] = strval(arrCoords[10]);
			printf("Family:%d Taken: %d Name:%s MOTD:%s Leader:%s Members:%d SpawnX:%f SpawnY:%f SpawnZ:%f Int:%d",
			idx,FamilyInfo[idx][FamilyTaken],FamilyInfo[idx][FamilyName],FamilyInfo[idx][FamilyMOTD],FamilyInfo[idx][FamilyLeader],FamilyInfo[idx][FamilyMembers],FamilyInfo[idx][FamilySpawn][0],FamilyInfo[idx][FamilySpawn][1],FamilyInfo[idx][FamilySpawn][2],FamilyInfo[idx][FamilyInterior]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SaveFamilies()
{
	new idx;
	new File: file2;
	while (idx < sizeof(FamilyInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%s|%d|%f|%f|%f|%f|%d\n",
		FamilyInfo[idx][FamilyTaken],
		FamilyInfo[idx][FamilyName],
		FamilyInfo[idx][FamilyMOTD],
		FamilyInfo[idx][FamilyColor],
		FamilyInfo[idx][FamilyLeader],
		FamilyInfo[idx][FamilyMembers],
		FamilyInfo[idx][FamilySpawn][0],
		FamilyInfo[idx][FamilySpawn][1],
		FamilyInfo[idx][FamilySpawn][2],
		FamilyInfo[idx][FamilySpawn][3],
		FamilyInfo[idx][FamilyInterior]);
		if(idx == 0)
		{
			file2 = fopen("families.cfg", io_write);
		}
		else
		{
			file2 = fopen("families.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

/*public LoadEconomy() // by DryilZas
{
	new arrCoords[10][256];
	new strFromFile2[256];
	new File: file = fopen("Economia.cfg", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		strmid(EconomyInfo[eAlcalde], arrCoords[0], 0, strlen(arrCoords[0]), MAX_PLAYER_NAME);
		strmid(EconomyInfo[ePartido], arrCoords[1], 0, strlen(arrCoords[1]), MAX_PLAYER_NAME);
		EconomyInfo[eArcas] = strval(arrCoords[2]);
		EconomyInfo[eImpuestoCompraCasa] = strval(arrCoords[3]);
		EconomyInfo[eImpuestoVentaCasa] = strval(arrCoords[4]);
		EconomyInfo[eImpuestoCompraVeh] = strval(arrCoords[5]);
		EconomyInfo[eImpuestoVentaVeh] = strval(arrCoords[6]);
		EconomyInfo[eImpuestoBancario] = strval(arrCoords[7]);
		EconomyInfo[ePagaCivil] = strval(arrCoords[8]);
		EconomyInfo[ePagaEstado] = strval(arrCoords[9]);
		fclose(file);
	}
	SaveEconomy()
	return 1;
}*/

/*public SaveEconomy() // by DryilZas
{
	new File: file2;
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%s,%s,%d,%d,%d,%d,%d,%d,%d,%d",
	EconomyInfo[eAlcalde],
	EconomyInfo[ePartido],
	EconomyInfo[eArcas],
	EconomyInfo[eImpuestoCompraCasa],
	EconomyInfo[eImpuestoVentaCasa],
	EconomyInfo[eImpuestoCompraVeh],
	EconomyInfo[eImpuestoVentaVeh],
	EconomyInfo[eImpuestoBancario],
	EconomyInfo[ePagaCivil],
	EconomyInfo[ePagaEstado]);
	file2 = fopen("Economia.cfg", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}*/

public LoadPapers()
{
	new arrCoords[11][64];
	new strFromFile2[256];
	new File: file = fopen("papers.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(PaperInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			PaperInfo[idx][PaperUsed] = strval(arrCoords[0]);
			strmid(PaperInfo[idx][PaperMaker], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(PaperInfo[idx][PaperTitle], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(PaperInfo[idx][PaperText1], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			strmid(PaperInfo[idx][PaperText2], arrCoords[4], 0, strlen(arrCoords[4]), 255);
			strmid(PaperInfo[idx][PaperText3], arrCoords[5], 0, strlen(arrCoords[5]), 255);
			strmid(PaperInfo[idx][PaperText4], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(PaperInfo[idx][PaperText5], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			strmid(PaperInfo[idx][PaperText6], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			strmid(PaperInfo[idx][PaperText7], arrCoords[9], 0, strlen(arrCoords[9]), 255);
			PaperInfo[idx][SafeSaving] = strval(arrCoords[10]);
			printf("Paper:%d Used: %d Maker:%s Title: %s Text1: %s Text2: %s Text3: %s Text4: %s Text5: %s Text6: %s Text7: %s",
			idx,PaperInfo[idx][PaperUsed],PaperInfo[idx][PaperMaker],PaperInfo[idx][PaperTitle],PaperInfo[idx][PaperText1],PaperInfo[idx][PaperText2],PaperInfo[idx][PaperText3],PaperInfo[idx][PaperText4],PaperInfo[idx][PaperText5],PaperInfo[idx][PaperText6],PaperInfo[idx][PaperText7]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public SavePapers()
{
	new idx;
	new File: file2;
	while (idx < sizeof(IRCInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%s|%s|%s|%s|%s|%s|%d\n",
		PaperInfo[idx][PaperUsed],
		PaperInfo[idx][PaperMaker],
		PaperInfo[idx][PaperTitle],
		PaperInfo[idx][PaperText1],
		PaperInfo[idx][PaperText2],
		PaperInfo[idx][PaperText3],
		PaperInfo[idx][PaperText4],
		PaperInfo[idx][PaperText5],
		PaperInfo[idx][PaperText6],
		PaperInfo[idx][PaperText7],
		PaperInfo[idx][SafeSaving]);
		if(idx == 0)
		{
			file2 = fopen("papers.cfg", io_write);
		}
		else
		{
			file2 = fopen("papers.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadCar()
{
	new arrCoords[13][64];
	new strFromFile2[256];
	new File: file = fopen("cars.cfg", io_read);
	if (file)
	{
		new idx = 184;
		while (idx < sizeof(CarInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			CarInfo[idx][cModel] = strval(arrCoords[0]);
			CarInfo[idx][cLocationx] = floatstr(arrCoords[1]);
			CarInfo[idx][cLocationy] = floatstr(arrCoords[2]);
			CarInfo[idx][cLocationz] = floatstr(arrCoords[3]);
			CarInfo[idx][cAngle] = floatstr(arrCoords[4]);
			CarInfo[idx][cColorOne] = strval(arrCoords[5]);
			CarInfo[idx][cColorTwo] = strval(arrCoords[6]);
			strmid(CarInfo[idx][cOwner], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			strmid(CarInfo[idx][cDescription], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			CarInfo[idx][cValue] = strval(arrCoords[9]);
			CarInfo[idx][cLicense] = strval(arrCoords[10]);
			CarInfo[idx][cOwned] = strval(arrCoords[11]);
			CarInfo[idx][cLock] = strval(arrCoords[12]);
			printf("Coches: %d Propietario:%s LicensePlate %s",idx,CarInfo[idx][cOwner],CarInfo[idx][cLicense]);
			idx++;
		}
	}
	return 1;
}

public SaveCarCoords()
{
	new idx;
	new File: file2;
	while (idx < sizeof(CarInfo))
	{
	    new coordsstring[256];
	    format(coordsstring, sizeof(coordsstring), "%d|%f|%f|%f|%f|%d|%d\n",
		CarInfo[idx][cModel],
		CarInfo[idx][cLocationx],
		CarInfo[idx][cLocationy],
		CarInfo[idx][cLocationz],
		CarInfo[idx][cAngle],
		CarInfo[idx][cColorOne],
		CarInfo[idx][cColorTwo]);
		if(idx == 0)
		{
			file2 = fopen("cars.cfg", io_write);
		}
		else
		{
			file2 = fopen("cars.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadProperty()
{
	new arrCoords[30][64];
	new strFromFile2[256];
	new File: file = fopen("property.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(HouseInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			HouseInfo[idx][hEntrancex] = floatstr(arrCoords[0]);
			HouseInfo[idx][hEntrancey] = floatstr(arrCoords[1]);
			HouseInfo[idx][hEntrancez] = floatstr(arrCoords[2]);
			HouseInfo[idx][hExitx] = floatstr(arrCoords[3]);
			HouseInfo[idx][hExity] = floatstr(arrCoords[4]);
			HouseInfo[idx][hExitz] = floatstr(arrCoords[5]);
			HouseInfo[idx][hHealthx] = strval(arrCoords[6]);
			HouseInfo[idx][hHealthy] = strval(arrCoords[7]);
			HouseInfo[idx][hHealthz] = strval(arrCoords[8]);
			HouseInfo[idx][hArmourx] = strval(arrCoords[9]);
			HouseInfo[idx][hArmoury] = strval(arrCoords[10]);
			HouseInfo[idx][hArmourz] = strval(arrCoords[11]);
			//printf("HouseInfo hEntrancez %f",HouseInfo[idx][hEntrancez]);
			strmid(HouseInfo[idx][hOwner], arrCoords[12], 0, strlen(arrCoords[12]), 255);
			strmid(HouseInfo[idx][hDiscription], arrCoords[13], 0, strlen(arrCoords[13]), 255);
			HouseInfo[idx][hValue] = strval(arrCoords[14]);
			HouseInfo[idx][hHel] = strval(arrCoords[15]);
			HouseInfo[idx][hArm] = strval(arrCoords[16]);
			HouseInfo[idx][hInt] = strval(arrCoords[17]);
			HouseInfo[idx][hLock] = strval(arrCoords[18]);
			HouseInfo[idx][hOwned] = strval(arrCoords[19]);
			HouseInfo[idx][hRooms] = strval(arrCoords[20]);
			HouseInfo[idx][hRent] = strval(arrCoords[21]);
			HouseInfo[idx][hRentabil] = strval(arrCoords[22]);
			HouseInfo[idx][hTakings] = strval(arrCoords[23]);
			HouseInfo[idx][hVec] = strval(arrCoords[24]);
  	        if(HouseInfo[idx][hVec] == 457)
			{
				HouseInfo[idx][hVec] = 411;
			}
			HouseInfo[idx][hVcol1] = strval(arrCoords[25]);
			HouseInfo[idx][hVcol2] = strval(arrCoords[26]);
			HouseInfo[idx][hDate] = strval(arrCoords[27]);
			HouseInfo[idx][hLevel] = strval(arrCoords[28]);
			HouseInfo[idx][hWorld] = strval(arrCoords[29]);
			
			printf("HouseInfo:%d Owner:%s hTakings %d hVec %d",idx,HouseInfo[idx][hOwner],HouseInfo[idx][hTakings],HouseInfo[idx][hVec]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

public LoadBizz()
{
	new arrCoords[19][64];
	new strFromFile2[256];
	new File: file = fopen("bizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(BizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			BizzInfo[idx][bOwned] = strval(arrCoords[0]);
			strmid(BizzInfo[idx][bOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(BizzInfo[idx][bMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(BizzInfo[idx][bExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			BizzInfo[idx][bEntranceX] = floatstr(arrCoords[4]);
			BizzInfo[idx][bEntranceY] = floatstr(arrCoords[5]);
			BizzInfo[idx][bEntranceZ] = floatstr(arrCoords[6]);
			BizzInfo[idx][bExitX] = floatstr(arrCoords[7]);
			BizzInfo[idx][bExitY] = floatstr(arrCoords[8]);
			BizzInfo[idx][bExitZ] = floatstr(arrCoords[9]);
			BizzInfo[idx][bLevelNeeded] = strval(arrCoords[10]);
			BizzInfo[idx][bBuyPrice] = strval(arrCoords[11]);
			BizzInfo[idx][bEntranceCost] = strval(arrCoords[12]);
			BizzInfo[idx][bTill] = strval(arrCoords[13]);
			BizzInfo[idx][bLocked] = strval(arrCoords[14]);
			BizzInfo[idx][bInterior] = strval(arrCoords[15]);
			BizzInfo[idx][bProducts] = strval(arrCoords[16]);
			BizzInfo[idx][bMaxProducts] = strval(arrCoords[17]);
			BizzInfo[idx][bPriceProd] = strval(arrCoords[18]);
			printf("BizzInfo:%d Owner:%s Message:%s Entfee:%d Till:%d Products:%d/%d Interior:%d.\n",
			idx,
			BizzInfo[idx][bOwner],
			BizzInfo[idx][bMessage],
			BizzInfo[idx][bEntranceCost],
			BizzInfo[idx][bTill],
			BizzInfo[idx][bProducts],
			BizzInfo[idx][bMaxProducts],
			BizzInfo[idx][bInterior]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}


public LoadSBizz()
{
	new arrCoords[16][64];
	new strFromFile2[256];
	new File: file = fopen("sbizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(SBizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			SBizzInfo[idx][sbOwned] = strval(arrCoords[0]);
			strmid(SBizzInfo[idx][sbOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(SBizzInfo[idx][sbMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(SBizzInfo[idx][sbExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			SBizzInfo[idx][sbEntranceX] = floatstr(arrCoords[4]);
			SBizzInfo[idx][sbEntranceY] = floatstr(arrCoords[5]);
			SBizzInfo[idx][sbEntranceZ] = floatstr(arrCoords[6]);
			SBizzInfo[idx][sbLevelNeeded] = strval(arrCoords[7]);
			SBizzInfo[idx][sbBuyPrice] = strval(arrCoords[8]);
			SBizzInfo[idx][sbEntranceCost] = strval(arrCoords[9]);
			SBizzInfo[idx][sbTill] = strval(arrCoords[10]);
			SBizzInfo[idx][sbLocked] = strval(arrCoords[11]);
			SBizzInfo[idx][sbInterior] = strval(arrCoords[12]);
			SBizzInfo[idx][sbProducts] = strval(arrCoords[13]);
			SBizzInfo[idx][sbMaxProducts] = strval(arrCoords[14]);
			SBizzInfo[idx][sbPriceProd] = strval(arrCoords[15]);
			printf("SBizzInfo:%d Owner:%s Message:%s Entfee:%d Till:%d Products:%d/%d Interior:%d.\n",
			idx,
			SBizzInfo[idx][sbOwner],
			SBizzInfo[idx][sbMessage],
			SBizzInfo[idx][sbEntranceCost],
			SBizzInfo[idx][sbTill],
			SBizzInfo[idx][sbProducts],
			SBizzInfo[idx][sbMaxProducts],
			SBizzInfo[idx][sbInterior]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------
public OnGameModeExit()
{
    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
		TextDrawHideForPlayer(i, Textdraw[0]);
		TextDrawHideForPlayer(i, Textdraw[1]);
		TextDrawHideForPlayer(i, Textdraw[2]);
		TextDrawHideForPlayer(i, Textdraw[3]);
	}
	//---------------------lineas avion
    DestroyPickup(pu[0]);
	DestroyPickup(pu[1]);
	DestroyPickup(pu[2]);
    /*KickZombies();*/
    KillTimer(CheckStatusTimer);
   	KillTimer(synctimer);
	KillTimer(hackchecktimer);
	KillTimer(desctimer);
	KillTimer(newmistimer);
	KillTimer(unjailtimer);
	KillTimer(othtimer);
	KillTimer(cartimer);
	KillTimer(accountstimer);
	KillTimer(hambre);
	KillTimer(checkgastimer);
	KillTimer(idletimer);
	KillTimer(pickuptimer);
	KillTimer(productiontimer);
	KillTimer(spectatetimer);
	KillTimer(stoppedvehtimer);
	KillTimer(turftimer);
	KillTimer(checkcarhealthtimer);
	//KillTimer(burgertimer);
	//KillTimer(chickentimer);
	KillTimer(tracetimer);
	//KillTimer(updateplayerpos);
	DestroyMenu(Licenses);
	DestroyMenu(LegalJobs);
	DestroyMenu(LegalJobs2);
	DestroyMenu(Guide);
	DestroyMenu(JobLocations);
	DestroyMenu(JobLocations2);
	DestroyMenu(JobLocations3);
	TextDrawDestroy(Text:Black0);
	TextDrawDestroy(Text:White1);
	TextDrawDestroy(Text:White2);
	TextDrawDestroy(Text:BlackHealth);
	TextDrawDestroy(Text:DarkRedHealth);
	TextDrawDestroy(Text:BlackSpeed);
	TextDrawDestroy(Text:DarkYellowSpeed);
	TextDrawDestroy(Text:Marker);
	TextDrawDestroy(Text:Exclamation);
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		TextDrawDestroy(Text:VHS[i]);
		TextDrawDestroy(Text:LightRedHealth[i]);
		TextDrawDestroy(Text:LightYellowSpeed[i]);
	}
	
	/*for(new i = 0; i < MAX_PLAYERS; i++)
	{
		for(new o = 0; o < sizeof(Objects); o++)
		{
			if(Player[i][view][o])
			{
				Player[i][view][o] = false;
				DestroyPlayerObject(i,Player[i][objid][o]);
			}
		}
	}*/

	/*KillTimer(timer);*/
	ServerMoneyExit();
//	SaveEconomy();
	SaveAccounts();
	OnPropUpdate();
	return GMExit();
	//return 1;
}
forward GMInit();
forward GMExit();
ServerMoneyInit()
{
	SERVERSIDETIMER=SetTimer("ServerMoneyCB",1000,true);
	return 1;
}

ServerMoneyExit()
{
	KillTimer(SERVERSIDETIMER);
	return 1;
}


forward ServerMoneyCB();

public ServerMoneyCB()
{
	CallLoop(ServerSidep,MAX_PLAYERS)
	{
		if(IsPlayerConnected(ServerSidep))
		{
			if(GetPlayerMoney(ServerSidep) != ServerSideCash[ServerSidep])
			{
				new H4xc4sh=GetPlayerMoney(ServerSidep);
				H4xc4sh=H4xc4sh-ServerSideCash[ServerSidep];
				if(H4xc4sh > CALLBACK_AMOUNT) OnPlayerHaveExtraCash(ServerSidep,H4xc4sh);
			}
			GivePlayerMoney(ServerSidep,-GetPlayerMoney(ServerSidep));
			GivePlayerMoney(ServerSidep,ServerSideCash[ServerSidep]);
		}

	}
	return 1;
}


forward GivePlayerMoneyEx(playerid,cashgiven);
public GivePlayerMoneyEx(playerid,cashgiven)
{
	ServerSideCash[playerid]=ServerSideCash[playerid]+cashgiven;
	return 1;
}

forward ResetPlayerMoneyEx(playerid);
public ResetPlayerMoneyEx(playerid)
{
	ServerSideCash[playerid]=0;
	return 1;
}

forward GetPlayerMoneyEx(playerid);
public GetPlayerMoneyEx(playerid)
{
	return ServerSideCash[playerid];
}
forward OnPlayerHaveExtraCash(playerid,extraamount);
#define GetPlayerMoney GetPlayerMoneyEx
#define GivePlayerMoney GivePlayerMoneyEx
#define ResetPlayerMoney ResetPlayerMoneyEx





//#define OnGameModeInit GMInit
//#define OnGameModeExit GMExit
public OnGameModeInit()
{
    ConnectNPC("[BOT]Johnson","police");
    //ConnectNPC("FBI_9","entrevistador");
    /*ConnectNPC("Latino_1","amarillo");
    ConnectNPC("Policia_1","policia1");
    ConnectNPC("Policia_2","policia2");
    ConnectNPC("Policia_3","policia3");
    ConnectNPC("SpG_Bot","spgbot");*/
    //----------------------------------------linea baloncesto
	Baller = 999;
	DestroyObject(Ball);
	Ball = CreateObject(2114, 2782.3027,-2019.0826,13.5547-0.8, 0, 0, 96);
	AddStaticPickup(1239, 1, 2799.5776,-2006.8701,13.5547);//i de infomacion y aparecer balon
    //----------------------------------------linea baloncesto
    new string[MAX_PLAYER_NAME];
    new string1[MAX_PLAYER_NAME];
	for(new c=0;c<CAR_AMOUNT;c++)
	{
		Gas[c] = GasMax;
	}
	//bomberos
	CreateObject(8533, 2278.2627, -2191.5344, 12.5092, 0.0000, 0.0000, 315.0000);
	CreateObject(8533, 2283.1155, -2161.0945, 12.5212, 0.0000, 0.0000, 45.0000);
	CreateObject(9241, 2274.9509, -2155.6943, 13.2450, 0.0000, 0.0000, 45.0000);
	
//--------------lineas casino
	AddStaticPickup(1239, 2, 1279.0878,-1632.7419,-8.9047); //Pickup Suerte1
	Create3DTextLabel("Tragamonedas\nBy GROVE4L\nUsa /girar para jugar\nCosto: $50",0xFFFB00FF,1963.8304,1037.0452,992.4688,5.5, 0);//Suerte1
	AddStaticPickup(1239, 2, 1285.8539,-1631.6031,-8.9046); //Pickup Suerte2
	Create3DTextLabel("Tragamonedas\nBy GROVE4L\nUsa /girar para jugar\nCosto: $50",0xFFFB00FF,1963.8384,998.5801,992.4688,5.5, 0);//Suerte2
	AddStaticPickup(1239, 2, 1285.8539,-1631.6031,-8.9046); //Pickup Suerte3
	Create3DTextLabel("Tragamonedas\nBy GROVE4L\nUsa /girar para jugar\nCosto: $50",0xFFFB00FF,1961.3010,1042.9080,992.4688,5.5, 0);//Suerte3
	AddStaticPickup(1239, 2, 1285.8539,-1631.6031,-8.9046); //Pickup Suerte3
	Create3DTextLabel("Tragamonedas\nBy GROVE4L\nUsa /girar para jugar\nCosto: $50",0xFFFB00FF,1956.9480,1047.2975,992.4688,5.5, 0);//Suerte4
	AddStaticPickup(1239, 2, 1285.8539,-1631.6031,-8.9046); //Pickup Suerte3
	Create3DTextLabel("Tragamonedas\nBy GROVE4L\nUsa /girar para jugar\nCosto: $50",0xFFFB00FF,1961.3676,992.6525,992.4688,5.5, 0);//Suerte5
	AddStaticPickup(1239, 2, 1285.8539,-1631.6031,-8.9046); //Pickup Suerte3
	Create3DTextLabel("Tragamonedas\nBy GROVE4L\nUsa /girar para jugar\nCosto: $50",0xFFFB00FF,1957.0472,988.3160,992.4688,5.5, 0);//Suerte6
    //----------------------------------------linea avion
    shuttlemenu = CreateMenu("Destinacion:",1,3.0,150.0,200.0); // creating a menu
	AddMenuItem(shuttlemenu, 0, "Las Venturas: 1000$ o Pasaje");
	AddMenuItem(shuttlemenu, 0, "San Fierro: 1000$ o Pasaje");
	AddMenuItem(shuttlemenu, 0, "Los Santos: 1000$ o Pasaje");
	AddMenuItem(shuttlemenu, 0, "[Salir]");
	// CREATING THE START PICKUP
	pu[0] = CreatePickup(1559,2,1674.2682,1447.8484,10.7830); // LV 98
	pu[1] = CreatePickup(1559,2,1730.2142,-2238.7668,13.5419); // LS 97
	pu[2] = CreatePickup(1559,2,-1422.0570,-287.9178,14.1484); // SF 99

	Exepciones[0] = EX_MOTOS;
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
      Estado[i] = 1;
      cinturon[i] = 0;
    }
	SetTimer("Chequeo", TDC, true);

	Textdraw[0] = TextDrawCreate(61.000000, 288.000000, "0");
	TextDrawAlignment(Textdraw[0], 2);
	TextDrawBackgroundColor(Textdraw[0], 255);
	TextDrawFont(Textdraw[0], 3);
	TextDrawLetterSize(Textdraw[0], 0.600000, 2.199999);
	TextDrawColor(Textdraw[0], 0xFFFFFFFF);
	TextDrawSetOutline(Textdraw[0], 1);
	TextDrawSetProportional(Textdraw[0], 1);

	Textdraw[1] = TextDrawCreate(112.000000, 288.000000, "km/h");
	TextDrawAlignment(Textdraw[1], 2);
	TextDrawBackgroundColor(Textdraw[1], 255);
	TextDrawFont(Textdraw[1], 3);
	TextDrawLetterSize(Textdraw[1], 0.600000, 2.199999);
	TextDrawColor(Textdraw[1], 0xD56A00FF);
	TextDrawSetOutline(Textdraw[1], 1);
	TextDrawSetProportional(Textdraw[1], 1);

	Textdraw[2] = TextDrawCreate(61.000000, 309.000000, "0");
	TextDrawAlignment(Textdraw[2], 2);
	TextDrawBackgroundColor(Textdraw[2], 255);
	TextDrawFont(Textdraw[2], 3);
	TextDrawLetterSize(Textdraw[2], 0.600000, 2.199999);
	TextDrawColor(Textdraw[2], 0xFFFFFFFF);
	TextDrawSetOutline(Textdraw[2], 1);
	TextDrawSetProportional(Textdraw[2], 1);


	Textdraw[3] = TextDrawCreate(104.870000, 309.000000, "m/s");
	TextDrawAlignment(Textdraw[3], 2);
	TextDrawBackgroundColor(Textdraw[3], 255);
	TextDrawFont(Textdraw[3], 3);
	TextDrawLetterSize(Textdraw[3], 0.579999, 2.200000);
	TextDrawColor(Textdraw[3], 0xD56A00FF);
	TextDrawSetOutline(Textdraw[3], 1);
	TextDrawSetProportional(Textdraw[3], 1);
	 
	 
	 
	// If there is players / Npcs / Vehicles online, it'll create the Itter.
	/*for(new i =0; i<= MAX_PLAYERS;i++){
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i)){
			Itter_Add(Player,i);
			FiringZOMBIETimer[i] = SetTimerEx("FiringZOMBIE",250,1,"i",i);
			ZombieKill[i] = -1;
		}
		else if(IsPlayerConnected(i) && IsPlayerNPC(i)){
     	    Itter_Add(Bot,i);

     	    //If he's a zombie. Activate him.
		    if(!strfind(PlayerName(i),ZOMBIE_NAME,true)){
			    SetupZombie(i);
		    }
		}
	}*/
	
	/*timer = SetTimer("Timer",500,1);*/
	
	new Float:h;
	for(new v=0;v<MAX_VEHICLES;v++){
	    GetVehicleHealth(v,h);
	    if(h)Itter_Add(Vehicle,v);
	}
	
	Black0 = TextDrawCreate(481.000000,353.000000,"_");
	TextDrawUseBox(Black0,1);
	TextDrawBoxColor(Black0,0x00000044);
	TextDrawTextSize(Black0,596.000000,0.000000);
	TextDrawAlignment(Black0,0);
	TextDrawBackgroundColor(Black0,0x000000ff);
	TextDrawFont(Black0,3);
	TextDrawLetterSize(Black0,3.599999,7.599996);
	TextDrawColor(Black0,0xffffffff);
	TextDrawSetOutline(Black0,1);
	TextDrawSetProportional(Black0,1);
	TextDrawSetShadow(Black0,1);

	White1 = TextDrawCreate(482.000000,354.000000,"_");
	TextDrawUseBox(White1,1);
	TextDrawBoxColor(White1,0xffffff11);
	TextDrawTextSize(White1,595.000000,-2.000000);
	TextDrawAlignment(White1,0);
	TextDrawBackgroundColor(White1,0x000000ff);
	TextDrawFont(White1,1);
	TextDrawLetterSize(White1,1.700000,7.399997);
	TextDrawColor(White1,0xffffffff);
	TextDrawSetOutline(White1,1);
	TextDrawSetProportional(White1,1);
	TextDrawSetShadow(White1,1);

	White2 = TextDrawCreate(483.000000,355.000000,"_");
	TextDrawUseBox(White2,1);
	TextDrawBoxColor(White2,0xffffff22);
	TextDrawTextSize(White2,594.000000,0.000000);
	TextDrawAlignment(White2,0);
	TextDrawBackgroundColor(White2,0x000000ff);
	TextDrawFont(White2,1);
	TextDrawLetterSize(White2,0.299999,7.199996);
	TextDrawColor(White2,0xffffffff);
	TextDrawSetOutline(White2,1);
	TextDrawSetProportional(White2,1);
	TextDrawSetShadow(White2,1);

	BlackHealth = TextDrawCreate(487.000000,385.000000,"_");
	TextDrawUseBox(BlackHealth,1);
	TextDrawBoxColor(BlackHealth,0x00000099);
	TextDrawTextSize(BlackHealth,590.000000,-11.000000);
	TextDrawAlignment(BlackHealth,0);
	TextDrawBackgroundColor(BlackHealth,0x000000ff);
	TextDrawFont(BlackHealth,3);
	TextDrawLetterSize(BlackHealth,1.000000,0.399999);
	TextDrawColor(BlackHealth,0xffffffff);
	TextDrawSetOutline(BlackHealth,1);
	TextDrawSetProportional(BlackHealth,1);
	TextDrawSetShadow(BlackHealth,1);

	DarkRedHealth = TextDrawCreate(488.000000,386.000000,"_");
	TextDrawUseBox(DarkRedHealth,1);
	TextDrawBoxColor(DarkRedHealth,0xff000066);
	TextDrawTextSize(DarkRedHealth,589.000000,0.000000);
	TextDrawAlignment(DarkRedHealth,0);
	TextDrawBackgroundColor(DarkRedHealth,0x000000ff);
	TextDrawFont(DarkRedHealth,3);
	TextDrawLetterSize(DarkRedHealth,1.000000,0.199999);
	TextDrawColor(DarkRedHealth,0xffffffff);
	TextDrawSetOutline(DarkRedHealth,1);
	TextDrawSetProportional(DarkRedHealth,1);
	TextDrawSetShadow(DarkRedHealth,1);

	BlackSpeed = TextDrawCreate(536.000000,403.000000,"_");
	TextDrawUseBox(BlackSpeed,1);
	TextDrawBoxColor(BlackSpeed,0x00000099);
	TextDrawTextSize(BlackSpeed,590.000000,0.000000);
	TextDrawAlignment(BlackSpeed,0);
	TextDrawBackgroundColor(BlackSpeed,0x000000ff);
	TextDrawFont(BlackSpeed,3);
	TextDrawLetterSize(BlackSpeed,1.000000,1.400000);
	TextDrawColor(BlackSpeed,0xffffffff);
	TextDrawSetOutline(BlackSpeed,1);
	TextDrawSetShadow(BlackSpeed,1);
	TextDrawSetProportional(BlackSpeed,1);

	DarkYellowSpeed = TextDrawCreate(537.000000,404.000000,"_");
	TextDrawUseBox(DarkYellowSpeed,1);
	TextDrawBoxColor(DarkYellowSpeed,0xffff0033);
	TextDrawTextSize(DarkYellowSpeed,589.000000,0.000000);
	TextDrawAlignment(DarkYellowSpeed,0);
	TextDrawBackgroundColor(DarkYellowSpeed,0x000000ff);
	TextDrawFont(DarkYellowSpeed,3);
	TextDrawLetterSize(DarkYellowSpeed,1.000000,1.200000);
	TextDrawColor(DarkYellowSpeed,0xffffffff);
	TextDrawSetOutline(DarkYellowSpeed,1);
	TextDrawSetProportional(DarkYellowSpeed,1);
	TextDrawSetShadow(DarkYellowSpeed,1);

	Marker = TextDrawCreate(511.000000,382.000000,"l");
	TextDrawAlignment(Marker,0);
	TextDrawBackgroundColor(Marker,0x000000ff);
	TextDrawFont(Marker,1);
	TextDrawLetterSize(Marker,0.099999,1.000000);
	TextDrawColor(Marker,0xffffffff);
	TextDrawSetOutline(Marker,1);
	TextDrawSetProportional(Marker,1);
	TextDrawSetShadow(Marker,1);

	Exclamation = TextDrawCreate(579.000000,351.000000,"~r~!");
	TextDrawAlignment(Exclamation,0);
	TextDrawBackgroundColor(Exclamation,0x000000ff);
	TextDrawFont(Exclamation,2);
	TextDrawLetterSize(Exclamation,1.200000,3.399999);
	TextDrawColor(Exclamation,0xffffffff);
	TextDrawSetOutline(Exclamation,1);
	TextDrawSetProportional(Exclamation,1);
	TextDrawSetShadow(Exclamation,1);

	CheckStatusTimer = SetTimer("CheckStatus", 150, 1);
	
	LoadCar();
	CreateFoodMenus();
	CreateGuideMenus();
	CreateLegalJobsMenus();
	CreateLicensesMenus();
	LoadProperty();
	LoadBizz();
	LoadSBizz();
	LoadBoxer();
	LoadStuff();
	LoadIRC();
	LoadFamilies();
	LoadCK();
	LoadTurfs();
//	LoadEconomy();
	LoadPapers();
	LoadDrugSystem();
	LoadMatsSystem();
	LoadHQLocks();
	LoadTrunk();
	IRCInfo[0][iPlayers] = 0; IRCInfo[1][iPlayers] = 0; IRCInfo[2][iPlayers] = 0;
	IRCInfo[3][iPlayers] = 0; IRCInfo[4][iPlayers] = 0; IRCInfo[5][iPlayers] = 0;
	IRCInfo[6][iPlayers] = 0; IRCInfo[7][iPlayers] = 0; IRCInfo[8][iPlayers] = 0;
	IRCInfo[9][iPlayers] = 0;
	News[hTaken1] = 0; News[hTaken2] = 0; News[hTaken3] = 0; News[hTaken4] = 0; News[hTaken5] = 0;
	format(string, sizeof(string), "Nothing");
	strmid(News[hAdd1], string, 0, strlen(string), 255);
	strmid(News[hAdd2], string, 0, strlen(string), 255);
	strmid(News[hAdd3], string, 0, strlen(string), 255);
	strmid(News[hAdd4], string, 0, strlen(string), 255);
	strmid(News[hAdd5], string, 0, strlen(string), 255);
	format(string1, sizeof(string1), "No-one");
	strmid(News[hContact1], string1, 0, strlen(string1), 255);
	strmid(News[hContact2], string1, 0, strlen(string1), 255);
	strmid(News[hContact3], string1, 0, strlen(string1), 255);
	strmid(News[hContact4], string1, 0, strlen(string1), 255);
	strmid(News[hContact5], string1, 0, strlen(string1), 255);
	PlayerHaul[108][pCapasity] = 100;
	PlayerHaul[109][pCapasity] = 100;
	PlayerHaul[110][pCapasity] = 50;
	PlayerHaul[111][pCapasity] = 50;
	SetGameModeText("spg-roleplay.info");
	/*************************************
	<><><><><><><><><><><><><><>
	· Formato: [SPG:RP] Version Revision Fecha
	<><><><><><><><><><><><><><>
 <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
	- Version 1.0
		El Codigo de Moderntopia Intacto.
	- Version 1.1
	    En el momento que MageC empezo a programar.
	- Version 1.2
	    Desde que DryilZas toco por primera vez el Codigo.
 <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
    - Revision 1
        Limpieza de Cuentas innecesaria, comienza una nueva era.
	- Revision 2
	    Traduccion de casi todo el codigo.
	- Revision 3
		Transpaso de MySql a archivos .ini y .cfg.
	- Revision 4
		Adaptacion a la version de SA:MP 0.3.
	- Revision 5
	    Grandes descubrimientos por parte de DryilZas en la programacion.
	- Revision 6
	    Introduccion del sistema de objetos de xObjects.
 <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
	- Fecha
	    Formato: Año/Mes/Dia
 <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
	*************************************/
	SendRconCommand("mapname [SPG - RolePlay:10.0]");
	format(objstore, sizeof(objstore), "MOLE: I got nothing, check back with me later.");
	format(cbjstore, sizeof(cbjstore), "HQ: There is nothing in your Vicinity, Out.");
	format(motd, sizeof(motd), "Bienvenido al Servidor de SPG:RP.");
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime)
	{
		SetWorldTime(wtime);
	}
	SetPDistance(60);
	//EnableTirePopping(0);
	//EnableZoneNames(1);
	AllowInteriorWeapons(1);
	//AllowAdminTeleport(1);
	//UsePlayerPedAnims();  //unique walking
	//ShowPlayerMarkers(false);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	SetDeathDropAmount(1000);
	SetNameTagDrawDistance(Float:20.0); // visión
//----------------------------------------------------------------------------------------------OBJETOS BORRADOS

//tugate = CreateObject(971, 1042.2530,-1026.0344,32.1016,0, 0.0000, 0.0000);
//CreateObject(971, 2644.4778,-2038.8990,13.5500,0, 0.0000, 0.0000);
//CreateObject(980, 2774.4670,-2494.5842,14.2665,0, 0.0000, 90);
//CreateObject(971, 2796.7512,-2481.5188,12.5143,0, 0.0000, 0);
//CreateObject(971, 2796.7512,-2506.3359,12.5143,0, 0.0000, 0);
//CreateObject(980, 2625.6016,-2347.2651,13.6328,0, 0.0000, 90);
//CreateObject(980, 2625.6016,-2336.8651,13.6328,0, 0.0000, 90);
/*CreateObject(971, 1643.2224,-1696.4561,15.4013,0, 0.0000, 90);
CreateObject(1215,1544.439819,-1623.946655,12.815100,0.000000,0.000000,264.435058);
CreateObject(1215,1544.219482,-1630.794067,12.832411,0.000000,0.000000,241.320739);
CreateObject(1215,1584.373291,-1637.751464,12.904351,0.000000,0.000000,164.794158);
CreateObject(1215,1592.681762,-1637.685302,12.979562,0.000000,0.000000,184.221054);
CreateObject(1215,1546.053833,-1672.452758,12.984669,0.000000,0.000000,308.639587);
CreateObject(1215,1546.100097,-1678.703247,13.097762,0.000000,0.000000,211.866531);
CreateObject(2008,256.912719,86.266647,1001.380432,0.000000,0.000000,89.637771);
CreateObject(2008,256.895721,84.360313,1001.387145,0.000000,0.000000,90.264396);
CreateObject(1708,258.067474,87.681488,1001.343872,0.000000,0.000000,270.072540);
CreateObject(1708,258.011108,85.874336,1001.301879,0.000000,0.000000,268.482452);
CreateObject(1500,1582.6205,-1638.0587,12.3776,0.000000,-1.000000,0);
//--------------------------[FBI Objects]---------------------------------------
CreateObject(2634,253.1996,125.2256,1003.2200,0,0,90);//vault
CreateObject(1649,215.4664,122.5168,1003.2250,0,0,0);//Glass Wall A1
CreateObject(1649,215.4664,122.5168,1003.2250,0,0,180);//Glass Wall B1
CreateObject(1649,215.4664,122.5168,1003.2250,0,0,180);//Glass Wall B2
CreateObject(1649,215.4664,122.5168,1003.2250,0,0,180);//Glass Wall B3
CreateObject(1649,215.4664,122.5168,1003.2250,0,0,180);//Glass Wall B4
CreateObject(1649,215.4664,122.5168,1003.2250,0,0,180);//Glass Wall B5
//------------------------------------------------------------------------------
CreateObject(975,2521.9355,-1301.7913,1048.2891,0,0,90); //gate behind a door
CreateObject(975,2577.7200,-1305.5848,1037.7734,0,0,90); //gate behind a door
CreateObject(975,2577.3125,-1284.8556,1054.6406,0,0,90); //gate behind a door
CreateObject(975,2561.1111,-1290.5244,1054.6406,0,0,0); //gate behind a door
CreateObject(975,2543.9431,-1304.9346,1054.6406,0,0,90); //gate behind a door
CreateObject(975,2521.9053,-1285.9021,1054.6406,0,0,90); //gate behind a door
CreateObject(1500,2278.8599,-1140.4896,1049.7884,0,0,90); //Toilet Door
CreateObject(14819,2278.5599,-1138.8896,1050.9984,0,0,90); //Toilet Door
CreateObject(3968,-1827.924560,5.411730,1061.143554,0.000000,0.000000,179.354736); //INSIDE SFPD 5
CreateObject(7927,354.0655,168.7928,1019.9844,0.000000,0.000000,90);//Hospital gate
CreateObject(7927,1240.6016,-833.6031,1084.2678,0.000000,0.000000,0);//Surrenos HQ
CreateObject(7927,1280.4507,-789.1681,1084.2578,0.000000,0.000000,0);//Madd dog crib
CreateObject(7927,1251.8077,-789.1934,1084.2578,0.000000,0.000000,180);//Madd dog crib
CreateObject(982,1306.9628,-1698.1549,13.2616,0.000000,0.000000,0);
CreateObject(982,1306.9628,-1723.6549,13.2616,0.000000,0.000000,0);
CreateObject(982,1306.9628,-1749.1549,13.2616,0.000000,0.000000,0);
CreateObject(982,1306.9628,-1774.6549,13.2616,0.000000,0.000000,0);
CreateObject(982,1306.9628,-1800.1549,13.2616,0.000000,0.000000,0);
CreateObject(982,1306.9628,-1825.6549,13.2616,0.000000,0.000000,0);
CreateObject(982,1302.9628,-1698.1549,13.2616,0.000000,0.000000,0);
CreateObject(982,1302.9628,-1723.6549,13.2616,0.000000,0.000000,0);
CreateObject(982,1302.9628,-1749.1549,13.2616,0.000000,0.000000,0);
CreateObject(982,1302.9628,-1774.6549,13.2616,0.000000,0.000000,0);
CreateObject(982,1302.9628,-1800.1549,13.2616,0.000000,0.000000,0);
CreateObject(982,1302.9628,-1825.6549,13.2616,0.000000,0.000000,0);
CreateObject(982,1843.7987,-1060.0609,24.6233,0.000000,0.000000,0);
CreateObject(982,1843.7987,-1034.5609,24.6233,0.000000,0.000000,0);
CreateObject(982,1843.7987,-1060.0609,25.9233,0.000000,0.000000,0);
CreateObject(982,1843.7987,-1034.5609,25.9233,0.000000,0.000000,0);
CreateObject(982,2195.1638,-1675.1587,14.1281,-2.40000,0.000000,167.2);
CreateObject(982,2191.3289,-1700.5039,13.3520,-0.80000,0.000000,175.2);
CreateObject(982,2218.1638,-1675.1587,14.3281,-2.60000,0.000000,167.2);
CreateObject(982,2213.5789,-1700.0039,13.5520,-0.80000,0.000000,172.3);
CreateObject(7927,366.4987,189.7234,1008.6103,-0.00000,0.000000,90); // ABC Studio
CreateObject(7927,371.6472,179.1361,1014.4075,-0.00000,0.000000,270); // LA Yellow Cab Co.
CreateObject(994,1544.4385,-1617.5925,12.5046,-0.00000,0.000000,270);
CreateObject(994,1544.4385,-1632.7525,12.5046,-0.00000,0.000000,270);
lucianogate = CreateObject(980, 1246.0033,-767.3727,91.1473,0, 0.0000, 0); // Luciano family HQ
//iorgate = CreateObject(980, 2796.1454,-1600.2020,10.1297,0, 0.0000, 0); // Institute of Race HQ
//CreateObject(980, 2807.7454,-1600.2020,10.1297,0, 0.0000, 0); // Institute of Race HQ (static)
CreateObject(982,2390.9143,-1742.1371,13.0469,0.000000,0.000000,90);
CreateObject(982,2365.4143,-1742.1371,13.0469,0.000000,0.000000,90);
CreateObject(982,2339.9143,-1742.1371,13.0469,0.000000,0.000000,90);
CreateObject(1798,346.7344,165.5153,1013.1875,0.000000,0.000000,270); // Bed
CreateObject(1798,346.7344,163.0153,1013.1875,0.000000,0.000000,270); // Bed
CreateObject(1798,346.7344,160.5153,1013.1875,0.000000,0.000000,270); // Bed
CreateObject(7927,345.7073,157.3066,1014.4075,-0.00000,0.000000,90); // Wound hospital
CreateObject(971,-1935.9930,239.1291,34.3210,-0.00000,0.000000,0);
CreateObject(971,-2716.0480,217.9418,4.3494,-0.00000,0.000000,90);
CreateObject(971,2386.6780,1043.5566,10.8203,-0.00000,0.000000,0);
CreateObject(971,1843.2667,-1854.5895,12.0828,-0.00000,0.000000,270);
CreateObject(971,1025.2795,-1029.2299,32.1016,-0.00000,0.000000,0); // Pay & Spray
CreateObject(971,488.2341,-1735.4591,11.1416,-0.00000,0.000000,174); // Pay & Spray
CreateObject(971,2071.5410,-1831.4143,13.5469,-0.00000,0.000000,90); // Pay & Spray
CreateObject(971,719.8199,-462.4768,16.3359,-0.00000,0.000000,0); // Pay & Spray
CreateObject(971,-1904.4561,277.8578,41.0469,-0.00000,0.000000,0); // Pay & Spray
// Hospital down there */
//CreateObject(1651,1178.8004,-1332.8399,1007.0728,-0.00000,0.000000,90); // Window
//CreateObject(3395,1184.0691,-1317.0604,1005.4028,-0.00000,0.000000,0); // Operation PC
//CreateObject(2610,1176.9222,-1332.3121,1006.1528,-0.00000,0.000000,180); // Registration Files
//CreateObject(1797,1162.2266,-1317.7013,1005.4028,-0.00000,0.000000,0); // Bed
//CreateObject(1797,1165.2266,-1317.7013,1005.4028,-0.00000,0.000000,0); // Bed
//CreateObject(1797,1168.2266,-1317.7013,1005.4028,-0.00000,0.000000,0); // Bed
//CreateObject(1797,1171.2266,-1317.7013,1005.4028,-0.00000,0.000000,0); // Bed
//CreateObject(1797,1162.2266,-1317.7013,1005.4028,-0.00000,0.000000,180); // Bed
//CreateObject(1726,1163.5414,-1327.9595,1005.4028,-0.00000,0.000000,90); // Sofa
//CreateObject(1726,1165.6234,-1325.6487,1005.4028,-0.00000,0.000000,0); // Sofa
//CreateObject(2114,2141.2756,-1863.5641,15.4688,0.000000,0.000000,52.141628);

// Hospital objects ends here
/*CreateObject(1676,1007.3336,-936.4127,42.7581,-0.00000,0.000000,5); // Gas tank in Vinewood
CreateObject(1676,1000.6406,-937.1027,42.7581,-0.00000,0.000000,5); // Gas tank in Vinewood
// -----------------------------------
CreateObject(868,2129.989746,-1874.795410,13.030902,0.000000,0.000000,441.567535);
CreateObject(2913,2137.463378,-1871.320678,12.667078,0.000000,-90.000000,178.302536);
CreateObject(2628,2135.050537,-1871.424682,12.609012,0.000000,0.000000,179.394439);
CreateObject(2629,2137.531250,-1868.603637,12.555583,0.000000,0.000000,268.795959);
CreateObject(2915,2133.901123,-1868.338378,12.625775,0.000000,0.000000,267.210601);
CreateObject(2916,2137.316650,-1867.199707,12.626094,0.000000,0.000000,235.606948);
CreateObject(1462,2108.080566,-1869.768676,12.519778,0.000000,0.000000,89.775222);
CreateObject(1433,2145.340087,-1871.202148,12.731196,0.000000,0.000000,178.470077);
CreateObject(2804,2145.519775,-1871.188964,13.296928,0.000000,0.000000,157.182952);
CreateObject(1484,2145.078857,-1871.115478,13.405392,-12.000000,29.000000,177.657424);
CreateObject(1486,2145.220458,-1871.405395,13.381085,0.000000,0.000000,195.867065);
CreateObject(1546,2145.007568,-1871.349243,13.313018,0.000000,0.000000,200.086166);
CreateObject(1334,2125.281982,-1874.196289,13.367449,0.000000,0.000000,361.174499);
CreateObject(955,2142.303710,-1863.819458,13.058805,0.000000,-90.000000,0.950527);  sdsdsdsd
CreateObject(1302,2143.300292,-1863.505859,12.486577,-15.000000,0.000000,357.529937);
CreateObject(923,2107.990966,-1872.676635,13.425848,0.000000,0.000000,89.753120);
CreateObject(933,2115.851562,-1869.437255,12.523773,0.000000,0.000000,77.710197);
CreateObject(933,2122.397460,-1869.411132,12.532304,0.000000,0.000000,186.313583);
CreateObject(944,2159.270996,-1864.647583,13.419299,0.000000,0.000000,269.439758);
CreateObject(944,2159.235595,-1867.675781,13.419299,0.000000,0.000000,269.439758);
CreateObject(944,2159.192626,-1870.772338,13.419299,0.000000,0.000000,269.439758);
CreateObject(1372,2100.133544,-1867.964233,12.661389,0.000000,0.000000,180.357421);
CreateObject(1315,2119.266601,-1874.093994,15.627696,0.000000,0.000000,271.771362);
CreateObject(1315,2103.990478,-1868.730468,16.095603,0.000000,0.000000,6.734466);
CreateObject(1303,2151.112548,-1865.054931,13.553890,0.000000,0.000000,95.638008);
CreateObject(1451,2129.070800,-1863.248413,13.375560,0.000000,0.000000,0.254714);
CreateObject(2114,2141.250732,-1863.694946,13.787945,0.000000,0.000000,52.141628);
CreateObject(1460,2129.525390,-1876.668457,16.324026,-55.000000,-91.000000,269.034912);
CreateObject(5269,2112.052246,-1866.301879,13.546875,0.000000,0.000000,2.508964);
CreateObject(5269,2112.485351,-1876.406616,13.546875,0.000000,0.000000,2.508964);
CreateObject(3265,2091.543212,-1868.913330,12.466016,0.000000,0.000000,265.756835);
CreateObject(1473,2095.457763,-1863.866088,13.425724,36.000000,0.000000,0.879031);
CreateObject(1497,2110.984130,-1864.980834,13.914264,-22.000000,90.000000,269.521881);
CreateObject(1295,2141.174804,-1872.536743,13.553890,0.000000,0.000000,48.962463);
CreateObject(1492,2091.812011,-1863.636474,12.488705,0.000000,0.000000,267.749847);
CreateObject(969,2091.745605,-1873.954101,11.835894,0.000000,0.000000,89.181465);
//------------------------[ATM Objects]--------------------------------------
CreateObject(2942,-32.276363,-57.995586,1003.139953,0.000000,0.000000,179.915054);//247atm
CreateObject(2942,374.718902,167.128982,1007.987304,0.000000,0.000000,179.674255);//cityhallatm
CreateObject(2942,1185.996660,-906.697110,43.257770,0.000000,0.000000,179.674255); //burgeratm
CreateObject(2942,603.724440,-1248.348330,18.435990,0.000000,0.000000,179.674255); //bankatm(old bank location)
CreateObject(2942,389.845210,-1908.613909,7.835990,0.000000,0.000000,179.674255); //fishatm
CreateObject(2942,1154.730880,-1427.874440,15.796990,0.000000,0.000000,179.674255); //shopsatm
CreateObject(2942,1118.957220,-1537.050550,22.759440,0.000000,0.000000,179.674255); //shopsatm2*/
//ATMs
/*CreateObject(2781,1346.3905,-1759.6039,13.5156,90.000000,0.000000,180);
CreateObject(2781,1592.4655,-2335.9408,13.5401,90.000000,0.000000,180);
CreateObject(2781,2308.8717,-1634.4462,14.8270,90.000000,0.000000,270);
CreateObject(2781,2865.3170,-1415.3429,11.0010,90.000000,0.000000,90);
CreateObject(2781,2403.9879,-1229.8441,23.8288,90.000000,0.000000,90);
CreateObject(2781,1172.4888,-1328.9683,15.4048,90.000000,0.000000,180); */
// Base Militar.
//CreateObject(3279,2725.273,-2392.560,12.708,0.0,0.0,-90.000);       // Torre
//------------- Rollos Hitman.
//CreateObject(14493,1556.609,-1460.663,0.405,0.0,0.0,-90.000); // object (25)
//CreateObject(922,1526.833,-1460.939,-1.012,0.0,0.0,-90.000); // object (39)
//------------- Lizzy Unity.
// CreateObject(3877,1873.504,-1738.026,14.035,0.0,0.0,-270.000); // object (8)
//CreateObject(3877,1882.074,-1738.081,14.038,0.0,0.0,-270.000); // pivotesentrada
//------------- MECANICA.
//CreateObject(11391,1811.416,-2024.898,13.827,0.0,0.0,-540.000); // object (6)
//CreateObject(10282,1798.426,-2025.265,13.512,0.0,0.0,-720.000); // object (7)
/*CreateObject(14826,1787.589,-2056.354,13.147,0.0,0.0,-427.500); // CAMBIAR POR 83
CreateObject(11392,1808.074,-2036.293,12.555,0.0,0.0,-405.000); // object (84)
CreateObject(11292,1792.078,-2036.751,13.983,0.0,0.0,-90.000); // object (85)
CreateObject(12957,1798.929,-2064.417,13.147,0.0,0.0,-112.500); // CAMBIAR POR 87
CreateObject(13591,1736.424,-2059.341,12.754,0.0,0.0,-326.250); // object (88)
CreateObject(3594,1738.186,-2064.902,13.239,0.0,0.0,-67.500); // object (89)
CreateObject(2062,1792.962,-2063.752,13.145,0.0,0.0,0.0); // object (90)
CreateObject(2062,1792.569,-2064.682,13.146,0.0,0.0,0.0); // object (91)
CreateObject(2062,1792.406,-2052.864,13.146,0.0,0.0,0.0); // object (92)
// CreateObject(854,1785.993,-2053.729,12.713,0.0,0.0,0.0); // CAMBIAR POR 93
// CreateObject(854,1741.778,-2059.407,12.797,0.0,0.0,0.0); // object (94)
CreateObject(3458,1761.033,-2075.158,14.137,0.0,0.0,0.0); // object (96)
CreateObject(1696,1797.571,-2045.214,18.069,0.0,0.0,-630.000); // object (97)
CreateObject(972,1680.138,-2066.883,11.514,0.0,0.0,0.0); // object (101)*/
//CreateObject(2600,1494.673,-1749.257,15.218,0.0,0.0,-225.000); // Control de Ayuntamiento

//--------------------------------------------------------------------------------------------OBJETOS TRANSPASADOS

/*CreateObject(974,250.503234,67.772872,1006.222045,0.000000,0.000000,7830.000000); //LSPD Window
CreateObject(971, 1972.8408,-1622.1426,15.9688,0, 0.0000, 90);
CreateObject(11426,1030.953,-1107.703,22.846,0.0,0.0,-270.000); //puerta atras yakuza
CreateObject(1500,1582.600,-1637.972,12.371,0.0,0.0,0.0);
CreateObject(996,1544.960,-1633.658,13.278,0.0,0.0,-90.000);
CreateObject(994,1544.821,-1617.533,12.430,0.0,0.0,-90.000);
CreateObject(14668,1172.0814,-1323.2399,1005.4028,-0.00000,0.000000,0); // 24/7
CreateObject(3391,1184.0691,-1321.0604,1005.4028,-0.00000,0.000000,0); // Operation PC
CreateObject(3383,1180.7610,-1318.1724,1005.2028,-0.00000,0.000000,90); // Operation bed
CreateObject(2604,1180.4503,-1330.6652,1005.8728,-0.00000,0.000000,360); // Registration PC
CreateObject(2202,1183.7235,-1332.2064,1005.4028,-0.00000,0.000000,180); // Printer
CreateObject(1797,1165.2266,-1317.7013,1005.4028,-0.00000,0.000000,180); // Bed
CreateObject(1797,1168.2266,-1317.7013,1005.4028,-0.00000,0.000000,180); // Bed
CreateObject(1797,1171.2266,-1317.7013,1005.4028,-0.00000,0.000000,180); // Bed
CreateObject(1726,1167.5414,-1327.9595,1005.4028,-0.00000,0.000000,270); // Sofa
// yakuza
CreateObject(971, 1066.79443,-1108.85119,23.58195,0.00000,0.00000,87.80358);
CreateObject(971, 978.88262,-1094.52819,26.06786,0.00000,0.00000,271.92593);
CreateObject(971, 978.88262,-1094.52819,26.06786,0.00000,0.00000,271.92593);
CreateObject(971, 991.64624,-1068.32031,30.40799,0.00000,0.00000,183.37832);
CreateObject(971, 1022.54504,-1068.03869,31.49721,0.00000,0.00000,178.83897);
CreateObject(971, 1057.33776,-1068.48852,30.87375,0.00000,0.00000,173.55380);
// Base Militar.
CreateObject(2047,2719.961,-2412.165,14.758,0.0,0.0,-90.386);       // Bandera
CreateObject(16637,2799.640,-2443.447,14.822,0.0,0.0,-90.000);      // Bloqueo1
CreateObject(16637,2799.403,-2468.344,14.820,0.0,0.0,-270.000);     // Bloqueo2
//------------- Rollos Hitman.
CreateObject(14588,1540.330,-1496.925,2.001,0.0,0.0,0.0); // object
CreateObject(18553,1531.014,-1481.675,9.809,0.0,0.0,90.000); // object (1)
CreateObject(18553,1523.639,-1499.128,4.053,0.0,0.0,-180.000); // object (2)
CreateObject(18553,1523.639,-1478.561,4.004,0.0,0.0,-180.000); // object (4)
CreateObject(18553,1523.639,-1460.346,3.902,0.0,0.0,-180.000); // object (20)
CreateObject(18553,1523.639,-1489.731,4.065,0.0,0.0,-180.000); // object (21)
CreateObject(18553,1523.639,-1516.405,4.079,0.0,0.0,-180.000); // object (22)
CreateObject(18553,1523.639,-1523.128,3.959,0.0,0.0,-180.000); // object (23)
CreateObject(14493,1548.066,-1456.071,0.405,0.0,0.0,0.0); // object (24))
CreateObject(2291,1555.197,-1462.267,-1.899,0.0,0.0,-123.750); // object (28)
CreateObject(2291,1553.842,-1464.079,-1.899,0.0,0.0,-135.000); // object (29)
CreateObject(2321,1549.403,-1461.364,-1.898,0.0,0.0,-202.500); // object (31)
CreateObject(1509,1555.594,-1458.909,-1.700,0.0,0.0,0.0); // object (32)
CreateObject(16151,1544.800,-1479.565,-1.505,0.0,0.0,-180.000); // object (33)
CreateObject(942,1526.049,-1471.508,0.553,0.0,0.0,-90.000); // object (41)
CreateObject(2777,1550.346,-1494.142,-1.400,0.0,0.0,0.0); // object (44)
CreateObject(2229,1553.955,-1486.199,2.520,0.0,0.0,-180.000); // object (45)
CreateObject(2229,1545.873,-1486.199,2.741,0.0,0.0,-180.000); // object (46)
CreateObject(5262,1533.201,-1505.311,1.067,0.0,0.0,-90.000); // object (49)
CreateObject(1684,1538.376,-1459.565,64.449,0.0,0.0,-90.000);
//------------- lsTA.
CreateObject(982,1093.913,-1735.397,13.316,0.0,0.0,-90.000);
CreateObject(982,1071.718,-1735.394,13.308,0.0,0.0,-90.000);
CreateObject(982,1058.892,-1748.232,13.303,0.0,0.0,0.0);
CreateObject(982,1058.893,-1764.622,13.247,0.0,0.0,-180.000);
CreateObject(982,1071.693,-1777.463,13.209,0.0,0.0,-90.000);
CreateObject(982,1089.300,-1777.450,13.208,0.0,0.0,-90.000);
CreateObject(982,1102.094,-1764.586,13.206,0.0,0.0,0.0);
CreateObject(983,1103.866,-1749.091,13.201,0.0,0.0,-33.750);
//------------- CNN.
CreateObject(16096,2040.837,-1372.654,49.245,0.0,0.0,-270.000);
CreateObject(14595,2042.862,-1413.220,6.490,0.0,0.0,0.0);
CreateObject(9099,2045.869,-1424.801,4.280,-89.381,-3.438,-3.438);
CreateObject(1502,2031.516,-1418.321,2.535,0.0,0.0,0.0);
CreateObject(1502,2042.058,-1400.103,2.528,0.0,0.0,0.0);
CreateObject(1533,2019.286,-1418.146,2.533,0.0,0.0,-180.000);
CreateObject(1663,2028.232,-1422.649,3.004,0.0,0.0,-270.000);
CreateObject(2207,2030.354,-1423.586,2.530,0.0,0.0,-270.000);
CreateObject(2007,2031.782,-1426.520,2.532,0.0,0.0,-180.000);
CreateObject(2162,2027.381,-1426.739,2.539,0.0,0.0,-225.000);
CreateObject(2164,2026.407,-1420.160,2.537,0.0,0.0,-270.000);
CreateObject(1721,2031.813,-1423.770,2.550,0.0,0.0,-292.500);
CreateObject(1721,2032.223,-1422.248,2.550,0.0,0.0,-270.000);
CreateObject(1808,2038.592,-1417.920,2.531,0.0,0.0,-180.000);
CreateObject(1726,2049.649,-1417.274,2.529,0.0,0.0,-180.000);
CreateObject(1726,2051.164,-1413.446,2.529,0.0,0.0,-90.000);
CreateObject(1727,2046.939,-1413.199,2.529,0.0,0.0,-303.750);
CreateObject(1827,2048.866,-1414.516,2.535,0.0,0.0,0.0);
CreateObject(14813,2028.678,-1397.617,3.028,0.0,0.0,-270.000);
CreateObject(2198,2031.339,-1390.574,2.529,0.0,0.0,90.000);
CreateObject(2309,2033.225,-1390.197,2.551,0.0,0.0,-270.000);
CreateObject(2198,2038.646,-1390.799,2.529,0.0,0.0,-270.000);
CreateObject(2309,2040.449,-1390.473,2.551,0.0,0.0,-270.000);
CreateObject(2007,2035.748,-1388.071,2.532,0.0,0.0,0.0);
//------------- Tienda coches Todoterrenos y descapotables.
CreateObject(11504,1792.246,-1943.527,12.497,0.0,0.0,-180.000); // object (1)
CreateObject(16360,1790.401,-1943.469,13.142,0.0,0.0,0.0); // object (3)
CreateObject(11546,1811.353,-1897.458,9.177,0.0,0.0,-90.000); // object (14)
CreateObject(10281,1812.530,-1904.348,14.935,0.0,0.0,-990.000); // cartel coche
//------------- Lizzy Unity.
CreateObject(14539,1884.384,-1758.493,17.186,0.0,0.0,-90.000); // object
//------------- FUTBOL PLAYA.
CreateObject(3819,268.414,-1779.346,4.163,0.0,0.0,-270.000);
CreateObject(3819,234.550,-1779.349,4.105,0.0,0.0,-270.000);
CreateObject(3819,202.553,-1779.351,3.848,0.0,0.0,-270.000);
CreateObject(3819,253.875,-1842.001,3.346,0.0,0.0,-90.000);
CreateObject(3819,219.636,-1841.969,3.393,0.0,0.0,-90.000);
CreateObject(3498,188.233,-1804.439,2.841,0.0,0.0,270.000);
CreateObject(3498,188.483,-1818.557,2.786,0.0,0.0,270.000);
CreateObject(3498,284.121,-1804.460,2.927,0.0,0.0,270.000);
CreateObject(3498,284.151,-1818.384,2.789,0.0,0.0,270.000);
//------------- MECANICA.
CreateObject(16501,1808.940,-2019.902,14.738,0.0,0.0,-630.000); // object (28)
CreateObject(16501,1812.391,-2023.354,14.751,0.0,0.0,-720.000); // object (56)
CreateObject(16501,1801.899,-2019.911,14.743,0.0,0.0,-630.000); // object (57)
CreateObject(16501,1812.388,-2030.451,14.752,0.0,0.0,-720.000); // object (58)
CreateObject(16501,1812.398,-2037.555,14.751,0.0,0.0,-720.000); // object (59)
CreateObject(16501,1812.384,-2044.662,14.754,0.0,0.0,-720.000); // object (60)
CreateObject(16501,1812.366,-2045.593,14.753,0.0,0.0,-720.000); // object (61)
CreateObject(16501,1805.131,-2053.795,14.712,0.0,0.0,-809.999); // object (62)
CreateObject(16501,1798.065,-2053.781,14.721,0.0,0.0,-809.999); // object (63)
CreateObject(16501,1794.434,-2038.720,14.728,0.0,0.0,-899.999); // object (64)
CreateObject(16501,1794.448,-2051.001,14.725,0.0,0.0,-899.999); // object (66)
CreateObject(16501,1808.941,-2053.803,14.709,0.0,0.0,-809.999); // object (67)
CreateObject(16501,1812.367,-2050.357,14.728,0.0,0.0,-1079.999); // object (68)
CreateObject(16501,1794.433,-2031.645,14.706,0.0,0.0,-899.999); // object (69)
CreateObject(16501,1794.442,-2026.178,14.696,0.0,0.0,-899.999); // object (70)
CreateObject(16501,1794.436,-2023.358,14.710,0.0,0.0,-899.999); // object (22)
CreateObject(16501,1797.931,-2019.926,14.707,0.0,0.0,-630.000); // object (23)
CreateObject(16501,1810.253,-2023.347,16.935,0.0,-90.241,-899.999); // object (24)
CreateObject(16501,1810.263,-2030.449,16.915,0.0,-90.241,-899.999); // object (25)
CreateObject(16501,1810.265,-2037.451,16.916,0.0,-90.241,-899.999); // object (26)
CreateObject(16501,1810.270,-2044.490,16.908,0.0,-90.241,-899.999); // object (27)
CreateObject(16501,1810.273,-2050.333,16.891,0.0,-90.241,-899.999); // object (28)
CreateObject(16501,1805.871,-2050.324,16.939,0.0,-90.241,-899.999); // object (29)
CreateObject(16501,1801.501,-2050.346,16.942,0.0,-90.241,-899.999); // object (30)
CreateObject(16501,1797.659,-2051.679,16.946,0.0,-90.241,-990.238); // object (31)
CreateObject(8674,1779.603,-2019.235,14.621,0.0,0.0,-180.000); // object (34)
CreateObject(16501,1797.686,-2047.352,16.953,0.0,-90.241,-990.238); // object (52)
CreateObject(16501,1805.917,-2043.249,16.948,0.0,-90.241,-899.999); // object (53)
CreateObject(16501,1805.913,-2036.166,16.953,0.0,-90.241,-899.999); // object (64)
CreateObject(16501,1805.856,-2029.067,16.949,0.0,-90.241,-899.999); // object (65)
CreateObject(16501,1805.863,-2023.350,16.953,0.0,-90.241,-899.999); // object (66)
CreateObject(16501,1801.572,-2043.287,16.955,0.0,-90.241,-899.999); // object (67)
CreateObject(16501,1801.637,-2036.220,16.964,0.0,-90.241,-899.999); // object (68)
CreateObject(16501,1801.630,-2029.118,16.979,0.0,-90.241,-899.999); // object (69)
CreateObject(16501,1801.618,-2023.346,16.993,0.0,-90.241,-899.999); // object (70)
CreateObject(16501,1797.698,-2042.953,16.964,0.0,-90.241,-990.238); // object (71)
CreateObject(16501,1797.726,-2038.620,16.976,0.0,-90.241,-990.238); // object (72)
CreateObject(16501,1797.747,-2034.238,16.986,0.0,-90.241,-990.238); // object (73)
CreateObject(16501,1797.777,-2029.848,16.984,0.0,-90.241,-990.238); // object (74)
CreateObject(16501,1797.823,-2025.460,16.993,0.0,-90.241,-990.238); // object (75)
CreateObject(16501,1797.843,-2021.984,17.004,0.0,-90.241,-990.238); // object (76)
CreateObject(16501,1802.403,-2026.151,14.673,0.0,0.0,-1080.000); // object (77)
CreateObject(16501,1802.409,-2023.360,14.741,0.0,0.0,-1080.000); // object (78)
CreateObject(16501,1802.559,-2026.154,14.737,0.0,0.0,-1260.000); // object (79)
CreateObject(16501,1802.553,-2023.557,14.715,0.0,0.0,-1260.000); // object (80)
CreateObject(8168,1806.848,-2065.090,14.508,0.0,0.0,-343.516); // object (81)
CreateObject(975,1812.703,-2064.196,14.227,0.0,0.0,-450.000); // puerta parcela abierta coordenadas
CreateObject(10154,1794.331,-2039.413,14.163,0.0,0.0,-180.000); // puerta taller mala solo cordenadas abierta
//------------- CAJEROS.
CreateObject(2618,1776.441,-1867.210,12.563,0.0,0.0,-540.000); // object (4)
CreateObject(2618,1416.212,-1663.250,12.540,0.0,0.0,-270.000); // object (6)
CreateObject(2618,553.030,-1339.917,12.650,0.0,0.0,-168.750); // object (8)
CreateObject(2618,410.898,-1764.801,4.405,0.0,0.0,0.0); // object (11)
CreateObject(2618,2352.084,-1539.495,22.947,0.0,0.0,-90.000); // object (13)
//------------- TIENDA DE COCHES.
CreateObject(14826,355.257,-1823.574,3.881,0.0,0.0,-281.250);
CreateObject(16480,339.017,-1820.170,9.936,0.0,0.0,-933.750);
CreateObject(10281,327.189,-1784.774,6.032,0.0,0.0,-180.000);
CreateObject(8229,319.808,-1786.003,6.419,0.0,0.0,-360.000);
CreateObject(8229,308.576,-1797.039,6.372,0.0,0.0,-90.000);
CreateObject(7657,318.422,-1817.252,5.506,0.0,0.0,-540.000);
CreateObject(16360,355.437,-1794.735,4.139,0.0,0.0,-90.000);
CreateObject(17064,339.370,-1820.208,3.333,0.0,0.0,-180.000);
//NUEVOS OBJETOS
CreateObject(984,1833.651,-1853.846,13.001,0.0,0.0,0.0);
CreateObject(1368,1807.165,-1817.135,13.248,0.0,0.0,-270.000);
CreateObject(1256,1833.161,-1852.848,13.213,0.0,0.0,0.0);
CreateObject(1256,1833.160,-1857.210,13.213,0.0,0.0,0.0);
CreateObject(13590,1914.990,-1811.398,13.527,0.0,0.0,-461.250);
CreateObject(1245,1865.790,-1865.884,14.050,0.0,0.0,-180.000);
CreateObject(13666,1878.239,-1401.379,17.401,0.0,0.0,-495.000);
CreateObject(5400,1882.173,-1812.981,12.668,0.0,0.0,-90.000);*/

//---------------------------------------------------------------------------------------------OBJETOS CON NOMBRE
puertacasa96 = CreateObject(975, 200.742050, -1386.638184, 49.465435, 0.000000, 6.87549354157, -133.281098529); //puertacasa 96
puertacasa17 = CreateObject(975, 1090.330566, -628.153564, 112.337761, 0.000000, 14.6104237758, -6.09334885544); //puertacasa 17
puertacasa80 = CreateObject(975, 310.439026, -1555.198486, 32.785419, 0.000000, 0.000000, -33.7500216264); //puertacasa 80
puertacasa95 = CreateObject(975, 261.721436, -1231.391724, 74.339172, 0.000000, 5.15662015618, -145.313269522); //puertacasa 95
puertacasa104 = CreateObject(975, 281.931976, -1321.063232, 54.432499, 0.000000, -0.859436692696, 34.6094010233); //puertacasa 104
puertacasa23 = CreateObject(975, 1003.262939, -644.940674, 122.071396, 0.000000, 1.71887338539, -335.781170991); //puertacasa 23
puertacasa20 = CreateObject(975, 1281.191162, -615.143127, 103.654678, 0.000000, 0.000000, 25.0783053971); //puertacasa 20
puertacasa103 = CreateObject(975, 264.819061, -1333.852295, 53.931007, 0.000000, 0.000000, -323.671707991); //puertacasa 103
puertacasa14 = CreateObject(975, 2423.869629, -1775.136597, 14.221565, 0.000000, 0.000000, -270.000001124); //puertacasa 14
puertacasa85 = CreateObject(975, 2313.688965, -1217.056641, 24.769321, 0.000000, 0.000000, -270.000001124); //puertacasa 85


elevador1 = CreateObject(14401,-2583.979,632.829,26.499,0.0,0.0,90.241); // elevador1 baixo
elevador2 = CreateObject(14401,-2583.965,638.821,26.549,0.0,0.0,90.241); // elevador2 baixo
elevador3 = CreateObject(14401,-2583.977,644.867,26.499,0.0,0.0,90.241); // elevador3 baixo
elevador4 = CreateObject(14401,-2553.830,643.880,26.499,0.0,0.0,-89.381); // elevador4 baixo




pdgate1 = CreateObject(971,1589.053344,-1638.123168,14.122960,0.000000,0.000000,180);
pdgate2 = CreateObject(968,1544.700317,-1630.735717,13.096980,-1.000000,-91.000000,269.972869);
lspddoor1 = CreateObject(1500, 245.0578,72.4314,1002.5406,0, 0.0000, 0.0000);
lspddoor2 = CreateObject(1500, 245.9478,72.4314,1002.5406,0, 0.0000, 0.0000);
armygate1 = CreateObject(969, 2720.3772,-2409.7523,12.6,0, 0.0000, 90);
armygate2 = CreateObject(969, 2720.3772,-2508.3069,12.6,0, 0.0000, 90);
fbigate = CreateObject(980, 1534.9020,-1451.5979,14.4882,0, 0.0000, 0);
hspdgate = CreateObject(971, 1643.3379,-1714.9338,15.3067,0, 0.0000, 90);
// Luciano family HQ
lucianogate = CreateObject(980, 1246.0033,-767.3727,91.1473,0, 0.0000, 0);

// yakuza
yakuzagate = CreateObject(980, 785.29998779297, -1152.5, 25.39999961853, 0, 0, 270);
yakuzagate2 = CreateObject(980, 659.79998779297, -1227.1999511719, 17.799999237061, 0, 0, 62);
yakuzagate3 = CreateObject(980, 664.90002441406, -1309.3000488281, 15.199999809265, 0, 0, 180);
// puretas
puretagate = CreateObject(971, 1014.383179, -1540.533936, 16.209253, 0.000000, 0.000000, -989.999392966);
vallaosafa = CreateObject(971, 1014.1152, -1520.3447, -64.2368, 0.0000, 0.0000, 89.8077);
// bomberos
bomberosgate = CreateObject(980, 2248.918457, -2201.388672, 15.282555, 0.000000, 0.000000, -225.000010486);
// Base Militar.
hangar = CreateObject(16773,2774.397,-2455.854,12.886,-180.482,0.0,-90.000); // PUERTA !!SOLO LIDER!!!
//------------- FUTBOL PLAYA.
football=CreateObject(2114, 236.0063,-1811.2773,3.8461, 0.0000, 0.0000, 0.0000);
/*lstagate = CreateObject(973, 1106.503906, -1740.825439, 13.247808, 0.0000, 0.8594, 270.8595); // Quitamiedo a modo de puerta*/
//------------- MECANICA.
mecanicagate = CreateObject(975,1812.708,-2073.065,14.227,0.0,0.0,-450.000); // puerta parcela
tallergate = CreateObject(11319,1795.1171875,-2037.2724609375,15.429308891296,0.0,0.0,-180.000); // puerta taller
platagate = CreateObject(16322, 1808.1685791016, -2025.3188476563, 13.446762084961,0.0,0.0,270.0); // plata taller
plata2gate = CreateObject(16322, 1810.0477294922, -2025.3192138672, 13.44552230835,0.0,0.0,270.0); // plata taller
// municion militar
cajamilitar = CreateObject(964, -1375.5513,1487.1560,10.0,347.0729,0.0,0.0);


	// CreatedCars check
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
	    CreatedCars[i] = 0;
	}
	// Zones
	for(new i = 0; i < sizeof(TurfInfo); i++)
	{
	    Turfs[i] = GangZoneCreate(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY]);
	    surenos = GangZoneCreate(2530.6770,-1641.0858, 2348.4863,-1725.3860);
	    mafiia = GangZoneCreate(1182.4325,-859.5342, 1391.9781,-738.5378);
	   // pachinos = GangZoneCreate(795.0298,-1225.2528, 671.7288,-1326.2770);
	  //  loscobras = GangZoneCreate(2334.7371, -1628.7986, 2291.3921,-1654.5471);
	  //  nortgang = GangZoneCreate(2186.8953, -1650.0248, 2102.3374,-1744.4316);
	    nortenos = GangZoneCreate(2617.1306,-2065.0493, 2818.3044,-1939.8142);
	    street_zone = GangZoneCreate(2403.6228,-2065.1794, 2558.2334,-1938.0836); //2549.4363,-2065.1423, 2418.8313,-1937.2787
	    mafiia2 = GangZoneCreate(656.5727,-1329.2061, 792.2587,-1142.7688);
	    mafiia3 = GangZoneCreate(1572.0221,-1458.2882, 1459.3556,-1570.5350);
	   // superlux1 = GangZoneCreate(-142.6479,494.4636, -2952.7524,-2961.6018);
	   // superlux2 = GangZoneCreate(-142.6479,2957.8728, -2952.7524,494.4636); // -150.9463,2957.9072, -2957.9968,496.3602
	   // superlux3 = GangZoneCreate(2957.8728,2952.2837, -142.6479,494.4636);
	}
	// Player Class's
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}
	// Car Spawns
	/*for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		AddStaticVehicleEx(HouseInfo[h][hVec], HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], 60000);
		gCarLock[h+1] = 1;
	}//34*/
	//-------------------------------------------------------------------------------------------VEHICULOS POLICIAS
	AddStaticVehicleEx(596, 1573.7347,  -1615.4187,  13.1037, 269.2950, 0, 1, 30000); // Coche POLICIA 1
	AddStaticVehicleEx(596, 1535.59473, -1667.88501, 13.10400, 359.79120, 0, 1, 30000); // Coche POLICIA 2
	AddStaticVehicleEx(596, 1601.66467, -1684.09045, 5.61220, 269.96909, 0, 1, 30000); // Coche POLICIA 3
	AddStaticVehicleEx(596, 1602.14954, -1692.12671, 5.61000, 270.09479, 0, 1, 30000); // Coche POLICIA 4
	AddStaticVehicleEx(596, 1601.64209, -1699.84143, 5.61130, 269.77969, 0, 1, 30000); // Coche POLICIA 5
	AddStaticVehicleEx(523, 1595.44177, -1710.81750, 5.45630, 177.24010, 0, 1, 30000); // Moto POLICIA 6
	AddStaticVehicleEx(523, 1587.29688, -1710.55640, 5.46100, 180.33771, 0, 1, 30000); // Moto POLICIA 7
	AddStaticVehicleEx(601, 1578.47119, -1710.01794, 5.64940, 179.80650, 0, 1, 30000); // Tanque POLICIA 8
	AddStaticVehicleEx(599, 1545.28894, -1680.25305, 6.08140, 269.82050, 0, 1, 30000); // RANGER POLICIA 9
	AddStaticVehicleEx(599, 1545.52734, -1672.10242, 6.07960, 269.76599, 0, 1, 30000); // RANGER POLICIA 10
	AddStaticVehicleEx(497, 1565.42419, -1697.43042, 28.57360, 125.91460, 0, 1, 30000); // HELICOPTERO POLICIA 11
	AddStaticVehicleEx(497, 1565.66724, -1648.63135, 28.58050, 83.11200, 0, 1, 30000); // HELICOPTERO POLICIA 12
	AddStaticVehicleEx(427, 1544.92505, -1655.23499, 6.02250, 88.15140, 0, 1, 30000); // CAMION POLICIA 13
	AddStaticVehicleEx(427, 1544.96082, -1663.05164, 6.02250, 91.32060, 0, 1, 30000); // CAMION POLICIA 14
    //-------------------------------------------------------------------------------------------VEHICULOS FBI
    AddStaticVehicleEx(490, 1669.2556,-1718.1407,20.6217,0.4234, 0, 0, 30000); // RANGER FBI 15
    AddStaticVehicleEx(490, 1660.8483,-1719.0828,20.6120,2.1114, 0, 0, 30000); // RANGER FBI 16
    AddStaticVehicleEx(490, 1658.7200,-1695.8534,20.5891,179.3161, 0, 0, 30000); // RANGER FBI 17
    //-------------------------------------------------------------------------------------------VEHICULOS MILITARES
    AddStaticVehicleEx(470, 2747.41870, -2471.77808, 13.64410, 272.13708, 43, 0, 30000); // JEEP MILITAR 18
    AddStaticVehicleEx(470, 2747.36938, -2467.79932, 13.64570, 271.10141, 43, 0, 30000); // JEEP MILITAR 19
    AddStaticVehicleEx(470, 2747.38867, -2463.62085, 13.64670, 268.73679, 43, 0, 30000); // JEEP MILITAR 20
    AddStaticVehicleEx(432, 2786.60181, -2456.19775, 13.62730, 89.23880, 43, 0, 30000); // TANQUE MILITAR 21
    AddStaticVehicleEx(433, 2727.28687, -2414.47314, 14.06680, 269.78241, 43, 0, 30000); // CAMION MILITAR 22
    AddStaticVehicleEx(548, 2787.86670, -2352.98438, 15.29220, 333.32071, 43, 0, 30000); // HELICOPTERO MILITAR 23
    AddStaticVehicleEx(425, 2770.05151, -2344.23706, 14.22020, 313.45300, 43, 0, 30000); // HELICOPTERO COMBATE MILITAR 24
    AddStaticVehicleEx(472, 2727.44238, -2584.57324, -0.08050, 269.15240,  56, 15, 30000); // BARCO MILITAR 25
    //-------------------------------------------------------------------------------------------VEHICULOS LSTA
    AddStaticVehicleEx(438, 1062.16125, -1772.61316, 13.13550, 90.87170, 6, 1, 30000); // TAXI 26
    AddStaticVehicleEx(438, 1062.28345, -1766.70313, 13.15960, 89.94390, 6, 1, 30000); // TAXI 27
    AddStaticVehicleEx(438, 1062.16614, -1760.85925, 13.18230, 89.09090, 6, 1, 30000); // TAXI 28
    AddStaticVehicleEx(438, 1062.14758, -1754.95605, 13.21030, 89.27240, 6, 1, 30000); // TAXI 29
    AddStaticVehicleEx(438, 1062.33838, -1749.11108, 13.22820, 89.55520, 6, 1, 30000); // TAXI 30
    AddStaticVehicleEx(438, 1062.40222, -1743.15771, 13.24240, 89.57420, 6, 1, 30000); // TAXI 31
    AddStaticVehicleEx(431, 1080.35193, -1772.56763, 13.45140, 269.39182, 0, 6, 30000); // AUTOBUS 32
    AddStaticVehicleEx( 445,-1435.3279,-286.1864,13.9472,57.2628,7,7, 30000);// coche alquiler 33
    //-------------------------------------------------------------------------------------------VEHICULOS LSMD
    AddStaticVehicleEx(416, 1181.96301, -1308.67920, 13.79480, 269.26031, 6, 3, 30000); // AMBULANCIA 34
    AddStaticVehicleEx(416, 1181.88672, -1338.87817, 13.84890, 269.70859, 1, 3, 30000); // AMBULANCIA 35
    AddStaticVehicleEx(416, 1146.68359, -1308.59924, 13.81940, 0.57430, 1, 3, 30000); // AMBULANCIA 36
    //-------------------------------------------------------------------------------------------VEHICULOS GROVES
    AddStaticVehicleEx(492, 2484.0881,-1684.2168,13.2830,263.5029, 86, 86, 30000); // Coche Grove 37
    AddStaticVehicleEx(492, 2501.5298,-1654.6046,13.3365,60.7216, 86, 86, 30000); // Coche Grove 38
    AddStaticVehicleEx(492, 2479.8682,-1652.4858,13.3704,90.3664, 86, 86, 30000); // Coche Grove 39
    cochegroo = AddStaticVehicleEx(536, 2505.5620,-1694.9211,13.2651,1.3741, 44, 1, 30000); // Coche Grove 40 TUNING
    /*AddStaticVehicleEx(492, 1673.4994, -2110.6931, 13.3362, 270.7693, 86, 86, 30000); // Coche Grove 37
    AddStaticVehicleEx(492, 1705.1123, -2125.5127, 13.3303, 0.4001, 86, 86, 30000); // Coche Grove 38
    AddStaticVehicleEx(492, 1673.6962, -2115.7793, 13.3509, 270.0020, 86, 86, 30000); // Coche Grove 39
    cochegroo = AddStaticVehicleEx(536, 1698.9222, -2084.7939, 13.2238, 178.9040, 44, 1, 30000); // Coche Grove 40 TUNING*/
    //-----------------------------------------------
    AddVehicleComponent(cochegroo,1113);  //Escape//
    AddVehicleComponent(cochegroo,1108);  //Embellecedor
    AddVehicleComponent(cochegroo,1118);  //Tapacubos//
	AddVehicleComponent(cochegroo, 1078); //Ruedas
	AddVehicleComponent(cochegroo, 1010); //Nitro 10x
	AddVehicleComponent(cochegroo, 1087); //Hidraulicos
	AddVehicleComponent(cochegroo,1117);  //Frontal//
	ChangeVehiclePaintjob(cochegroo, 1);  //Pintura
	ChangeVehicleColor(cochegroo, 44, 1)  //Color
	//------------------------------------------------
    //-------------------------------------------------------------------------------------------VEHICULOS LCN
    AddStaticVehicleEx(580, 1254.9326,-804.1864,83.9354,179.3049, 0, 0, 30000); // Coche LCN 41
    AddStaticVehicleEx(580, 1242.8522,-804.3187,83.9368,180.5960, 0, 0, 30000); // Coche LCN 42
    AddStaticVehicleEx(580, 1242.8289,-814.4547,83.9403,179.5575, 0, 0, 30000); // Coche LCN 43
    AddStaticVehicleEx(409, 1248.8210,-805.1644,83.9400,179.2083, 0, 0, 30000); // Coche LCN limusina 44
    AddStaticVehicleEx(487, 1291.34497, -788.81152, 96.61930, 359.55441, 0, 0, 30000); // HELICOPTERO LCN 45
    //-------------------------------------------------------------------------------------------VEHICULOS HITMAN
    AddStaticVehicleEx( 566, 1512.9786, -1460.2517 ,9.2797, 270.4258, 40, 40, 30000); // coche HITMAN 46 tahoma AddStaticVehicleEx( 566, 1512.9786, -1460.2517 ,9.2797, 270.4258, 40, 40, 30000)
    AddStaticVehicleEx( 566, 1512.9939, -1465.5856, 9.2797, 267.6676, 40, 40, 30000); // coche HITMAN 47 tahoma
    AddStaticVehicleEx( 491, 1524.7524, -1460.2347, 9.2562, 89.9582, 40, 40, 30000); // coche HITMAN 48 virgo
    AddStaticVehicleEx( 413, 1513.0200, -1477.7350, 9.5683, 269.7688, 40, 40, 30000); // coche HITMAN 49 pony
    AddStaticVehicleEx( 487, 1524.35229, -1469.66907, 64.03340, 3.49980, 40, 40, 30000); // HELICOPTERO HITMAN 50
    //-------------------------------------------------------------------------------------------VEHICULOS CNN
    AddStaticVehicleEx( 582, 2011.76367, -1418.62305, 17.04860, 270.54980, 61, 1, 30000); // FURGONETA CNN 51
    AddStaticVehicleEx( 582, 2020.01599, -1418.62317, 17.04240, 268.59241, 61, 1, 30000); // FURGONETA CNN 52
    AddStaticVehicleEx( 582, 2029.89441, -1436.80603, 17.15370, 179.67171, 61, 1, 30000); // FURGONETA CNN 53
    AddStaticVehicleEx( 488, 2028.27051, -1386.79224, 48.54040, 353.86530, 61, 1, 30000); // HELICOPTERO CNN 54
    //-------------------------------------------------------------------------------------------VEHICULOS MECANICOS
    AddStaticVehicleEx( 525, 1768.69763, -2031.86682, 13.54420, 269.79169, 4, 4, 30000); // GRUA SK 55
    AddStaticVehicleEx( 525, 1768.22278, -2048.71533, 13.62450, 270.10361, 4, 4, 30000); // GRUA SK 56
    AddStaticVehicleEx( 525, 1751.37268, -2057.35498, 13.66320, 177.89120, 4, 4, 30000); // GRUA SK 57
    AddStaticVehicleEx( 525, 1760.56250, -2055.89111, 13.32630, 90.56220, 4, 4, 30000); // GRUA SK 58
    //-------------------------------------------------------------------------------------------VEHICULOS YAkuza
    AddStaticVehicleEx( 421, 686.1118, -1261.1772, 13.4104, 89.8866, 1, 1, 30000); // coche YAkuza 59
    AddStaticVehicleEx( 421, 686.0545, -1265.6555, 13.4043, 90.0724, 1, 1, 30000); // coche YAkuza 60
    AddStaticVehicleEx( 421, 685.9283, -1270.1278, 13.4399, 90.2777, 1, 1, 30000); // coche YAkuza 61
    AddStaticVehicleEx( 468, 688.3104, -1286.0477, 13.2400, 92.3691, 1, 1, 30000); // moto YAkuza 62
    AddStaticVehicleEx( 468, 688.2665, -1290.4911,13.2476, 92.2214, 1, 1, 30000); // moto YAkuza 63
    AddStaticVehicleEx( 487, 719.7202, -1245.9856, 13.6997,87.1503, 1, 1, 30000); // HELICOPTERO YAkuza 64
    //-------------------------------------------------------------------------------------------VEHICULOS Latin XIV Clicka'
    cocheclic = AddStaticVehicleEx( 535,2659.9822,-2036.9397,13.2249,90.4683, 6, 1, 30000); // COCHE Latin XIV Clicka' TUNING 65
    //-----------------------------------------------
    AddVehicleComponent(cocheclic,1113);  //Escape
    AddVehicleComponent(cocheclic,1109);  //Embellecedor
    AddVehicleComponent(cocheclic,1118);  //Tapacubos
	AddVehicleComponent(cocheclic, 1080); //Ruedas
	AddVehicleComponent(cocheclic, 1010); //Nitro 10x
	AddVehicleComponent(cocheclic, 1087); //Hidraulicos
	AddVehicleComponent(cocheclic,1117);  //Frontal
	ChangeVehiclePaintjob(cocheclic, 2);  //Pintura
	//------------------------------------------------
    AddStaticVehicleEx( 567,2654.0244,-2032.3937,13.4194,87.8959, 6, 1, 30000); // COCHE Latin XIV Clicka' 66
    AddStaticVehicleEx( 567,2651.4102,-2042.0237,13.4208,359.5787, 6, 1, 30000); // COCHE Latin XIV Clicka' 67
    AddStaticVehicleEx( 567,2657.5852,-2048.5786,13.4953,0.8284, 6, 1, 30000); // COCHE Latin XIV Clicka' 68
    //-------------------------------------------------------------------------------------------VEHICULOS TRABAJO FARMER ILEGAL
    AddStaticVehicleEx( 572,-70.2461,5.7102,2.6900,163.4996,0,0, 30000); // TRACTOR FARMER ILEGAL 69
    AddStaticVehicleEx( 572,-73.3639,6.8542,2.6777,161.3235,0,0, 30000); // TRACTOR FARMER ILEGAL 70
    AddStaticVehicleEx( 572,-76.3964,7.8528,2.6885,160.2040,24,24, 30000); // TRACTOR FARMER ILEGAL 71
    AddStaticVehicleEx( 572,-79.3043,8.9397,2.6838,159.5023,24,24, 30000); // TRACTOR FARMER ILEGAL 72
    //-------------------------------------------------------------------------------------------VEHICULOS REPARTIDOR DROGAS
    AddStaticVehicleEx( 499,2015.4762,-1048.5177,24.6724,158.6660,4,4, 30000); // FURGO REPARTIDOR DROGAS 73
    AddStaticVehicleEx( 499,2011.4049,-1047.1104,24.6702,158.8799,4,4, 30000); // FURGO REPARTIDOR DROGAS 74
    AddStaticVehicleEx( 499,2006.8364,-1045.4421,24.6470,159.5838,4,4, 30000); // FURGO REPARTIDOR DROGAS 75
    AddStaticVehicleEx( 499,1998.7203,-1041.1141,24.6349,124.6604,4,4, 30000); // FURGO REPARTIDOR DROGAS 76
    //-------------------------------------------------------------------------------------------VEHICULOS GUARDAESPALDAS
    AddStaticVehicleEx( 409, 598.53912, -1519.17444, 14.85530, 268.20871,1,1, 30000); // LIMOS GUARDAESPALDAS 77
    AddStaticVehicleEx( 409, 598.70068, -1515.16467, 14.86780, 268.61490,1,1, 30000); // LIMOS GUARDAESPALDAS 78
    AddStaticVehicleEx( 409, 598.70673, -1510.80383, 14.88630, 270.55331,1,1, 30000); // LIMOS GUARDAESPALDAS 79
    AddStaticVehicleEx( 409, 598.58392, -1506.40112, 14.90580, 270.23929,1,1, 30000); // LIMOS GUARDAESPALDAS 80
    //-------------------------------------------------------------------------------------------VEHICULOS MOZO
    AddStaticVehicleEx( 530, 2468.30542, -2607.09399, 13.42320, 267.47330,57,57, 30000); // CARRETILLA MOZO 81
    AddStaticVehicleEx( 530, 2468.15161, -2611.02856, 13.42490, 267.89981,57,57, 30000); // CARRETILLA MOZO 82
    AddStaticVehicleEx( 530, 2468.28857, -2614.63672, 13.42440, 269.79529,57,57, 30000); // CARRETILLA MOZO 83
    AddStaticVehicleEx( 530, 2468.26025, -2617.68970, 13.42410, 268.65530,57,57, 30000); // CARRETILLA MOZO 84
    //--------------------------------------Coche alquiler San Fierro y Las Venturas
    AddStaticVehicleEx( 445,1707.7350,1446.5299,10.6263,163.7893,7,7, 30000);// coche 85
    AddStaticVehicleEx( 445,1709.6042,1452.9651,10.6253,163.4063,7,7, 30000);// coche 86
    AddStaticVehicleEx( 445,1711.4673,1459.5095,10.6248,163.9519,7,7, 30000);// coche 87
    AddStaticVehicleEx( 445,1713.3022,1465.9286,10.6225,162.5706,7,7, 30000);// coche 88
    AddStaticVehicleEx( 445,1715.2689,1472.1904,10.6191,161.6347,7,7, 30000);// coche 89
    AddStaticVehicleEx( 445,1717.2898,1478.3873,10.6174,161.9408,7,7, 30000);// coche 90
    AddStaticVehicleEx( 445,-1464.9015,-272.9015,13.9414,75.5254,7,7, 30000);// coche 91
    AddStaticVehicleEx( 445,-1458.8281,-274.6863,13.9431,70.3431,7,7, 30000);// coche 92
    AddStaticVehicleEx( 445,-1452.8618,-277.1072,13.9446,66.4741,7,7, 30000);// coche 93
    AddStaticVehicleEx( 445,-1446.8712,-279.7118,13.9462,66.9819,7,7, 30000);// coche 94
    AddStaticVehicleEx( 445,-1441.0671,-282.6887,13.9458,59.0508,7,7, 30000);// coche 95
    //-------------------------------------------------------------------------------------------VEHICULOS GRANJERO
    AddStaticVehicleEx( 532,-377.5965,-1419.2206,26.7027,1.2955,35,35, 30000); // COSECHADORA 96
    AddStaticVehicleEx( 532,-370.3679,-1461.4509,26.6886,290.5054,35,35, 30000); // COSECHADORA 97
    AddStaticVehicleEx( 532,-371.8683,-1472.9543,26.7027,291.4422,35,35, 30000); // COSECHADORA 98
    //-------------------------------------------------------------------------------------------VEHICULOS BARRENDERO
    AddStaticVehicleEx( 574,1645.1932,-1907.6097,13.2772,3.9577,26,25, 30000); // barredora 99
    AddStaticVehicleEx( 574,1641.2589,-1907.8396,13.2786,0.2426,26,25, 30000); // barredora 100
    AddStaticVehicleEx( 574,1637.4783,-1907.9794,13.2787,358.5498,26,25, 30000); // barredora 101
    AddStaticVehicleEx( 574,1633.7267,-1908.0192,13.2768,0.5465,26,25, 30000); // barredora 102
    //-------------------------------------------------------------------------------------------VEHICULOS ESTADIOS
   	new vdle1;
	new vdle2;
	new vdle3;
	new vdle4;
	new vdle5;
	new vdle6;
	new vdle7;
	new vdle8;
	new vdle9;
	new vdle10;
	new vdle11;
	new vdle12;
	new vdle13;
	new vdle14;
	new vdle15;
	new vdle16;
	new vdle17;
	new vdle18;
	new vdle19;
	new vdle20;
	new vdle21;
	new vdle22;
	new vdle23;
	new vdle24;
	new vdle25;
	new vdle26;
	new vdle27;
	new vdle28;
	new vdle29;
	new vdle30;
	new vdle31;
	new vdle32;
	new vdle33;
	new vdle34;
	new vdle35;
	new vdle36;
	new vdle37;
	new vdle38;
	new vdle39;
	new vdle40;
	new vdle41;
	new vdle42;
	new vdle44;
	new vdle45;
	new vdle46;
	new vdle47;
	new vdle48;
	new vdle49;
	new vdle50;
	new vdle51;
//Circulo de Sangre (15)
	vdle1 = CreateVehicle(573,-1364.8800,932.5345,1036.9766,1.6679,115,43,60000); 	// Duneride 1
	vdle2 = CreateVehicle(573,-1360.4867,933.3093,1036.9822,5.2253,85,6,60000); 		// Duneride 2
	vdle3 = CreateVehicle(568,-1424.1714,930.1659,1036.2676,358.7643,21,1,60000); 	// Bandito 1
	vdle4 = CreateVehicle(568,-1443.7061,932.3923,1036.3612,351.4785,17,1,60000); 	// Bandito 2
	vdle5 = CreateVehicle(568,-1462.7355,936.1924,1036.4608,343.4974,9,39,60000); 	// Bandito 3
	vdle6 = CreateVehicle(444,-1485.3647,945.6333,1037.1337,338.7711,32,42,60000); 	// Monster
	vdle7 = CreateVehicle(504,-1515.3964,972.4506,1037.0862,298.2570,45,29,60000); 	// O Bloodder 1
	vdle8 = CreateVehicle(504,-1520.1704,985.1482,1037.2860,280.9070,57,38,60000); 	// O Bloodder 2
	vdle9 = CreateVehicle(504,-1521.0554,1004.9197,1037.6107,263.7660,14,1,60000); 	// O Bloodder 3
	vdle10 = CreateVehicle(504,-1517.7117,1015.8376,1037.7887,246.2115,12,9,60000); 	// O Bloodder 4
	vdle11 = CreateVehicle(504,-1509.7495,1026.8112,1037.9596,234.4572,26,1,60000); 	// O Bloodder 5
	vdle12 = CreateVehicle(504,-1500.4523,1035.9327,1038.0947,223.5443,51,39,60000); 	// O Bloodder 6
	vdle13 = CreateVehicle(495,-1521.4331,993.9540,1038.0011,271.6595,119,122,60000); 	// O Sandking
	vdle14 = CreateVehicle(515,-1416.1167,1059.1885,1039.5590,236.2186,24,77,60000); 	// Destructor 1
	vdle15 = CreateVehicle(515,-1408.2391,1059.9653,1039.5558,235.4959,63,78,60000); 	// Destructor 2
	vdle16 = CreateVehicle(515,-1398.8860,1059.8375,1039.5441,235.4865,42,76,60000); 	// Destructor 3
	vdle17 = CreateVehicle(504,-1279.5908,976.7382,1036.7240,70.2842,51,39,60000); 	// E Bloodder 1
	vdle18 = CreateVehicle(504,-1276.4143,986.6551,1036.8883,83.3217,26,1,60000); 	// E Bloodder 2
	vdle19 = CreateVehicle(504,-1275.1667,1005.7276,1037.2013,104.7192,34,9,60000); 	// E Bloodder 3
	vdle20 = CreateVehicle(504,-1278.6543,1016.0567,1037.3826,115.5226,65,9,60000); 	// E Bloodder 4
	vdle21 = CreateVehicle(504,-1284.1864,1024.8760,1037.5299,129.3239,14,1,60000); 	// E Bloodder 5
	vdle22 = CreateVehicle(504,-1292.0731,1033.7756,1037.7397,135.7115,12,9,60000); 	// E Bloodder 6
	vdle23 = CreateVehicle(495,-1274.5830,996.2779,1037.6016,90.7626,118,117,60000); 	// E Sandkin
  //Acrobacias Triples y dobles tambien (14)
	vdle24 = CreateVehicle(468,-1475.5219,1557.5953,1052.1890,25.4670,46,46,60000); 	// Acro 1
	vdle25 = CreateVehicle(468,-1477.5400,1557.5796,1052.1952,36.4179,3,3,60000); 	// Acro 2
	vdle26 = CreateVehicle(468,-1479.6464,1557.3834,1052.1934,43.8317,53,53,60000); 	// Acro 3
	vdle27 = CreateVehicle(468,-1481.7838,1557.1788,1052.1941,46.9816,6,6,60000); 	// Acro 4
	vdle28 = CreateVehicle(468,-1484.1597,1557.1606,1052.1960,48.7639,46,46,60000); 	// Acro 5
	vdle29 = CreateVehicle(468,-1486.4952,1557.1475,1052.1956,52.0640,53,53,60000); 	// Acro 6
	vdle30 = CreateVehicle(468,-1488.6038,1557.0601,1052.1853,54.2469,3,3,60000); 	// Acro 7
  //Motocross Arena (4)
	vdle31 = CreateVehicle(468,-1380.3453,-669.9767,1055.6075,84.9243,46,46,60000);	// Motorrera 1
	vdle32 = CreateVehicle(468,-1377.7516,-670.2570,1055.6078,84.3187,53,53,60000); 	// Motorrera 2
	vdle33 = CreateVehicle(468,-1375.1307,-670.5392,1055.6044,84.1745,3,3,60000); 	// Motorrera 3
	vdle34 = CreateVehicle(468,-1372.6483,-670.8007,1055.6074,84.1729,6,6,60000); 	// Motorrera 4
	vdle35 = CreateVehicle(468,-1379.5670,-660.0154,1055.6012,83.0765,53,53,60000); 	// Motorrera 5
	vdle36 = CreateVehicle(468,-1377.0917,-660.2658,1055.6095,83.9029,3,3,60000); 	// Motorrera 6
	vdle37 = CreateVehicle(468,-1374.5457,-660.5204,1055.6072,83.7591,6,6,60000); 	// Motorrera 7
	vdle38 = CreateVehicle(468,-1372.0164,-660.8082,1055.6100,83.6739,46,46,60000); 	// Motorrera 8
  //Carretera de Fuego (7)
	vdle39 = CreateVehicle(503,-1402.1045,-243.9174,1043.3130,348.9139,101,100,60000); 	// Hotring 1
	vdle40 = CreateVehicle(502,-1406.1414,-243.4055,1043.3540,348.8025,36,88,60000);	// Hotring 2
	vdle41 = CreateVehicle(494,-1403.1672,-249.7711,1043.4229,348.6523,42,30,60000); 	// Hotring 3
	vdle42 = CreateVehicle(503,-1407.0400,-249.1110,1043.4468,349.8353,87,75,60000); 	// Hotring 4
	vdle44 = CreateVehicle(502,-1404.4368,-256.0988,1043.5321,348.0228,51,75,60000); 	// Hotring 5
	vdle45 = CreateVehicle(494,-1408.1246,-255.1263,1043.5354,350.5808,36,13,60000); 	// Hotring 6
	vdle46 = CreateVehicle(571,-1402.7053,-264.5535,1042.9412,346.2088,36,2,60000); 	// Kart 1
	vdle47 = CreateVehicle(571,-1403.1816,-266.6981,1042.9380,344.6398,51,53,60000); 	// Kart 2
	vdle48 = CreateVehicle(571,-1403.7388,-268.8547,1042.9310,342.1716,91,2,60000); 	// Kart 3
	vdle49 = CreateVehicle(571,-1405.9008,-264.2906,1042.9402,323.1785,11,22,60000); 	// Kart 4
	vdle50 = CreateVehicle(571,-1407.8494,-264.4337,1042.9277,324.3402,40,35,60000);	// Kart 5
	vdle51 = CreateVehicle(571,-1409.8815,-264.6336,1042.9399,325.8066,2,35,60000); 	// Kart 6
	LinkVehicleToInterior(vdle1,15);
	LinkVehicleToInterior(vdle2,15);
	LinkVehicleToInterior(vdle3,15);
	LinkVehicleToInterior(vdle4,15);
	LinkVehicleToInterior(vdle5,15);
	LinkVehicleToInterior(vdle6,15);
	LinkVehicleToInterior(vdle7,15);
	LinkVehicleToInterior(vdle8,15);
	LinkVehicleToInterior(vdle9,15);
	LinkVehicleToInterior(vdle10,15);
	LinkVehicleToInterior(vdle11,15);
	LinkVehicleToInterior(vdle12,15);
	LinkVehicleToInterior(vdle13,15);
	LinkVehicleToInterior(vdle14,15);
	LinkVehicleToInterior(vdle15,15);
	LinkVehicleToInterior(vdle16,15);
	LinkVehicleToInterior(vdle17,15);
	LinkVehicleToInterior(vdle18,15);
	LinkVehicleToInterior(vdle19,15);
	LinkVehicleToInterior(vdle20,15);
	LinkVehicleToInterior(vdle21,15);
	LinkVehicleToInterior(vdle22,15);
	LinkVehicleToInterior(vdle23,15);
	LinkVehicleToInterior(vdle24,14);
	LinkVehicleToInterior(vdle25,14);
	LinkVehicleToInterior(vdle26,14);
	LinkVehicleToInterior(vdle27,14);
	LinkVehicleToInterior(vdle28,14);
	LinkVehicleToInterior(vdle29,14);
	LinkVehicleToInterior(vdle30,14);
	LinkVehicleToInterior(vdle31,4);
	LinkVehicleToInterior(vdle32,4);
	LinkVehicleToInterior(vdle33,4);
	LinkVehicleToInterior(vdle34,4);
	LinkVehicleToInterior(vdle35,4);
	LinkVehicleToInterior(vdle36,4);
	LinkVehicleToInterior(vdle37,4);
	LinkVehicleToInterior(vdle38,4);
	LinkVehicleToInterior(vdle39,7);
	LinkVehicleToInterior(vdle40,7);
	LinkVehicleToInterior(vdle41,7);
	LinkVehicleToInterior(vdle42,7);
	LinkVehicleToInterior(vdle44,7);
	LinkVehicleToInterior(vdle45,7);
	LinkVehicleToInterior(vdle46,7);
	LinkVehicleToInterior(vdle47,7);
	LinkVehicleToInterior(vdle48,7);
	LinkVehicleToInterior(vdle49,7);
	LinkVehicleToInterior(vdle50,7);
	LinkVehicleToInterior(vdle51,7);
	//-------------------------------------------------------------------------------------------VEHICULOS ALQUILER
	//BICICLETAS SALIDA
    AddStaticVehicleEx( 509,1683.8474,-2178.1050,13.0666,0.4517,1,1, 30000); // BICICLETA 153   //BARRIO--1
    AddStaticVehicleEx( 509,1686.0939,-2178.1980,13.0668,358.0308,2,2, 30000); // BICICLETA 154   //BARRIO--2
    AddStaticVehicleEx( 509,1688.3624,-2178.2883,13.0669,0.5794,3,3, 30000); // BICICLETA 155   //BARRIO--3
    AddStaticVehicleEx( 509,1690.7111,-2178.3198,13.0666,0.9305,4,4, 30000); // BICICLETA 156   //CENTRO--1
    AddStaticVehicleEx( 509,1693.1584,-2178.3450,13.0668,0.7568,5,5, 30000); // BICICLETA 157   //CENTRO--2
    AddStaticVehicleEx( 509,1695.6921,-2178.3979,13.0667,359.4719,6,6, 30000); // BICICLETA 158   //PLAYA--1
    AddStaticVehicleEx( 509,1698.1089,-2178.1274,13.0667,359.1108,7,7, 30000); // BICICLETA 159   //PLAYA--2
    AddStaticVehicleEx( 509,1700.6692,-2178.2061,13.0668,358.3608,8,8, 30000); // BICICLETA 160   //PLAYA--3
    AddStaticVehicleEx( 509,1703.5536,-2178.1897,13.0664,0.8658,9,9, 30000); // BICICLETA 161   //AERO--1
    AddStaticVehicleEx( 509,1706.4658,-2178.2410,13.0667,2.0272,10,10, 30000); // BICICLETA 162 //AERO--2
    //BICICLETAS DEL PARQUE
    AddStaticVehicleEx( 510, 1864.50891, -1403.79749, 13.00010, 271.36841,11,11, 30000); // BICICLETA 163
    AddStaticVehicleEx( 510, 1864.50891, -1401.79749, 13.00010, 271.36841,12,12, 30000); // BICICLETA 164
    AddStaticVehicleEx( 510, 1864.50891, -1397.79749, 13.00010, 271.36841,13,13, 30000); // BICICLETA 165
    AddStaticVehicleEx( 510, 1864.50891, -1395.79749, 13.00010, 271.36841,14,14, 30000); // BICICLETA 166
    AddStaticVehicleEx( 481, 1864.50891, -1393.79749, 13.00010, 271.36841,15,15, 30000); // BICICLETA 167
    AddStaticVehicleEx( 481, 1864.50891, -1391.79749, 13.00010, 271.36841,16,16, 30000); // BICICLETA 168
    AddStaticVehicleEx( 481, 1864.50891, -1399.79749, 13.00010, 271.36841,17,17, 30000); // BICICLETA 169
    AddStaticVehicleEx( 481, 1864.50891, -1405.79749, 13.00010, 271.36841,18,18, 30000); // BICICLETA 170
    // OTROS VEHICULOS EN ALQUILER ( AVIONES Y BARCOS )
    AddStaticVehicleEx( 511, 1888.68359, -2625.24609, 14.92120, 0.85440,26,25, 30000); // AVION 171
    AddStaticVehicleEx( 513, 1821.78760, -2626.34131, 14.10140, 0.97980,26,25, 30000); // AVION 172
    AddStaticVehicleEx( 593, 1755.08569, -2623.60498, 14.01020, 359.26111,26,25, 30000); // AVION 173
    AddStaticVehicleEx( 487, 1856.6642, -2545.2830,13.7412,0.6879,26,25, 30000); // HELICOPTERO 174
    AddStaticVehicleEx( 454, 721.87299, -1635.23621, 0.16140, 179.13300,26,25, 30000); // BARCO 175
    AddStaticVehicleEx( 453, 728.82257, -1496.72754, -0.22310, 179.97020,26,25, 30000); // BARCO 176
    AddStaticVehicleEx( 484, 530.02490, -1913.55005, 0.18380, 91.03350,26,25, 30000); // BARCO 177
    //-------------------------------------------------------------------------------------------BICICLETAS GROVES
    AddStaticVehicleEx( 481,2495.096,-1647.358,13.150,134.0,86,86, 30000); // BICICLETAS GROVES 178
    AddStaticVehicleEx( 481,2496.626,-1647.643,13.150,134.0,86,86, 30000); // BICICLETAS GROVES 179
    AddStaticVehicleEx( 481,2498.304,-1648.037,13.150,134.0,86,86, 30000); // BICICLETAS GROVES 180
    //-------------------------------------------------------------------------------------------BICICLETAS LATIN XIV
    AddStaticVehicleEx( 481,2650.1196,-2029.2426,13.0655,90.0573,6,6, 30000); // BICICLETAS LATIN XIV 181
    AddStaticVehicleEx( 481,2650.0801,-2027.8191,13.0612,86.6910,6,6, 30000); // BICICLETAS LATIN XIV 182
    AddStaticVehicleEx( 481,2650.0996,-2026.4132,13.0605,87.5061,6,6, 30000); // BICICLETAS LATIN XIV 183
    //-------------------------------------------------------------------------------------------VEHICULOS POR CULPA DE UN BUG QUE ME DA RABIA
    //AddStaticVehicleEx( 608,319.9304,-1823.1833,4.1066,354.9839,66,66, 30000); // 184 /veh 608 66 6666 66
    //AddStaticVehicleEx( 608,319.9304,-1823.1833,4.1066,454.9839,66,66, 30000); // 185 /veh 608 66 6666 66
    
    
    
    
    
    
    
    
	for(new hcar = 184; hcar < sizeof(CarInfo); hcar++)
	{
		AddStaticVehicleEx(CarInfo[hcar][cModel],CarInfo[hcar][cLocationx],CarInfo[hcar][cLocationy],CarInfo[hcar][cLocationz]+1.0,CarInfo[hcar][cAngle],CarInfo[hcar][cColorOne],CarInfo[hcar][cColorTwo],60000);
	    LoadModsForAll(hcar);
	    TuneThisCar(hcar);

	}
	//-------------------------------------------------------------------------------------------VEHICULOS DE ALQUILER NUEVOS
    AddStaticVehicleEx( 606,319.9304,-1823.1833,4.1066,354.9839,113,26, 30000);		// BUG de noarrancar , carga de la playa

    
    
    
    AddStaticVehicleEx( 567,2498.0601,-2022.8253,13.3290,359.4919,116,1, 30000); // COCHE--1-- 13th Street 609
	AddStaticVehicleEx( 567,2495.1917,-1996.4862,13.4296,179.3570,116,1, 30000); // COCHE--3-- 13th Street 610
	AddStaticVehicleEx( 567,2474.2751,-1996.6785,13.3135,179.9330,116,1, 30000); // COCHE--4-- 13th Street 611
	coche13st = AddStaticVehicleEx( 534,2529.3806,-2009.4381,13.2540,47.3048,116,1, 30000); // COCHE--2-- 13th Street TUNING 612
	/*AddStaticVehicleEx( 567,2484.0881,-1684.2168,13.2830,263.5029,116,1, 30000); // COCHE--1-- 13th Street 609
	AddStaticVehicleEx( 567,2501.5298,-1654.6046,13.3365,60.7216,116,1, 30000); // COCHE--3-- 13th Street 610
	AddStaticVehicleEx( 567,2479.8682,-1652.4858,13.3704,90.3664,116,1, 30000); // COCHE--4-- 13th Street 611
	coche13st = AddStaticVehicleEx( 534,2505.5620,-1694.9211,13.2651,1.3741,116,1, 30000); // COCHE--2-- 13th Street TUNING 612*/
	//-----------------------------------------------
    AddVehicleComponent(coche13st,1180);  //Trasero
    AddVehicleComponent(coche13st,1179);  //Frontal
    AddVehicleComponent(coche13st,1126);  //Escape
    AddVehicleComponent(coche13st,1122);  //Embellecedor
    AddVehicleComponent(coche13st,1100);  //Calavera
	AddVehicleComponent(coche13st, 1078); //Ruedas
	AddVehicleComponent(coche13st, 1010); //Nitro 10x
	AddVehicleComponent(coche13st, 1087); //Hidraulicos
	ChangeVehiclePaintjob(coche13st, 2);  //Pintura
	//------------------------------------------------
	
	//-----------------------------------------------------------------
	//---------------------------------- Medicos + Vehiculos
	AddStaticVehicleEx( 563,1161.0808,-1297.9465,32.2044,260.0298,1,3, 30000); // HELICOPTERO HOSPITAL 613
	AddStaticVehicleEx( 416,1146.5286,-1296.9353,13.8004,0.5069,1,3, 30000);  // AMBULANCIA 614
	//---------------------------------- Kart Pista muelle
	AddStaticVehicleEx( 571,2361.7104,-2341.2646,12.7884,224.5081,3,3, 30000); // Kart 615
	AddStaticVehicleEx( 571,2360.1777,-2342.9316,12.9883,225.5797,0,0, 30000);  // Kart - 616
	AddStaticVehicleEx( 571,2363.6670,-2343.0891,12.7881,221.8461,4,4, 30000);   // Kart - 617
	AddStaticVehicleEx( 571,2361.9988,-2344.6499,12.7886,228.0209,2,2, 30000);   // Kart - 618
	AddStaticVehicleEx( 571,2365.4165,-2345.2146,12.7729,223.9469,5,5, 30000);   // Kart - 619
	AddStaticVehicleEx( 571,2363.9199,-2346.7114,12.7846,231.2389,8,8, 30000);   // Kart - 620
	AddStaticVehicleEx( 571,2365.7017,-2348.7144,12.7848,221.7687,6,6, 30000);   // Kart - 621
	//--------------------------------------------------- MAS BARCOS MILITARES
	AddStaticVehicleEx( 472,2726.9006,-2588.9854,-0.1941,271.3147,1,1, 30000); // barco1 - 622
	AddStaticVehicleEx( 472,2725.9382,-2592.4329,-0.0073,269.3241,1,1, 30000); // barco2 - 623
	AddStaticVehicleEx( 595,2715.5989,-2572.1279,0.5144,183.0892,7,7, 30000); // launch1 - 624
	//--------------------------------------------------- Los Puretas super viejos xD
	AddStaticVehicleEx( 434,994.2805,-1532.9124,13.5114,90.4160,30,30, 30000); //625
    AddStaticVehicleEx( 545,959.7557,-1523.0576,13.3642,180.1759,30,30, 30000); //626
    AddStaticVehicleEx( 545,963.8311,-1522.8246,13.3655,180.5072,30,30, 30000); //627
    AddStaticVehicleEx( 545,967.9473,-1522.9019,13.3666,182.0569,30,30, 30000); //628
    //--bicis puretas
    AddStaticVehicleEx( 509,995.5519,-1529.2869,13.0791,90.5264,30,30, 30000); //629
    AddStaticVehicleEx( 509,995.3539,-1526.9698,13.0747,93.7021,30,30, 30000); //630
    AddStaticVehicleEx( 509,995.2358,-1524.5204,13.0698,91.7841,30,30, 30000); //631

	// ------------- ESTOS VEHICULOS SON PLANTILLA, NO CREAR VEHICULOS NUEVOS, SUSTITUIR ESTOS !!!!!
	// --- EN CASO DE CREAR NUEVOS VEHICULOS HAY QUE MODIFICAR /respawnallcars o /rac.
    //---------------------------------- Kart Pista muelle
    AddStaticVehicleEx( 571,2367.3962,-2347.0605,12.7884,219.9552,7,7, 30000); //Kart - 632
    AddStaticVehicleEx( 571,2369.1008,-2348.6387,12.7881,221.5106,9,9, 30000); //Kart - 633
    AddStaticVehicleEx( 571,2367.5012,-2350.1985,12.7884,225.6336,10,10, 30000); //Kart - 634
    //---------------------------------- Bomberos
    AddStaticVehicleEx( 407,2260.2820,-2206.7720,13.7470,45.1088,3,1, 30000); //camion AGUA 635
    AddStaticVehicleEx( 407,2265.8633,-2201.0271,13.7408,45.8464,3,1, 30000); //camion AGUA 636
    AddStaticVehicleEx( 407,2272.4751,-2193.7854,13.7490,45.7908,3,1, 30000); //camion AGUA 637
    AddStaticVehicleEx( 573,2291.1704,-2188.7495,13.7557,44.4819,3,1, 30000); //camion 638
    AddStaticVehicleEx( 573,2295.2559,-2184.5552,13.7562,43.8429,3,1, 30000); //camion 639
    AddStaticVehicleEx( 490,2299.3093,-2180.7129,13.7545,44.3582,3,1, 30000); //camion 640
    AddStaticVehicleEx( 552,2254.4141,-2162.6868,13.2145,223.4084,3,1, 30000); // coche - 641
    AddStaticVehicleEx( 563,2274.0476,-2153.9697,15.7618,13.0884,3,1, 30000); // helicoptero - 642
        //-------------------------------------------------------------------------------------------VEHICULOS CAMIONERO
    AddStaticVehicleEx( 403, 2279.44653, -2319.35400, 14.15270, 224.60680,40,40, 30000); // CAMIONERO 643
    AddStaticVehicleEx( 403, 2271.56567, -2327.47900, 14.15300, 226.34090,40,40, 30000); // CAMIONERO 644
    AddStaticVehicleEx( 403, 2264.04761, -2334.16113, 14.15360, 225.44910,40,40, 30000); // CAMIONERO 645
    AddStaticVehicleEx( 591, 2282.81372, -2398.63550, 13.27400, 312.74689,76,76, 30000); // TRAILER 646
    AddStaticVehicleEx( 591, 2256.99170, -2440.41382, 14.15300, 0.24410,76,76, 30000); // TRAILER 647
    AddStaticVehicleEx( 591, 2269.23999, -2440.05713, 14.15310, 359.24551,76,76, 30000); // TRAILER 648
        //-------------------------------------------------------------------------------------------VEHICULOS PIZZERO
    AddStaticVehicleEx( 448,2121.8718,-1784.8073,12.9765,0.3894,3,3, 30000); // MOTO PIZZAS 649
    AddStaticVehicleEx( 448,2119.2983,-1784.7845,12.9773,359.0465,3,3, 30000); // MOTO PIZZAS 650
    AddStaticVehicleEx( 448,2116.7524,-1784.8324,12.9856,358.9333,3,3, 30000); // MOTO PIZZAS 651
    AddStaticVehicleEx( 448,2113.8628,-1784.9135,12.9863,357.5828,3,3, 30000); // MOTO PIZZAS 652
    AddStaticVehicleEx( 448,2110.8655,-1784.9390,12.9820,0.2269,3,3, 30000); // MOTO PIZZAS 653
        AddStaticVehicleEx(431, 1080.49390, -1763.67126, 13.47100, 270.05539, 0, 6, 30000); // AUTOBUS 654
	police =	AddStaticVehicle(597,1535.8085,-1678.8069,13.1522,359.4198,79,1); // police car renew
	//-------------------------------------------------------------------------------------------aviones militares aerodromo viejo
    AddStaticVehicleEx( 476,420.0986,2460.0308,17.2241,90.5804,3,9, 30000); //656
    AddStaticVehicleEx( 476,420.1260,2448.4231,17.2060,90.6971,3,9, 30000); //657
    AddStaticVehicleEx( 476,389.4077,2448.4907,17.2115,271.2234,3,9, 30000); //658
    AddStaticVehicleEx( 476,389.2942,2459.8899,17.2006,269.9459,3,9, 30000); //659
    AddStaticVehicleEx( 476,405.1405,2439.3750,17.2170,0.7969,3,9, 30000); //660
    AddStaticVehicleEx( 425,365.2867,2541.0601,17.1536,357.1225,1,1, 30000); //661
    AddStaticVehicleEx( 425,352.7702,2540.0989,17.2941,1.9932,1,1, 30000); //662
    AddStaticVehicleEx( 593,325.8992,2539.0237,17.2660,180.0629,1,1, 30000); //663
    AddStaticVehicleEx( 593,291.3551,2539.1497,17.2871,181.8606,1,1, 30000); //664
    //--------------------------------------------------------------------------------------Vehiculos Mineria
    AddStaticVehicleEx(406,837.6562,866.9299,14.6248,163.2241,79,79, 30000); // Camion Minero 665
	AddStaticVehicleEx(406,848.3151,874.9748,14.8762,169.5985,79,79, 30000); // Camion Minero 666
	AddStaticVehicleEx(486,835.4277,845.4201,12.2177,358.8233,79,79, 30000); // Camion Minero 667
	AddStaticVehicleEx(486,825.5197,839.6813,11.2872,359.9349,79,79, 30000); // Camion Minero 668
	//--------------------------------------------------------------------------------------Vehiculos Basurero
    AddStaticVehicleEx(408,2079.5105,-2006.6038,14.1484,271.5346,1,1, 30000); // Camionbasura 669
	AddStaticVehicleEx(408,2079.4724,-2020.0343,14.1110,269.5679,1,1, 30000); // Camionbasura 670
	AddStaticVehicleEx(408,2079.4753,-2033.3890,14.1014,268.9928,1,1, 30000); // Camionbasura 671
	AddStaticVehicleEx(408,2079.4807,-2046.8746,14.0838,267.8753,1,1, 30000); // Camionbasura 672
	AddStaticVehicleEx(408,2118.7881,-2078.1221,14.1464,133.7755,1,1, 30000); // Camionbasura 673
	AddStaticVehicleEx(408,2125.9783,-2085.3633,14.0954,135.8635,1,1, 30000); // Camionbasura 674
	AddStaticVehicleEx(408,2133.4133,-2092.4299,14.0983,134.4913,1,1, 30000); // Camionbasura 675
	//---------------------------------------------------------------------------------------BMX SUREÑOS.
    AddStaticVehicleEx( 481,2526.8311,-2013.9020,13.0651,42.5604,116,1, 30000); //bmx1 676
    AddStaticVehicleEx( 481,2525.9187,-2014.8599,13.0659,43.0106,116,1, 30000); //bmx2 677
    AddStaticVehicleEx( 481,2524.9209,-2015.9365,13.0622,44.8313,116,1, 30000); //bmx3 678
    
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //679
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //680
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //681
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //682
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //683
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //684
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //685
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //686
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //687
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //688
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //689
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //690
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //691
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //692
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //693
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //694
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //695
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //696
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //697
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //698
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //699
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //700
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //701
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //702
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //703
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //704
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //705
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //706
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //707
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //708
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //709
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //710
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //711
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //712
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //713
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //714
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //715
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //716
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //717
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //718
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //719
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //720
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //721
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //722
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //723
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //724
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //725
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //726
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //727
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //728
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //729
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //730
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //731
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //732
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //733
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //734
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //735
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //736
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //737
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //738
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //739
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //740
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //741
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //742
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //743
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //744
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //745
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //746
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //747
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //748
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //749
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //750
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //751
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //752
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //753
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //754
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //755
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //756
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //757
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //758
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //759
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //760
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //761
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //762
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //763
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //764
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //765
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //766
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //767
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //768
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //769
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //770
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //771
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //772
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //773
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //774
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //775
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //776
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //777
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //778
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //779
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //780
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //781
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //782
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //783
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //784
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //785
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //786
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //787
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //788
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //789
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //790
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //791
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //792
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //793
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //794
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //795
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //796
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //797
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //798
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //799
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //800
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //801
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //802
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //803
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //804
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //805
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //806
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //807
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //808
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //809
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //810
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //811
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //812
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //813
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //814
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //815
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //816
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //817
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //818
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //819
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //820
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //821
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //822
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //823
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //824
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //825
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //826
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //827
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //828
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //829
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //830
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //831
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //832
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //833
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //834
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //835
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //836
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //837
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //838
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //839
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //840
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //841
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //842
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //843
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //844
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //845
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //846
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //847
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //848
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //849
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //850
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //851
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //852
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //853
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //854
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //855
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //856
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //857
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //858
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //859
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //860
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //861
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //862
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //863
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //864
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //865
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //866
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //867
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //868
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //869
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //870
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //871
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //872
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //873
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //874
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //875
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //876
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //877
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //878
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //879
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //880
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //881
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //882
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //883
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //884
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //885
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //886
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //887
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //888
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //889
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //890
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //891
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //892
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //893
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //894
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //895
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //896
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //897
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //898
    AddStaticVehicleEx( 400,1000000.0,1000000.0,1000000.0,180.0,0,0, 30000); //899

	// ------- EL 900 PERTENECE A JEREMY AL FINAL DEL GMINIT.





	for(new hcas = 0; hcas < sizeof(HouseInfo); hcas++)
	{
		if(HouseInfo[hcas][hOwned] == 0)
		{
			AddStaticPickup(1273, 1, HouseInfo[hcas][hEntrancex], HouseInfo[hcas][hEntrancey], HouseInfo[hcas][hEntrancez]);
			format(string, sizeof(string), "[En Venta]");
			Create3DTextLabel(string, COLOR_GREEN, HouseInfo[hcas][hEntrancex],HouseInfo[hcas][hEntrancey],HouseInfo[hcas][hEntrancez]+0.75, 75, 0, COLOR_GREEN);
			pickups++;
		}
		if(HouseInfo[hcas][hOwned] == 1)
		{
		    format(string, sizeof(string), "[%s]",HouseInfo[hcas][hOwner]);
			Create3DTextLabel(string, COLOR_YELLOW, HouseInfo[hcas][hEntrancex],HouseInfo[hcas][hEntrancey],HouseInfo[hcas][hEntrancez]+0.75, 75, 0, COLOR_YELLOW);
			AddStaticPickup(1239, 1, HouseInfo[hcas][hEntrancex], HouseInfo[hcas][hEntrancey], HouseInfo[hcas][hEntrancez]);
			pickups++;
		}
	}
 	for(new hneg = 0; hneg < sizeof(BizzInfo); hneg++)
	{
		if(BizzInfo[hneg][bOwned] == 0)
		{
			AddStaticPickup(1272, 1, BizzInfo[hneg][bEntranceX], BizzInfo[hneg][bEntranceY], BizzInfo[hneg][bEntranceZ]);
			pickups++;
		}
		if(BizzInfo[hneg][bOwned] == 1)
		{
			AddStaticPickup(1239, 1, BizzInfo[hneg][bEntranceX], BizzInfo[hneg][bEntranceY], BizzInfo[hneg][bEntranceZ]);
			pickups++;
		}
	}/*
	for(new h = 0; h < sizeof(SBizzInfo); h++)
	{
		if(SBizzInfo[h][sbOwned] == 0)
		{
			AddStaticPickup(1272, 2, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]);
			pickups++;
		}
		if(SBizzInfo[h][sbOwned] == 1)
		{
			AddStaticPickup(1239, 2, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]);
			pickups++;
		}
	}*//*
	for(new i = 0; i < sizeof(BurgerDriveIn); i++)
	{
	    BurgerPickUp[i] = CreatePickup(1239, 23, BurgerDriveIn[i][0], BurgerDriveIn[i][1], BurgerDriveIn[i][2]);
		pickups++;
	}
 	for(new i = 0; i < sizeof(ChickenDriveIn); i++)
	{
	    ChickenPickUp[i] = CreatePickup(1239, 23, ChickenDriveIn[i][0], ChickenDriveIn[i][1], ChickenDriveIn[i][2]);
		pickups++;
	}*/
	/*----------------------------- BORRADOS ------------------------*/
	/*
	AddStaticPickup(1274, 1, 766.0804,14.5133,1000.7004); //Boxeador Registration
	AddStaticPickup(1274, 1, 1677.1489,-1634.3535,14.2266); //Lawyer(abogado) Registro
	AddStaticPickup(1318, 1, 2259.9106,-1019.3356,59.2949);//HQ LATIN XIV CLICKA
	format(string, sizeof(string), "[HQ]-Latina");
 	Create3DTextLabel(string, COLOR_WHITE , 2259.9106,-1019.3356,59.2949+0.75, 75, 0, COLOR_WHITE);
 	AddStaticPickup(1239, 1, 2029.5945,-1404.6426,17.2512); //Hospital 2 near speedway
 	AddStaticPickup(1239, 1, -792.9693,500.5572,1367.3672);//Waiter uniform list     //  picosteles
	AddStaticPickup(1239, 1, -779.3134,497.8989,1371.7490);//Waiter uniform list 2   //registros
	AddStaticPickup(1239, 1, 1381.0413,-1088.8511,27.3906); //Bill Board (old Job Department) //misiones
	AddStaticPickup(371, 1, 1544.2,-1353.4,329.4); //LS towertop
	AddStaticPickup(371, 1, 1536.0, -1360.0, 1150.0); //LS towertop
	AddStaticPickup(1242, 1, 1527.5,-12.1,1002.0); // binco armor
	AddStaticPickup(1240, 1, 279.3000,1853.5619,8.7649); // area51 health
	AddStaticPickup(1239, 1, 1174.9100,-1365.7330,13.9876); // Elevator 1
	AddStaticPickup(1239, 1, 1174.9591,-1369.8761,23.9736); // Elevator 2
	AddStaticPickup(1254, 1, 2146.3523,-2267.7498,14.2344); // Materials Drop Off.
	AddStaticPickup(1239, 1, 1512.33,-1459.90,9.50); //Factory
	AddStaticPickup(1239, 1, -382.6660,-1426.5121,26.2410); // Farmer job pickup
	AddStaticPickup(1318, 1, 1505.2416,-1694.5597,14.0469); //Map icon
	AddStaticPickup(1239, 1, 1752.8452,-1894.1328,13.5573); //LA Yellow Cab Co.
	AddStaticPickup(1318, 1, 203.5140,-202.2578,1.5781); //Pizza stack at BlueBerry
	AddStaticPickup(1239, 1, 1122.7406,-2037.0421,69.8942); // Chornaya Bratva HQ
	license_pu = CreatePickup(1274, 1, 2048.352,-1900.153,13.5538); // Buy Driving License
    license_pu2 = CreatePickup(1274, 1, 1588.291,-2641.629,13.54688); // Buy Flying License
    license_pu3 = CreatePickup(1274, 1, 397.2415,-1804.371,7.829849); // Buy Sailing License
    license_pu4 = CreatePickup(1274, 1, 1365.159,-1288.066,13.54688); // Buy Gun License
    license_pu5 = CreatePickup(1274, 1, 396.2429,-2074.728,7.835938); // Buy Fishing License
    AddStaticPickup(1239, 1, 1043.4530,-1028.0344,32.1016); //Fernandez tuning
    AddStaticPickup(1239, 1, 2073.2979,-1831.1228,13.5469); // Pay & Spray
    AddStaticPickup(1239, 1, 1024.9756,-1030.7930,32.0257); // Pay & Spray
    AddStaticPickup(1239, 1, 488.3819,-1733.0563,11.1752); // Pay & Spray
    AddStaticPickup(1239, 1, 719.8940,-464.8272,16.3359); // Pay & Spray
    AddStaticPickup(1239, 1, 362.1231,173.6424,1008.3828); // Legal Job Menu
    AddStaticPickup(1239, 1, 250.0484,66.2467,1003.6406); // Weapon Licenses Buyable
    AddStaticPickup(1239, 1, 1617.8572,-2325.8574,13.5469); // Infoserver aero
    AddStaticPickup(1239, 1, 2259.3706,-1795.1825,13.5469); // Infoserver barrio
    AddStaticPickup(1318, 1, 1025.8512,-2195.4097,39.1406); // matrix
    */
	/*----------------------------- Trabajos ------------------------*/
	
	/******* NORMAL ********/
	AddStaticPickup(1239, 1, 1629.2969,-1903.3669,13.5531); //Registro BARRENDERO
	AddStaticPickup(1239, 1, -381.2316,-1438.8787,25.7266); //Registro GRANJERO
	AddStaticPickup(1239, 1, 2105.4858,-1806.4725,13.5547); //Registro Rep. de Pizzas
	AddStaticPickup(1239, 1, 1815.9800,-1808.7660,3.9844); //Registro Mendigo
	AddStaticPickup(1239, 1, 2281.6797,-2364.6204,13.5469); //Camionero Registro Truck Place
	AddStaticPickup(1239, 1, 1247.9318,-1561.0044,13.5556); //Registro Comercial
	AddStaticPickup(1239, 1, 2013.2556,-1434.5009,13.5547); //Registros Repartidor Periodicos
	AddStaticPickup(1239, 1, 616.0538,-1530.2815,15.1988); //Guardaespaldas/Chofer Registro
	AddStaticPickup(1239, 1, 2025.2421,-1403.3473,17.2098); //[/paper] paper boy + news reporter
	AddStaticPickup(1239, 1, 2003.0460,-1071.8668,24.5729); // REGISTRO REPARDITOR DE DROGAS
    AddStaticPickup(1239, 1, 213.8549,-230.5761,1.7786); // materiales de amas registro
    AddStaticPickup(1239, 1, -86.1251,2.6412,3.1172); // Granjero de drogas registro  // Revisado hasta aqui por pedro Armas
    AddStaticPickup(1239, 1, 2137.6624,-2282.3455,20.6719); // Vendedor de armas registro
    AddStaticPickup(1239, 1, 2110.9067,-2078.4744,13.5544); // Basurero
	
	/******* DE HABILIDAD ********/
	AddStaticPickup(1274, 1, 1474.3314,-1862.4025,13.5469); //Detective Registro
	AddStaticPickup(1274, 1, 2450.3831,-2620.5769,13.6646); //Mozo de Almacen Registro
	AddStaticPickup(1274, 1, 816.4208,856.9929,12.7891); //Minero Registro
	AddStaticPickup(1274, 1, 965.5573,-1252.2561,16.9734); //CarJacker Registration Ladron Vehiculos
	AddStaticPickup(1274, 1, 1087.7284,-923.1658,43.3906); //Whore Prostituta Registration
 	AddStaticPickup(1274, 1, 2072.5486,-1582.8029,13.4741); // vendedor de drogas registro

	/******* DE FACCION ********/
//	AddStaticPickup(1274, 1, 1806.6814,-2068.5959,13.5598); //mecanico registro
	AddStaticPickup(1239, 1, 1139.4526,-1760.9469,13.5946); //taxista registro
	
	/*----------------------------- Entradas------------------------*/
	
	/*--------------------------------------------------------------*/
 	AddStaticPickup(1318, 1, 1463.7582,-1009.9468,26.8438); //Entrada BANCO
	AddStaticPickup(1318, 1, 2233.03271, -1159.80457, 25.89060); //Entrada Jerfferson Registro
	AddStaticPickup(1239, 1, 418.7112,-1429.3812,32.4777); //paintball Registro
	AddStaticPickup(1239, 1, 1952.8578,-2178.7393,13.5469); //Paracaidas Registro
	AddStaticPickup(1239, 1, 2367.6611,-2335.8540,13.5045); //Informacion Kart
	AddStaticPickup(1239, 1, 1680.1564,-2179.4905,13.5547); //Informacion spawn kiosko
	AddStaticPickup(1275, 1, 461.4502,-1500.7125,31.0608);//VICTIM
	format(string, sizeof(string), "[Ropa]");
 	Create3DTextLabel(string, COLOR_DARKBLUE , 461.4502,-1500.7125,31.0608+0.75, 75, 0, COLOR_DARKBLUE);
	AddStaticPickup(1275, 1, 2112.8623,-1211.4917,23.9629);//SUBURBAN
	Create3DTextLabel(string, COLOR_DARKBLUE , 2112.8623,-1211.4917,23.9629+0.75, 75, 0, COLOR_DARKBLUE);
	AddStaticPickup(1275, 1, 2244.3423,-1665.5542,15.4766);//BINCO
	Create3DTextLabel(string, COLOR_DARKBLUE , 2244.3423,-1665.5542,15.4766+0.75, 75, 0, COLOR_DARKBLUE);
	AddStaticPickup(1318, 1, 1531.1101,-1480.4646,9.5000);//HQ HITMAN
	format(string, sizeof(string), "[HQ]-Hitman");
 	Create3DTextLabel(string, COLOR_WHITE , 1531.1101,-1480.4646,9.5000+0.75, 75, 0, COLOR_WHITE);
 	
	AddStaticPickup(1318, 1, 2650.7041,-2021.8408,14.1766);//HQ Latin
	format(string, sizeof(string), "[HQ]-Latin XIV");
 	Create3DTextLabel(string, COLOR_WHITE , 2650.7041,-2021.8408,14.1766+0.75, 75, 0, COLOR_WHITE);

	AddStaticPickup(1318, 1, 954.5181,-1548.3329,13.5909);//HQ los puretas
	format(string, sizeof(string), "[HQ]-Pureta");
 	Create3DTextLabel(string, COLOR_WHITE , 954.5181,-1548.3329,13.5909+0.75, 75, 0, COLOR_WHITE);
	
	AddStaticPickup(1318, 1, 2522.7424,-2019.0098,14.0744); //sureña
	format(string, sizeof(string), "[HQ]-Sureña");
 	Create3DTextLabel(string, COLOR_WHITE , 2522.7424,-2019.0098,14.0744+0.75, 75, 0, COLOR_WHITE);
	AddStaticPickup(1318, 1, 2495.3755,-1691.1378,14.7656); //grooves
    format(string, sizeof(string), "[HQ]-Grooves");
 	Create3DTextLabel(string, COLOR_WHITE , 2495.3755,-1691.1378,14.7656+0.75, 75, 0, COLOR_WHITE);
	AddStaticPickup(1318, 1, 691.5795,-1275.9194,13.5607); // Yamaguchi HQ
    format(string, sizeof(string), "[HQ]-Japonesa");
 	Create3DTextLabel(string, COLOR_WHITE , 691.5795,-1275.9194,13.5607+0.75, 75, 0, COLOR_WHITE);
	//AddStaticPickup(1318, 1, 1030.4288,-1104.8416,23.8281); // Yamaguchi HQ aparcamiento
    //format(string, sizeof(string), "[HQ]-Japonesa");
 	//Create3DTextLabel(string, COLOR_WHITE , 1030.4288,-1104.8416,23.8281+0.75, 75, 0, COLOR_WHITE);
	AddStaticPickup(1318, 1, 1259.4446,-785.4531,92.0313); //HQ LCN
	format(string, sizeof(string), "[HQ]-Italiana");
 	Create3DTextLabel(string, COLOR_WHITE , 1259.4446,-785.4531,92.0313+0.75, 75, 0, COLOR_WHITE);

	AddStaticPickup(1318, 1, 1173.2563,-1323.3102,15.3943); //Hospital 1 near Ammu

//	AddStaticPickup(1239, 1, 253.9280,69.6094,1003.6406); //portatil policias

	//AddStaticPickup(1239, 1, 2127.8315,-1685.5144,15.0859); //North Street gang inicio
	//AddStaticPickup(1239, 1, 501.1876,-75.7067,998.7578); //Los Cobras inicio

	AddStaticPickup(1318, 1, 726.0664,-1276.1962,13.6484); //Paccinos abajo
	AddStaticPickup(1318, 1, 718.8346,-1276.3334,17.6484); //Paccinos Arriba
	//AddStaticPickup(1239, 1, 731.8565,-1276.1882,17.6484); //Paccinos Inicio

	AddStaticPickup(1318, 1, 2758.9653,-2563.7271,13.6328); //embarcacion dentro
	AddStaticPickup(1318, 1, 2758.9653,-2567.2271,13.3336); //embarcacion fuera

	AddStaticPickup(1239, 1, 253.9280,69.6094,1003.6406); //comprar licencia de armas
//	AddStaticPickup(1225, 1, 1858.6758,-1856.8193,13.5816); //comprar bombas
//	AddStaticPickup(1225, 1, 2412.7363,-1426.2356,23.9848); //comprar super bomba
 	AddStaticPickup(1239, 1, 508.3292,-85.1550,998.9609); //comprar palo de billar
	AddStaticPickup(1239, 1, 1365.9424,-1285.4685,13.5469); //comprar licencia de pesca
	AddStaticPickup(1318, 1, 1481.0206,-1771.1138,18.7958); //AYUNTAMIENTO
	format(string, sizeof(string), "[Ayuntamiento]");
 	Create3DTextLabel(string, COLOR_WHITE , 1481.0206,-1771.1138,18.7958+0.75, 75, 0, COLOR_WHITE);
 	AddStaticPickup(1318, 1, 1412.2323,-1699.8379,13.5395); //LA BOLSA
	format(string, sizeof(string), "[La Bolsa]");
 	Create3DTextLabel(string, COLOR_WHITE , 1412.2323,-1699.8379,13.5395+0.75, 75, 0, COLOR_WHITE);
//	AddStaticPickup(1318, 1, 1877.9559,-1737.0626,13.3295); //LIZZY
	AddStaticPickup(1318, 1, 2139.6777,-1191.9951,23.9922); //lavanderia
	AddStaticPickup(1239, 1, 1712.0879,-1667.4148,20.2260); //contratar habitacion hotel astrium
	AddStaticPickup(1318, 1, 2233.4695,-1333.2074,23.9815); //iglesia -2024.8579,1143.0919,18.0688
	AddStaticPickup(1318, 1, -2024.8579,1143.0919,18.0688); //iglesia -2024.8579,1143.0919,18.0688
	AddStaticPickup(1318, 1, 953.7375,-1336.2754,13.5391); //sex shop
	AddStaticPickup(1318, 1, 1726.9886,-1636.6057,20.2172); //Hotel Astrium
	format(string, sizeof(string), "[Hotel]");
 	Create3DTextLabel(string, COLOR_WHITE , 1726.9886,-1636.6057,20.2172+0.75, 75, 0, COLOR_WHITE);

	AddStaticPickup(1580, 1, 1488.6949,-1721.7136,8.2067); //Black Market   //solo se puede vender aqui mercado negro drodas y armas

	AddStaticPickup(1318, 1, 1534.1089,-1504.5645,-0.8974); //Hitman Agency paquetes

	AddStaticPickup(1239, 1, 2116.7444,-1788.4021,13.5547); // Pizza Pickup
	//AddStaticPickup(1240, 2, 263.1702,76.4346,1001.0391); // Jail health
	AddStaticPickup(1239, 1, 2041.4005,-1409.8962,17.1641); // ANUNCIOS
	
	AddStaticPickup(1240, 1, 1195.4518,-1318.9702,5.5610); // Curar heridas hospital

	AddStaticPickup(1276, 1, -38.8664,56.3031,3.1172); // Drugs for smugglers
    
	// Entrances and exits start
	AddStaticPickup(1247, 1, 1554.9537,-1675.6584,16.1953);//PD Building
 	format(string, sizeof(string), "[Comisaria]");
 	Create3DTextLabel(string, COLOR_YELLOW , 1554.9537, -1675.6584, 16.1953+0.75, 75, 0, COLOR_YELLOW);
 	//magic
 	AddStaticPickup(1318, 1, 710.8823,-569.3636,16.3359);// Gimnasio pueblo
 //	AddStaticPickup(1318, 1, 681.5640,-473.6147,16.5363);// BAR pueblo
//	AddStaticPickup(1318, 1, 1836.4064,-1682.4403,13.3493);//Alhabra
//	AddStaticPickup(1318, 1, 2310.0183,-1643.4669,14.8270);//10 green
	AddStaticPickup(1318, 1, 2229.9011,-1721.2582,13.5613);//Ganton Gimnasio
//	AddStaticPickup(1318, 1, 2421.4998,-1219.2438,25.5617);//Pig Pen
/*	AddStaticPickup(1318, 1, 2419.9941,-1509.5865,24.0000);//Cluckin bell under it
	AddStaticPickup(1318, 1, 2398.6240,-1899.2014,13.5469);//Cluckin bell next to 10 green
	AddStaticPickup(1318, 1, 810.4849,-1616.2451,13.5469);//Marina burger
	AddStaticPickup(1318, 1, 928.9110,-1352.9958,13.3438);//Cluckin above it
	AddStaticPickup(1318, 1, 1199.2477,-918.1447,43.1233);//Vinewood burger */
//	AddStaticPickup(1318, 1, 1000.5861,-919.8832,42.3281);//24/7 gas station vinewood
//	AddStaticPickup(1318, 1, 1315.4581,-897.6843,39.5781);//24/7 vinewood
	//AddStaticPickup(1318, 1, 2105.4858,-1806.4725,13.5547);//Pizzaboy entrada pizzeria
//	AddStaticPickup(1318, 1, -2441.9749,754.0135,35.1786); // 24-7 Entrance
//	AddStaticPickup(1318, 1, -25.1326,-141.0670,1003.5469); // 24-7 Exit
//	AddStaticPickup(1318, 1, 1352.1194,-1759.2534,13.5078);//24/7 Near DMV
//	AddStaticPickup(1318, 1, 1833.6124,-1842.4968,13.5781);//24/7 Near 8-Ball
	AddStaticPickup(1318, 1, 1298.7075,-798.5981,84.1406);//Madd dog crib
	AddStaticPickup(1318, 1, 1654.0651,-1655.6801,22.5156);//FBI
	AddStaticPickup(1318, 1, 1658.7308,-1691.6150,15.6094);//FBI aparcamientos
//	AddStaticPickup(1318, 1, 1038.0298,-1339.9967,13.7361);//Jim's sticky ring
	AddStaticPickup(1240, 1, 1191.0593,-1292.2404,5.5532); //Heal me curar hospital
	AddStaticPickup(1318, 1, 2034.2386,-1401.6766,17.2954); //CNN studio
	AddStaticPickup(1318, 1, 2040.8451,-1375.6740,48.7250); //CNN studio azotea
	AddStaticPickup(1318, 1, 2045.3928,-1908.0372,13.4869); //DMW
	AddStaticPickup(1318, 1, 242.7591,66.4315,1003.6406); // Inside PD elevator
	AddStaticPickup(1318, 1, 1570.3828,-1333.8882,16.4844); // Building next ABC
    AddStaticPickup(1314, 1, 1528.779,-1678.113,5.890625); //Arrest Place
    AddStaticPickup(1318, 1, 242.7591,66.4315,1003.6406); // Inside PD elevator
    AddStaticPickup(1318, 1, 1524.5724,-1677.8043,6.2188); // PD Tunnel
    AddStaticPickup(1318, 1, 1557.7257,-1675.2711,28.3955); // PD roof
    AddStaticPickup(1254, 1, 248.4994,-33.1366,1.5781); // Materials pickup
    AddStaticPickup(1254, 1, 2230.3579,-2286.2107,14.3751); // Materials bank
    AddStaticPickup(1279, 1, 2166.3376,-1671.6565,15.0740); // Get Drugs Pickup
    AddStaticPickup(1279, 1, 1424.1729,-1317.9955,13.5547); // Get Drugs Pickup 2
    AddStaticPickup(1239, 1, 1490.3195,1305.6976,1093.2964); // Licenses Menu
    //AddStaticPickup(1578, 1, 1959.3073,-1560.7618,13.5966); // casa de la droga mercado verde
    AddStaticPickup(1579, 1, 721.0230,-1256.1627,17.6484); // casa de las armas mercado azul yakuza
    AddStaticPickup(1579, 1, 1259.5947,-812.6199,84.1406); // casa de las armas mercado azul lcn
    AddStaticPickup(1579, 1, 1527.1671,-1465.8501,9.5000); // casa de las armas mercado azul hitman
    AddStaticPickup(1579, 1, 905.4366,-1555.3862,-67.3664); // casa de las armas mercado azul pureta
   // AddStaticPickup(1550, 1, 917.2028,-1561.3309,-67.3726); // misiones pvp
    AddStaticPickup(1239, 1, 375.9471,-2068.9353,7.8359); // Lonja de pescados
    AddStaticPickup(1239, 1, 360.1306,-2031.7942,7.8359); // licencia pescados
    AddStaticPickup(2710, 1, 1128.5636,-1448.0800,15.7969); // premiums
    AddStaticPickup(1239, 1, 2309.4746,-8.3682,26.7422); // Banco loterias
    AddStaticPickup(1239, 1, 2035.8124,-1388.7933,3.5369); // Camara robada
    AddStaticPickup(1239, 1, 241.6441,-1779.5565,4.1982); // futbol playa
    AddStaticPickup(1239, 1, 1787.1556,-1027.6527,23.9609); // concesionarios
    AddStaticPickup(1239, 1, 1729.3479,-1063.2372,23.9408); // concesionarios
    AddStaticPickup(1239, 1, 1621.6649,-1041.4888,23.8984); // concesionarios
    AddStaticPickup(1239, 1, 1654.6140,-1074.7848,23.8984); // concesionarios
    AddStaticPickup(1239, 1, 1810.9708,-1883.0990,13.5839); // concesionarios
    AddStaticPickup(1239, 1, 1596.2415,-2156.9119,13.5551); // concesionarios
    AddStaticPickup(1239, 1, 1327.4027,-2605.4287,13.5732); // concesionarios
    AddStaticPickup(1239, 1, 352.1752,-1795.9072,5.1390); // concesionarios
    AddStaticPickup(1239, 1, 217.5138,-1441.6497,13.2043); // concesionarios
    AddStaticPickup(1239, 1, 340.9066,-1365.6089,14.5078); // concesionarios
    AddStaticPickup(1239, 1, 561.2496,-1255.0045,17.2422); // concesionarios
    AddStaticPickup(1239, 1, 2131.8362,-1150.7549,24.1228); // concesionarios
    AddStaticPickup(1239, 1, 1016.9240,-1358.0116,13.3787); // concesionarios

	pickups=pickups+71;
	printf("Cargando %d pickups... Cargados satisfactoriamente !",pickups);
	//--------PARADAS DE BUS
	/*format(string, sizeof(string), "[Parada de BUS]");
 	Create3DTextLabel(string, COLOR_LIGHTBLUE, 1777.4286,-1929.7394,13.5199+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA1
 	Create3DTextLabel(string, COLOR_LIGHTBLUE, 1872.2799,-1757.1375,13.5977+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA2
 	Create3DTextLabel(string, COLOR_LIGHTBLUE, 2117.9448,-1523.1733,23.9966+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA3
 	Create3DTextLabel(string, COLOR_LIGHTBLUE, 2021.1274,-1255.6528,24.0349+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA4
 	Create3DTextLabel(string, COLOR_LIGHTBLUE, 1573.5762,-1292.7869,17.4000+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA5
	Create3DTextLabel(string, COLOR_LIGHTBLUE, 1362.8984,-1325.7473,13.6042+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA6
	Create3DTextLabel(string, COLOR_LIGHTBLUE, 968.1722,-1102.9640,23.9129+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA7
	Create3DTextLabel(string, COLOR_LIGHTBLUE, 1001.2455,-942.0004,42.2123+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA8
	Create3DTextLabel(string, COLOR_LIGHTBLUE, 1498.5297,-768.1207,85.3263+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA9
	Create3DTextLabel(string, COLOR_LIGHTBLUE, 943.5641,-819.4824,95.8693+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA10
	Create3DTextLabel(string, COLOR_LIGHTBLUE, 478.6757,-1211.7025,47.0982+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA11
	Create3DTextLabel(string, COLOR_LIGHTBLUE, 329.9596,-1253.6475,63.3103+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA12
	Create3DTextLabel(string, COLOR_LIGHTBLUE, 351.2425,-1721.5178,6.8849+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA13
	Create3DTextLabel(string, COLOR_LIGHTBLUE, 1178.9178,-1857.0005,13.6088+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA14
	Create3DTextLabel(string, COLOR_LIGHTBLUE, 1816.7662,-1766.7380,13.6004+0.75, 75, 0, COLOR_LIGHTBLUE); // PARADA15*/
	//----------------------
	new randa = random(sizeof(RandCars));
	randa = random(sizeof(RandCars));carselect[0] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[1] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[2] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[3] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[4] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[5] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[6] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[7] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[8] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[9] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[10] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[11] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[12] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[13] = RandCars[randa][0];
	randa = random(sizeof(RandLCars));carselect[14] = RandLCars[randa][0];
	if (realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour);
	}
	hackchecktimer = SetTimer("GlobalHackCheck", 1000, 1); // tus muertos
	desctimer = SetTimer("GlobalDescCheck", 120000, 1); // 2 minutos
	synctimer = SetTimer("SyncUp", 60000, 1);
	unjailtimer = SetTimer("SetPlayerUnjail", 1000, 1);
	othtimer = SetTimer("OtherTimer", 1000, 1);
	cartimer = SetTimer("CarCheck", 30000, 1);
	pickuptimer = SetTimer("CustomPickups", 1000, 1);
	spectatetimer = SetTimer("Spectator", 2000, 1);
	idletimer = SetTimer("IdleKick", idletime, 1);
	productiontimer = SetTimer("Production", 300000, 1); //5 mins (300000)
	hambre = SetTimer("darhambre", 300000, 1); //5 mins (300000)
	accountstimer = SetTimer("SaveAccounts", 900000, 1); //15 mins every account saved
	checkgastimer = SetTimer("CheckGas", RunOutTime, 1);
    stoppedvehtimer = SetTimer("StoppedVehicle", RunOutTime, 1);
    checkcarhealthtimer = SetTimer("CheckCarHealth", 10000, 1);
   // burgertimer = SetTimer("UpdateBurgerPositions", 1000, 1);
	//chickentimer = SetTimer("UpdateChickenPositions", 1000, 1);
	tracetimer = SetTimer("TraceLastCall", 300000, 1);
    //updateplayerpos = SetTimer("UpdatePlayerPosition", 3000, 1);
	//for(new i = 0; i < sizeof(CarSpawns); i++)
/*	for(new i = 0; i < 165; i++)
	{
		AddCar(i);
	}
	CarInit();*/
	
	//-------- ZONAS DE bandas GANG ZONES
	/*
	new buszonewest;
	new buszoneeast;
	buszonewest = GangZoneCreate(1722.3599, 2901.8652, -2694.5417, -904.3515); // West Bus Route Zone
	GangZoneShowForAll(buszonewest, 0x9EC73DAA);
	buszoneeast = GangZoneCreate(127.4722, 1722.3599, -2694.5417, -904.3515);  // East Bus Route Zone
	GangZoneShowForAll(buszoneeast, 0x9EC7FD22);
	*/
	
    /*ConnectNPC("Jeremy","LSBus_1");

    LS_BUS_VEHICLE = CreateVehicle(437,1777.3445,-1929.6823,13.5199,358.8741,5,1, 5000);
*/
	ServerMoneyInit();
	return GMInit();
	//return 1;
}

public SyncUp()
{
	SyncTime();
	DollahScoreUpdate();
}

public SyncTime()
{
	//new string[64];
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		/*format(string, sizeof(string), "SERVER: The time is now %d:00 hours",tmphour);
		BroadCast(COLOR_WHITE,string);*/
		ghour = tmphour;
		PayDay();
	//	EconomyInfo[eArcas] += 10000;
		if (realtime)
		{
			SetWorldTime(tmphour);
		}
	}
}

public SaveAccounts()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			OnPlayerUpdate(i);
			if(PlayerInfo[i][pJob] > 0)
	    	{
	    	    if(PlayerInfo[i][pContractTime] < 25)
	    	    {
					PlayerInfo[i][pContractTime] ++;
				}
	    	}
		}
	}
}



public darhambre()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
            new Float:health;
		    GetPlayerHealth(i, health);
			SetPlayerHealth(i, health - 5.0);
		}
	}
}

public IsPlayerInTurf(playerid, turfid)
{
	if(IsPlayerConnected(playerid))
	{
		if(turfid == -1)
		{
			return 0;
		}
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY])
		{
	 		return 1;
		}
	}
	return 0;
}

public GetClosestPlayer(p1)
{
	new x,Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}

public Production()
{
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFishes] >= 5) { if(FishCount[i] >= 3) { PlayerInfo[i][pFishes] = 0; } else { FishCount[i] += 1; } }
		    if(PlayerDrunk[i] > 0) { PlayerDrunk[i] = 0; PlayerDrunkTime[i] = 0; GameTextForPlayer(i, "~p~Borrachera~n~~w~Se paso el efecto", 3500, 1); }
		    if(PlayerInfo[i][pPayDay] < 6) { PlayerInfo[i][pPayDay] += 1; } //+ 5 min to PayDay anti-abuse
		    for(new k = 0; k < MAX_PLAYERS; k++)
			{
				if(IsPlayerConnected(k))
				{
				    if(gTeam[k] == 2 && CrimInRange(80.0, i,k))
				    {
					}
					else
					{
					    WantedPoints[i] -= 3;
					    if(WantedPoints[i] < 0) { WantedPoints[i] = 0; }
					    new points = WantedPoints[i];
					    new wlevel;
					    if(points > 0)
						{
						    new yesno;
							if(points == 3) { if(WantedLevel[i] != 1) { WantedLevel[i] = 1; wlevel = 1; yesno = 1; } }
							else if(points >= 4 && points <= 5) { if(WantedLevel[i] != 2) { WantedLevel[i] = 2; wlevel = 2; yesno = 1; } }
							else if(points >= 6 && points <= 7) { if(WantedLevel[i] != 3) { WantedLevel[i] = 3; wlevel = 3; yesno = 1; } }
							else if(points >= 8 && points <= 9) { if(WantedLevel[i] != 4) { WantedLevel[i] = 4; wlevel = 4; yesno = 1; } }
							else if(points >= 10 && points <= 11) { if(WantedLevel[i] != 5) { WantedLevel[i] = 5; wlevel = 5; yesno = 1; } }
							else if(points >= 12 && points <= 13) { if(WantedLevel[i] != 6) { WantedLevel[i] = 6; wlevel = 6; yesno = 1; } }
							else if(points >= 14) { if(WantedLevel[i] != 10) { WantedLevel[i] = 10; wlevel = 10; yesno = 1; } }
							else if(points <= 0) { if(WantedLevel[i] != 0) { ClearCrime(i); WantedLevel[i] = 0; wlevel = 0; yesno = 1;} }
							if(yesno)
							{
								format(string, sizeof(string), "Nivel de Busqueda: %d", wlevel);
								SendClientMessage(i, COLOR_YELLOW, string);
							}
						}
					}
				}
			}
		}
	}
}

public DateProp(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if (strcmp(playername, HouseInfo[h][hOwner], true) == 0)
		{
			HouseInfo[h][hDate] = curdate;
			OnPropUpdate();
		}
	}
	return 1;
}

public Checkprop()
{
	new olddate;
	new string[256];
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] > 9)
		{
			olddate = HouseInfo[h][hDate];
			if(curdate-olddate >= 5)
			{
				HouseInfo[h][hHel] = 0;
				HouseInfo[h][hArm] = 0;
				HouseInfo[h][hHealthx] = 0;
				HouseInfo[h][hHealthy] = 0;
				HouseInfo[h][hHealthz] = 0;
				HouseInfo[h][hArmourx] = 0;
				HouseInfo[h][hArmoury] = 0;
				HouseInfo[h][hArmourz] = 0;
				HouseInfo[h][hLock] = 1;
				HouseInfo[h][hOwned] = 0;
				HouseInfo[h][hVec] = 418;
				HouseInfo[h][hVcol1] = -1;
				HouseInfo[h][hVcol2] = -1;
				strmid(HouseInfo[h][hOwner], "The State", 0, strlen("The State"), 255);
				format(string, sizeof(string), "ATENCION: Una casa nueva esta en venta, precio: $%d",HouseInfo[h][hValue]);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
				
				OnPropUpdate();
			}
		}
	}
	return 1;
}

public PayDay()
{
	new string[128];
	new account,interest;
	new tribute = 0;
	new rent = 0;
	new hotel = 0;
	new premium = 0;
	new lider = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
        new antiguob = PlayerInfo[i][pAccount];
		if(IsPlayerConnected(i))
		//SetTimerEx("Loteria901", 120000, false, "i", i);
		{
		    if(PlayerInfo[i][pLevel] > 0)
		    {
			    if(MoneyMessage[i]==1)
				{
				    SendClientMessage(i, COLOR_LIGHTRED, "Ha sido encerrado por no pagar tus deudas.");
				    GameTextForPlayer(i, "~r~Busted!", 2000, 1);
				    SetPlayerInterior(i, 6);
				    PlayerInfo[i][pInt] = 6;
			   		SetPlayerPos(i, 264.6288,77.5742,1001.0391);
		            PlayerInfo[i][pJailed] = 1;
		            SafeResetPlayerWeapons(i);
		            SafeResetPlayerMoney(i);
					WantedPoints[i] = 0;
					PlayerInfo[i][pJailTime] = 240;
					format(string, sizeof(string), "Encerrado por %d segundos.   Derechos: No se permiten abogados", PlayerInfo[i][pJailTime]);
					SendClientMessage(i, COLOR_WHITE, string);
				}
				new playername2[MAX_PLAYER_NAME];
				GetPlayerName(i, playername2, sizeof(playername2));
				account = PlayerInfo[i][pAccount];
				new key = PlayerInfo[i][pPhousekey];
				if(key != 255)
				{
					rent = HouseInfo[key][hRent];
					if(strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
					{
						rent = 0;
					}
					else if(rent > GetPlayerMoney(i))
					{
						PlayerInfo[i][pPhousekey] = 255;
						SendClientMessage(i, COLOR_WHITE, "You have been evicted.");
						rent = 0;
					}
					HouseInfo[key][hTakings] = HouseInfo[key][hTakings]+rent;
				}
				new tmpintrate;
				if (key != 255 && strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
				{
				    if(PlayerInfo[i][pDonateRank] == 1) { tmpintrate = intrate+4; }
					else { tmpintrate = intrate+2; }//HouseInfo[key][hLevel]
				}
				else
				{
				    if(PlayerInfo[i][pDonateRank] == 1) { tmpintrate = 9; }
					else { tmpintrate = 3; }
				}
				if(PlayerInfo[i][pPayDay] >= 5)
				{
				    Tax += TaxValue;//Should work for every player online
				    PlayerInfo[i][pAccount] -= TaxValue;
					new checks = (PlayerInfo[i][pLevel]*100)+500;
					/*if(PlayerInfo[i][pDonateRank] == 1)
					{
					    new bonus = PlayerInfo[i][pPayCheck] / 10;
					    checks += bonus;
					}*/
				    new ebill = (PlayerInfo[i][pAccount]/10000)*(PlayerInfo[i][pLevel]);
				    //ConsumingMoney[i] = 1;
				    //SafeGivePlayerMoney(i, checks);
				    account += (PlayerInfo[i][pLevel]*100)+500;
				    if(PlayerInfo[i][pAccount] > 0)
				    {
				    	PlayerInfo[i][pAccount] -= ebill;
				    	SBizzInfo[4][sbTill] += ebill;
					}
					else
					{
					    ebill = 0;
					}
					interest = (PlayerInfo[i][pAccount]/1000)*(tmpintrate);
					PlayerInfo[i][pExp]++;
					PlayerPlayMusic(i);
					if(PlayerInfo[i][pDonateRank] == 1)
					{
                        account += 500;
                        premium = 500;
					}
					if(PlayerInfo[i][pLeader] > 0)
					{
                        lider = 2500;
					}
                    if (PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2 || PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3
                    || PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4 || PlayerInfo[i][pMember] == 9
                    || PlayerInfo[i][pLeader] == 9 || PlayerInfo[i][pMember] == 10 || PlayerInfo[i][pLeader] == 10 || PlayerInfo[i][pMember] == 13
                    || PlayerInfo[i][pLeader] == 13 || PlayerInfo[i][pMember] == 19 || PlayerInfo[i][pLeader] == 19)
					{
	             		tribute = 500;
		            }
                    if (PlayerInfo[i][pOrigin] == 5)
					{
	             		hotel = 100;
		            }
					PlayerInfo[i][pAccount] = account+interest+tribute+lider-hotel;
					SendClientMessage(i, COLOR_GREEN, "|___ PAGA POR HORA JUGADA ___|");
					format(string, sizeof(string), "  Paga diaria: $%d   El Estado: $%d", checks, tribute);
					SendClientMessage(i, COLOR_WHITE, string);
					if(PlayerInfo[i][pPhousekey] != 255 || PlayerInfo[i][pPbiskey] != 255)
					{
					    format(string, sizeof(string), "  Electricidad: -$%d", ebill);
						SendClientMessage(i, COLOR_GRAD1, string);
					}
					if(PlayerInfo[i][pDonateRank] == 1)
					{
                        format(string, sizeof(string), "  Bonus por Cuenta Premium: $%d",  premium);
                        SendClientMessage(i, COLOR_WHITE, string);
					}
					if(PlayerInfo[i][pLeader] > 0)
					{
                        format(string, sizeof(string), "  Bonus Lider Faccion: $%d",  lider);
                        SendClientMessage(i, COLOR_WHITE, string);
					}
					if(PlayerInfo[i][pOrigin] == 5)
					{
                        format(string, sizeof(string), "  Habitacion Hotel: -$%d",  hotel);
                        SendClientMessage(i, COLOR_WHITE, string);
					}
					format(string, sizeof(string), "  Balance: $%d", antiguob);
					SendClientMessage(i, COLOR_WHITE, string);
					format(string, sizeof(string), "  Intereses: 0.%d porciento",tmpintrate);
					SendClientMessage(i, COLOR_GRAD2, string);
					format(string, sizeof(string), "  Intereses Ganados $%d", interest);
					SendClientMessage(i, COLOR_GRAD3, string);
					SendClientMessage(i, COLOR_GREEN, "|--------------------------------------|");
					format(string, sizeof(string), "  Nuevo Balance: $%d", PlayerInfo[i][pAccount]);
					SendClientMessage(i, COLOR_GRAD5, string);
					format(string, sizeof(string), "  Alquiler: -$%d", rent);
					SendClientMessage(i, COLOR_GRAD5, string);
					format(string, sizeof(string), "~y~Paga Diaria~n~~w~Revisa tu cuenta");
					GameTextForPlayer(i, string, 5000, 1);
					rent = 0;
					hotel = 0;
					tribute = 0;
					lider = 0;
					premium = 0;
					PlayerInfo[i][pPayDay] = 0;
					PlayerInfo[i][pPayCheck] = 0;
					PlayerInfo[i][pConnectTime] += 1;
					if(FarmerVar[i] == 0)
					{
						FarmerPickup[i][0] = 0;
					}
					if(PlayerInfo[i][pDonateRank] == 1)
					{
						PlayerInfo[i][pExp] += 1;
					}
					if(PlayerInfo[i][pLeader] > 0)
					{
						PlayerInfo[i][pExp] += 1;
					}
					if(DrugFarmerVar[i] == 0)
					{
						DrugFarmerPickup[i][0] = 0;
					}
					if(SmugglerWork[i] == 0)
					{
						PayDaySecure[i] = 0;
					}
					if(PlayerInfo[i][pDonateRank] == 1)
					{
					    PlayerInfo[i][pPayDayHad] += 1;
					    if(PlayerInfo[i][pPayDayHad] >= 5)
					    {
					        PlayerInfo[i][pExp]++;
					        PlayerInfo[i][pPayDayHad] = 0;
					    }
					}
				}
				else
				{
				    SendClientMessage(i, COLOR_WHITE, "* Tu no has jugado lo suficiente para obtener la paga diaria.");
				}
			}
		}
	}
	//----------------LOTERIA DIARIA

	/*format(string, sizeof(string), "______________|Loteria Diaria|______________");
	OOCOff(COLOR_DBLUE, string);
	new rand = random(80);
	if(rand < 77) { rand += 3; }
	Lotto(rand);*/
	SaveAccounts();
	Checkprop();
	return 1;
}
strtok(const string[], &index) // Que coño es esto?
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

public OnPlayerRegister(playerid, password[])
{
    if(IsPlayerNPC(playerid)) return 1;
	if(IsPlayerConnected(playerid))
	{
			new string3[64];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "users/%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile)
			{
			    strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
			    new var[64];
				format(var, 64, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
				format(var, 64, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 64, "Ultima-IP=%s\n",PlayerInfo[playerid][pIp]);fwrite(hFile, var);
				format(var, 64, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 64, "Asistente=%d\n",PlayerInfo[playerid][pAsistente]);fwrite(hFile, var);
				format(var, 64, "Cazachetos=%d\n",PlayerInfo[playerid][pCazachetos]);fwrite(hFile, var);
				format(var, 64, "Vigilante=%d\n",PlayerInfo[playerid][pVigilante]);fwrite(hFile, var);
				format(var, 64, "Mapper=%d\n",PlayerInfo[playerid][pMapper]);fwrite(hFile, var);
				format(var, 64, "Eventor=%d\n",PlayerInfo[playerid][pEventor]);fwrite(hFile, var);
				format(var, 64, "Moderador=%d\n",PlayerInfo[playerid][pModerador]);fwrite(hFile, var);
				format(var, 64, "Scripter=%d\n",PlayerInfo[playerid][pScripter]);fwrite(hFile, var);
				format(var, 64, "Administrador=%d\n",PlayerInfo[playerid][pAdministrador]);fwrite(hFile, var);
				format(var, 64, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 64, "UpgradePoints=%d\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
				format(var, 64, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 64, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 64, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 64, "Age=%d\n",PlayerInfo[playerid][pAge]);fwrite(hFile, var);
				format(var, 64, "Origin=%d\n",PlayerInfo[playerid][pOrigin]);fwrite(hFile, var);
				format(var, 64, "CK=%d\n",PlayerInfo[playerid][pCK]);fwrite(hFile, var);
				format(var, 64, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 64, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 64, "Money=%d\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
				format(var, 64, "Bank=%d\n",PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
				format(var, 64, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 64, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 64, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 64, "Arrested=%d\n",PlayerInfo[playerid][pArrested]);fwrite(hFile, var);
				format(var, 64, "WantedDeaths=%d\n",PlayerInfo[playerid][pWantedDeaths]);fwrite(hFile, var);
				format(var, 64, "Phonebook=%d\n",PlayerInfo[playerid][pPhoneBook]);fwrite(hFile, var);
				format(var, 64, "LottoNr=%d\n",PlayerInfo[playerid][pLottoNr]);fwrite(hFile, var);
				format(var, 64, "Fishes=%d\n",PlayerInfo[playerid][pFishes]);fwrite(hFile, var);
				format(var, 64, "BiggestFish=%d\n",PlayerInfo[playerid][pBiggestFish]);fwrite(hFile, var);
				format(var, 64, "Job=%d\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
				format(var, 64, "Paycheck=%d\n",PlayerInfo[playerid][pPayCheck]);fwrite(hFile, var);
				format(var, 64, "HeadValue=%d\n",PlayerInfo[playerid][pHeadValue]);fwrite(hFile, var);
				format(var, 64, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 64, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 64, "Materials=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 64, "Drugs=%d\n",PlayerInfo[playerid][pDrugs]);fwrite(hFile, var);
				format(var, 64, "Leader=%d\n",PlayerInfo[playerid][pLeader]);fwrite(hFile, var);
				format(var, 64, "Member=%d\n",PlayerInfo[playerid][pMember]);fwrite(hFile, var);
				format(var, 64, "FMember=%d\n",PlayerInfo[playerid][pFMember]);fwrite(hFile, var);
				format(var, 64, "Rank=%d\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
				format(var, 64, "Char=%d\n",PlayerInfo[playerid][pChar]);fwrite(hFile, var);
				format(var, 64, "ContractTime=%d\n",PlayerInfo[playerid][pContractTime]);fwrite(hFile, var);
				format(var, 64, "DetSkill=%d\n",PlayerInfo[playerid][pDetSkill]);fwrite(hFile, var);
				format(var, 64, "SexSkill=%d\n",PlayerInfo[playerid][pSexSkill]);fwrite(hFile, var);
				format(var, 64, "BoxSkill=%d\n",PlayerInfo[playerid][pBoxSkill]);fwrite(hFile, var);
				format(var, 64, "LawSkill=%d\n",PlayerInfo[playerid][pLawSkill]);fwrite(hFile, var);
				format(var, 64, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 64, "JackSkill=%d\n",PlayerInfo[playerid][pJackSkill]);fwrite(hFile, var);
				format(var, 64, "CarSkill=%d\n",PlayerInfo[playerid][pCarSkill]);fwrite(hFile, var);
				format(var, 64, "NewsSkill=%d\n",PlayerInfo[playerid][pNewsSkill]);fwrite(hFile, var);
				format(var, 64, "DrugsSkill=%d\n",PlayerInfo[playerid][pDrugsSkill]);fwrite(hFile, var);
				format(var, 64, "CookSkill=%d\n",PlayerInfo[playerid][pCookSkill]);fwrite(hFile, var);
				format(var, 64, "FishSkill=%d\n",PlayerInfo[playerid][pFishSkill]);fwrite(hFile, var);
				format(var, 64, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
	            GetPlayerHealth(playerid,PlayerInfo[playerid][pHealth]);
				format(var, 64, "pHealth=%.1f\n",PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
				format(var, 64, "Int=%d\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
				format(var, 64, "Local=%d\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
				format(var, 64, "Team=%d\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
				format(var, 64, "Model=%d\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
				format(var, 64, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 64, "Car=%d\n",PlayerInfo[playerid][pPcarkey]);fwrite(hFile, var);
				format(var, 64, "Car2=%d\n",PlayerInfo[playerid][pPcarkey2]);fwrite(hFile, var);
				format(var, 64, "Car3=%d\n",PlayerInfo[playerid][pPcarkey3]);fwrite(hFile, var);
				format(var, 64, "Car4=%d\n",PlayerInfo[playerid][pPcarkey4]);fwrite(hFile, var);
				format(var, 64, "Car5=%d\n",PlayerInfo[playerid][pPcarkey5]);fwrite(hFile, var);
				format(var, 64, "Car6=%d\n",PlayerInfo[playerid][pPcarkey6]);fwrite(hFile, var);
				format(var, 64, "Car7=%d\n",PlayerInfo[playerid][pPcarkey7]);fwrite(hFile, var);
				format(var, 64, "Car8=%d\n",PlayerInfo[playerid][pPcarkey8]);fwrite(hFile, var);
				format(var, 64, "Car9=%d\n",PlayerInfo[playerid][pPcarkey9]);fwrite(hFile, var);
				format(var, 64, "Car10=%d\n",PlayerInfo[playerid][pPcarkey10]);fwrite(hFile, var);
				format(var, 64, "House=%d\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
				format(var, 64, "Bizz=%d\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
				if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
				{
				    PlayerInfo[playerid][pPos_x] = 1684.9;
					PlayerInfo[playerid][pPos_y] = -2244.5;
					PlayerInfo[playerid][pPos_z] = 13.5;
				}
				if(Spectate[playerid] != 255)
				{
					PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
					PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
					PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
					PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
					PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				}
				format(var, 64, "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 64, "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 64, "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 64, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
                format(var, 64, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
				format(var, 64, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 64, "FishLic=%d\n",PlayerInfo[playerid][pFishLic]);fwrite(hFile, var);
				format(var, 64, "GunLic1=%d\n",PlayerInfo[playerid][pGunLic1]);fwrite(hFile, var);
				format(var, 64, "GunLic2=%d\n",PlayerInfo[playerid][pGunLic2]);fwrite(hFile, var);
				format(var, 64, "Gun1=%d\n",PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
				format(var, 64, "Gun2=%d\n",PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
				format(var, 64, "Gun3=%d\n",PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
				format(var, 64, "Gun4=%d\n",PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
				format(var, 64, "Ammo1=%d\n",PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
				format(var, 64, "Ammo2=%d\n",PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
				format(var, 64, "Ammo3=%d\n",PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
				format(var, 64, "Ammo4=%d\n",PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
				format(var, 64, "CarTime=%d\n",PlayerInfo[playerid][pCarTime]);fwrite(hFile, var);
				format(var, 64, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 64, "PayDayHad=%d\n",PlayerInfo[playerid][pPayDayHad]);fwrite(hFile, var);
				format(var, 64, "CDPlayer=%d\n",PlayerInfo[playerid][pCDPlayer]);fwrite(hFile, var);
				format(var, 64, "Watch=%d\n",PlayerInfo[playerid][pWatch]);fwrite(hFile, var);
				format(var, 64, "Crashed=%d\n",PlayerInfo[playerid][pCrashed]);fwrite(hFile, var);
				format(var, 64, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 64, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 64, "AlcoholPerk=%d\n",PlayerInfo[playerid][pAlcoholPerk]);fwrite(hFile, var);
				format(var, 64, "DrugPerk=%d\n",PlayerInfo[playerid][pDrugPerk]);fwrite(hFile, var);
				format(var, 64, "MiserPerk=%d\n",PlayerInfo[playerid][pMiserPerk]);fwrite(hFile, var);
				format(var, 64, "PainPerk=%d\n",PlayerInfo[playerid][pPainPerk]);fwrite(hFile, var);
				format(var, 64, "TraderPerk=%d\n",PlayerInfo[playerid][pTraderPerk]);fwrite(hFile, var);
				format(var, 64, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 64, "Mission=%d\n",PlayerInfo[playerid][pMissionNr]);fwrite(hFile, var);
				format(var, 64, "Warnings=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				format(var, 64, "VirWorld=%d\n",PlayerInfo[playerid][pVirWorld]);fwrite(hFile, var);
				format(var, 64, "Fuel=%d\n",PlayerInfo[playerid][pFuel]);fwrite(hFile, var);
				format(var, 64, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 64, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 64, "FishTool=%d\n",PlayerInfo[playerid][pFishTool]);fwrite(hFile, var);
    			format(var, 64, "Note1=%s\n",PlayerInfo[playerid][pNote1]);fwrite(hFile, var);
				format(var, 64, "Note1s=%d\n",PlayerInfo[playerid][pNote1s]);fwrite(hFile, var);
				format(var, 64, "Note2=%s\n",PlayerInfo[playerid][pNote2]);fwrite(hFile, var);
				format(var, 64, "Note2s=%d\n",PlayerInfo[playerid][pNote2s]);fwrite(hFile, var);
				format(var, 64, "Note3=%s\n",PlayerInfo[playerid][pNote3]);fwrite(hFile, var);
				format(var, 64, "Note3s=%d\n",PlayerInfo[playerid][pNote3s]);fwrite(hFile, var);
				format(var, 64, "Note4=%s\n",PlayerInfo[playerid][pNote4]);fwrite(hFile, var);
				format(var, 64, "Note4s=%d\n",PlayerInfo[playerid][pNote4s]);fwrite(hFile, var);
				format(var, 64, "Note5=%s\n",PlayerInfo[playerid][pNote5]);fwrite(hFile, var);
				format(var, 64, "Note5s=%d\n",PlayerInfo[playerid][pNote5s]);fwrite(hFile, var);
    			format(var, 64, "tatu1=%s\n",PlayerInfo[playerid][ptatu1]);fwrite(hFile, var);
				format(var, 64, "tatu1s=%d\n",PlayerInfo[playerid][ptatu1s]);fwrite(hFile, var);
				format(var, 64, "tatu2=%s\n",PlayerInfo[playerid][ptatu2]);fwrite(hFile, var);
				format(var, 64, "tatu2s=%d\n",PlayerInfo[playerid][ptatu2s]);fwrite(hFile, var);
				format(var, 64, "tatu3=%s\n",PlayerInfo[playerid][ptatu3]);fwrite(hFile, var);
				format(var, 64, "tatu3s=%d\n",PlayerInfo[playerid][ptatu3s]);fwrite(hFile, var);
				format(var, 64, "tatu4=%s\n",PlayerInfo[playerid][ptatu4]);fwrite(hFile, var);
				format(var, 64, "tatu4s=%d\n",PlayerInfo[playerid][ptatu4s]);fwrite(hFile, var);
				format(var, 64, "tatu5=%s\n",PlayerInfo[playerid][ptatu5]);fwrite(hFile, var);
				format(var, 64, "tatu5s=%d\n",PlayerInfo[playerid][ptatu5s]);fwrite(hFile, var);
				format(var, 64, "InvWeapon=%d\n",PlayerInfo[playerid][pInvWeapon]);fwrite(hFile, var);
				format(var, 64, "InvAmmo=%d\n",PlayerInfo[playerid][pInvAmmo]);fwrite(hFile, var);
				format(var, 64, "Lighter=%d\n",PlayerInfo[playerid][pLighter]);fwrite(hFile, var);
				format(var, 64, "Cigarettes=%d\n",PlayerInfo[playerid][pCigarettes]);fwrite(hFile, var);
				format(var, 64, "Mascara=%d\n",PlayerInfo[playerid][pMask]);fwrite(hFile, var);
				format(var, 64, "BombaTermica=%d\n",PlayerInfo[playerid][pThermal]);fwrite(hFile, var);
				format(var, 64, "Bono1=%d\n",PlayerInfo[playerid][pbono1]);fwrite(hFile, var);
				format(var, 64, "Bono2=%d\n",PlayerInfo[playerid][pbono2]);fwrite(hFile, var);
				format(var, 64, "Bono3=%d\n",PlayerInfo[playerid][pbono3]);fwrite(hFile, var);
				format(var, 64, "Bono4=%d\n",PlayerInfo[playerid][pbono4]);fwrite(hFile, var);
				format(var, 64, "Bono5=%d\n",PlayerInfo[playerid][pbono5]);fwrite(hFile, var);
				format(var, 64, "Bono6=%d\n",PlayerInfo[playerid][pbono6]);fwrite(hFile, var);
				format(var, 64, "Bono7=%d\n",PlayerInfo[playerid][pbono7]);fwrite(hFile, var);
				format(var, 64, "Bono8=%d\n",PlayerInfo[playerid][pbono8]);fwrite(hFile, var);
				format(var, 64, "Bono9=%d\n",PlayerInfo[playerid][pbono9]);fwrite(hFile, var);
				format(var, 64, "Bono10=%d\n",PlayerInfo[playerid][pbono10]);fwrite(hFile, var);
				format(var, 64, "Bono11=%d\n",PlayerInfo[playerid][pbono11]);fwrite(hFile, var);
				format(var, 64, "Bono12=%d\n",PlayerInfo[playerid][pbono12]);fwrite(hFile, var);
				format(var, 64, "Bono13=%d\n",PlayerInfo[playerid][pbono13]);fwrite(hFile, var);
				format(var, 64, "Bono14=%d\n",PlayerInfo[playerid][pbono14]);fwrite(hFile, var);
				format(var, 64, "Bono15=%d\n",PlayerInfo[playerid][pbono15]);fwrite(hFile, var);
				format(var, 64, "Bono16=%d\n",PlayerInfo[playerid][pbono16]);fwrite(hFile, var);
				format(var, 64, "Bono17=%d\n",PlayerInfo[playerid][pbono17]);fwrite(hFile, var);
				format(var, 64, "Bono18=%d\n",PlayerInfo[playerid][pbono18]);fwrite(hFile, var);
				format(var, 64, "Bono19=%d\n",PlayerInfo[playerid][pbono19]);fwrite(hFile, var);
				format(var, 64, "Bono20=%d\n",PlayerInfo[playerid][pbono20]);fwrite(hFile, var);
				format(var, 64, "Locked=%d\n",PlayerInfo[playerid][pLocked]);fwrite(hFile, var);
                format(var, 64, "Casco=%d\n",PlayerInfo[playerid][pCasco]);fwrite(hFile, var); //casco
//sistema poker
				format(var, 64, "Cards=%d\n",PlayerInfo[playerid][pCards]);fwrite(hFile, var);
				format(var, 64, "Card1=%d\n",PlayerInfo[playerid][pCard1]);fwrite(hFile, var);
				format(var, 64, "Card2=%d\n",PlayerInfo[playerid][pCard2]);fwrite(hFile, var);
				format(var, 64, "Flop1=%d\n",PlayerInfo[playerid][pFlop1]);fwrite(hFile, var);
				format(var, 64, "Flop2=%d\n",PlayerInfo[playerid][pFlop2]);fwrite(hFile, var);
				format(var, 64, "Flop3=%d\n",PlayerInfo[playerid][pFlop3]);fwrite(hFile, var);
				format(var, 64, "River=%d\n",PlayerInfo[playerid][pRiver]);fwrite(hFile, var);
				format(var, 64, "Turn=%d\n",PlayerInfo[playerid][pTurn]);fwrite(hFile, var);
				format(var, 64, "Dealer=%d\n",PlayerInfo[playerid][pDealer]);fwrite(hFile, var);
				fclose(hFile);
				//SendClientMessage(playerid, COLOR_YELLOW, "Cuenta Registrada, ya puedes usar (/login [Contraseña]).");
				new loginmsg[256+1];
	    		new loginname[MAX_PLAYER_NAME+1];
	    		GetPlayerName(playerid,loginname,MAX_PLAYER_NAME);
	    		format(loginmsg,256,"Ya puedes Loguear en SPG - RolePlay.\n\nCuenta:\t%s\n\nIntroduzca su contraseña:",loginname);
				ShowPlayerDialog(playerid,1,DIALOG_STYLE_INPUT,"www.spg-roleplay.info",loginmsg,"Loguear","Salir");
			}
	}
	return 1;
}

/*public OnPlayerRegister(playerid, password[]) // v1.0 by LordMan
{
	if(IsPlayerConnected(playerid))
	{
		MySQLCheckConnection();
		new playername3[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername3, sizeof(playername3));
		new newaccountsqlid = MySQLCreateAccount(playername3, password);
		if (newaccountsqlid != 0)
		{
			PlayerInfo[playerid][pSQLID] = newaccountsqlid;
			//PlayerInfo[playerid][pKey] = password;
			strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
			OnPlayerUpdate(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "Account registered, you can now log in (/login [password]).");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_DARKNICERED, "There was an error creating your account. You will be disconnected now.");
			Kick(playerid);
			return 0;
		}
	}
	return 0;
}*/

public OnPlayerUpdate(playerid)
{
    if(!IsPlayerConnected(playerid)) return 0;
    
    switch(GetPlayerWeapon(playerid))
    {
      case 44, 45:
      {
        new keys, ud, lr;
        GetPlayerKeys(playerid, keys, ud, lr);
        if((keys & KEY_FIRE) && (!IsPlayerInAnyVehicle(playerid)))
            {
              return 0;
            }
        }
    }
    
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        for(new i = 0; i < sizeof(SpikeInfo); i++)
  	    {
  	        if(IsPlayerInRangeOfPoint(playerid, 3.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
            {
  	            if(SpikeInfo[i][sCreated] == 1)
  	            {
  	                new panels, doors, lights2, tires;
  	                new carid = GetPlayerVehicleID(playerid);
		            GetVehicleDamageStatus(carid, panels, doors, lights2, tires);
		            tires = encode_tires(1, 1, 1, 1);
		            UpdateVehicleDamageStatus(carid, panels, doors, lights2, tires);
  	                return 0;
  	            }
  	        }
  	    }
  	}
    if(IsPlayerConnected(playerid))
	{
		if(gPlayerLogged[playerid])
		{
			new string3[64];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "users/%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile)
			{
				new var[64];
				format(var, 64, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
				format(var, 64, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 64, "Ultima-IP=%s\n",PlayerInfo[playerid][pIp]);fwrite(hFile, var);
				format(var, 64, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 64, "Asistente=%d\n",PlayerInfo[playerid][pAsistente]);fwrite(hFile, var);
				format(var, 64, "Cazachetos=%d\n",PlayerInfo[playerid][pCazachetos]);fwrite(hFile, var);
				format(var, 64, "Vigilante=%d\n",PlayerInfo[playerid][pVigilante]);fwrite(hFile, var);
				format(var, 64, "Mapper=%d\n",PlayerInfo[playerid][pMapper]);fwrite(hFile, var);
				format(var, 64, "Eventor=%d\n",PlayerInfo[playerid][pEventor]);fwrite(hFile, var);
				format(var, 64, "Moderador=%d\n",PlayerInfo[playerid][pModerador]);fwrite(hFile, var);
				format(var, 64, "Scripter=%d\n",PlayerInfo[playerid][pScripter]);fwrite(hFile, var);
				format(var, 64, "Administrador=%d\n",PlayerInfo[playerid][pAdministrador]);fwrite(hFile, var);
				format(var, 64, "DonateRank=%d\n",PlayerInfo[playerid][pDonateRank]);fwrite(hFile, var);
				format(var, 64, "UpgradePoints=%d\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
				format(var, 64, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 64, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 64, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 64, "Age=%d\n",PlayerInfo[playerid][pAge]);fwrite(hFile, var);
				format(var, 64, "Origin=%d\n",PlayerInfo[playerid][pOrigin]);fwrite(hFile, var);
				format(var, 64, "CK=%d\n",PlayerInfo[playerid][pCK]);fwrite(hFile, var);
				format(var, 64, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 64, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 64, "Money=%d\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
				format(var, 64, "Bank=%d\n",PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
				format(var, 64, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 64, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 64, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 64, "Arrested=%d\n",PlayerInfo[playerid][pArrested]);fwrite(hFile, var);
				format(var, 64, "WantedDeaths=%d\n",PlayerInfo[playerid][pWantedDeaths]);fwrite(hFile, var);
				format(var, 64, "Phonebook=%d\n",PlayerInfo[playerid][pPhoneBook]);fwrite(hFile, var);
				format(var, 64, "LottoNr=%d\n",PlayerInfo[playerid][pLottoNr]);fwrite(hFile, var);
				format(var, 64, "Fishes=%d\n",PlayerInfo[playerid][pFishes]);fwrite(hFile, var);
				format(var, 64, "BiggestFish=%d\n",PlayerInfo[playerid][pBiggestFish]);fwrite(hFile, var);
				format(var, 64, "Job=%d\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
				format(var, 64, "Paycheck=%d\n",PlayerInfo[playerid][pPayCheck]);fwrite(hFile, var);
				format(var, 64, "HeadValue=%d\n",PlayerInfo[playerid][pHeadValue]);fwrite(hFile, var);
				format(var, 64, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 64, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 64, "Materials=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 64, "Drugs=%d\n",PlayerInfo[playerid][pDrugs]);fwrite(hFile, var);
				format(var, 64, "Leader=%d\n",PlayerInfo[playerid][pLeader]);fwrite(hFile, var);
				format(var, 64, "Member=%d\n",PlayerInfo[playerid][pMember]);fwrite(hFile, var);
				format(var, 64, "FMember=%d\n",PlayerInfo[playerid][pFMember]);fwrite(hFile, var);
				format(var, 64, "Rank=%d\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
				format(var, 64, "Char=%d\n",PlayerInfo[playerid][pChar]);fwrite(hFile, var);
				format(var, 64, "ContractTime=%d\n",PlayerInfo[playerid][pContractTime]);fwrite(hFile, var);
				format(var, 64, "DetSkill=%d\n",PlayerInfo[playerid][pDetSkill]);fwrite(hFile, var);
				format(var, 64, "SexSkill=%d\n",PlayerInfo[playerid][pSexSkill]);fwrite(hFile, var);
				format(var, 64, "BoxSkill=%d\n",PlayerInfo[playerid][pBoxSkill]);fwrite(hFile, var);
				format(var, 64, "LawSkill=%d\n",PlayerInfo[playerid][pLawSkill]);fwrite(hFile, var);
				format(var, 64, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 64, "JackSkill=%d\n",PlayerInfo[playerid][pJackSkill]);fwrite(hFile, var);
				format(var, 64, "CarSkill=%d\n",PlayerInfo[playerid][pCarSkill]);fwrite(hFile, var);
				format(var, 64, "NewsSkill=%d\n",PlayerInfo[playerid][pNewsSkill]);fwrite(hFile, var);
				format(var, 64, "DrugsSkill=%d\n",PlayerInfo[playerid][pDrugsSkill]);fwrite(hFile, var);
				format(var, 64, "CookSkill=%d\n",PlayerInfo[playerid][pCookSkill]);fwrite(hFile, var);
				format(var, 64, "FishSkill=%d\n",PlayerInfo[playerid][pFishSkill]);fwrite(hFile, var);
				format(var, 64, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
	            GetPlayerHealth(playerid,PlayerInfo[playerid][pHealth]);
				format(var, 64, "pHealth=%.1f\n",PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
				format(var, 64, "Int=%d\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
				format(var, 64, "Local=%d\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
				format(var, 64, "Team=%d\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
				format(var, 64, "Model=%d\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
				format(var, 64, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 64, "Car=%d\n",PlayerInfo[playerid][pPcarkey]);fwrite(hFile, var);
				format(var, 64, "Car2=%d\n",PlayerInfo[playerid][pPcarkey2]);fwrite(hFile, var);
				format(var, 64, "Car3=%d\n",PlayerInfo[playerid][pPcarkey3]);fwrite(hFile, var);
				format(var, 64, "Car4=%d\n",PlayerInfo[playerid][pPcarkey4]);fwrite(hFile, var);
				format(var, 64, "Car5=%d\n",PlayerInfo[playerid][pPcarkey5]);fwrite(hFile, var);
				format(var, 64, "Car6=%d\n",PlayerInfo[playerid][pPcarkey6]);fwrite(hFile, var);
				format(var, 64, "Car7=%d\n",PlayerInfo[playerid][pPcarkey7]);fwrite(hFile, var);
				format(var, 64, "Car8=%d\n",PlayerInfo[playerid][pPcarkey8]);fwrite(hFile, var);
				format(var, 64, "Car9=%d\n",PlayerInfo[playerid][pPcarkey9]);fwrite(hFile, var);
				format(var, 64, "Car10=%d\n",PlayerInfo[playerid][pPcarkey10]);fwrite(hFile, var);
				format(var, 64, "House=%d\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
				format(var, 64, "Bizz=%d\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
				if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
				{
   	                PlayerInfo[playerid][pPos_x] = 1684.9; // /gotop 1684.9 -2244.5 13.5
					PlayerInfo[playerid][pPos_y] = -2244.5;
					PlayerInfo[playerid][pPos_z] = 13.5;
				}
				if(Spectate[playerid] != 255)
				{
					PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
					PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
					PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
					PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
					PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				}
				new Float:x, Float:y, Float:z;
     			GetPlayerPos(playerid,x,y,z);
				PlayerInfo[playerid][pPos_x] = x;
				PlayerInfo[playerid][pPos_y] = y;
				PlayerInfo[playerid][pPos_z] = z;
				format(var, 64, "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 64, "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 64, "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 64, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
                format(var, 64, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
				format(var, 64, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 64, "FishLic=%d\n",PlayerInfo[playerid][pFishLic]);fwrite(hFile, var);
				format(var, 64, "GunLic1=%d\n",PlayerInfo[playerid][pGunLic1]);fwrite(hFile, var);
				format(var, 64, "GunLic2=%d\n",PlayerInfo[playerid][pGunLic2]);fwrite(hFile, var);
				format(var, 64, "Gun1=%d\n",PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
				format(var, 64, "Gun2=%d\n",PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
				format(var, 64, "Gun3=%d\n",PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
				format(var, 64, "Gun4=%d\n",PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
				format(var, 64, "Ammo1=%d\n",PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
				format(var, 64, "Ammo2=%d\n",PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
				format(var, 64, "Ammo3=%d\n",PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
				format(var, 64, "Ammo4=%d\n",PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
				format(var, 64, "CarTime=%d\n",PlayerInfo[playerid][pCarTime]);fwrite(hFile, var);
				format(var, 64, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 64, "PayDayHad=%d\n",PlayerInfo[playerid][pPayDayHad]);fwrite(hFile, var);
				format(var, 64, "CDPlayer=%d\n",PlayerInfo[playerid][pCDPlayer]);fwrite(hFile, var);
				format(var, 64, "Watch=%d\n",PlayerInfo[playerid][pWatch]);fwrite(hFile, var);
				format(var, 64, "Crashed=%d\n",PlayerInfo[playerid][pCrashed]);fwrite(hFile, var);
				format(var, 64, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 64, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 64, "AlcoholPerk=%d\n",PlayerInfo[playerid][pAlcoholPerk]);fwrite(hFile, var);
				format(var, 64, "DrugPerk=%d\n",PlayerInfo[playerid][pDrugPerk]);fwrite(hFile, var);
				format(var, 64, "MiserPerk=%d\n",PlayerInfo[playerid][pMiserPerk]);fwrite(hFile, var);
				format(var, 64, "PainPerk=%d\n",PlayerInfo[playerid][pPainPerk]);fwrite(hFile, var);
				format(var, 64, "TraderPerk=%d\n",PlayerInfo[playerid][pTraderPerk]);fwrite(hFile, var);
				format(var, 64, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 64, "Mission=%d\n",PlayerInfo[playerid][pMissionNr]);fwrite(hFile, var);
				format(var, 64, "Warnings=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				format(var, 64, "VirWorld=%d\n",PlayerInfo[playerid][pVirWorld]);fwrite(hFile, var);
				if(PlayerInfo[playerid][pDonateRank] < 1) { PlayerInfo[playerid][pFuel] = 0; }
				format(var, 64, "Fuel=%d\n",PlayerInfo[playerid][pFuel]);fwrite(hFile, var);
				format(var, 64, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 64, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 64, "FishTool=%d\n",PlayerInfo[playerid][pFishTool]);fwrite(hFile, var);
    			format(var, 64, "Note1=%s\n",PlayerInfo[playerid][pNote1]);fwrite(hFile, var);
				format(var, 64, "Note1s=%d\n",PlayerInfo[playerid][pNote1s]);fwrite(hFile, var);
				format(var, 64, "Note2=%s\n",PlayerInfo[playerid][pNote2]);fwrite(hFile, var);
				format(var, 64, "Note2s=%d\n",PlayerInfo[playerid][pNote2s]);fwrite(hFile, var);
				format(var, 64, "Note3=%s\n",PlayerInfo[playerid][pNote3]);fwrite(hFile, var);
				format(var, 64, "Note3s=%d\n",PlayerInfo[playerid][pNote3s]);fwrite(hFile, var);
				format(var, 64, "Note4=%s\n",PlayerInfo[playerid][pNote4]);fwrite(hFile, var);
				format(var, 64, "Note4s=%d\n",PlayerInfo[playerid][pNote4s]);fwrite(hFile, var);
				format(var, 64, "Note5=%s\n",PlayerInfo[playerid][pNote5]);fwrite(hFile, var);
				format(var, 64, "Note5s=%d\n",PlayerInfo[playerid][pNote5s]);fwrite(hFile, var);
    			format(var, 64, "tatu1=%s\n",PlayerInfo[playerid][ptatu1]);fwrite(hFile, var);
				format(var, 64, "tatu1s=%d\n",PlayerInfo[playerid][ptatu1s]);fwrite(hFile, var);
				format(var, 64, "tatu2=%s\n",PlayerInfo[playerid][ptatu2]);fwrite(hFile, var);
				format(var, 64, "tatu2s=%d\n",PlayerInfo[playerid][ptatu2s]);fwrite(hFile, var);
				format(var, 64, "tatu3=%s\n",PlayerInfo[playerid][ptatu3]);fwrite(hFile, var);
				format(var, 64, "tatu3s=%d\n",PlayerInfo[playerid][ptatu3s]);fwrite(hFile, var);
				format(var, 64, "tatu4=%s\n",PlayerInfo[playerid][ptatu4]);fwrite(hFile, var);
				format(var, 64, "tatu4s=%d\n",PlayerInfo[playerid][ptatu4s]);fwrite(hFile, var);
				format(var, 64, "tatu5=%s\n",PlayerInfo[playerid][ptatu5]);fwrite(hFile, var);
				format(var, 64, "tatu5s=%d\n",PlayerInfo[playerid][ptatu5s]);fwrite(hFile, var);
				format(var, 64, "InvWeapon=%d\n",PlayerInfo[playerid][pInvWeapon]);fwrite(hFile, var);
				format(var, 64, "InvAmmo=%d\n",PlayerInfo[playerid][pInvAmmo]);fwrite(hFile, var);
				format(var, 64, "Lighter=%d\n",PlayerInfo[playerid][pLighter]);fwrite(hFile, var);
				format(var, 64, "Cigarettes=%d\n",PlayerInfo[playerid][pCigarettes]);fwrite(hFile, var);
				format(var, 64, "Mascara=%d\n",PlayerInfo[playerid][pMask]);fwrite(hFile, var);
				format(var, 64, "BombaTermica=%d\n",PlayerInfo[playerid][pThermal]);fwrite(hFile, var);
				format(var, 64, "Bono1=%d\n",PlayerInfo[playerid][pbono1]);fwrite(hFile, var);
				format(var, 64, "Bono2=%d\n",PlayerInfo[playerid][pbono2]);fwrite(hFile, var);
				format(var, 64, "Bono3=%d\n",PlayerInfo[playerid][pbono3]);fwrite(hFile, var);
				format(var, 64, "Bono4=%d\n",PlayerInfo[playerid][pbono4]);fwrite(hFile, var);
				format(var, 64, "Bono5=%d\n",PlayerInfo[playerid][pbono5]);fwrite(hFile, var);
				format(var, 64, "Bono6=%d\n",PlayerInfo[playerid][pbono6]);fwrite(hFile, var);
				format(var, 64, "Bono7=%d\n",PlayerInfo[playerid][pbono7]);fwrite(hFile, var);
				format(var, 64, "Bono8=%d\n",PlayerInfo[playerid][pbono8]);fwrite(hFile, var);
				format(var, 64, "Bono9=%d\n",PlayerInfo[playerid][pbono9]);fwrite(hFile, var);
				format(var, 64, "Bono10=%d\n",PlayerInfo[playerid][pbono10]);fwrite(hFile, var);
				format(var, 64, "Bono11=%d\n",PlayerInfo[playerid][pbono11]);fwrite(hFile, var);
				format(var, 64, "Bono12=%d\n",PlayerInfo[playerid][pbono12]);fwrite(hFile, var);
				format(var, 64, "Bono13=%d\n",PlayerInfo[playerid][pbono13]);fwrite(hFile, var);
				format(var, 64, "Bono14=%d\n",PlayerInfo[playerid][pbono14]);fwrite(hFile, var);
				format(var, 64, "Bono15=%d\n",PlayerInfo[playerid][pbono15]);fwrite(hFile, var);
				format(var, 64, "Bono16=%d\n",PlayerInfo[playerid][pbono16]);fwrite(hFile, var);
				format(var, 64, "Bono17=%d\n",PlayerInfo[playerid][pbono17]);fwrite(hFile, var);
				format(var, 64, "Bono18=%d\n",PlayerInfo[playerid][pbono18]);fwrite(hFile, var);
				format(var, 64, "Bono19=%d\n",PlayerInfo[playerid][pbono19]);fwrite(hFile, var);
				format(var, 64, "Bono20=%d\n",PlayerInfo[playerid][pbono20]);fwrite(hFile, var);
				format(var, 64, "Locked=%d\n",PlayerInfo[playerid][pLocked]);fwrite(hFile, var);
				format(var, 64, "Casco=%d\n",PlayerInfo[playerid][pCasco]);fwrite(hFile, var); //casco
//sistema poker
				format(var, 64, "Flop1=%d\n",PlayerInfo[playerid][pFlop1]);fwrite(hFile, var);
				format(var, 64, "Flop2=%d\n",PlayerInfo[playerid][pFlop2]);fwrite(hFile, var);
				format(var, 64, "Flop3=%d\n",PlayerInfo[playerid][pFlop3]);fwrite(hFile, var);
				format(var, 64, "River=%d\n",PlayerInfo[playerid][pRiver]);fwrite(hFile, var);
				format(var, 64, "Turn=%d\n",PlayerInfo[playerid][pTurn]);fwrite(hFile, var);
				format(var, 64, "Dealer=%d\n",PlayerInfo[playerid][pDealer]);fwrite(hFile, var);
				format(var, 64, "Cards=%d\n",PlayerInfo[playerid][pCards]);fwrite(hFile, var);
				format(var, 64, "Card1=%d\n",PlayerInfo[playerid][pCard1]);fwrite(hFile, var);
				format(var, 64, "Card2=%d\n",PlayerInfo[playerid][pCard2]);fwrite(hFile, var);
				fclose(hFile);
			}
		}
	}
	return 1;
}

public OnPlayerLogin(playerid,password[])
{
	new tmp2[256];
    new string2[64];
	new playername2[MAX_PLAYER_NAME];
	new playernamesplit[3][MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername2, sizeof(playername2));
	split(playername2, playernamesplit, '_');
	format(string2, sizeof(string2), "users/%s.ini", playername2);
	new File: UserFile = fopen(string2, io_read);

	new playersip[256];
	GetPlayerIp( playerid,playersip,sizeof(playersip));
	PlayerInfo[playerid][pIp] = playersip;
	
	if ( UserFile )
	{
	    new PassData[256];
	    new keytmp[256], valtmp[256];
	    fread( UserFile , PassData , sizeof( PassData ) );
	    keytmp = ini_GetKey( PassData );
	    if( strcmp( keytmp , "Key" , true ) == 0 )
		{
			valtmp = ini_GetValue( PassData );
			strmid(PlayerInfo[playerid][pKey], valtmp, 0, strlen(valtmp)-1, 255);
		}
		if(strcmp(PlayerInfo[playerid][pKey],password, true ) == 0 )
		{
			    new key[ 256 ] , val[ 256 ];
			    new Data[ 256 ];
			    while ( fread( UserFile , Data , sizeof( Data ) ) )
				{
					key = ini_GetKey( Data );
					if( strcmp( key , "Level" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLevel] = strval( val ); }
					if( strcmp( key , "Ultima-IP" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pIp] = strlen( val ); }
			    	if( strcmp( key , "AdminLevel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdmin] = strval( val ); }
			    	if( strcmp( key , "Asistente" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAsistente] = strval( val ); }
			    	if( strcmp( key , "Cazachetos" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCazachetos] = strval( val ); }
			    	if( strcmp( key , "Vigilante" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pVigilante] = strval( val ); }
			    	if( strcmp( key , "Mapper" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMapper] = strval( val ); }
			    	if( strcmp( key , "Eventor" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pEventor] = strval( val ); }
			    	if( strcmp( key , "Moderador" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pModerador] = strval( val ); }
			    	if( strcmp( key , "Scripter" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pScripter] = strval( val ); }
			    	if( strcmp( key , "Administrador" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdministrador] = strval( val ); }
			        if( strcmp( key , "DonateRank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDonateRank] = strval( val ); }
			        if( strcmp( key , "UpgradePoints" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][gPupgrade] = strval( val ); }
			        if( strcmp( key , "ConnectedTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pConnectTime] = strval( val ); }
			        if( strcmp( key , "Registered" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pReg] = strval( val ); }
			        if( strcmp( key , "Sex" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSex] = strval( val ); }
			        if( strcmp( key , "Age" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAge] = strval( val ); }
			        if( strcmp( key , "Origin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pOrigin] = strval( val ); }
			        if( strcmp( key , "CK" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCK] = strval( val ); }
			        if( strcmp( key , "Muted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMuted] = strval( val ); }
			        if( strcmp( key , "Respect" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pExp] = strval( val ); }
			        if( strcmp( key , "Money" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCash] = strval( val ); }
			        if( strcmp( key , "Bank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAccount] = strval( val ); }
			        if( strcmp( key , "Crimes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCrimes] = strval( val ); }
			        if( strcmp( key , "Kills" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pKills] = strval( val ); }
			        if( strcmp( key , "Deaths" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDeaths] = strval( val ); }
			        if( strcmp( key , "Arrested" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pArrested] = strval( val ); }
			        if( strcmp( key , "WantedDeaths" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWantedDeaths] = strval( val ); }
			        if( strcmp( key , "Phonebook" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhoneBook] = strval( val ); }
			        if( strcmp( key , "LottoNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLottoNr] = strval( val ); }
			        if( strcmp( key , "Fishes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishes] = strval( val ); }
			        if( strcmp( key , "BiggestFish" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBiggestFish] = strval( val ); }
			        if( strcmp( key , "Job" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJob] = strval( val ); }
			        if( strcmp( key , "Paycheck" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayCheck] = strval( val ); }
			        if( strcmp( key , "HeadValue" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHeadValue] = strval( val ); }
			        if( strcmp( key , "Jailed" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailed] = strval( val ); }
			        if( strcmp( key , "JailTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailTime] = strval( val ); }
			        if( strcmp( key , "Materials" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMats] = strval( val ); }
			        if( strcmp( key , "Drugs" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugs] = strval( val ); }
			        if( strcmp( key , "Leader" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLeader] = strval( val ); }
			        if( strcmp( key , "Member" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMember] = strval( val ); }
			        if( strcmp( key , "FMember" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFMember] = strval( val ); }
			        if( strcmp( key , "Rank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRank] = strval( val ); }
			        if( strcmp( key , "Char" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pChar] = strval( val ); }
			        if( strcmp( key , "ContractTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pContractTime] = strval( val ); }
			        if( strcmp( key , "DetSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDetSkill] = strval( val ); }
			        if( strcmp( key , "SexSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSexSkill] = strval( val ); }
			        if( strcmp( key , "BoxSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoxSkill] = strval( val ); }
			        if( strcmp( key , "LawSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLawSkill] = strval( val ); }
			        if( strcmp( key , "MechSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMechSkill] = strval( val ); }
			        if( strcmp( key , "JackSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJackSkill] = strval( val ); }
			        if( strcmp( key , "CarSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarSkill] = strval( val ); }
			        if( strcmp( key , "NewsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNewsSkill] = strval( val ); }
			        if( strcmp( key , "DrugsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugsSkill] = strval( val ); }
			        if( strcmp( key , "CookSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCookSkill] = strval( val ); }
			        if( strcmp( key , "FishSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishSkill] = strval( val ); }
			        if( strcmp( key , "pSHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSHealth] = floatstr( val ); }
			        if( strcmp( key , "pHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHealth] = floatstr( val ); }
			        if( strcmp( key , "Int" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInt] = strval( val ); }
			        if( strcmp( key , "Local" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLocal] = strval( val ); }
			        if( strcmp( key , "Team" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTeam] = strval( val ); }
			        if( strcmp( key , "Model" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pModel] = strval( val ); }
			        if( strcmp( key , "PhoneNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPnumber] = strval( val ); }
			        if( strcmp( key , "Car" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey] = strval( val ); }
			        if( strcmp( key , "Car2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey2] = strval( val ); }
			        if( strcmp( key , "Car3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey3] = strval( val ); }
			        if( strcmp( key , "Car4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey4] = strval( val ); }
			        if( strcmp( key , "Car5" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey5] = strval( val ); }
			        if( strcmp( key , "Car6" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey6] = strval( val ); }
			        if( strcmp( key , "Car7" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey7] = strval( val ); }
			        if( strcmp( key , "Car8" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey8] = strval( val ); }
			        if( strcmp( key , "Car9" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey9] = strval( val ); }
			        if( strcmp( key , "Car10" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey10] = strval( val ); }
			        if( strcmp( key , "House" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhousekey] = strval( val ); }
			        if( strcmp( key , "Bizz" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPbiskey] = strval( val ); }
			        if( strcmp( key , "Pos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_x] = floatstr( val ); }
			        if( strcmp( key , "Pos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_y] = floatstr( val ); }
			        if( strcmp( key , "Pos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_z] = floatstr( val ); }
			        if( strcmp( key , "CarLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarLic] = strval( val ); }
                    if( strcmp( key , "FlyLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlyLic] = strval( val ); }
					if( strcmp( key , "BoatLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoatLic] = strval( val ); }
			        if( strcmp( key , "FishLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishLic] = strval( val ); }
			        if( strcmp( key , "GunLic1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGunLic1] = strval( val ); }
			        if( strcmp( key , "GunLic2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGunLic2] = strval( val ); }
			        if( strcmp( key , "Gun1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun1] = strval( val ); }
			        if( strcmp( key , "Gun2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun2] = strval( val ); }
			        if( strcmp( key , "Gun3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun3] = strval( val ); }
			        if( strcmp( key , "Gun4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun4] = strval( val ); }
			        if( strcmp( key , "Ammo1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo1] = strval( val ); }
			        if( strcmp( key , "Ammo2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo2] = strval( val ); }
			        if( strcmp( key , "Ammo3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo3] = strval( val ); }
			        if( strcmp( key , "Ammo4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo4] = strval( val ); }
			        if( strcmp( key , "CarTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarTime] = strval( val ); }
			        if( strcmp( key , "PayDay" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayDay] = strval( val ); }
			        if( strcmp( key , "PayDayHad" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayDayHad] = strval( val ); }
			        if( strcmp( key , "CDPlayer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCDPlayer] = strval( val ); }
			        if( strcmp( key , "Watch" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWatch] = strval( val ); }
			        if( strcmp( key , "Crashed" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCrashed] = strval( val ); }
			        if( strcmp( key , "Wins" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWins] = strval( val ); }
			        if( strcmp( key , "Loses" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLoses] = strval( val ); }
			        if( strcmp( key , "AlcoholPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAlcoholPerk] = strval( val ); }
			        if( strcmp( key , "DrugPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugPerk] = strval( val ); }
			        if( strcmp( key , "MiserPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMiserPerk] = strval( val ); }
			        if( strcmp( key , "PainPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPainPerk] = strval( val ); }
			        if( strcmp( key , "TraderPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTraderPerk] = strval( val ); }
			        if( strcmp( key , "Tutorial" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTut] = strval( val ); }
			        if( strcmp( key , "Mission" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMissionNr] = strval( val ); }
			        if( strcmp( key , "Warnings" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWarns] = strval( val ); }
			        if( strcmp( key , "VirWorld" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pVirWorld] = strval( val ); }
			        if( strcmp( key , "Fuel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFuel] = strval( val ); }
			        if( strcmp( key , "Married" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMarried] = strval( val ); }
			        if( strcmp( key , "MarriedTo" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pMarriedTo], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "FishTool" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishTool] = strval( val ); }
           			if( strcmp( key , "Note1" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote1], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note1s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote1s] = strval( val ); }
			        if( strcmp( key , "Note2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote2], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note2s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote2s] = strval( val ); }
			        if( strcmp( key , "Note3" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote3], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note3s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote3s] = strval( val ); }
			        if( strcmp( key , "Note4" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote4], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note4s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote4s] = strval( val ); }
			        if( strcmp( key , "Note5" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pNote5], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Note5s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNote5s] = strval( val ); }
           			if( strcmp( key , "tatu1" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][ptatu1], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "tatu1s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][ptatu1s] = strval( val ); }
			        if( strcmp( key , "tatu2" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][ptatu2], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "tatu2s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][ptatu2s] = strval( val ); }
			        if( strcmp( key , "tatu3" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][ptatu3], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "tatu3s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][ptatu3s] = strval( val ); }
			        if( strcmp( key , "tatu4" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][ptatu4], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "tatu4s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][ptatu4s] = strval( val ); }
			        if( strcmp( key , "tatu5" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][ptatu5], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "tatu5s" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][ptatu5s] = strval( val ); }
					if( strcmp( key , "InvWeapon" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvWeapon] = strval( val ); }
			        if( strcmp( key , "InvAmmo" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pInvAmmo] = strval( val ); }
			        if( strcmp( key , "Lighter" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLighter] = strval( val ); }
			        if( strcmp( key , "Cigarettes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCigarettes] = strval( val ); }
			        if( strcmp( key , "Mascara" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMask] = strval( val ); }
			        if( strcmp( key , "BombaTermica" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pThermal] = strval( val ); }
			        if( strcmp( key , "Bono1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono1] = strval( val ); }
			        if( strcmp( key , "Bono2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono2] = strval( val ); }
			        if( strcmp( key , "Bono3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono3] = strval( val ); }
			        if( strcmp( key , "Bono4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono4] = strval( val ); }
			        if( strcmp( key , "Bono5" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono5] = strval( val ); }
			        if( strcmp( key , "Bono6" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono6] = strval( val ); }
			        if( strcmp( key , "Bono7" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono7] = strval( val ); }
			        if( strcmp( key , "Bono8" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono8] = strval( val ); }
			        if( strcmp( key , "Bono9" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono9] = strval( val ); }
			        if( strcmp( key , "Bono10" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono10] = strval( val ); }
			        if( strcmp( key , "Bono11" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono11] = strval( val ); }
			        if( strcmp( key , "Bono12" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono12] = strval( val ); }
			        if( strcmp( key , "Bono13" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono13] = strval( val ); }
			        if( strcmp( key , "Bono14" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono14] = strval( val ); }
			        if( strcmp( key , "Bono15" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono15] = strval( val ); }
			        if( strcmp( key , "Bono16" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono16] = strval( val ); }
			        if( strcmp( key , "Bono17" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono17] = strval( val ); }
			        if( strcmp( key , "Bono18" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono18] = strval( val ); }
			        if( strcmp( key , "Bono19" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono19] = strval( val ); }
			        if( strcmp( key , "Bono20" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pbono20] = strval( val ); }
			        if( strcmp( key , "Locked" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLocked] = strval( val ); }
			        if( strcmp( key , "Casco" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCasco] = strval( val ); } // casco
			        //sistema poker
					if( strcmp( key , "Cards" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCards] = strval( val ); }
					if( strcmp( key , "Card1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCard1] = strval( val ); }
					if( strcmp( key , "Card2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCard2] = strval( val ); }
					if( strcmp( key , "Flop1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlop1] = strval( val ); }
					if( strcmp( key , "Flop2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlop2] = strval( val ); }
					if( strcmp( key , "Flop3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlop3] = strval( val ); }
					if( strcmp( key , "River" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pRiver] = strval( val ); }
					if( strcmp( key , "Turn" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTurn] = strval( val ); }
					if( strcmp( key , "Dealer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDealer] = strval( val ); }
                }//end while
                fclose(UserFile);//close the file after everything has been read in the while
		}
		else
		{
		    new loginmsg[256+1];
	    	new loginname[MAX_PLAYER_NAME+1];
	    	GetPlayerName(playerid,loginname,MAX_PLAYER_NAME);
	    	format(loginmsg,256,"Bienvenido a SPG - RolePlay.\n\nCuenta:\t%s\n\nIntroduzca su contraseña:",loginname);
			ShowPlayerDialog(playerid,1,DIALOG_STYLE_INPUT,"www.spg-roleplay.info",loginmsg,"Loguear","Salir");
			GameTextForPlayer(playerid,"~y~~n~~n~~n~~n~~r~ Password INCORRECTA",5000,5);
        	return 1;
			//SendClientMessage(playerid, COLOR_WHITE, "SERVIDOR: La contraseña no es valida.");
	        //fclose(UserFile);
	        //gPlayerLogTries[playerid] += 1;
	        //if(gPlayerLogTries[playerid] == 4) { Ban(playerid); }
	        //return 1;
		}

		//PlayerInfo[playerid][pAdjustable] = 0;
		SafeResetPlayerMoney(playerid);
		//ConsumingMoney[playerid] = 1;
		SafeGivePlayerMoney(playerid,PlayerInfo[playerid][pCash]);
		CurrentMoney[playerid] = PlayerInfo[playerid][pCash];
		if(PlayerInfo[playerid][pReg] == 0)
		{
			PlayerInfo[playerid][pLevel] = 1;
			PlayerInfo[playerid][pSHealth] = 0.0;
			PlayerInfo[playerid][pHealth] = 50.0;
			PlayerInfo[playerid][pPos_x] = 1612.3240;
			PlayerInfo[playerid][pPos_y] = -2330.1670;
			PlayerInfo[playerid][pPos_z] = 13.5469;
			PlayerInfo[playerid][pInt] = 0;
			PlayerInfo[playerid][pLocal] = 255;
			PlayerInfo[playerid][pTeam] = 3;
			PlayerInfo[playerid][pModel] = 135;
			new randphone = 100000 + random(899999);//minimum 1000  max 9999 //giving one at the start
			PlayerInfo[playerid][pPnumber] = randphone;
			PlayerInfo[playerid][pPhousekey] = 255;
			PlayerInfo[playerid][pPcarkey] = 9999;
			PlayerInfo[playerid][pPcarkey2] = 9999;
			PlayerInfo[playerid][pPcarkey3] = 9999;
			PlayerInfo[playerid][pPcarkey4] = 9999;
			PlayerInfo[playerid][pPcarkey5] = 9999;
			PlayerInfo[playerid][pPcarkey6] = 9999;
			PlayerInfo[playerid][pPcarkey7] = 9999;
			PlayerInfo[playerid][pPcarkey8] = 9999;
			PlayerInfo[playerid][pPcarkey9] = 9999;
			PlayerInfo[playerid][pPcarkey10] = 9999;
			PlayerInfo[playerid][pPbiskey] = 255;
			PlayerInfo[playerid][pAccount] = 0;
			PlayerInfo[playerid][pReg] = 1;
			SafeGivePlayerMoney(playerid, 300);
		}
		if(PlayerInfo[playerid][pLocked] == 1) // Auto-kick
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Tu cuenta esta bloqueada. Contacta con un administrador; 'Error Baneado'.");
		    Kick(playerid);
		}
		if(PlayerInfo[playerid][pLevel] == -999) //autoban
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Evasion de Ban 'Error Baneado'.");
			Ban(playerid);
		}
		else if(PlayerInfo[playerid][pCK] > 0)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Estas oficialmente muerto 'Error CK'.");
		    Kick(playerid);
		}
		ClearChatbox(playerid, 8);
		SendClientMessage(playerid, COLOR_GREEN, "=============================================");
		format(string2, sizeof(string2), "Bienvenido al Servidor de Spanish Pc Gamers, %s.",playernamesplit[0]);
		SendClientMessage(playerid, COLOR_WHITE,string2);
		format(string2, sizeof(string2), "Version GM: %s.",SCRIPT_VERSION);
		SendClientMessage(playerid, COLOR_WHITE, string2);
		if (PlayerInfo[playerid][pDonateRank] == 1)
		{
			SendClientMessage(playerid, COLOR_WHITE,"Tienes la cuenta premium Activada!");
		}
		if (PlayerInfo[playerid][pAdmin] > 0)
		{
			if (PlayerInfo[playerid][pAdmin] > 0)
			{
				format(string2, sizeof(string2), "Tu sistema de admin está obsoleto, habla con un administrador principal para solucionarlo.");
				SendClientMessage(playerid, COLOR_WHITE,string2);
			}
		}
		if (PlayerInfo[playerid][pMember] == 17
		|| PlayerInfo[playerid][pLeader] == 17
		|| PlayerInfo[playerid][pMember] == 18
		|| PlayerInfo[playerid][pLeader] == 18
		|| PlayerInfo[playerid][pMember] == 99
		|| PlayerInfo[playerid][pLeader] == 99)// bandas libres fuera plis
		{
		    SendClientMessage(playerid, COLOR_WHITE,"Perteneces a una banda borrada, se te ha sacado de tu faccion");
		    PlayerInfo[playerid][pTeam] = 3;
			PlayerInfo[playerid][pMember] = 0;
			PlayerInfo[playerid][pRank] = 0;
			new rand = random(sizeof(CIV));
			PlayerInfo[playerid][pChar] = CIV[rand];
			PlayerInfo[playerid][pFMember] = 255;
			PlayerInfo[playerid][pLeader] = 0;
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
			SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
			if(PlayerInfo[playerid][pJob] == 7)
			{
				PlayerInfo[playerid][pJob] = 0;
			}
			if(PlayerInfo[playerid][pJob] == 24)
			{
				PlayerInfo[playerid][pJob] = 0;
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "=============================================");
		SendClientMessage(playerid, COLOR_WHITE, " ");
		printf("%s has logged in.",playername2);
		new string[256];
		format(string, 256, "Administración: %s se ha conectado.", playername2);
		ABroadCast(COLOR_YELLOW,string);
		
		// Reset the FirstSpawn variable
		SetTimerEx("UnsetFirstSpawn", 5000, false, "i", playerid);
		
		// Unset Crash
		SetTimerEx("UnsetCrash", 5000, false, "i", playerid);
		
		SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);
		if(gTeam[playerid] == 0)
		{
			gTeam[playerid] = 3;
		}
		else
		{
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
		}
		gPlayerLogged[playerid] = 1;
		//SpawnPlayer(playerid);
		if(PlayerInfo[playerid][pCrashed] == 0)
		{
			format(tmp2, sizeof(tmp2), "~w~Bienvenido ~n~~y~   %s", playername2);
		}
		else
		{
	    	format(tmp2, sizeof(tmp2), "~w~Bienvenido ~n~~y~   %s", playername2); //original// format(tmp2, sizeof(tmp2), "~p~Crash...~n~~w~Reconecta al servidor");
		}
		DateProp(playerid);
		GameTextForPlayer(playerid, tmp2, 5000, 1);
		//SendClientMessage(playerid, COLOR_YELLOW, motd);
		/*if(PlayerInfo[playerid][pFMember] < 255)
		{
		    format(tmp2, sizeof(tmp2), "Family MOTD: %s.", FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMOTD]);
		    SendClientMessage(playerid, COLOR_YELLOW, tmp2);
		}*/
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
	    	if(IsPlayerConnected(i))
	    	{
	        	if(PlayerInfo[i][pMaskuse] == 1)
	        	{
	            	ShowPlayerNameTagForPlayer(playerid, i, 0);
	        	}
	    	}
		}
	}
	SpawnPlayer(playerid);
	SetCameraBehindPlayer(playerid);
	TextDrawHideForPlayer(playerid, Text:web);
	return 1;
}

stock ini_GetKey( line[] )
{
	new keyRes[256];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

public OnPropUpdate()
{
	new idx;
	new File: file2;
	while (idx < sizeof(HouseInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%s,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		HouseInfo[idx][hEntrancex],
		HouseInfo[idx][hEntrancey],
		HouseInfo[idx][hEntrancez],
		HouseInfo[idx][hExitx],
		HouseInfo[idx][hExity],
		HouseInfo[idx][hExitz],
		HouseInfo[idx][hHealthx],
		HouseInfo[idx][hHealthy],
		HouseInfo[idx][hHealthz],
		HouseInfo[idx][hArmourx],
		HouseInfo[idx][hArmoury],
		HouseInfo[idx][hArmourz],
		HouseInfo[idx][hOwner],
		HouseInfo[idx][hDiscription],
		HouseInfo[idx][hValue],
		HouseInfo[idx][hHel],
		HouseInfo[idx][hArm],
		HouseInfo[idx][hInt],
		HouseInfo[idx][hLock],
		HouseInfo[idx][hOwned],
		HouseInfo[idx][hRooms],
		HouseInfo[idx][hRent],
		HouseInfo[idx][hRentabil],
		HouseInfo[idx][hTakings],
		HouseInfo[idx][hVec],
		HouseInfo[idx][hVcol1],
		HouseInfo[idx][hVcol2],
		HouseInfo[idx][hDate],
		HouseInfo[idx][hLevel],
		HouseInfo[idx][hWorld]);
		
		HouseInfo[idx][hWorld] = idx;
		if(idx == 0)
		{
			file2 = fopen("property.cfg", io_write);
		}
		else
		{
			file2 = fopen("property.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(BizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		BizzInfo[idx][bOwned],
		BizzInfo[idx][bOwner],
		BizzInfo[idx][bMessage],
		BizzInfo[idx][bExtortion],
		BizzInfo[idx][bEntranceX],
		BizzInfo[idx][bEntranceY],
		BizzInfo[idx][bEntranceZ],
		BizzInfo[idx][bExitX],
		BizzInfo[idx][bExitY],
		BizzInfo[idx][bExitZ],
		BizzInfo[idx][bLevelNeeded],
		BizzInfo[idx][bBuyPrice],
		BizzInfo[idx][bEntranceCost],
		BizzInfo[idx][bTill],
		BizzInfo[idx][bLocked],
		BizzInfo[idx][bInterior],
		BizzInfo[idx][bProducts],
		BizzInfo[idx][bMaxProducts],
		BizzInfo[idx][bPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("bizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("bizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(SBizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		SBizzInfo[idx][sbOwned],
		SBizzInfo[idx][sbOwner],
		SBizzInfo[idx][sbMessage],
		SBizzInfo[idx][sbExtortion],
		SBizzInfo[idx][sbEntranceX],
		SBizzInfo[idx][sbEntranceY],
		SBizzInfo[idx][sbEntranceZ],
		SBizzInfo[idx][sbLevelNeeded],
		SBizzInfo[idx][sbBuyPrice],
		SBizzInfo[idx][sbEntranceCost],
		SBizzInfo[idx][sbTill],
		SBizzInfo[idx][sbLocked],
		SBizzInfo[idx][sbInterior],
		SBizzInfo[idx][sbProducts],
		SBizzInfo[idx][sbMaxProducts],
		SBizzInfo[idx][sbPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("sbizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("sbizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 184;
 	while (idx < sizeof(CarInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d,%f,%f,%f,%f,%d,%d,%s,%s,%d,%s,%d,%d\n",
		CarInfo[idx][cModel],//
		CarInfo[idx][cLocationx],//
		CarInfo[idx][cLocationy],//
		CarInfo[idx][cLocationz],//
		CarInfo[idx][cAngle],//
		CarInfo[idx][cColorOne],//
		CarInfo[idx][cColorTwo],//
		CarInfo[idx][cOwner],//
		CarInfo[idx][cDescription],//
		CarInfo[idx][cValue],//
		CarInfo[idx][cLicense],//
		CarInfo[idx][cOwned],//
		CarInfo[idx][cLock]);
		if(idx == 184)
		{
			file2 = fopen("cars.cfg", io_write);
		}
		else
		{
			file2 = fopen("cars.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public BroadCast(color,const string[])
{
	SendClientMessageToAll(color, string);
	return 1;
}

public ABroadCast(color,const string[])
{
	// /qadmin 
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(HideAdmin[i] == 1)
		{

		}
		else
		{
			if(PlayerInfo[i][pEsAdmin] == 1 && IsPlayerConnected(i))
			{
				SendClientMessage(i, color, string);
				printf("%s", string);
			}
		}
	}
	return 1;
}

public OOCOff(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gOoc[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public OOCNews(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gNews[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendTeamMessage(team, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == team)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendRadioMessage(member, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member)
		    {
				SendClientMessage(i, color, string);
			}
			if(PlayerInfo[i][pJob] == 24)
			{
			    SendClientMessage(i, color, string);
			}
		}
	}
}

public SendJobMessage(job, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pJob] == job)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}
public Chequeo()
{
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
		if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
		{
			new
			    Float:x,
			    Float:y,
			    Float:z,
			    string[10],
			    Float:Aceleracion;

			GetVehicleVelocity(GetPlayerVehicleID(i), x, y, z);
			Velocidad[i][1] = floatdiv(floatsqroot(x*x + y*y + z*z)*200000, 3600);
			format(string, sizeof(string), "%.0f", floatdiv(Velocidad[i][1] * 3600, 1000));
			TextDrawSetString(Textdraw[0], string);
			Aceleracion = floatdiv(Velocidad[i][1] - Velocidad[i][0], floatdiv(TDC, 1000));
			if(0 > Aceleracion > -1)
			{
				if(Aceleracion >= 0.5) format(string, sizeof(string), "%.0f", "1");
				else if(Aceleracion <= -0.5) format(string, sizeof(string), "%.0f", "-1");
				else format(string, sizeof(string), "%.0f", -1 * Aceleracion);
			}
			else format(string, sizeof(string), "%.0f", Aceleracion);
			TextDrawSetString(Textdraw[2], string);
            Velocidad[i][0] = Velocidad[i][1];
			if(Exepciones[0] == 1)
			{
				switch(GetVehicleModel(GetPlayerVehicleID(i)))
				{
					case 581, 509, 481, 462, 521, 463, 510, 522, 461, 448, 471, 468, 586:
					{
						return 1; // no funcionara en las motos si EX_MOTOS esta en true
					}
				}
			}
			if(Aceleracion > MAX_ACE && Estado[i] == 1 && cinturon[i] == 0)
			{
				new
					Float:acthealth;

				GetPlayerHealth(i, acthealth);
				SetPlayerHealth(i, acthealth - floatdiv(Aceleracion, PROPORCION));
			}
			if(Aceleracion < -MAX_ACE && Estado[i] == 1 && cinturon[i] == 0)
			{
				new
					Float:acthealth;

				GetPlayerHealth(i, acthealth);
				SetPlayerHealth(i, acthealth - (-1 * floatdiv(Aceleracion, PROPORCION)));
 			}
            if(Aceleracion > MAX_ACE && Estado[i] == 1 && cinturon[i] == 1)
			{
				new
					Float:acthealth;

				GetPlayerHealth(i, acthealth);
				SetPlayerHealth(i, acthealth - floatdiv(Aceleracion, PROPORCIONCINTO));
			}
			if(Aceleracion < -MAX_ACE && Estado[i] == 1 && cinturon[i] == 1)
			{
				new
					Float:acthealth;

				GetPlayerHealth(i, acthealth);
				SetPlayerHealth(i, acthealth - (-1 * floatdiv(Aceleracion, PROPORCIONCINTO)));
 			}
		}
	}
	return 1;
}
public SendNewFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFMember] == family)
		    {
                if(!gFam[i])
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public SendFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family)
		    {
                if(!gFam[i])
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public SendIRCMessage(channel, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayersChannel[i] == channel)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendTeamBeepMessage(team, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] == team)
		    {
				SendClientMessage(i, color, string);
				RingTone[i] = 20;
			}
		}
	}
}

public SendEnemyMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(gTeam[i] >= 3)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}


public SendAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 1)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}



/*public AddCar(carcoords)
{
	new randcol = random(126);
	new randcol2 = 1;
	if (rccounter == 14)
	{
		rccounter = 0;
	}
	AddStaticVehicleEx(carselect[rccounter], CarSpawns[carcoords][pos_x], CarSpawns[carcoords][pos_y], CarSpawns[carcoords][pos_z], CarSpawns[carcoords][z_angle], randcol, randcol2, 60000);
	rccounter++;
	return 1;
}*/

public PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

public StopMusic()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
		}
	}
}

public PlayerFixRadio(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    SetTimer("PlayerFixRadio2", 1000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		Fixr[playerid] = 1;
	}
}

public PlayerFixRadio2()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(Fixr[i])
			{
				PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
				Fixr[i] = 0;
			}
		}
	}
}

//---------------------------[DCMD Commands!!]--------------------------------------------
dcmd_specplayer(playerid, params[])
{
	new Giveplayerid, Name[256], String[256], Name2[256];
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
	if (sscanf(params, "d", Giveplayerid)) SendClientMessage(playerid,COLOR_WHITE, "SERVER: /specplayer [Playerid]");
	else if (!IsPlayerConnected(Giveplayerid)) SendClientMessage(playerid,COLOR_PURPLE,"Player not connected?");
	else
	{
	if ( Specing[Giveplayerid] == 1 )
	{
	SendClientMessage(playerid, COLOR_RED, "   The person you have tried to spec is spectating someone else.");
	}
	else
	{
    GetPlayerName(playerid, Name, 256);
	GetPlayerName(Giveplayerid, Name2, 256);
	format(String, 256, "[%i] %s is now spectating [%i] %s",playerid, Name,Giveplayerid, Name2);
	CallLocalFunction("ircRemoteSay", "iss", 1, "#FSE", String);
	Specing[playerid] = 1;
	}
	if ( !IsPlayerInAnyVehicle(Giveplayerid) )
	{
	TogglePlayerSpectating(playerid, 1);
	PlayerSpectatePlayer(playerid, Giveplayerid);
	SetPlayerInterior(playerid,GetPlayerInterior(Giveplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Giveplayerid));
	return 1;
	}
	else
	{
	TogglePlayerSpectating(playerid, 1);
	PlayerSpectateVehicle(playerid, GetPlayerVehicleID(Giveplayerid));
	SetPlayerInterior(playerid,GetPlayerInterior(Giveplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Giveplayerid));
	return 1;
	}
 	}
	}
	return 1;
}

dcmd_specoff(playerid, params[])
{
	#pragma unused params
	TogglePlayerSpectating(playerid, 0);
	Specing[playerid] = 0;
	return 1;
}
//---------------------------<[ OnPlayerCommandText ]>--------------------------------------------------------

public OnPlayerCommandText(playerid, cmdtext[])
{
    dcmd(specplayer, 10, cmdtext);
    dcmd(specoff, 7, cmdtext);
	new string[256];
	new playermoney;
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new playername[MAX_PLAYER_NAME];
	new cmd[256];
	new tmp[256];
	new giveplayerid, moneys, idx;
	new idcar = GetPlayerVehicleID(playerid);
	new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
	new dancestyle;
	new animid;
	cmd = strtok(cmdtext, idx);
	
		GetPlayerName(playerid, playername, sizeof(playername));
	format(string, sizeof(string), "%s [%d]: %s",playername,playerid, cmdtext);
	for(new j = 0; j < MAX_PLAYERS; j++)
	{
		if ((IsPlayerAdmin(j) && gSnoop[j] ==1 ) || (PlayerInfo[j][pAdmin] == 2000 && gSnoop[j] == 1 ))
		{
			SendClientMessage(j, 0xFF9900, string);
	  	}
	}
	/*for(new i = 0; i < sizeof(HouseInfo); i++)
	{
	    if(HouseInfo[i][hOwned] == 0)
	    {
	        SetPlayerMapIcon(playerid,i+14,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez],31,COLOR_LIGHTRED);
	    }
	}*/
/*//--------------[Radio]---------
if (strcmp("/musica", cmdtext, true, 10) == 0)
{
     ShowPlayerDialog(playerid,Radios,DIALOG_STYLE_LIST, "Musica:", "Pon una canción acá\nOtra acá\nY otra\nParar", "Aceptar","Cancelar");
      return 1;
     }*/
//-------------[descripcion]------
	if(strcmp(cmd, "/desc", true) == 0) //Este es el comando que pondrán.
	{
		if(dActivada[playerid] == 1) //Aquí si la descripcion, está en -Activado 1-, osea, que ya tienes una descripcion
		{
		    if(dActivada[playerid] == 1)
			{
			    format(string, sizeof(string), "Tu descripción actual es: %s",dTextVar[playerid]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Primero debes limpiar tu estado. /qdesc para borrarlo.");
				return 1;
			}
		}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GREY, "Usa: /desc [descripción]");
			return 1;
 		}
		format(string, sizeof(string), "%s",result); //Aquí estará lo que ustedes escriban al poner /descripcion
		descripcion[playerid] = Create3DTextLabel(string,COLOR_LIGHTGREEN,30.0,40.0,5.0,40.0,1);
		dTextVar[playerid] = string;
		Attach3DTextLabelToPlayer(descripcion[playerid], playerid, 0.0, 0.0, 0.40);
		SendClientMessage(playerid, COLOR_RED,"Usa /qdesc para borrar tu descripción actual.");//Al poner el comando, les aparecerá este mensaje
		format(string, sizeof(string), "Te has puesto como descripción: %s",result); //Y después este mensaje
		SendClientMessage(playerid, COLOR_LIGHTRED, string); //El color que aparecerá, y el mensaje va dirijido al jugador que tecleó el comando
		dActivada[playerid] = 1;   //Al poner el comando, se activa, se pone -Activado 1-
		return 1;
	}
	if (strcmp("/qdesc", cmdtext, true, 10) == 0) //El comando para quitar la descripcion
	{
		if(dActivada[playerid] == 1) //Aqui aparece que si está activada, borra el 3DTextLabel
	{
			dActivada[playerid] = 0; //Y se le da el -Activado 0-, para poder volver a usarlo, en caso de que esté en 0
			SendClientMessage(playerid, COLOR_LIGHTRED, "Texto limpio"); //Aparece este mensaje al jugador, te aparece: Texto limpiado
			Delete3DTextLabel(descripcion[playerid]); //Aquí borra el 3DTextLabel, está claro eso
		return 1;
	}
		return SendClientMessage(playerid, COLOR_GREY, "¡ Ya tienes tu descripción limpia !."); //Aparecerá este mensaje, ya que no tienes ninguna descripcion
	}


	if(strcmp(cmd, "/crb", true) == 0)
	{
	    new objeto[MAX_PLAYER_NAME];
		GetPlayerName(playerid, objeto, sizeof(objeto));
	    if(IsPlayerConnected(playerid) && IsACop(playerid) || IsPlayerAdmin(playerid) || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)
     	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "COMANDO: /crb [señal ID]");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sistema de vallas y señales disponibles:");
				SendClientMessage(playerid, COLOR_GRAD1, "| 1: Bloqueo Pequeño");
				SendClientMessage(playerid, COLOR_GRAD1, "| 2: Bloqueo Mediano");
				SendClientMessage(playerid, COLOR_GRAD1, "| 3: Bloqueo Grande");
				SendClientMessage(playerid, COLOR_GRAD1, "| 4: Cono");
				SendClientMessage(playerid, COLOR_GRAD1, "| 5: Señal Tipo 1");
				SendClientMessage(playerid, COLOR_GRAD1, "| 6: Señal Tipo 2");
				SendClientMessage(playerid, COLOR_GRAD1, "| 7: Señal Tipo 3");
				return 1;
			}
            new rb = strval(tmp);
            if (rb == 1)
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		        GetPlayerPos(playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle(playerid,ploca);
		        CreateRoadblock(1459,plocx,plocy,plocz+0.4,ploca);
		        format(string,sizeof(string),"[ESTADO]: %s ha colocado un Objeto, Cambio.",objeto);
		        SendRadioMessage(1,COLOR_BLUE,string);
		        SendRadioMessage(2,COLOR_BLUE,string);
		        SendRadioMessage(3,COLOR_BLUE,string);
		        SendRadioMessage(4,COLOR_BLUE,string);
		        SendRadioMessage(19,COLOR_BLUE,string);
		        GameTextForPlayer(playerid,"~w~Objeto ~g~colocado!",3000,1);
				return 1;
			}
			else if (rb == 2)
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		        GetPlayerPos(playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle(playerid,ploca);
		        CreateRoadblock(978,plocx,plocy,plocz+0.6,ploca);
		        format(string,sizeof(string),"[ESTADO]: %s ha colocado una Señal, Cambio.",objeto);
		        SendRadioMessage(1,COLOR_BLUE,string);
		        SendRadioMessage(2,COLOR_BLUE,string);
		        SendRadioMessage(3,COLOR_BLUE,string);
		        SendRadioMessage(4,COLOR_BLUE,string);
		        SendRadioMessage(19,COLOR_BLUE,string);
		        GameTextForPlayer(playerid,"~w~Objeto ~g~colocado!",3000,1);
				return 1;
			}
			else if (rb == 3)
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		        GetPlayerPos(playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle(playerid,ploca);
		        CreateRoadblock(981,plocx,plocy,plocz+0.8,ploca+180);
		        format(string,sizeof(string),"[ESTADO]: %s ha colocado una Señal, Cambio.",objeto);
		        SendRadioMessage(1,COLOR_BLUE,string);
		        SendRadioMessage(2,COLOR_BLUE,string);
		        SendRadioMessage(3,COLOR_BLUE,string);
		        SendRadioMessage(4,COLOR_BLUE,string);
		        SendRadioMessage(19,COLOR_BLUE,string);
		        printf("%s", string);
		        GameTextForPlayer(playerid,"~w~Objeto ~g~colocado!",3000,1);
		        SetPlayerPos(playerid, plocx, plocy+1.3, plocz);
				return 1;
			}
			else if (rb == 4)
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		        GetPlayerPos(playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle(playerid,ploca);
		        CreateRoadblock(1238,plocx,plocy,plocz+0.2,ploca);
		        format(string,sizeof(string),"[ESTADO]: %s ha colocado una Señal, Cambio.",objeto);
		        SendRadioMessage(1,COLOR_BLUE,string);
		        SendRadioMessage(2,COLOR_BLUE,string);
		        SendRadioMessage(3,COLOR_BLUE,string);
		        SendRadioMessage(4,COLOR_BLUE,string);
		        SendRadioMessage(19,COLOR_BLUE,string);
		        printf("%s", string);
		        GameTextForPlayer(playerid,"~w~Objeto ~g~colocado!",3000,1);
				return 1;
			}
			else if (rb == 5)
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		        GetPlayerPos(playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle(playerid,ploca);
		        CreateRoadblock(1425,plocx,plocy,plocz+0.4,ploca);
		        format(string,sizeof(string),"[ESTADO]: %s ha colocado una Señal, Cambio.",objeto);
		        SendRadioMessage(1,COLOR_BLUE,string);
		        SendRadioMessage(2,COLOR_BLUE,string);
		        SendRadioMessage(3,COLOR_BLUE,string);
		        SendRadioMessage(4,COLOR_BLUE,string);
		        SendRadioMessage(19,COLOR_BLUE,string);
		        printf("%s", string);
		        GameTextForPlayer(playerid,"~w~Objeto ~g~colocado!",3000,1);
				return 1;
			}
			else if (rb == 6)
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		        GetPlayerPos(playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle(playerid,ploca);
		        CreateRoadblock(3265,plocx,plocy,plocz-0.5,ploca);
		        format(string,sizeof(string),"[ESTADO]: %s ha colocado una Señal, Cambio.",objeto);
		        SendRadioMessage(1,COLOR_BLUE,string);
		        SendRadioMessage(2,COLOR_BLUE,string);
		        SendRadioMessage(3,COLOR_BLUE,string);
		        SendRadioMessage(4,COLOR_BLUE,string);
		        SendRadioMessage(19,COLOR_BLUE,string);
		        printf("%s", string);
		        GameTextForPlayer(playerid,"~w~Objeto ~g~colocado!",3000,1);
				return 1;
			}
			else if (rb == 7)
			{
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		        GetPlayerPos(playerid, plocx, plocy, plocz);
		        GetPlayerFacingAngle(playerid,ploca);
		        CreateRoadblock(3091,plocx,plocy,plocz+0.5,ploca+180);
		        format(string,sizeof(string),"[ESTADO]: %s ha colocado una Señal, Cambio.",objeto);
		        SendRadioMessage(1,COLOR_BLUE,string);
		        SendRadioMessage(2,COLOR_BLUE,string);
		        SendRadioMessage(3,COLOR_BLUE,string);
		        SendRadioMessage(4,COLOR_BLUE,string);
		        SendRadioMessage(19,COLOR_BLUE,string);
		        printf("%s", string);
		        GameTextForPlayer(playerid,"~w~Objeto ~g~colocado!",3000,1);
				return 1;
			}
		}
	    return 1;
	}
	else if (strcmp(cmd,"/rrb",true) == 0)
	{
	    new objeto[MAX_PLAYER_NAME];
		GetPlayerName(playerid, objeto, sizeof(objeto));
	    if(IsPlayerConnected(playerid) && IsACop(playerid) || IsPlayerAdmin(playerid) || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)
     	{
        	DeleteClosestRoadblock(playerid);
        	format(string,sizeof(string),"[ESTADO]: %s ha eliminado una Señal, Cambio.",objeto);
	        SendRadioMessage(1,COLOR_BLUE,string);
		        SendRadioMessage(2,COLOR_BLUE,string);
		        SendRadioMessage(3,COLOR_BLUE,string);
		        SendRadioMessage(4,COLOR_BLUE,string);
		        SendRadioMessage(19,COLOR_BLUE,string);
		        printf("%s", string);
	        GameTextForPlayer(playerid,"~w~Objeto ~r~eliminado!",3000,1);
		}
	    return 1;
	}
	else if (strcmp(cmd,"/rrball",true) == 0)
	{
	    new objeto[MAX_PLAYER_NAME];
		GetPlayerName(playerid, objeto, sizeof(objeto));
	    if(IsPlayerConnected(playerid) && IsACop(playerid) || IsPlayerAdmin(playerid) || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)
     	{
			if(PlayerInfo[playerid][pRank] >= 6 || IsPlayerAdmin(playerid)) // This being the default Chief rank in LA-RP change if neccesary.
			{
        		DeleteAllRoadblocks(playerid);
        		format(string,sizeof(string),"[ESTADO]: %s ha eliminado todas las Señales, Cambio.",objeto);
	        	SendRadioMessage(1,COLOR_BLUE,string);
		        SendRadioMessage(2,COLOR_BLUE,string);
		        SendRadioMessage(3,COLOR_BLUE,string);
		        SendRadioMessage(4,COLOR_BLUE,string);
		        SendRadioMessage(19,COLOR_BLUE,string);
		        printf("%s", string);
	        	GameTextForPlayer(playerid,"~b~Todos ~w~objetos ~r~elimados!",3000,1);
			}
		}
	    return 1;
	}


	
    if (strcmp("/pelotabasket", cmdtext, true, 6) == 0) // lineas Baloncesto
	{
        if (!PlayerToPoint(3, playerid,2799.5776,-2006.8701,13.5547))//Aparecer Pelota
	    {
	      SendClientMessage(playerid, COLOR_GRAD2, "   Usted no esta en el punto de donde se saca la pelota!");
	      return 1;
	  	}
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		DestroyObject(Ball);
		Ball = CreateObject(2114, x+random(3), y+random(3), z-0.8, 0, 0, 96);
		return 1;

	}
	
	
	
    if (strcmp("/u1", cmdtext, true, 10) == 0)
	{
		MoveObject(elevador1, -2583.979,632.829,29.505, 1);
		SendClientMessage(playerid,0xB4B5B7FF, "Arriba elevador de coches.");
		return 1;
	}
	if (strcmp("/u2", cmdtext, true, 10) == 0)
	{
		MoveObject(elevador2, -2584.047,638.835,29.505, 1);
		SendClientMessage(playerid,0xB4B5B7FF, "Arriba elevador de coches.");
		return 1;
	}
	if (strcmp("/u3", cmdtext, true, 10) == 0)
	{
		MoveObject(elevador3, -2584.077,644.873,29.574, 1);
		SendClientMessage(playerid,0xB4B5B7FF, "Arriba elevador de coches.");
		return 1;
	}
	if (strcmp("/u4", cmdtext, true, 10) == 0)
	{
		MoveObject(elevador4, -2553.808,643.878,29.480, 1);
		SendClientMessage(playerid,0xB4B5B7FF, "Arriba elevador de coches.");
		return 1;
	}
	if (strcmp("/d1", cmdtext, true, 10) == 0)
	{
		MoveObject(elevador1, -2583.979,632.829,26.499, 2);
		SendClientMessage(playerid,0xB4B5B7FF, "Abajo elevador de coches.");
		return 1;
	}
	if (strcmp("/d2", cmdtext, true, 10) == 0)
	{
		MoveObject(elevador2, -2583.965,638.821,26.549, 2);
		SendClientMessage(playerid,0xB4B5B7FF, "Abajo elevador de coches.");
		return 1;
	}
	if (strcmp("/d3", cmdtext, true, 10) == 0)
	{
		MoveObject(elevador3, -2583.977,644.867,26.499, 2);
		SendClientMessage(playerid,0xB4B5B7FF, "Abajo elevador de coches.");
		return 1;
	}
	if (strcmp("/d4", cmdtext, true, 10) == 0)
	{
		MoveObject(elevador4, -2553.830,643.880,26.499, 2);
		SendClientMessage(playerid,0xB4B5B7FF, "Abajo elevador de coches.");
		return 1;
	}
	
	
	
	if (strcmp("/baloncesto", cmdtext, true, 6) == 0)
	{
		jugarb[playerid] = 1;
		return 1;
	}
	if (strcmp("/nobaloncesto", cmdtext, true, 6) == 0)
	{
		jugarb[playerid] = 0;
		return 1;
	}
 	SetPlayerMapIcon(playerid, 0, 2048.352, -1900.153, 13.5538, 36, COLOR_YELLOW);  // Driving School
    SetPlayerMapIcon(playerid, 1, 1461.695, -1011.915, 26.84375, 52, COLOR_YELLOW);  // Bank
    SetPlayerMapIcon(playerid, 2, 1178.03, -1323.41, 14.10, 22, COLOR_YELLOW);  // Hospital
    SetPlayerMapIcon(playerid, 3, 1480.9323,-1767.7324,18.7958, 4, COLOR_YELLOW);	// CITY HALL
    SetPlayerMapIcon(playerid, 4, 2236.6321,-2280.0920,13.5469, 18, COLOR_YELLOW);	// Materials Bank
    SetPlayerMapIcon(playerid, 5, 1312.4210,-898.5630,39.5781, 17, COLOR_YELLOW);	// 24/7
    SetPlayerMapIcon(playerid, 6, 1832.4276,-1838.3896,13.5781, 17, COLOR_YELLOW);	// 24/7
	SetPlayerMapIcon(playerid, 7, 1353.6860,-1757.4297,13.5078, 17, COLOR_YELLOW);	// 24/7
	SetPlayerMapIcon(playerid, 8, 1000.4357,-922.5285,42.3281, 17, COLOR_YELLOW);	// 24/7
	SetPlayerMapIcon(playerid, 9, 2105.4858,-1806.4725,13.5547, 29, COLOR_YELLOW);	// Pizza stack
	SetPlayerMapIcon(playerid, 10, 2229.9011,-1721.2582,13.5613, 54, COLOR_YELLOW);	// Gimnasio
	SetPlayerMapIcon(playerid, 11, 2244.3423,-1665.5542,15.4766, 45, COLOR_YELLOW);	// Binco
	SetPlayerMapIcon(playerid, 12, 461.4502,-1500.7125,31.0608, 45, COLOR_YELLOW);	// VICTIM
	SetPlayerMapIcon(playerid, 13, 2112.8623,-1211.4917,23.9629, 45, COLOR_YELLOW);	// SUBURBAN
	SetPlayerMapIcon(playerid, 14, 2028.0181,-1416.9786,16.7027, 12, COLOR_YELLOW);	// CNN NOTICIAS
	SetPlayerMapIcon(playerid, 15, 953.7375,-1336.2754,13.5391, 21, COLOR_YELLOW);	// Sex shop corazon
	//SetPlayerMapIcon(playerid, 16, 1412.2323,-1699.8379,13.5395, 25, COLOR_YELLOW);	// bolsa
	SetPlayerMapIcon(playerid, 17, 1550.7922,-1675.4043,15.5630, 30, COLOR_YELLOW);	// comisaria
	SetPlayerMapIcon(playerid, 18, 1755.6188,-2059.6323,13.5944, 27, COLOR_YELLOW);	// mecanicos
	SetPlayerMapIcon(playerid, 19, 2488.5056,-2008.9634,13.3378, 61, COLOR_YELLOW);	// banda azul
	//SetPlayerMapIcon(playerid, 20, 2131.0454,-1683.6302,15.0859, 59, COLOR_YELLOW);	// banda morada
	SetPlayerMapIcon(playerid, 21, 2492.7495,-1669.3640,13.3359, 62, COLOR_YELLOW);	// banda verde
	SetPlayerMapIcon(playerid, 22, 2652.5554,-2004.0612,13.3828, 60, COLOR_YELLOW);	// banda amarilla
	SetPlayerMapIcon(playerid, 23, 555.2156,-1281.1042,17.2482, 55, COLOR_YELLOW);	// concesionario lujo
	SetPlayerMapIcon(playerid, 24, 2128.2727,-1134.7274,25.5855, 55, COLOR_YELLOW);	// concesionario motos
	SetPlayerMapIcon(playerid, 25, 332.7874,-1802.2903,4.6259, 55, COLOR_YELLOW);	// concesionario playa
	SetPlayerMapIcon(playerid, 26, 1782.5330,-1911.0627,13.3912, 55, COLOR_YELLOW);	// concesionario unity
	SetPlayerMapIcon(playerid, 27, 1698.9930,-1070.4977,23.9063, 55, COLOR_YELLOW);	// concesionario publico
	//SetPlayerMapIcon(playerid, 28, 1126.1451,-1460.9459,15.7969, 9, COLOR_YELLOW);	// premium
	SetPlayerMapIcon(playerid, 29, 2858.5547,-1854.2488,11.2876, 53, COLOR_YELLOW);	// nueva pista de carreras
	SetPlayerMapIcon(playerid, 30, 2283.2366,-2330.1997,13.5469, 51, COLOR_YELLOW);	// camionero
	//SetPlayerMapIcon(playerid, 31, 416.6387,-1431.9077,32.3733, 56, COLOR_YELLOW);	// paintball
	SetPlayerMapIcon(playerid, 32, 1955.0692,-2171.2534,13.3828, 56, COLOR_YELLOW);	// paracaidismo
	SetPlayerMapIcon(playerid, 33, 1497.5024,-2462.3655,13.5547, 5, COLOR_YELLOW);	// venta de aviones
	SetPlayerMapIcon(playerid, 35, 1137.0293,-1757.5895,13.5863, 56, COLOR_YELLOW);	// taxistas
	//SetPlayerMapIcon(playerid, 36, 966.7827,-1253.7759,16.9688, 56, COLOR_YELLOW);	// ladrones
	SetPlayerMapIcon(playerid, 37, 2453.3960,-2613.9502,13.6639, 56, COLOR_YELLOW);	// montacargas
	//SetPlayerMapIcon(playerid, 38, 1961.6971,-1563.6790,13.6099, 56, COLOR_YELLOW);	// venta de drogas
	SetPlayerMapIcon(playerid, 39, 236.8300,-1810.8712,4.3559, 56, COLOR_YELLOW);	// futbol playa
	SetPlayerMapIcon(playerid, 40, 1248.5768,-1562.5154,13.6189, 56, COLOR_YELLOW);	// comercial
	SetPlayerMapIcon(playerid, 41, 1632.3917,-1902.3378,13.5529, 56, COLOR_YELLOW);	// barrendero
	SetPlayerMapIcon(playerid, 11, 816.4208,856.9929,12.7891, 56, COLOR_YELLOW);	// Minero
	SetPlayerMapIcon(playerid, 42, 755.7677,-1275.5878,13.5547, 44, COLOR_YELLOW); //Yakuza
	SetPlayerMapIcon(playerid, 43, 1279.0764,-810.4044,88.3151, 25, COLOR_YELLOW); //LCN
	SetPlayerMapIcon(playerid, 44, 1512.5970,-1504.5536,13.5654, 23, COLOR_YELLOW); //HITMAN
    SetPlayerMapIcon(playerid, 45, 1776.421,-1866.541,12.766, 52, COLOR_YELLOW); //CAJERO1
    SetPlayerMapIcon(playerid, 46, 1416.919,-1663.243,12.741, 52, COLOR_YELLOW); //CAJERO2
    SetPlayerMapIcon(playerid, 47, 552.877,-1339.208,12.932, 52, COLOR_YELLOW); //CAJERO3
    SetPlayerMapIcon(playerid, 48, 410.898,-1765.652,4.656, 52, COLOR_YELLOW); //CAJERO4
    SetPlayerMapIcon(playerid, 49, 2351.203,-1539.489,23.199, 52, COLOR_YELLOW); //CAJERO5
    SetPlayerMapIcon(playerid, 50, 712.9537,-513.7274,16.3359, 52, COLOR_YELLOW); //CAJERO6
    SetPlayerMapIcon(playerid, 51, 1812.7332,-1842.1777,13.5781, 10, COLOR_YELLOW); //PERRITOS1
    SetPlayerMapIcon(playerid, 52, 2233.2932,-1741.7515,13.5518, 10, COLOR_YELLOW); //PERRITOS2
    SetPlayerMapIcon(playerid, 53, 1706.2594,-1722.2362,13.5533, 10, COLOR_YELLOW); //PERRITOS3
    SetPlayerMapIcon(playerid, 54, 1540.0558,-1721.9956,13.5546, 10, COLOR_YELLOW); //PERRITOS4
    SetPlayerMapIcon(playerid, 55, 1252.2681,-1413.7200,13.4105, 10, COLOR_YELLOW); //PERRITOS5
    SetPlayerMapIcon(playerid, 56, 1589.7230,-1288.4901,17.5130, 10, COLOR_YELLOW); //PERRITOS6
	SetPlayerMapIcon(playerid, 57, 206.4340,-1430.6790,13.1965, 55, COLOR_YELLOW); //concesionario al lado de los quad
	SetPlayerMapIcon(playerid, 58, 339.9464,-1347.3505,14.5078, 55, COLOR_YELLOW); //concesionario quad y motos 2
	SetPlayerMapIcon(playerid, 59, 1581.4187,-2157.0664,13.5551, 55, COLOR_YELLOW); //concesionario 6
	SetPlayerMapIcon(playerid, 60, 1294.3865,-2578.0647,13.5967, 55, COLOR_YELLOW); //concesionario 7
	SetPlayerMapIcon(playerid, 61, 339.3032,-1346.1239,14.5078, 55, COLOR_YELLOW); //concesionario bicis
	SetPlayerMapIcon(playerid, 62, 1016.9240,-1358.0116,13.3787, 55, COLOR_YELLOW); //concesionario motos 3
	SetPlayerMapIcon(playerid, 63, 1286.6304,-2581.7502,13.4164, 55, COLOR_YELLOW); //concesionario 5
	SetPlayerMapIcon(playerid, 64, -381.0911,-1438.6759,25.7266, 56, COLOR_YELLOW);	// granjero
	SetPlayerMapIcon(playerid, 65, -86.0069,2.3987,3.1172, 56, COLOR_YELLOW);	// agricultor drogas
	SetPlayerMapIcon(playerid, 66, 1836.5011,-1682.2869,13.3453, 48, COLOR_YELLOW); // negocio alhambra
	SetPlayerMapIcon(playerid, 67, 1877.8740,-1737.1288,13.3323, 49, COLOR_YELLOW);	// negocio jizzi
	SetPlayerMapIcon(playerid, 68, 776.3019,-1036.2046,24.2724, 50, COLOR_YELLOW);	// negocio restaurante
	SetPlayerMapIcon(playerid, 69, 2110.9067,-2078.4744,13.5544, 56, COLOR_YELLOW);	// Basurero
	SetPlayerMapIcon(playerid, 70, 248.4994,-33.1366,1.5781, 56, COLOR_YELLOW);	// trabajo materiales
	
	if(strcmp(cmd,"/animaciones",true) == 0 || strcmp("/anim", cmdtext, true) == 0)
	{
	    new result[64];
	    SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
		SendClientMessage(playerid,RED,"- Catálogo de animaciones.");
	    SendClientMessage(playerid,WHITE," - /animacalle/ - /animafiesta/ - ");
	    SendClientMessage(playerid,WHITE," - /animalucha/ - /animageo/ - ");
	    SendClientMessage(playerid,WHITE," - /animamalo/ - /animasexo/ - ");
	    SendClientMessage(playerid,WHITE," - /animagesto/ - /animapublico/ ");
	    SendClientMessage(playerid,WHITE," - /animavanzado/ - /anim/ -");
        SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
        format(string, sizeof(string), "~w~   Catalogo   ~n~      de      ~n~Animaciones~r~ R2.3",result);
		GameTextForPlayer(playerid, string, 5000, 1);
        return true;
	}

	if(strcmp(cmd,"/animapublico",true) == 0 || strcmp("/animapublico", cmdtext, true) == 0)
	{
	    SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
		SendClientMessage(playerid,RED,"- Lista de Animaciones:     (Pulsa :Apuntar: para detener animaciones).");
  		SendClientMessage(playerid,WHITE," /anormal");
	    SendClientMessage(playerid,WHITE," - /animapublicoinfo -");
        SendClientMessage(playerid, YELLOW, "_________________________________________________________________________________________________.:D4C:.___");
        return true;
	}

	if(strcmp(cmd,"/animapublicoinfo",true) == 0 || strcmp("/animapublicoinfo", cmdtext, true) == 0)
	{
        SendClientMessage(playerid, YELLOW, "¿Viste una animación que te gustó y te gustaría que estuviera?");
        SendClientMessage(playerid, YELLOW, "¡Comunicanosló y la pondremos!");
        SendClientMessage(playerid, WHITE, " - Recuerda no abusar de esta opción ni del /Animavanzado.");
        return true;
	}


	if(strcmp(cmd,"/animagesto",true) == 0 || strcmp("/animagesto", cmdtext, true) == 0)
	{
	    SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
		SendClientMessage(playerid,RED,"- Lista de Animaciones:     (Pulsa :Apuntar: para detener animaciones).");
	    SendClientMessage(playerid,WHITE," /alto, /hey, /hablar, /cruzar, /toma, /aceptado, /negado, /joder");
	    SendClientMessage(playerid,WHITE," /animar,  /apartar, /eeh, /esperar1-6, /rap, /gritar, /pose, /tranki");
	    SendClientMessage(playerid,WHITE," /saludo, /salva");
        SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
        return true;
	}

	if(strcmp(cmd,"/animacalle",true) == 0 || strcmp("/animacalle", cmdtext, true) == 0)
	{
	    SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
		SendClientMessage(playerid,RED,"- Lista de Animaciones:     (Pulsa :Apuntar: para detener animaciones).");
	    SendClientMessage(playerid,WHITE," /borracho, /reir, /pelota, /fumando, /sentar1-2, /comiendo, /salto, /cerrado");
	    SendClientMessage(playerid,WHITE," /visera, /movilsi, /movilno,  /vomitar, /manos, /mear, /repararagachado, /andar");
	    SendClientMessage(playerid,WHITE," /tirado, /tumbado1-2, /bate, /cansado, /cabezon, /medico, /dormir1-2");
        SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
        return true;
	}

	if(strcmp(cmd,"/animafiesta",true) == 0 || strcmp("/animafiesta", cmdtext, true) == 0)
	{
	    SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
		SendClientMessage(playerid,RED,"- Lista de Animaciones:     (Pulsa :Apuntar: para detener animaciones).");
	    SendClientMessage(playerid,WHITE," /besar, /bailar, /sexys, /culo");
        SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
        return true;
	}

	if(strcmp(cmd,"/animalucha",true) == 0 || strcmp("/animalucha", cmdtext, true) == 0)
	{
	    SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
		SendClientMessage(playerid,RED,"- Lista de Animaciones:     (Pulsa :Apuntar: para detener animaciones).");
	    SendClientMessage(playerid,WHITE," /patada, /empujar, /placar, /kocara, /kotripa, /taichi");
	    SendClientMessage(playerid,WHITE," /codazo, /rodilla, /patadalarga, /patadacorta, /aplastar");
	    SendClientMessage(playerid,WHITE," /tirar1-4, /boxeo, /alerta, /luchatipo1-4");
        SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
        return true;
	}

	if(strcmp(cmd,"/animageo",true) == 0 || strcmp("/animageo", cmdtext, true) == 0)
	{
	    SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
		SendClientMessage(playerid,RED,"- Lista de Animaciones:     (Pulsa :Apuntar: para detener animaciones).");
  		SendClientMessage(playerid,WHITE," /plantar, /apuntar, /spray, /acojonar, /lanzar1-2");
  		SendClientMessage(playerid,WHITE," /espera, /seña, /avante");
        SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
        return true;
	}

	if(strcmp(cmd,"/animamalo",true) == 0 || strcmp("/animamalo", cmdtext, true) == 0)
	{
	    SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
		SendClientMessage(playerid,RED,"- Lista de Animaciones:     (Pulsa :Apuntar: para detener animaciones).");
  		SendClientMessage(playerid,WHITE," /caer, /epilepsia, /herido, /drogado , /cubrirse, /balazo");
        SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
        return true;
	}

	if(strcmp(cmd,"/animasexo",true) == 0 || strcmp("/animasexo", cmdtext, true) == 0)
	{
	    SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
		SendClientMessage(playerid,RED,"- Lista de Animaciones:     (Pulsa :Apuntar: para detener animaciones).");
		SendClientMessage(playerid,WHITE," /paja, /chupar1-2, /mamada1-2");
        SendClientMessage(playerid, YELLOW, "___________________________________________________________________________________________________________");
        return true;
	}

	#if defined DISALLOW_ANIMS_INVEHICLES
	    if (GetPlayerState(playerid) == PLAYER_STATE_ON) return SendClientMessage(playerid, RED, "ERROR: No esta activo.");
	#endif

	// HANDSUP
 	if(strcmp(cmd, "/alto", true) == 0) {
		//SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		ApplyAnimation(playerid, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 1, 1);
        return 1;
    }

    // CELLPHONE IN
 	if(strcmp(cmd, "/movilsi", true) == 0) {
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
        return 1;
    }

    // CELLPHONE OUT
 	if(strcmp(cmd, "/movilno", true) == 0) {
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
        return 1;
    }

    // Drunk
    if(strcmp(cmd, "/borracho", true) == 0) {
		ApplyAnimation(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1,1);
		return 1;
    }

	// Place a Bomb
    if (strcmp("/plantar", cmdtext, true) == 0) {
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0,1); // Place Bomb
		return 1;
	}
	// Police Arrest
    if (strcmp("/apuntar", cmdtext, true) == 0) {
	      ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1, 1); // Gun Arrest
		  return 1;
    }
	// Laugh
    if (strcmp("/reir", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0, 1); // Laugh
		  return 1;
	}
	// Rob Lookout
    if (strcmp("/visera", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1); // Rob Lookout
		  return 1;
	}
	// Rob Threat
    if (strcmp("/acojonar", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0, 1); // Rob
		  return 1;
	}
	// Arms crossed
    if (strcmp("/cruzar", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1, 1); // Arms crossed
		  return 1;
	}
	// Lay Down
    if (strcmp("/tumbado1", cmdtext, true) == 0) {
          ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1); // Lay down
		  return 1;
    }
	// Take Cover
    if (strcmp("/cubrirse", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0, 1); // Taking Cover
		  return 1;
	}
	// Vomit
    if (strcmp("/vomitar", cmdtext, true) == 0) {
	      ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0, 1); // Vomit BAH!
		  return 1;
	}
	// Eat Burger
    if (strcmp("/comiendo", cmdtext, true) == 0) {
	      ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0, 1); // Eat Burger
		  return 1;
	}
	// Wave
    if (strcmp("/eeh", cmdtext, true) == 0) {
	      ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0, 1); // Wave
		  return 1;
	}
	// Slap Ass
    if (strcmp("/culo", cmdtext, true) == 0) {
   		ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0, 1); // Ass Slapping
 		return 1;
	}
	// aceptado
    if (strcmp("/aceptado", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0, 1); // Deal Drugs
		  return 1;
	}
	// saludo
    if (strcmp("/saludo", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "PED", "endchat_03", 4.0, 0, 0, 0, 0, 0, 1); // Deal Drugs
		  return 1;
	}
	// saludomilitar
	if (strcmp("/salva", cmdtext, true) == 0) {
          ApplyAnimation(playerid,"ON_LOOKERS","lkup_in",4.1,0,1,1,1,1,1);
          SetTimerEx("quitarsalva", 2000, false, "i", playerid);
		  return 1;
	}
	// negado
    if (strcmp("/negado", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "PED", "endchat_02", 4.0, 0, 0, 0, 0, 0, 1); // Deal Drugs
		  return 1;
	}
	// tranki
    if (strcmp("/tranki", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "PED", "endchat_01", 4.0, 0, 0, 0, 0, 0, 1); // Deal Drugs
		  return 1;
	}
	// Crack Dieing
    if (strcmp("/drogado", cmdtext, true) == 0) {
          ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1); // Dieing of Crack
		  return 1;
	}
	// Smoking animations
	if(strcmp(cmd, "/fumando", true) == 0)
    {
        if (!strlen(cmdtext[9])) return SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /fumando [1-4]");
    	switch (cmdtext[9])
    	{
        	case '1': ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0, 1); // male
        	case '2': ApplyAnimation(playerid,"SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0, 1); //female
        	case '3': ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0, 1); // standing-fucked
        	case '4': ApplyAnimation(playerid,"SMOKING","M_smk_out", 4.0, 1, 0, 0, 0, 0, 1); // standing
        	default: SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /fumando [1-4]");
    	}
    	return 1;
    }
	// Sit1
    if (strcmp("/sentar1", cmdtext, true)==0) {
          ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0, 1); // Sit
		  return 1;
    }
   	// Sit2
    if (strcmp("/sentar2", cmdtext, true)==0) {
          ApplyAnimation(playerid,"PED", "SEAT_down", 4.0,0,0,1,1,0,1); // Sit
		  return 1;
    }
  	// comer sentado
    if (strcmp("/comer1", cmdtext, true)==0) {
          ApplyAnimation(playerid,"FOOD", "FF_SIT_EAT1", 4.0,0,0,1,1,0,1); // Sit
		  return 1;
    }
   	// comer sentado
    if (strcmp("/comer2", cmdtext, true)==0) {
          ApplyAnimation(playerid,"FOOD", "FF_SIT_EAT2", 4.0,0,0,1,1,0,1); // Sit
		  return 1;
    }
   	// comer sentado
    if (strcmp("/comer3", cmdtext, true)==0) {
          ApplyAnimation(playerid,"FOOD", "FF_SIT_IN", 4.0,0,0,1,1,0,1); // Sit
		  return 1;
    }
    // Idle Chat
    if(strcmp(cmd, "/hablar", true) == 0) {
		 ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1,1);
         return 1;
    }
    // Fucku
    if(strcmp(cmd, "/joder", true) == 0) {
		 ApplyAnimation(playerid,"PED","fucku",4.0,0,0,0,0,0,1);
         return 1;
    }
    // TaiChi
    if(strcmp(cmd, "/taichi", true) == 0) {
		 ApplyAnimation(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0,1);
         return 1;
    }

    // Fall on the ground
    if(strcmp(cmd, "/caer", true) == 0) {
		 ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0,1);
         return 1;
    }

    // Fall
    if(strcmp(cmd, "/epilepsia", true) == 0) {
		 ApplyAnimation(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0, 1);
         return 1;
    }

    // Paja
    if(strcmp(cmd, "/paja", true) == 0) {
		 ApplyAnimation(playerid, "PAULNMAC","wank_loop", 4.0, 1, 0, 0, 0, 0, 1);
         return 1;
    }

    // chupar1
    if(strcmp(cmd, "/chupar1", true) == 0) {
		 ApplyAnimation(playerid, "BLOWJOBZ","BJ_STAND_LOOP_W", 4.0, 1, 0, 0, 0, 0, 1);
         return 1;
    }

    // chupar2
    if(strcmp(cmd, "/chupar2", true) == 0) {
		 ApplyAnimation(playerid, "BLOWJOBZ","BJ_COUCH_LOOP_W", 4.0, 1, 0, 0, 0, 0, 1);
         return 1;
    }

   	// mamada1
    if(strcmp(cmd, "/mamada1", true) == 0) {
		 ApplyAnimation(playerid, "BLOWJOBZ","BJ_STAND_LOOP_P", 4.0, 1, 0, 0, 0, 0, 1);
         return 1;
    }

   	// mamada2
    if(strcmp(cmd, "/mamada2", true) == 0) {
		 ApplyAnimation(playerid, "BLOWJOBZ","BJ_COUCH_LOOP_P", 4.0, 1, 0, 0, 0, 0, 1);
         return 1;
    }

   	// Balazo
    if(strcmp(cmd, "/balazo", true) == 0) {
		 ApplyAnimation(playerid, "SWAT","gnstwall_injurd", 4.0, 1, 0, 0, 0, 0, 1);
         return 1;
    }

   	// reparar
    if(strcmp(cmd, "/repararagachado", true) == 0) {
		 ApplyAnimation(playerid, "COP_AMBIENT","Copbrowse_loop", 4.0, 1, 0, 0, 0, 0, 1);
         return 1;
    }

   	// espera
    if(strcmp(cmd, "/espera", true) == 0) {
		 ApplyAnimation(playerid, "SWAT","swt_lkt", 4.0, 0, 0, 0, 0, 0, 1);
         return 1;
    }

   	// seña
    if(strcmp(cmd, "/seña", true) == 0) {
		 ApplyAnimation(playerid, "SWAT","swt_sty", 4.0, 0, 0, 0, 0, 0, 1);
         return 1;
    }

    // avante
    if(strcmp(cmd, "/avante", true) == 0) {
		 ApplyAnimation(playerid, "WUZI","Wuzi_follow", 4.0, 0, 0, 0, 0, 0, 1);
         return 1;
    }

    // kiss
    if(strcmp(cmd, "/besar", true) == 0) {
		 ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 3.0, 1, 1, 1, 1, 0, 1);
         return 1;
    }

    // Injujred
    if(strcmp(cmd, "/herido", true) == 0) {
		 ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
         return 1;
    }

    // Homie animations
    if(strcmp(cmd, "/hey", true) == 0)
    {
        if (!strlen(cmdtext[5])) return SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /hey [1-3]");
    	switch (cmdtext[5])
    	{
        	case '1': ApplyAnimation(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0,1);
         	case '2': ApplyAnimation(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0,1);
         	case '3': ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0,1);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /hey [1-3]");
    	}
    	return 1;
    }

    // Rap animations
    if(strcmp(cmd, "/rap", true) == 0)
    {
        if (!strlen(cmdtext[5])) return SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /rap [1-4]");
    	switch (cmdtext[5])
    	{
    	    case '1': ApplyAnimation(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0,1);
        	case '2': ApplyAnimation(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0,1);
        	case '3': ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,0,0,1);
        	case '4': ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1,1);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /rap [1-4]");
    	}
    	return 1;
    }

    // Violence animations
    if(strcmp(cmd, "/empujar", true) == 0) {
		 ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0,1);
         return 1;
    }

    if(strcmp(cmd, "/patada", true) == 0) {
		 ApplyAnimation(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0,1);
         return 1;
    }

    if(strcmp(cmd, "/placar", true) == 0) {
		 ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0,1);
         return 1;
    }

    // Spray
    if(strcmp(cmd, "/spray", true) == 0) {
		 ApplyAnimation(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0,1);
         return 1;
    }

    // Headbutt
    if(strcmp(cmd, "/cabezon", true) == 0) {
		 ApplyAnimation(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0,1);
         return 1;
    }

    // Medic
    if(strcmp(cmd, "/medico", true) == 0) {
		 ApplyAnimation(playerid,"MEDIC","CPR",4.0,0,0,0,0,0,1);
         return 1;
    }

    // KO Face
    if(strcmp(cmd, "/kocara", true) == 0) {
		 ApplyAnimation(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0,1);
         return 1;
    }

    // KO Stomach
    if(strcmp(cmd, "/kotripa", true) == 0) {
		 ApplyAnimation(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0,1);
         return 1;
    }

    // Jump for your life!
    if(strcmp(cmd, "/salto", true) == 0) {
		 ApplyAnimation(playerid,"PED","EV_dive",4.0,0,1,1,1,0,1);
         return 1;
    }

    // Exhausted
    if(strcmp(cmd, "/cansado", true) == 0) {
		 ApplyAnimation(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0,1);
         return 1;
    }

    // Left big slap
    if(strcmp(cmd, "/apartar", true) == 0) {
		 ApplyAnimation(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0,1);
         return 1;
    }

    // Big fall
    if(strcmp(cmd, "/tirado", true) == 0) {
		 ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0,1);
         return 1;
    }

    // Locked
    if(strcmp(cmd, "/cerrado", true) == 0) {
		 ApplyAnimation(playerid,"PED","CAR_doorlocked_LHS",4.0,0,0,0,0,0,1);
         return 1;
    }

    // carjack
    if(strcmp(cmd, "/tirar1", true) == 0) {
		 ApplyAnimation(playerid,"PED","CAR_pulloutL_LHS",4.0,0,0,0,0,0,1);
         return 1;
    }

    // carjack
    if(strcmp(cmd, "/tirar3", true) == 0) {
		 ApplyAnimation(playerid,"PED","CAR_pulloutL_RHS",4.0,0,0,0,0,0,1);
         return 1;
    }

    // carjack
    if(strcmp(cmd, "/tirar2", true) == 0) {
		 ApplyAnimation(playerid,"PED","CAR_pullout_LHS",4.0,0,0,0,0,0,1);
         return 1;
    }

    // carjack
    if(strcmp(cmd, "/tirar4", true) == 0) {
		 ApplyAnimation(playerid,"PED","CAR_pullout_RHS",4.0,0,0,0,0,0,1);
         return 1;
    }

    /*/ Hood frisked
    if(strcmp(cmd, "/arrestao", true) == 0) {
		 LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
         return 1;
    }*/

    // Bat stance
    if(strcmp(cmd, "/bate", true) == 0) {
		 ApplyAnimation(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0,1);
         return 1;
    }

    // Boxing
    if(strcmp(cmd, "/boxeo", true) == 0) {
		 ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0,1);
         return 1;
    }

    // Lay 2
    if(strcmp(cmd, "/tumbado2", true) == 0) {
		 ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0,1);
         return 1;
    }

    // Gogogo
    if(strcmp(cmd, "/animar", true) == 0) {
		 ApplyAnimation(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0,1);
         return 1;
    }

    // Finger
    if(strcmp(cmd, "/toma", true) == 0) {
		 ApplyAnimation(playerid,"RIOT","RIOT_FUKU",2.0,0,0,0,0,0,1);
         return 1;
    }

    // Shouting
    if(strcmp(cmd, "/gritar", true) == 0) {
		 ApplyAnimation(playerid,"RIOT","RIOT_shout",4.0,1,0,0,0,0,1);
         return 1;
    }

    // Cop stance
    if(strcmp(cmd, "/manos", true) == 0) {
		 ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,1,1,1,1);
         return 1;
    }

    // Elbow
    if(strcmp(cmd, "/codazo", true) == 0) {
		 ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0,1);
         return 1;
    }

    // Knee kick
    if(strcmp(cmd, "/rodilla", true) == 0) {
		 ApplyAnimation(playerid,"FIGHT_D","FightD_2",4.0,0,1,1,0,0,1);
         return 1;
    }

    // Fight stance
    if(strcmp(cmd, "/alerta", true) == 0) {
		 ApplyAnimation(playerid,"FIGHT_D","FightD_IDLE",4.0,1,1,1,1,0,1);
         return 1;
    }

    // Ground punch
    if(strcmp(cmd, "/aplastar", true) == 0) {
		 ApplyAnimation(playerid,"FIGHT_B","FightB_G",4.0,0,0,0,0,0,1);
         return 1;
    }

    // Air kick
    if(strcmp(cmd, "/patadalarga", true) == 0) {
		 ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0,1);
         return 1;
    }

    // Ground kick
    if(strcmp(cmd, "/patadacorta", true) == 0) {
		 ApplyAnimation(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0,1);
         return 1;
    }

    // Low throw
    if(strcmp(cmd, "/lanzar1", true) == 0) {
		 ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0,1);
         return 1;
    }

    // Ground kick
    if(strcmp(cmd, "/lanzar2", true) == 0) {
		 ApplyAnimation(playerid,"GRENADE","WEAPON_throw",4.0,0,0,0,0,0,1);
         return 1;
    }

    // Deal stance11
    if(strcmp(cmd, "/esperar1", true) == 0) {
		 ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0,1);
         return 1;
    }

    // Deal stance22
    if(strcmp(cmd, "/esperar2", true) == 0) {
		 ApplyAnimation(playerid,"PLAYIDLES","time",4.0,1,0,0,0,0,1);
         return 1;
    }

    // anormal
    if(strcmp(cmd, "/anormal", true) == 0) {
		 ApplyAnimation(playerid,"PED","HIT_walk",4.1,1,1,1,1,1,1);
         return 1;
    }

    // correr
    if(strcmp(cmd, "/macacovolador", true) == 0) {
		 ApplyAnimation(playerid,"PED","sprint_civi",4.1,1,1,1,1,1,1);
         return 1;
    }

    // Deal stance33
    if(strcmp(cmd, "/esperar3", true) == 0) {
		 ApplyAnimation(playerid,"PLAYIDLES","shift",4.0,1,0,0,0,0,1);
         return 1;
    }

    // Deal stance44
    if(strcmp(cmd, "/esperar4", true) == 0) {
		 ApplyAnimation(playerid,"PLAYIDLES","shldr",4.0,1,0,0,0,0,1);
         return 1;
    }

    // Deal stance55
    if(strcmp(cmd, "/esperar5", true) == 0) {
		 ApplyAnimation(playerid,"PLAYIDLES","stretch",4.0,1,0,0,0,0,1);
         return 1;
    }

    // Deal stance66
    if(strcmp(cmd, "/esperar6", true) == 0) {
		 ApplyAnimation(playerid,"PLAYIDLES","strleg",4.0,1,0,0,0,0,1);
         return 1;
    }

    // Deal stance
    if(strcmp(cmd, "/mear", true) == 0) {
		 SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
         return 1;
    }

    // Basket-ball
    if(strcmp(cmd, "/pelota", true) == 0)
    {
        if (!strlen(cmdtext[8])) return SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /pelota [1-6]");
    	switch (cmdtext[8])
    	{
        	case '1': ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0,1);
        	case '2': ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0,1);
        	case '3': ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0,1);
        	case '4': ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1,1);
        	case '5': ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0,1);
        	case '6': ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0,1);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /pelota [1-6]");
    	}
    	return 1;
    }

    if(strcmp(cmd, "/andar", true) == 0)
    {
        if (!strlen(cmdtext[6])) return SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /andar [1/16]");
        new style = strval(cmdtext[6]);
       	if (style == 1)
   	    {
   			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 2)
   	    {
   			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 3)
   	    {
   			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 4)
   	    {
   			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 5)
   	    {
   			ApplyAnimation(playerid,"PED","WOMAN_walkfatold",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 6)
   	    {
   			ApplyAnimation(playerid,"PED","run_fat",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 7)
   	    {
   			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1,1);
 	    }
		else if (style == 8)
   	    {
   			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 9)
   	    {
   			ApplyAnimation(playerid,"PED","WOMAN_walkshop",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 10)
   	    {
   			ApplyAnimation(playerid,"PED","run_fatold",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 11)
   	    {
   			ApplyAnimation(playerid,"PED","WALK_armed",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 12)
   	    {
   			ApplyAnimation(playerid,"PED","WALK_csaw",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 13)
   	    {
   			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 14)
   	    {
   			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 15)
   	    {
   			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1,1);
 	    }
 	    else if (style == 16)
   	    {
   			ApplyAnimation(playerid,"PED","Player_Sneak",4.1,1,1,1,1,1,1);
 	    }
       	else SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /andar [1/16]");
    	return 1;
    }

    //Aiming animation
    if(strcmp(cmd, "/apuntar", true) == 0)
    {
        if (!strlen(cmdtext[5])) return SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /apuntar [1-3]");
    	switch (cmdtext[5])
    	{
        	case '1': ApplyAnimation(playerid,"PED","gang_gunstand",4.0,1,1,1,1,1,1);
        	case '2': ApplyAnimation(playerid,"PED","Driveby_L",4.0,0,1,1,1,1,1);
        	case '3': ApplyAnimation(playerid,"PED","Driveby_R",4.0,0,1,1,1,1,1);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /apuntar [1-3]");
    	}
    	return 1;
    }

    // Leaning animation
    if(strcmp(cmd, "/pose", true) == 0)
    {
        if (!strlen(cmdtext[6])) return SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /pose [1-2]");
    	switch (cmdtext[6])
    	{
        	case '1': ApplyAnimation(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0,1);
        	case '2': ApplyAnimation(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0,1);
        	default: SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /pose [1-2]");
    	}
    	return 1;
    }

    // Strip
    if(strcmp(cmd, "/sexys", true) == 0)
    {
        if (!strlen(cmdtext[7])) return SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /sexys [A-G]");
    	switch (cmdtext[7])
    	{
        	case 'a', 'A': ApplyAnimation(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1, 1 );
        	case 'b', 'B': ApplyAnimation(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1, 1 );
        	case 'c', 'C': ApplyAnimation(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1, 1 );
        	case 'd', 'D': ApplyAnimation(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1, 1 );
        	case 'e', 'E': ApplyAnimation(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1, 1 );
        	case 'f', 'F': ApplyAnimation(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1, 1 );
        	case 'g', 'G': ApplyAnimation(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1, 1 );
        	default: SendClientMessage(playerid,0xEFEFF7AA,"ESCRIBE: /sexys [A-G]");
    	}
    	return 1;
    }

    // Bed Sleep R
    if(strcmp(cmd, "/dormir1", true) == 0) {
		 ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_R",4.0,1,0,0,0,0,1);
         return 1;
    }
    // Bed Sleep L
    if(strcmp(cmd, "/dormir2", true) == 0) {
		 ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_L",4.0,1,0,0,0,0,1);
         return 1;
    }


	// START DANCING
 	if(strcmp(cmd, "/bailar", true) == 0) {

			// Get the dance style param
      		tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid,0xFF0000FF,"ESCRIBE: /bailar [modo 1-4]");
				return 1;
			}

			dancestyle = strval(tmp);
			if(dancestyle < 1 || dancestyle > 4) {
			    SendClientMessage(playerid,0xFF0000FF,"ESCRIBE: /bailar [modo 1-4]");
			    return 1;
			}

			if(dancestyle == 1) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
			} else if(dancestyle == 2) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
			} else if(dancestyle == 3) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
			} else if(dancestyle == 4) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
			}
 	  		return 1;
	}



	//Lucha
	if(!strcmp(cmd, "/luchatipo1", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
			if(!strlen(tmp)||animid < 1 || animid > 10)
			{
				SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /luchatipo1 [1-10]");
				return 1;
			}
			switch(animid)
			{
			case 1: ApplyAnimation(playerid,"FIGHT_B","FightB_1",4.1,0,1,0,0,0,1);
   			case 2: ApplyAnimation(playerid,"FIGHT_B","FightB_2",4.1,0,1,0,0,0,1);
		    case 3: ApplyAnimation(playerid,"FIGHT_B","FightB_3",4.1,0,1,0,0,0,1);
		    case 4: ApplyAnimation(playerid,"FIGHT_B","FightB_block",4.1,0,1,0,0,0,1);
		    case 5: ApplyAnimation(playerid,"FIGHT_B","FightB_G",4.1,0,1,0,0,0,1);
		    case 6: ApplyAnimation(playerid,"FIGHT_B","FightB_IDLE",4.1,0,1,0,0,0,1);
		    case 7: ApplyAnimation(playerid,"FIGHT_B","FightB_M",4.1,0,1,0,0,0,1);
		    case 8: ApplyAnimation(playerid,"FIGHT_B","HitB_1",4.1,0,1,0,0,0,1);
		    case 9: ApplyAnimation(playerid,"FIGHT_B","HitB_2",4.1,0,1,0,0,0,1);
		    case 10: ApplyAnimation(playerid,"FIGHT_B","HitB_3",4.1,0,1,0,0,0,1);
			}
			return 1;
	}

	if(!strcmp(cmd, "/luchatipo2", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
			if(!strlen(tmp)||animid < 1 || animid > 12)
			{
				SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /luchatipo2 [1-12]");
				return 1;
			}
			switch(animid)
			{
   				case 1: ApplyAnimation(playerid,"FIGHT_C","FightC_1",4.1,0,1,0,0,0,1);
			    case 2: ApplyAnimation(playerid,"FIGHT_C","FightC_2",4.1,0,1,0,0,0,1);
			    case 3: ApplyAnimation(playerid,"FIGHT_C","FightC_3",4.1,0,1,0,0,0,1);
			    case 4: ApplyAnimation(playerid,"FIGHT_C","FightC_block",4.1,0,1,0,0,0,1);
			    case 5: ApplyAnimation(playerid,"FIGHT_C","FightC_blocking",4.1,0,1,0,0,0,1);
			    case 6: ApplyAnimation(playerid,"FIGHT_C","FightC_G",4.1,0,1,0,0,0,1);
			    case 7: ApplyAnimation(playerid,"FIGHT_C","FightC_IDLE",4.1,0,1,0,0,0,1);
			    case 8: ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.1,0,1,0,0,0,1);
			    case 9: ApplyAnimation(playerid,"FIGHT_C","FightC_Spar",4.1,0,1,0,0,0,1);
			    case 10: ApplyAnimation(playerid,"FIGHT_C","HitC_1",4.1,0,1,0,0,0,1);
			    case 11: ApplyAnimation(playerid,"FIGHT_C","HitC_2",4.1,0,1,0,0,0,1);
			    case 12: ApplyAnimation(playerid,"FIGHT_C","HitC_3",4.1,0,1,0,0,0,1);
			}
			return 1;
	}

	if(!strcmp(cmd, "/luchatipo3", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
			if(!strlen(tmp)||animid < 1 || animid > 10)
			{
				SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /luchatipo3 [1-10]");
				return 1;
			}
			switch(animid)
			{
   				case 1: ApplyAnimation(playerid,"FIGHT_D","FightD_1",4.1,0,1,0,0,0,1);
			    case 2: ApplyAnimation(playerid,"FIGHT_D","FightD_2",4.1,0,1,0,0,0,1);
			    case 3: ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.1,0,1,0,0,0,1);
			    case 4: ApplyAnimation(playerid,"FIGHT_D","FightD_block",4.1,0,1,0,0,0,1);
			    case 5: ApplyAnimation(playerid,"FIGHT_D","FightD_G",4.1,0,1,0,0,0,1);
			    case 6: ApplyAnimation(playerid,"FIGHT_D","FightD_IDLE",4.1,0,1,0,0,0,1);
			    case 7: ApplyAnimation(playerid,"FIGHT_D","FightD_M",4.1,0,1,0,0,0,1);
			    case 8: ApplyAnimation(playerid,"FIGHT_D","HitD_1",4.1,0,1,0,0,0,1);
			    case 9: ApplyAnimation(playerid,"FIGHT_D","HitD_2",4.1,0,1,0,0,0,1);
			    case 10: ApplyAnimation(playerid,"FIGHT_D","HitD_3",4.1,0,1,0,0,0,1);
			}
			return 1;
	}

	if(!strcmp(cmd, "/luchatipo4", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
			if(!strlen(tmp)||animid < 1 || animid > 4)
			{
				SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /luchatipo4 [1-4]");
				return 1;
			}
			switch(animid)
			{
   				case 1: ApplyAnimation(playerid,"FIGHT_E","FightKick",4.1,0,1,0,0,0,1);
			    case 2: ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,0,0,0,1);
			    case 3: ApplyAnimation(playerid,"FIGHT_E","Hit_fightkick",4.1,0,1,0,0,0,1);
			    case 4: ApplyAnimation(playerid,"FIGHT_E","Hit_fightkick_B",4.1,0,1,0,0,0,1);
			}
			return 1;
	}
///////////////////////////////////////////////////////////////////////////////////
	if(strcmp(cmdtext, "/Boxeo", true) == 0){
SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
SendClientMessage(playerid, 0xF6F600F6, "Tu estilo de pelea acutal es de Boxeo!");
return 1;
}
if(strcmp(cmdtext, "/KungFu", true) == 0){
SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
SendClientMessage(playerid, 0xF6F600F6, "Tu estilo de pelea acutal es de KungFu!");
return 1;
}
if(strcmp(cmdtext, "/Normal", true) == 0){
SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
SendClientMessage(playerid, 0xF6F600F6, "Tu estilo de pelea acutal es Normal!");
return 1;
}
if(strcmp(cmdtext, "/Kneehead", true) == 0){
SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
SendClientMessage(playerid, 0xF6F600F6, "Tu estilo de pelea acutal es de KnheeHead!");
return 1;
}
if(strcmp(cmdtext, "/Elbow", true) == 0){
SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
SendClientMessage(playerid, 0xF6F600F6, "Tu estilo de pelea acutal es de Elboy!");
return 1;
}
if(strcmp(cmdtext, "/Grabkick", true) == 0){
SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
SendClientMessage(playerid, 0xF6F600F6, "Tu estilo de pelea acutal es de GrabKick!");
return 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if(!strcmp(cmd, "/animavanzado", true))
	{
		SendClientMessage(playerid,COLOR_GREEN,"_________________________________________________________________________________________________________________________________");
        SendClientMessage(playerid,COLOR_YELLOW," Listas de animaciones: /anima1, /anima2");
		SendClientMessage(playerid,COLOR_YELLOW," En caso de 'Bugeo' usa: /animano");
        SendClientMessage(playerid,COLOR_GREEN,"_________________________________________________________________________________________________________________________________");
		return 1;
	}
	
	if(!strcmp(cmd, "/anima1", true))
	{
		SendClientMessage(playerid,COLOR_BODY,"/animairport, /animattractors, /animbar, /animbaseball, /animbdfire, /animbeach");
        SendClientMessage(playerid,COLOR_BODY,"/animbenchpress, /animbf, /animbiked, /animbikeh, /animbikeleap, /animbikes");
        SendClientMessage(playerid,COLOR_BODY,"/animbikev, /animbikedbz, /animbmx, /animbomber, /animbox, /animbsktball");
        SendClientMessage(playerid,COLOR_BODY,"/animbuddy, /animbus, /animcamera, /animcar, /animcarry, /animcarchat, /animcasino");
        SendClientMessage(playerid,COLOR_BODY,"/animchainsaw, /animchoppa, /animclothes, /animcoach, /animcolt, /animcopambient");
        SendClientMessage(playerid,COLOR_BODY,"/animcopdvbyz, /animcrack, /animcrib, /animdamjump, /animdancing, /animdealer");
        SendClientMessage(playerid,COLOR_BODY,"/animdildo, /animdodge, /animdozer, /animdrivebys, /animfat, /animfightb, /animfightc");
        SendClientMessage(playerid,COLOR_BODY,"/animfightd, /animfighte, /animfinale, /animfinale2, /animflame, /animflowers, /animfood, /animfreeweights");
        SendClientMessage(playerid,COLOR_BODY,"/animgangs, /animghands, /animghetto, /animgog, /animgraffity, /animgraveyard, /animgrenade, /animgym");
        SendClientMessage(playerid,COLOR_BODY,"/animhaircut, /animheist, /animinthouse, /animintoffice, /animintshop, /animjst, /animkart, /animkissing");
		return 1;
	}

	if(!strcmp(cmd, "/anima2", true))
	{
		SendClientMessage(playerid,COLOR_BODY,"/animknife, /animlapdan, /animlapdan2, /animlapdan3, /animlowrider, /animmdchase");
		SendClientMessage(playerid,COLOR_BODY,"/animmddend, /animmedic, /animmisc, /animmtb, /animmusculcar, /animnevada");
		SendClientMessage(playerid,COLOR_BODY,"/animonlookers, /animotb, /animparachute, /animpark, /animpaulnmac, /animped");
		SendClientMessage(playerid,COLOR_BODY,"/animplayerdvbys, /animplayidles, /animpolice, /animpool, /animpoor, /animpython");
		SendClientMessage(playerid,COLOR_BODY,"/animquad, /animquadbz, /animrapping, /animrifle, /animriot, /animrobbank");
		SendClientMessage(playerid,COLOR_BODY,"/animrocket, /animrustler, /animryder, /animscratching, /animshamal, /animshop");
		SendClientMessage(playerid,COLOR_BODY,"/animshotgun, /animsilenced, /animsmoking, /animsniper, /animspraycan");
		SendClientMessage(playerid,COLOR_BODY,"/animstrip, /animsunbathe, /animswat, /animsweet, /animswim, /animsword, /animtank, /animtattoos");
        SendClientMessage(playerid,COLOR_BODY,"/animtec, /animtrain, /animtruck, /animuzi, /animvan, /animvending, /animvortex, /animwayfarer");
        SendClientMessage(playerid,COLOR_BODY,"/animweap, /animwuzi, /animsnm, /animblowjob, /handsup, /dance, /phone");
		return 1;
	}
	
	if(PlayerInfo[playerid][pMuted] == 1 && PlayerInfo[playerid][pAdmin] < 1)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, "Estas Muteado, contacta con un administrador");
		return 0;
	}

 	if(strcmp(cmd, "/vgrabar", true) == 0)
 	{
 	    if (PlayerInfo[playerid][pAdmin] == 2000)
 	    {
 	        SendClientMessage(playerid,0xFF0000FF,"No eres Administrador.");
			return 1;
 	    }
	    //new tmp[512];
      	tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid,0xFF0000FF,"Escribe: /vgrabar {nombre}");
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
            SendClientMessage(playerid,0xFF0000FF,"NPC-SECUENCIA: Es necesario estar en un vehiculo.");
			return 1;
		}
		StartRecordingPlayerData(playerid,PLAYER_RECORDING_TYPE_DRIVER,tmp);
		SendClientMessage(playerid,0xFF0000FF,"SECUENCIA DE NPC INICIALIZADA.");
		return 1;
	}

 	if(strcmp(cmd, "/pigrabar", true) == 0)
	{
	    if (PlayerInfo[playerid][pAdmin] == 2000)
 	    {
 	        SendClientMessage(playerid,0xFF0000FF,"No eres Administrador.");
			return 1;
 	    }
	    //new tmp[512];
      	tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid,0xFF0000FF,"Escribe: /pigrabar {nombre}");
			return 1;
		}
 		if(IsPlayerInAnyVehicle(playerid))
	 	{
            SendClientMessage(playerid,0xFF0000FF,"NPC-SECUENCIA: Sal del vehiculo.");
			return 1;
		}
		StartRecordingPlayerData(playerid,PLAYER_RECORDING_TYPE_ONFOOT,tmp);
		SendClientMessage(playerid,0xFF0000FF,"SECUENCIA DE NPC INICIALIZADA.");
		return 1;
	}

	if(strcmp(cmd, "/stopgrabar", true) == 0)
	{
	    if (PlayerInfo[playerid][pAdmin] == 2000)
 	    {
 	        SendClientMessage(playerid,0xFF0000FF,"No eres Administrador.");
			return 1;
 	    }
		StopRecordingPlayerData(playerid);
		SendClientMessage(playerid,0xFF0000FF,"SECUENCIA DE NPC DETENIDA.");
		return 1;
	}
	
	if (strcmp("/intmenu", cmdtext, true, 10) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if (PlayerInfo[playerid][pAdmin] >= 1)
	    	{
				ShowMenuForPlayer(Interior,playerid);
				TogglePlayerControllable(playerid,false);
				return 1;
			}
		}
	}

	if(strcmp(cmd, "/reportar", true) == 0 || strcmp(cmd, "/re", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(JustReported[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Wait 2 minutes after sending a next report ! ");
	            return 1;
	        }
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/re)port [ID o Nombre] [text]");
				return 1;
			}
			giveplayerid = strval(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/re)port [ID o Nombre] [text]");
						return 1;
					}
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "Report from: [ID:%d]%s, Reported player: [ID:%d]%s", playerid, sendername, giveplayerid, giveplayer);
					ABroadCast(0xE19898AA,string);
					format(string, sizeof(string), "Report text: %s", (result));
					ABroadCast(0xE19898AA,string);
					ABroadCast(0xA04C4CAA,"Comando '/aceptarreport [reporter id]' o '/trashreport [reporter id]'");
					SendClientMessage(playerid, 0x96C184AA, "  Tu reporte ha sido enviado a la administracion SPG:RP.");
					JustReported[playerid] = 1;
					PlayerNeedsHelp[playerid] = 1;
					SetTimerEx("ReportReset", 120000, false, "i", playerid);
			    }
			}
	    }
	    return 1;
	}
	
	if(strcmp(cmd, "/du", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /du [DUDA]");
				return 1;
			}
			format(string, sizeof(string), "Duda de %s: %s", sendername, (result));
			ABroadCast(COLOR_ASKQ,string);
			SendClientMessage(playerid, COLOR_ASKQ, "Un administrador respondera a tu duda.");
	    }
	    return 1;
	}
	
	// HANDSUP
 	if(strcmp(cmd, "/handsup", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
  	  		return 1;
		}
	}
	/*if(strcmp(cmd, "/musica", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pCDPlayer])
	        {
		        new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Musica __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USAR: /musica [codigo]");
			  		SendClientMessage(playerid, COLOR_GREY, "Codigos posibles: On, Off, otra");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"on",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~CD Player On", 5000, 5);
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
	            else if(strcmp(x_nr,"off",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~CD Player Off", 5000, 5);
				    PlayerFixRadio(playerid);
				}
				else if(strcmp(x_nr,"otra",true) == 0)
				{
				    if(Music[playerid] == 0) { Music[playerid] = 1; }
				    else if(Music[playerid] == 1) { Music[playerid] = 2; }
				    else if(Music[playerid] == 2) { Music[playerid] = 3; }
				    else if(Music[playerid] == 3) { Music[playerid] = 4; }
				    else if(Music[playerid] == 4) { Music[playerid] = 5; }
				    else if(Music[playerid] == 5) { Music[playerid] = 6; }
				    else if(Music[playerid] == 6) { Music[playerid] = 0; }
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Codigo desconocido!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Tu no tienes Reproductor!");
			    return 1;
			}
	    }
	    return 1;
	}*/
    if (strcmp("/ropainformal", cmdtext, true, 10) == 0)
	{
        if (OnDuty[playerid] == 1 || JobDuty[playerid] == 1)
        {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Que quieres quedarte sin trabajo? No puedes Cambiarte Estas de Servicio!!");
        }
        else
        {
            SetPlayerSkin(playerid, PlayerInfo[playerid][pAge]);
        }
		return 1;
	}
    if (strcmp("/ropaformal", cmdtext, true, 10) == 0)
	{
    	SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
		return 1;
	}
 /*   if (strcmp("/npc", cmdtext, true, 10) == 0)  // tatuajes
	{
	TextDrawHideForPlayer(playerid, Textdraw0);
	format(string, sizeof(string), "%s", PlayerInfo[playerid][pNote1]);
	Textdraw0 = TextDrawCreate(36.000000, 428.000000, string);
	TextDrawBackgroundColor(Textdraw0, 255);
	TextDrawFont(Textdraw0, 0);
	TextDrawLetterSize(Textdraw0, 0.400000, 1.300000);
	TextDrawColor(Textdraw0, -1);
	TextDrawSetOutline(Textdraw0, 1);
	TextDrawSetProportional(Textdraw0, 1);
        TextDrawShowForPlayer(playerid, Textdraw0);
     	return 1;
	}*/
    if (strcmp("/futbol", cmdtext, true, 10) == 0)
	{
        playingfootball[playerid]=1;
        SetTimerEx("KeyChanges", 100, 1, "i", playerid);
    	GameTextForPlayer(playerid, "~w~Ya puedes jugar con el balon...",3500,3);
		return 1;
	}
    if (strcmp("/nofutbol", cmdtext, true, 10) == 0)
	{
        playingfootball[playerid]=0;
    	GameTextForPlayer(playerid, "~w~Dejas de jugar con el balon...",3500,3);
		return 1;
	}
    if (strcmp(cmdtext, "/bola", true)==0)
	{
		DestroyObject(football);
		football=CreateObject(2114, 236.0063,-1811.2773,3.8461, 0.0000, 0.0000, 0.0000);
		return 1;
	}
	if(!strcmp(cmd, "/tirarllave1", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
          PlayerInfo[playerid][pPcarkey] = 9999;
          GameTextForPlayer(playerid, "~w~atencion tiraste la llave 1",3500,3);
        }
        return 1;
     }
	if(!strcmp(cmd, "/tirarllave2", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
          PlayerInfo[playerid][pPcarkey2] = 9999;
          GameTextForPlayer(playerid, "~w~atencion tiraste la llave 2",3500,3);
        }
        return 1;
     }
	if(!strcmp(cmd, "/tirarllave3", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
          PlayerInfo[playerid][pPcarkey3] = 9999;
          GameTextForPlayer(playerid, "~w~atencion tiraste la llave 3",3500,3);
        }
        return 1;
 	}
    if(!strcmp(cmd, "/tirarllave4", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
          PlayerInfo[playerid][pPcarkey4] = 9999;
          GameTextForPlayer(playerid, "~w~atencion tiraste la llave 4",3500,3);
        }
        return 1;
 	}
 	if(!strcmp(cmd, "/tirarllave5", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
          PlayerInfo[playerid][pPcarkey5] = 9999;
          GameTextForPlayer(playerid, "~w~atencion tiraste la llave 5",3500,3);
        }
        return 1;
 	}
	if(!strcmp(cmd, "/arrancar", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsPlayerInAnyVehicle(playerid))
			{
	    		if(!engineOn[GetPlayerVehicleID(playerid)])
	    		{
	        		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
						return 1;
					}
					if(IsAnOwnableCar(idcar))
					{
						if(PlayerInfo[playerid][pPcarkey] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey2] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey3] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey4] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey5] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey6] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey7] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey8] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey9] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey10] == idcar) { }
						else { return 1; }
					}
				/*	if(pveh == 510 || pveh == 462 || pveh == 481 || pveh == 509)
					{
						return 1;
					}
					if(idcar == 59 || idcar == 60)
					{
						return 1;
					}
					if(idcar >= 153 && idcar <= 177 ||idcar >= 643 && idcar <= 654 )//problema

					{
					    if(HireCar[playerid] != idcar)
					    {
							return 1;
						}
					}*/
					if(IsAPlane(idcar))
					{
					    return 1;
					}
					if(IsAHarvest(idcar))
					{
					    return 1;
					}
					if(IsADrugHarvest(idcar))
					{
					    return 1;
					}
					if(IsASweeper(idcar))
					{
					    return 1;
					}
					if(IsAOBike(idcar))
					{
					    return 1;
					}
					if(IsABike(idcar))
					{
					    return 1;
					}
					if(gEngine[playerid] == 1) { return 1; }

					new playerveh = GetPlayerVehicleID(playerid);
					PutPlayerInVehicle(playerid, playerveh, 0);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s intenta arrancar el motor del vehiculo.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetTimerEx("StartingTheVehicle",3500,0,"i",playerid);
					GameTextForPlayer(playerid, "~w~Arrancando el vehiculo...",3500,3);
					gEngine[playerid] = 1;
					return 1;
				}
				if(engineOn[GetPlayerVehicleID(playerid)])
	    		{
	        		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
						return 1;
					}
					if(IsAnOwnableCar(idcar))
					{
					    if(PlayerInfo[playerid][pPcarkey] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey2] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey3] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey4] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey5] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey6] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey7] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey8] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey9] == idcar) { }
						else if(PlayerInfo[playerid][pPcarkey10] == idcar) { }
						else { return 1; }
					}
					if(pveh == 510 || pveh == 462 || pveh == 481 || pveh == 509)
					{
						return 1;
					}
					if(idcar == 59 || idcar == 60)
					{
						return 1;
					}
					if(idcar >= 135 && idcar <= 154)
					{
					    if(HireCar[playerid] != idcar)
					    {
							return 1;
						}
					}
					if(IsAHarvest(idcar))
					{
					    return 1;
					}
					if(IsADrugHarvest(idcar))
					{
					    return 1;
					}
					if(IsAPlane(idcar))
					{
					    return 1;
					}
					if(IsASweeper(idcar))
					{
					    return 1;
					}
					engineOn[GetPlayerVehicleID(playerid)] = false;
					//RemovePlayerFromVehicle(playerid);
					TogglePlayerControllable(playerid, 0);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s detiene el motor de su vehiculo.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					gEngine[playerid] = 0;
/*					new keycar = PlayerInfo[playerid][pPcarkey];
					new keycar2 = PlayerInfo[playerid][pPcarkey2];
					new keycar3 = PlayerInfo[playerid][pPcarkey3];
					if(IsAnOwnableCar(idcar))
					{
	   					if(keycar == idcar)
						{
	   						for(new i = 0; i < MAX_PLAYERS; i++)
							{
			    				if (IsPlayerConnected(i))
			    				{
			       					SetVehicleParamsForPlayer(keycar,i,0,1);
			    				}
								GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
								CarInfo[keycar][cLock] = 1;
   							}
						}
						else if(keycar2 == idcar)
						{
	   						for(new i = 0; i < MAX_PLAYERS; i++)
							{
			    				if (IsPlayerConnected(i))
			    				{
			       					SetVehicleParamsForPlayer(keycar2,i,0,1);
			    				}
								GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
								CarInfo[keycar2][cLock] = 1;
   							}
						}
						else if(keycar3 == idcar)
						{
	   						for(new i = 0; i < MAX_PLAYERS; i++)
							{
			    				if (IsPlayerConnected(i))
			    				{
			       					SetVehicleParamsForPlayer(keycar3,i,0,1);
			    				}
								GameTextForPlayer(playerid, "~w~Vehicle~n~~r~Auto-Locked", 10000, 3);
								CarInfo[keycar3][cLock] = 1;
   							}
						}
					}*/
					return 1;
				}
			}
	    }
	    return 1;
	}
	
/*	if(!strcmp(cmd, "/startup", true))
	{
		if(engineOn[GetPlayerVehicleID(playerid)]) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Engine already started!");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Do you think that you can start an engine which you don't have?");
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Only the driver can do this!");
		if(IsAtDealership(playerid)) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Do you think you can steal a car?");
		if(pveh == 510) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "You don't need to start a bike!");
		if(pveh == 462) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "You don't need to start a bike!");
		if(idcar == 59 || idcar == 60) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Access denied!");
		if(IsAtCarrental(playerid)) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Do you think you can steal a car?");

		engineOn[GetPlayerVehicleID(playerid)] = true;
		TogglePlayerControllable(playerid, true);
		new playerveh = GetPlayerVehicleID(playerid);
		PutPlayerInVehicle(playerid, playerveh, 0);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "* %s spins a key and starts the engine.", sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return true;
	}
	if(!strcmp(cmd, "/turnoff", true))
	{
		if(!engineOn[GetPlayerVehicleID(playerid)]) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Engine not started!");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Do you think that you can start an engine which you don't have?");
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Only the driver can do this!");
		if(IsAtDealership(playerid)) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Unknown command");
		if(pveh == 510) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Bike doesn't have an engine");
		if(pveh == 462) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "You don't need to do that");
		if(idcar == 59 || idcar == 60) return SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Access denied!");

		engineOn[GetPlayerVehicleID(playerid)] = false;
		RemovePlayerFromVehicle(playerid);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "* %s turns off the engine.", sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return true;
	}*/

//---------------------getip------------------
	if(strcmp(cmd, "/ip", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			tmp = strtok(cmdtext,idx);
			new playersip[256];
			if(!strlen(tmp))
			{
  				SendClientMessage(playerid,COLOR_GRAD1,"ESCRIBE: /ip [ID]");
		        return 1;
			}
 			giveplayerid = ReturnUser(tmp);
 			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerIp( giveplayerid,playersip,sizeof(playersip));
 			format(string, sizeof(string), "Jugador: %s IP: %s",giveplayer,playersip);
			SendClientMessage(playerid,COLOR_GRAD2,string);
		}
		return 1;
	}
	
//----------------------/unbanip--------------
	if(strcmp(cmd,"/unbanip",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 5)
		{
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"ESCRIBE: /unbanip [players ip]");
		        return 1;
   			}

			format(string,sizeof(string),"unbanip %s",tmp);
			SendRconCommand(string);
			SendRconCommand("reloadbans");
   			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, 256, "Administración: %s has unbanned IP %s", sendername,tmp);
			ABroadCast(COLOR_YELLOW,string);
		}
		return 1;
	}
//---------------------GIVE MATS-----------------
	if(strcmp(cmd, "/givemats", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /givemats [ID o Nombre] [amount]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /givemats [ID o Nombre] [amount]");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pMats] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "Administración: %s has given %s %d materials.", sendername,giveplayer,moneys);
				ABroadCast(COLOR_YELLOW,string);
			}
		}
		return 1;
	}
//-----------------------------------------------------------------------------
    if(strcmp(cmd, "/crash", true) == 0)
	{
	if(IsPlayerConnected(playerid))
	{
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /crash [ID o Nombre]");
    return 1;
	}
	giveplayerid = ReturnUser(tmp);
	if (PlayerInfo[playerid][pAdmin] >= 5)
	{
    if(IsPlayerConnected(giveplayerid))
    {
        if(giveplayerid != INVALID_PLAYER_ID)
        {
        new Float:X, Float:Y, Float:Z;
        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
        GetPlayerPos(giveplayerid,X,Y,Z);
        new objectcrash = CreatePlayerObject(giveplayerid,11111111,X,Y,Z,0,0,0);
        DestroyObject(objectcrash);

		format(string, sizeof(string), "You have crashed \"%s's\" game", giveplayer);
  		SendClientMessage(playerid,COLOR_DBLUE, string);
		return 1;
	}
	}
	}
	else
	{
    format(string, sizeof(string), "   %d [ERROR] ID Incorrecta", giveplayerid);
    SendClientMessage(playerid, COLOR_GRAD1, string);
	}
	}
	return 1;
	}
	
	//-----------------------------------[Fuck]-----------------------------------------------
	if(strcmp(cmd, "/troll", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Teclea: /troll [playerid]");
			return 1;
		}
		new playa;
		playa = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 5)
		{
			Fuck(playa);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   ¡ No estas autorizado para usar esto !");
		}
		return 1;
	}
	
    if(strcmp(cmd, "/desconectar", true) == 0) // By DryilZas
	{
	    if(gPlayerLogged[playerid] == 0)
	    {
     		SendClientMessage(playerid, COLOR_GREY, "   Necesitas loguearte primero.");
       		return 1;
	    }
		if(IsPlayerConnected(playerid))
		{
	    	PlayerInfo[playerid][pCrashed] = 1;
	    	format(string, sizeof(string), "* Sus datos han sigo guardados para no perder informacion.", giveplayerid);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    	format(string, sizeof(string), "* Usted puede salir ahora escribiendo /quit.", giveplayerid);
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    		OnPlayerUpdate(playerid);
    		Kick(playerid);
			return 1;
		}
	}

//--------------------------------[Explode]---------------------------------------------------------------------
	if(strcmp(cmd, "/explode", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp) && PlayerInfo[playerid][pAdmin] >= 4)
		{
			SendClientMessage(playerid, COLOR_GREY, "/explode [Playerid]");
			return 1;
		}
		giveplayerid = strval(tmp);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
					SetPlayerHealth(giveplayerid, 10);
					new Float:boomx, Float:boomy, Float:boomz;
					GetPlayerPos(giveplayerid,boomx, boomy, boomz);
					CreateExplosion(boomx, boomy , boomz, 7, 10);
				}
				else
				{
				    format(string, sizeof(string), "%d [ERROR] ID Incorrecta.", giveplayerid);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "You do not have permission to use that command!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "You Must be logged in to use this command!");
		}
		return 1;
	}
	
 	if(strcmp(cmd, "/activarbomba", true) == 0) // by DryilZas
	{
		if(PlayerInfo[playerid][pThermal] >= 1)
		{
		    PlayerInfo[playerid][pThermal] -= 1;
			new Float:boomx, Float:boomy, Float:boomz;
			GetPlayerPos(playerid,boomx, boomy, boomz);

			SetPlayerHealth(giveplayerid, 99999);
			
/***************************************************************************/// PROPIO
			CreateExplosion(boomx, boomy , boomz, 12, 10); 
/***************************************************************************/

/***************************************************************************/// BASE INCENDIO
			CreateExplosion(boomx+10, boomy , boomz, 1, 100);
			CreateExplosion(boomx-10, boomy , boomz, 1, 100);
			CreateExplosion(boomx, boomy+10 , boomz, 1, 100);
			CreateExplosion(boomx, boomy-10 , boomz, 1, 100);

			CreateExplosion(boomx+7, boomy+7 , boomz, 1, 100);
			CreateExplosion(boomx-7, boomy+7 , boomz, 1, 100);
			CreateExplosion(boomx+7, boomy-7 , boomz, 1, 100);
			CreateExplosion(boomx-7, boomy-7 , boomz, 1, 100);
/***************************************************************************/

/***************************************************************************/// CHICHON CENTRAL
			CreateExplosion(boomx+7, boomy , boomz+10, 10, 100);
			CreateExplosion(boomx-7, boomy , boomz+10, 10, 100);
			CreateExplosion(boomx, boomy+7 , boomz+10, 10, 100);
			CreateExplosion(boomx, boomy-7 , boomz+10, 10, 100);

			CreateExplosion(boomx+5, boomy , boomz+15, 11, 100);
			CreateExplosion(boomx-5, boomy , boomz+15, 11, 100);
			CreateExplosion(boomx, boomy+5 , boomz+15, 11, 100);
			CreateExplosion(boomx, boomy-5 , boomz+15, 11, 100);
/***************************************************************************/

/***************************************************************************/// DESTRUCCION
			CreateExplosion(boomx+250, boomy , boomz, 10, 100);
			CreateExplosion(boomx, boomy+250 , boomz, 10, 100);
			CreateExplosion(boomx+250, boomy+250 , boomz, 10, 100);
			CreateExplosion(boomx-250, boomy , boomz, 10, 100);
			CreateExplosion(boomx, boomy-250 , boomz, 10, 100);
			CreateExplosion(boomx-250, boomy-250 , boomz, 10, 100);
			CreateExplosion(boomx+250, boomy-250 , boomz, 10, 100);
			CreateExplosion(boomx-250, boomy+250 , boomz, 10, 100);
			
			CreateExplosion(boomx+500, boomy , boomz, 10, 100);
			CreateExplosion(boomx, boomy+500 , boomz, 10, 100);
			CreateExplosion(boomx+500, boomy+500 , boomz, 10, 100);
			CreateExplosion(boomx-500, boomy , boomz, 10, 100);
			CreateExplosion(boomx, boomy-500 , boomz, 10, 100);
			CreateExplosion(boomx-500, boomy-500 , boomz, 10, 100);
			CreateExplosion(boomx+500, boomy-500 , boomz, 10, 100);
			CreateExplosion(boomx-500, boomy+500 , boomz, 10, 100);
			
			CreateExplosion(boomx+1500, boomy , boomz, 10, 100);
			CreateExplosion(boomx, boomy+1500 , boomz, 10, 100);
			CreateExplosion(boomx+1500, boomy+1500 , boomz, 10, 100);
			CreateExplosion(boomx-1500, boomy , boomz, 10, 100);
			CreateExplosion(boomx, boomy-1500 , boomz, 10, 100);
			CreateExplosion(boomx-1500, boomy-1500 , boomz, 10, 100);
			CreateExplosion(boomx+1500, boomy-1500 , boomz, 10, 100);
			CreateExplosion(boomx-1500, boomy+1500 , boomz, 10, 100);
/***************************************************************************/
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
		    SendClientMessage(playerid, COLOR_GREY, "No tienes ninguna bomba termica");
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Necesitas estar identificado");
		}
		return 1;
	}
//---------------------------------------------------------------------------------------------------------------
	if(strcmp(cmd, "/givedrugs", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
	    	if(IsPlayerConnected(playerid))
	    	{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /givedrugs [ID o Nombre] [amount]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	        	giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /givedrugs [ID o Nombre] [amount]");
					return 1;
				}
				new playa;
				GetPlayerName(playa, sendername, sizeof(sendername));
				playa = ReturnUser(tmp);
				moneys = strval(tmp);
		    	PlayerInfo[giveplayerid][pDrugs] = moneys;
			    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 256, "Administración: %s has given %s %d drugs.", sendername,giveplayer,moneys);
				ABroadCast(COLOR_YELLOW,string);
			}
		}
		return 1;
	}
//----------------------------------Nuevos Comandos--------------------------------------------------------------------

//---------------------------[ /quitfaction ] ---------------
	if(strcmp(cmd, "/salirfaccion", true) == 0)
	{
		/*if (PlayerInfo[playerid][pLeader] == 0 || PlayerInfo[playerid][pMember] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "No perteneces a ninguna Faccion!");
			return 1;
		}*/
		if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /salirfaccion [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        PlayerInfo[giveplayerid][pTeam] = 3;
						PlayerInfo[giveplayerid][pMember] = 0;
						PlayerInfo[giveplayerid][pRank] = 0;
						new rand = random(sizeof(CIV));
						PlayerInfo[giveplayerid][pChar] = CIV[rand];
						PlayerInfo[giveplayerid][pFMember] = 255;
						PlayerInfo[giveplayerid][pLeader] = 0;
						gTeam[giveplayerid] = PlayerInfo[giveplayerid][pTeam];
						SetPlayerSkin(giveplayerid, PlayerInfo[giveplayerid][pChar]);
						SendClientMessage(giveplayerid, COLOR_LIGHTGREEN, "Te han echado de la faccion via admin!");
						SendClientMessage(playerid, COLOR_LIGHTGREEN, "Lo has echado de su faccion!");
    					if(PlayerInfo[giveplayerid][pJob] == 7)
    					{
 		 					PlayerInfo[giveplayerid][pJob] = 0;
							return 1;
    					}
    					if(PlayerInfo[giveplayerid][pJob] == 24)
    					{
 		 					PlayerInfo[giveplayerid][pJob] = 0;
							return 1;
    					}
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "   %d [ERROR] No puedes usar esto.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//---------------------------------------------------------------------------------------------------------------
	if(strcmp(cmdtext, "/informacion", true) == 0) // by LordMan
	{
	    if (PlayerToPoint(4, playerid,1680.1564,-2179.4905,13.5547))
	    {
	    	TogglePlayerControllable(playerid, 0);
  			ShowMenuForPlayer(Guide, playerid);
			return 1;
		}
		else { SendClientMessage(playerid, COLOR_GREY,"No estas en la zona de informacion."); }
	}
	
	/*if(strcmp(cmdtext, "/bandansg", true) == 0) // by DryilZas
	{
	    if (PlayerToPoint(4, playerid,2127.8315,-1685.5144,15.0859))
	    {
	        if(PlayerInfo[playerid][pMember] > 0
			|| PlayerInfo[playerid][pFMember] < 255
			|| PlayerInfo[playerid][pLeader] > 0)
         	{
         		SendClientMessage(playerid, COLOR_GREY, "   Ya estas en una faccion!");
           		return 1;
			}
	    	PlayerInfo[playerid][pMember] = 17;
			PlayerInfo[playerid][pRank] = 1;
   			PlayerInfo[playerid][pModel] = 103;
   			PlayerInfo[playerid][pChar] = 103;
   			SetPlayerSkin(playerid, 103);
   			
   			SetSpawnInfo(playerid, 5, 103,0.0,0.0,0.0,0,0,0,0,0,0,0);
   			PlayerInfo[playerid][pTeam] = 5;
   			gTeam[playerid] = 5;
   			
   			SendClientMessage(playerid, COLOR_GREY,"Ahora perteneces a la North Street Gang, una banda de libre entrada.");
   			SendClientMessage(playerid, COLOR_GREY,"Puedes ver tus nuevos comandos en /Ayuda.");
			return 1;
		}
		else { SendClientMessage(playerid, COLOR_GREY,"No estas en la casa NSG."); }
	}*/
	
	/*if(strcmp(cmdtext, "/bandapaccinos", true) == 0) // by DryilZas
	{
	    if (PlayerToPoint(4, playerid,731.8565,-1276.1882,17.6484))
	    {
	        if(PlayerInfo[playerid][pMember] > 0
			|| PlayerInfo[playerid][pFMember] < 255
			|| PlayerInfo[playerid][pLeader] > 0)
         	{
         		SendClientMessage(playerid, COLOR_GREY, "   Ya estas en una faccion!");
           		return 1;
			}
	    	PlayerInfo[playerid][pMember] = 19;
			PlayerInfo[playerid][pRank] = 1;
   			PlayerInfo[playerid][pModel] = 19;
   			PlayerInfo[playerid][pChar] = 19;
   			SetPlayerSkin(playerid, 19);

   			SetSpawnInfo(playerid, 5, 19,0.0,0.0,0.0,0,0,0,0,0,0,0);
   			PlayerInfo[playerid][pTeam] = 5;
   			gTeam[playerid] = 5;

   			SendClientMessage(playerid, COLOR_GREY,"Ahora eres un Paccino Norteño, una banda de libre entrada.");
   			SendClientMessage(playerid, COLOR_GREY,"Puedes ver tus nuevos comandos en /Ayuda.");
			return 1;
		}
		else { SendClientMessage(playerid, COLOR_GREY,"No estas en la casa de los Paccinos."); }
	}*/
	
	/*if(strcmp(cmdtext, "/bandacobras", true) == 0) // by DryilZas
	{
	    if (PlayerToPoint(4, playerid,501.1876,-75.7067,998.7578))
	    {
	        if(PlayerInfo[playerid][pMember] > 0
			|| PlayerInfo[playerid][pFMember] < 255
			|| PlayerInfo[playerid][pLeader] > 0)
         	{
         		SendClientMessage(playerid, COLOR_GREY, "   Ya estas en una faccion!");
           		return 1;
			}
	    	PlayerInfo[playerid][pMember] = 18;
			PlayerInfo[playerid][pRank] = 1;
   			PlayerInfo[playerid][pModel] = 100; //100,133,181
   			PlayerInfo[playerid][pChar] = 100;
   			SetPlayerSkin(playerid, 100);

   			SetSpawnInfo(playerid, 5, 100,0.0,0.0,0.0,0,0,0,0,0,0,0);
   			PlayerInfo[playerid][pTeam] = 5;
   			gTeam[playerid] = 5;

   			SendClientMessage(playerid, COLOR_GREY,"Ahora perteneces a la banda de moteros Cobras, una banda de libre entrada.");
   			SendClientMessage(playerid, COLOR_GREY,"Puedes ver tus nuevos comandos en /Ayuda.");
			return 1;
		}
		else { SendClientMessage(playerid, COLOR_GREY,"No estas en el bareto."); }
	}*/
	
	if(strcmp(cmdtext, "/licenci", true) == 0) // by LordMan
	{
	    if (PlayerToPoint(4, playerid,1490.3195,1305.6976,1093.2964))
	    {
	    	TogglePlayerControllable(playerid, 0);
  			ShowMenuForPlayer(Licenses, playerid);
			return 1;
		}
		else { SendClientMessage(playerid, COLOR_GREY,"You are not in the City Hall."); }
	}
	if(strcmp(cmd, "/LegalJobs", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pJob] == 0)
			{
				if (PlayerToPoint(4, playerid,362.1231,173.6424,1008.3828))
 				{
 					TogglePlayerControllable(playerid, 0);
 					ShowMenuForPlayer(LegalJobs, playerid);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"You are not in the City Hall.");
 				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You already have a Job, use /quitjob first !");
			}
		}
	}
	if(strcmp(cmd, "/respawnthiscar", true) == 0 || strcmp(cmd, "/rtc", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2 )
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			    return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, 256, "Administración: %s ha respawneado el vehiculo %d.",sendername,GetPlayerVehicleID(playerid));
				ABroadCast(COLOR_YELLOW,string);
			    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
   				RemovePlayerFromVehicle(playerid);
			    SendClientMessage(playerid, COLOR_GREY, "   Vehiculo respawneado !");
		        LoadModsForAll(GetPlayerVehicleID(playerid));
	            TuneThisCar(GetPlayerVehicleID(playerid));
   			}
		}
		return 1;
	}
	if(strcmp(cmd, "/respawnallcars", true) == 0 || strcmp(cmd, "/rac", true) == 0) // by LordMan editado by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			    return 1;
			}
			new bool:unwanted[CAR_AMOUNT];
			for(new player=0; player<MAX_PLAYERS; player++)
     		{
            	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
     		}
			for(new car = 1; car <= 900; car++)
			{
				if(!unwanted[car]) SetVehicleToRespawn(car);LoadModsForAll(car);TuneThisCar(car);
			}
			for(new car2 = 901; car2 <= 1999; car2++)
			{
				if(!unwanted[car2]) DestroyVehicle(car2);LoadModsForAll(car2);TuneThisCar(car2);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "SERVIDOR: Vehiculos respawneados, temporales eliminados.");
			BroadCast(COLOR_ASKQ,string);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Accion realizada por: %s.",sendername);
			ABroadCast(COLOR_YELLOW,string);
		}
		return 1;
	}
	if(strcmp(cmd, "/respawnrentcars", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			    return 1;
			}
			new bool:unwanted[CAR_AMOUNT];
			for(new player=0; player<MAX_PLAYERS; player++)
     		{
            	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
     		}
			for(new v = 135; v <= 154; v++)
			{
				if(!unwanted[v]) SetVehicleToRespawn(v);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "SERVER: All unused rent cars respawned by %s.", sendername);
			BroadCast(COLOR_WHITE,string);
		}
		return 1;
	}
	if(strcmp(cmd, "/respawnrentbikes", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			    return 1;
			}
			new bool:unwanted[CAR_AMOUNT];
			for(new player=0; player<MAX_PLAYERS; player++)
     		{
            	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
     		}
			for(new v = 112; v <= 130; v++)
			{
				if(!unwanted[v]) SetVehicleToRespawn(v);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "SERVER: All unused rent bikes respawned by %s.", sendername);
			BroadCast(COLOR_WHITE,string);
		}
		return 1;
	}
	if(strcmp(cmd, "/arrastrar", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "No eres un policía!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /arrastrar [ID del jugador]");
				return 1;
			}
			new newcar = GetPlayerVehicleID(playerid);
			new playa;
			playa = ReturnUser(tmp);
			if(IsACopCar(newcar) || IsNgCar(newcar) || IsAnFbiCar(newcar))
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            new Float:x, Float:y, Float:z;
			            GetPlayerPos(playa,x,y,z);
			            if(PlayerToPoint(5, playerid, x, y, z))
			            {
			            	PutPlayerInVehicle(playa,newcar,1);
			            	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s drags %s to his/her car/moped.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Player is not near you.");
						}
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "You are not in police vehicle!");
			}
	    }
	    return 1;
	}
//------------------------------[Vehicle Slap]---------------------------------------------------
	if(strcmp(cmd, "/vehslap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /vehslap [ID o Nombre]");
				return 1;
			}
			new playa;
			new Float:shealth;
			giveplayerid = ReturnUser(tmp);
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=3)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-0);
						GetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz);
						SetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz+550);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("Administración: %s lanza el vehiculo de %s",sendername,  giveplayer);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "** No estas autorizado para usar esto.");
			}
		}
		return 1;
	}
//------------------------------[super vehslap]--------------------------------------------------
	if(strcmp(cmd, "/supervehslap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /supervehslap [ID o Nombre]");
				return 1;
			}
			new playa;
			new Float:shealth;
			giveplayerid = ReturnUser(tmp);
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-0);
						GetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz);
						SetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz+1000);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("Administración: %s lanza el vehiculo de %s",sendername,  giveplayer);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "** No estas autorizado para usar esto.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/maskon", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pMask] == 0)
	   	 	{
	   		     SendClientMessage(playerid, COLOR_GRAD1, "   No tienes máscara");
	   		     return 1;
	   		}
            if(ConCas[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No puedes, tienes un casco !");
			    return 1;
		    }
	   		if(PlayerInfo[playerid][pLevel] < 5)
	    	{
	       		SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 5.");
	        	return 1;
	    	}
			for(new i = 0; i < MAX_PLAYERS; i++)
   			{
   		    	if(IsPlayerConnected(i))
   		    	{
		   			ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
			}
			PlayerInfo[playerid][pMaskuse] = 1;
			SetPlayerAttachedObject( playerid, 1, 19036, 2, 0.090156, 0.045901, -0.005574, 90.110733, 81.638343, 4.973568, 0.887882, 1.139873, 1.000000 );
			SendClientMessage(playerid, COLOR_WHITE, "   Para quitarte la mascara pon /maskoff.");
			
			GetPlayerName(playerid, sendername, sizeof(sendername));
      		new randcard1 = random(10);
			if(randcard1 >= 5)
            {
  				format(string, sizeof(string), "* %s se pone la mascara.", sendername);
  				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    			return 1;
            }
            else if(randcard1 <= 4 && randcard1 > 0)
            {
                format(string, sizeof(string), "* Enmascarado se pone la mascara a hurtadillas.");
  				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            }
            else
            {
                format(string, sizeof(string), "* Te has puesto la mascara y nadie se ha dado cuenta.");
  				SendClientMessage(playerid, COLOR_PURPLE, string);
            }
		}
		return 1;
	}
	
/*	if(strcmp(cmd, "/cinema", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pcinema] == 0)
	   	 	{
	   	 	    PlayerInfo[playerid][pcinema] = 1;
		     	TextDrawHideForPlayer(playerid, Text:webspg1);
				TextDrawHideForPlayer(playerid, Text:webspg);
    			return 1;
	   		}
	   		else
	   		{
	   		    PlayerInfo[playerid][pcinema] = 0;
	   			TextDrawShowForPlayer(playerid, Text:webspg);
		     	TextDrawShowForPlayer(playerid, Text:webspg1);
		     	return 1;
	   		}
		}
		return 1;
	}*/
	
	if(strcmp(cmd, "/maskoff", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pMask] == 0)
	    	{
	       		SendClientMessage(playerid, COLOR_GRAD1, "   No tienes mascara");
	        	return 1;
	    	}
	    	if(ConCas[playerid] == 1)
            {
             SendClientMessage(playerid, COLOR_GRAD2, "   Tienes puesto un casco. ¿Cómo coño te vas a quitar una máscara?.");
			 return 1;
            }
	    	if(PlayerInfo[playerid][pLevel] < 5)
	    	{
	        	SendClientMessage(playerid, COLOR_GRAD1, "   Necesitas nivel 5.");
	        	return 1;
	    	}
	    	for(new i = 0; i < MAX_PLAYERS; i++)
   			{
   		    	if(IsPlayerConnected(i))
   		    	{
		   			ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
			}
			PlayerInfo[playerid][pMaskuse] = 0;
			RemovePlayerAttachedObject(playerid, 1);
			SendClientMessage(playerid, COLOR_WHITE, "Para ponerte la mascara pon /maskon.");
			GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s guarda su mascara.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
	
	if(!strcmp(cmdtext, "/ocultarmovil", true)) // by LordMan
	{
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pPnumber] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No tienes telefono movil.");
		        return 1;
		    }
			if(PlayerInfo[playerid][pDonateRank] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Para usar esto necesitas la cuenta premium.");
			    return 1;
			}
			if(PlayerInfo[playerid][pHideNumber] == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Ahora tu telefono esta oculto.");
				PlayerInfo[playerid][pHideNumber] = 1;
				return 1;
			}
			if(PlayerInfo[playerid][pHideNumber] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Ahora tu telefono es visible.");
				PlayerInfo[playerid][pHideNumber] = 0;
				return 1;
			}
		}
		return 1;
	}
	
	/*if(!strcmp(cmdtext, "/speaker", true)) // by LordMan
	{
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pPnumber] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   You do not have a phone.");
		        return 1;
		    }
		    if(Mobile[playerid] == 255)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   You are not in a phone call.");
		        return 1;
		    }
			if(PlayerInfo[playerid][pSpeaker] == 0)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "* Beep * Speaker is on.");
				PlayerInfo[playerid][pSpeaker] = 1;
				return 1;
			}
			if(PlayerInfo[playerid][pSpeaker] == 1)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "* Beep * Speaker is off.");
				PlayerInfo[playerid][pSpeaker] = 0;
				return 1;
			}
		}
		return 1;
	}*/
//-----------------------------------------------------[Moving house CMDS]---------------------------------------
	if(strcmp(cmd, "/entradacasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] != 2000)
			{
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /entradacasa [casa] - Mueve la puerta de la casa hasta ti");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(HouseInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"House ID must be above 0 and below 33");
			    return 1;
			}
			else
   			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"Entrada de la casa %d to %f - %f - %f",proplev,X,Y,Z);
       			ABroadCast(COLOR_YELLOW,string);
				HouseInfo[proplev][hEntrancex] = X;
				HouseInfo[proplev][hEntrancey] = Y;
				HouseInfo[proplev][hEntrancez] = Z;
				OnPropUpdate();
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/nivelcasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] != 2000)
			{
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /nivelcasa [casa] [Nivel]");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(HouseInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"Numero de casa invalido.");
			    return 1;
			}
			else
   			{
   			    tmp = strtok(cmdtext, idx);
   			    new niliso = strval(tmp);
			    format(string,sizeof(string),"A la Casa %d se le cambia el nivel a: %d",proplev,niliso);
       			ABroadCast(COLOR_YELLOW,string);
       			HouseInfo[proplev][hLevel] = niliso;
				OnPropUpdate();
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/preciocasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] != 2000)
			{
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /preciocasa [casa] [Precio]");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(HouseInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"Numero de casa invalido.");
			    return 1;
			}
			else
   			{
   			    tmp = strtok(cmdtext, idx);
   			    new niliso = strval(tmp);
			    format(string,sizeof(string),"A la Casa %d se le cambia el precio a: %d",proplev,niliso);
       			ABroadCast(COLOR_YELLOW,string);
       			HouseInfo[proplev][hValue] = niliso;
				OnPropUpdate();
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/intcasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] != 2000)
			{
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /intcasa [casa] [Interior]");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(HouseInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"Numero de casa invalido.");
			    return 1;
			}
			else
   			{
   			    tmp = strtok(cmdtext, idx);
   			    new niliso = strval(tmp);
			    format(string,sizeof(string),"A la Casa %d se le cambia el interior a: %d",proplev,niliso);
       			ABroadCast(COLOR_YELLOW,string);
       			HouseInfo[proplev][hInt] = niliso;
				OnPropUpdate();
				return 1;
			}
		}
	}
	/*if(strcmp(cmd, "/nivelcasa", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /nivelcasa [Casa] [Nivel]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] == 2000)
			{
				HouseInfo[playa][hLevel] = health;
				OnPropUpdate();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/preciocasa", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /preciocasa [Casa] [Precio]");
				return 1;
			}
			new casa;
			new precio;
			casa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			precio = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] == 2000)
			{
				HouseInfo[casa][hValue] = precio;
				OnPropUpdate();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/intcasa", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /intcasa [Casa] [Interior]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] == 2000)
			{
				HouseInfo[playa][hInt] = health;
				OnPropUpdate();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/salidacasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] != 2000)
			{
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /salidacasa [casa] - Mueve la salida de la casa hasta ti");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(HouseInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"House ID must be above 0 and below 33");
			    return 1;
			}
			else
   			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"Salida de casa %d to %f - %f - %f",proplev,X,Y,Z);
       			ABroadCast(COLOR_YELLOW,string);
				HouseInfo[proplev][hExitx] = X;
				HouseInfo[proplev][hExity] = Y;
				HouseInfo[proplev][hExitz] = Z;
				HouseInfo[proplev][hInt] = GetPlayerInterior(playerid);
				OnPropUpdate();
				return 1;
			}
		}
		return 1;
	}
	
	if(strcmp(cmd, "/bizentrance", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 5)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not an Admin !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /bizentrance [bizid] - Moves a biz to you");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > sizeof(BizzInfo) || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"Business ID must be above 0 and below 5");
			    return 1;
			}
			else
   			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"Entrance of Biz %d to %f - %f - %f",proplev,X,Y,Z);
			    ABroadCast(COLOR_YELLOW,string);
				BizzInfo[proplev][bEntranceX] = X;
				BizzInfo[proplev][bEntranceY] = Y;
				BizzInfo[proplev][bEntranceZ] = Z;
				OnPropUpdate();
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sbizentrance", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 5)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not an Admin !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "SYNTAX: /sbizentrance [sbizid] - Moves an sbiz to you");
				return 1;
			}
			new proplev = strval(tmp);
			if(proplev > 11 || proplev < 0)
			{
			    SendClientMessage(playerid,COLOR_WHITE,"SBusiness ID must be above 0 and below 12");
			    return 1;
			}
			else
			{
			    new Float:X,Float:Y,Float:Z;
			    GetPlayerPos(playerid,X,Y,Z);
			    format(string,sizeof(string),"Entrance of SBiz %d to %f - %f - %f",proplev,X,Y,Z);
			    ABroadCast(COLOR_YELLOW,string);
				SBizzInfo[proplev][sbEntranceX] = X;
				SBizzInfo[proplev][sbEntranceY] = Y;
				SBizzInfo[proplev][sbEntranceZ] = Z;
				OnPropUpdate();
				return 1;
   			}
		}
		return 1;
	}
//------------------------------------------------[Job shit]---------------------------------------------------
	if(!strcmp(cmdtext, "/recolectar", true)) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsAHarvest(idcar))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No estas en el huerto.");
			    return 1;
			}
			if(FarmerVar[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ya estas trabajando.");
			    return 1;
			}
			/*if(FarmerPickup[playerid][0] >= 22)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Debes esperar a la paga diaria..");
			    return 1;
			}*/
	        if(PlayerInfo[playerid][pJob] == 18)
	        {
	            JustStarted[playerid] = 1;
	            FarmerVar[playerid] = 1;
	            TogglePlayerControllable(playerid, 1);
	            OnPlayerEnterCheckpoint(playerid);
	            SendClientMessage(playerid, COLOR_YELLOW, "Granjero: Venga, a recolectar. ((Marca roja))");
	        }
	    }
	    return 1;
	}
	
	if(!strcmp(cmdtext, "/norecolectar", true)) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(FarmerVar[playerid] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No estas trabajando.");
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 18)
			{
			    if(IsAHarvest(idcar))
			    {
			        TogglePlayerControllable(playerid, 1);
			        RemovePlayerFromVehicle(playerid);
			    }
			    if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22)
				{
					FarmerPickup[playerid][0]--;
				}
				JustStarted[playerid] = 0;
			    FarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
	    }
	    return 1;
	}
	
	if(!strcmp(cmdtext, "/comenzardroga", true)) // by LordMan
	{
		if(IsPlayerConnected(playerid))
		{
			if(!IsADrugHarvest(idcar))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No estas en la recolectora.");
			    return 1;
			}
			if(DrugFarmerVar[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Ya estas trabajando.");
			    return 1;
			}
			/*if(DrugFarmerPickup[playerid][0] >= 37)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "Jardinero: La huerta esta seca, espera a la paga diaria.");
			    return 1;
			}*/
			if(PlayerInfo[playerid][pJob] == 19)
			{
			    JustStarted[playerid] = 1;
			    TogglePlayerControllable(playerid, 1);
			    DrugFarmerVar[playerid] = 1;
			    OnPlayerEnterCheckpoint(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "Jardinero: Venga, a recolectar. ((Marca roja))");
			}
		}
		return 1;
	}
	
	if(!strcmp(cmdtext, "/parardroga", true)) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(DrugFarmerVar[playerid] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No estas recolectando drogas.");
			    return 1;
			}
			if(PlayerInfo[playerid][pJob] == 19)
			{
			    if(IsADrugHarvest(idcar))
			    {
			        TogglePlayerControllable(playerid, 1);
			        RemovePlayerFromVehicle(playerid);
			    }
			    if(DrugFarmerPickup[playerid][0] >= 1 && DrugFarmerPickup[playerid][0] <= 37)
				{
					DrugFarmerPickup[playerid][0]--;
				}
				JustStarted[playerid] = 0;
				DrugFarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
	    }
	    return 1;
	}
	
	if(!strcmp(cmdtext, "/tomardrogas", true)) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 20)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No eres proveedor de drogas.");
	            return 1;
	        }
	        if(SmugglerWork[playerid] != 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ya estas transportando drogas.");
			    return 1;
			}
			if(GetPlayerMoney(playerid) < 299)
			{
		    	SendClientMessage(playerid, COLOR_GREY, "   Necesitas 300 para transportar drogas.");
		    	return 1;
			}
			/*if(PayDaySecure[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Are you sure that you want to smuggle drugs again, today?");
			    return 1;
			}*/
			if(!PlayerToPoint(5.0,playerid,-38.8664,56.3031,3.1172))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No estas en el granero.");
			    return 1;
			}
			if(IsASmuggleCar(idcar) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    TogglePlayerControllable(playerid, 0);
			    SmugglerWork[playerid] = 1;
			    //PayDaySecure[playerid] = 1;
			    GameTextForPlayer(playerid, "~w~Metiendo las drogas...", 5000, 1);
			    SetTimerEx("LoadingDrugsForSmugglers", 5000, false, "i", playerid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No estas en la furgoneta.");
			    return 1;
			}
	    }
	    return 1;
	}
	
	/*if(!strcmp(cmdtext, "/robardrogas", true)) // by DryilZas
 	{
	    if(IsPlayerConnected(playerid))
	    {
	        //new totald;
	        //totald = drugsys[DrugAmmount]*25
	        if(PlayerInfo[playerid][pJob] != 20)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No eres proveedor de drogas.");
	            return 1;
	        }
			if(!PlayerToPoint(5.0,playerid,-38.8664,56.3031,3.1172))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No estas en el granero.");
			    return 1;
			}
			if(GetPlayerMoney(playerid) <= 25*drugsys[DrugAmmount])
			{
		    	SendClientMessage(playerid, COLOR_LIGHTRED, "   Necesitas mas dinero.");
		    	return 1;
			}
			else
			{
			    TogglePlayerControllable(playerid, 0);
			    GameTextForPlayer(playerid, "~w~Robando las drogas...", 5000, 1);
			    SetTimerEx("LoadingDrugsForSmugglersrober", 5000, false, "i", playerid);
			}
	    }
	    return 1;
	}*/

	if(strcmp(cmd, "/cambiarpass", true) == 0) // by LordMan
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Necesitas loguearte primero.");
		        return 1;
		    }
		    else
		    {
		    	SendClientMessage(playerid, COLOR_GREY, "   Se verann los efector en tu próxima conexion.");
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /cambiarpass [contraseña]");
				return 1;
			}
			strmid(PlayerInfo[playerid][pKey], tmp, 0, strlen(cmdtext), 255);
			OnPlayerUpdate(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "   Te has cambiado correctamente tu contraseña");
		}
		return 1;
	}
	
	/*if(strcmp(cmd, "/cambiarspawn", true) == 0) // by DryilZas
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Necesitas loguearte primero.");
		        return 1;
		    }
      		else //if(weather < 1||weather > 4)
		    {
		    	SendClientMessage(playerid, COLOR_GREY, "   Preparando...");
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /cambiarspawn [1-4]");
				SendClientMessage(playerid, COLOR_GRAD1, "|1| = Ejtranjero");
				SendClientMessage(playerid, COLOR_GRAD1, "|2| = Playa");
				SendClientMessage(playerid, COLOR_GRAD1, "|3| = Barrio");
				SendClientMessage(playerid, COLOR_GRAD1, "|4| = Centro");
				return 1;
			}
			if(idx < 1||idx > 4)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /cambiarspawn [1-4]");
				SendClientMessage(playerid, COLOR_GRAD1, "|1| = Ejtranjero");
				SendClientMessage(playerid, COLOR_GRAD1, "|2| = Playa");
				SendClientMessage(playerid, COLOR_GRAD1, "|3| = Barrio");
				SendClientMessage(playerid, COLOR_GRAD1, "|4| = Centro");
			}
			strmid(PlayerInfo[playerid][pOrigin], tmp, 0, strlen(cmdtext), 255);
			OnPlayerUpdate(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "   Te has cambiado correctamente tu spawn");
		}
		return 1;
	}*/

	if(!strcmp(cmdtext, "/cerrarhq", true)) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "No estas logueado.");
		        return 1;
	        }
	        else
	        {
	            if(PlayerInfo[playerid][pLeader] == 16)
	            {
	                if(hqlock[surlock] == 0)
	                {
	                    hqlock[surlock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Groves HQ Cerrada.");
	                }
	                else if(hqlock[surlock] == 1)
	                {
	                    hqlock[surlock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Groves HQ Abierta.");
					}
	            }
	            else if(PlayerInfo[playerid][pLeader] == 6)
	            {
	                if(hqlock[luclock] == 0)
	                {
	                    hqlock[luclock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "La Cosa Nostra HQ cerrada.");
	                }
	                else if(hqlock[luclock] == 1)
	                {
	                    hqlock[luclock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "La Cosa Nostra HQ abierta.");
	                }
	            }
	            else if(PlayerInfo[playerid][pLeader] == 8)
	            {
	                if(hqlock[iolock] == 0)
	                {
	                    hqlock[iolock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Hitman HQ cerrada.");
	                }
	                else if(hqlock[iolock] == 1)
	                {
	                    hqlock[iolock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Hitman HQ abierta.");
	                }
	            }
	            else if(PlayerInfo[playerid][pLeader] == 14)
	            {
	                if(hqlock[guclock] == 0)
	                {
	                    hqlock[guclock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "YaKuza HQ cerrada.");
	                }
	                else if(hqlock[guclock] == 1)
	                {
	                    hqlock[guclock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "YaKuza HQ abierta.");
	                }
	            }
	            else if(PlayerInfo[playerid][pLeader] == 15)
	            {
	                if(hqlock[stlock] == 0)
	                {
	                    hqlock[stlock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Latin XIV Clicka' HQ cerrada.");
	                }
	                else if(hqlock[stlock] == 1)
	                {
	                    hqlock[stlock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "Latin XIV Clicka' HQ abierta.");
	                }
                }
	            else if(PlayerInfo[playerid][pLeader] == 5)
	            {
	                if(hqlock[srlock] == 0)
	                {
	                    hqlock[srlock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "18th street gang HQ cerrada.");
	                }
	                else if(hqlock[srlock] == 1)
	                {
	                    hqlock[srlock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "18th street gang HQ abierta.");
	                }
				}
	            else if(PlayerInfo[playerid][pLeader] == 20)
	            {
	                if(hqlock[pulock] == 0)
	                {
	                    hqlock[pulock] = 1;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "los puretas gang HQ cerrada.");
	                }
	                else if(hqlock[pulock] == 1)
	                {
	                    hqlock[pulock] = 0;
	                    SaveHQLocks();
	                    SendClientMessage(playerid, COLOR_GREY, "los puretas gang HQ abierta.");
	                }
				}
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "No tienes las llaves de la HQ.");
	                return 1;
	            }
	        }
	    }
	    return 1;
	}
	
	if(strcmp(cmd, "/ko", true) == 0) // by LordMan
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "No estas logueado.");
		        return 1;
	        }
	        if(PlayerInfo[playerid][pLevel] < 3)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Necesitas nivel 3 para poder noquear.");
	            return 1;
	        }
	        if(KnockedDown[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Estas cansado de un porrazo anterior.");
	            return 1;
	        }
            if(PlayerBoxing[playerid] != 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Estas boxeando.");
                return 1;
            }
            if(IsPlayerInAnyVehicle(playerid))
		    {
      			SendClientMessage(playerid, COLOR_GREY, "   Estas en un vehiculo!");
       			return 1;
		    }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /ko [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[giveplayerid][pTraderPerk] == 1)
			{
 				SendClientMessage(playerid, COLOR_LIGHTRED, "A este no puedes noquearlo !");
   				return 1;
			}
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
           			if (ProxDetectorS(1.0, playerid, giveplayerid))
			        {
           				if(KnockedDown[giveplayerid] != 1)
			        	{
			        	    if(giveplayerid == playerid)
			        	    {
			        	        if(PlayerInfo[playerid][pMaskuse] == 1)
									{
									    TogglePlayerControllable(playerid, 0);
										ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0);
										SetTimerEx("ClearKnock", 30000, false, "i", playerid);
										KnockedDown[playerid] = 1;
										format(string, sizeof(string), "* Enmascarado se da un fuerte golpe en la frente.");
										ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    						format(string, sizeof(string), "* Enmascarado intenta noquearse y lo consigue");
			    						ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
			 							printf("%s", string);
			    						return 1;
									}
								else
								{
								    new giveplayername[MAX_PLAYER_NAME];
			            			GetPlayerName(playerid, sendername, sizeof(sendername));
			            			GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
									TogglePlayerControllable(playerid, 0);
									ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0);
									SetTimerEx("ClearKnock", 30000, false, "i", playerid);
									KnockedDown[playerid] = 1;
									format(string, sizeof(string), "* %s se da un fuerte golpe en la frente.", sendername);
									ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   									format(string, sizeof(string), "* %s intenta noquearse y lo consigue", sendername);
   									ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
	 								printf("%s", string);
   									return 1;
	    						}
								
							}
			        	    if(IsPlayerInAnyVehicle(giveplayerid))
			        	    {
			        	        return 1;
			        	    }
			            	new giveplayername[MAX_PLAYER_NAME];
			            	GetPlayerName(playerid, sendername, sizeof(sendername));
			            	GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
			            	new rands = random(2)+1;
			            	ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
			            	if(PlayerInfo[playerid][pMaskuse] == 1)
			            	    {
			            	    format(string, sizeof(string), "* Enmascarado le da un golpe con el codo a %s.", giveplayername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			            	   	}
							else
			    			{
								format(string, sizeof(string), "* %s le da un golpe con el codo a %s.", sendername, giveplayername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							if(rands == 1)
							{
							    if(PlayerInfo[playerid][pMaskuse] == 1)
							    {
							    	TogglePlayerControllable(giveplayerid, 0);
									ApplyAnimation(giveplayerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0);
									SetTimerEx("ClearKnock", 30000, false, "i", giveplayerid);
									KnockedDown[giveplayerid] = 1;
									format(string, sizeof(string), "* Enmascarado intenta noquearlo y lo consigue.");
									ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
									return 1;
							    }
							    else
							    {
							    	TogglePlayerControllable(giveplayerid, 0);
									ApplyAnimation(giveplayerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0);
									SetTimerEx("ClearKnock", 30000, false, "i", giveplayerid);
									KnockedDown[giveplayerid] = 1;
									format(string, sizeof(string), "* %s intenta noquearlo y lo consigue.", sendername);
									ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
									return 1;
								}
							}
							else
							{
							    if(PlayerInfo[playerid][pMaskuse] == 1)
							    {
							        format(string, sizeof(string), "* Enmascarado intenta noquearlo pero falla.");
                                	ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
                                	return 1;
							    }
							    else
							    {
							    	format(string, sizeof(string), "* %s intenta noquearlo pero falla.", sendername);
                                	ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
                                	return 1;
                                }
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Este ya esta K.O.");
						    return 1;
						}
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Estas demasiado lejos");
			            return 1;
			        }
			    }
			}
	        
		}
		return 1;
	}
	/*if(strcmp(cmd, "/carcolor", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pPcarkey] == 999)
	        {
	            SendClientMessage(playerid, COLOR_GREY,"   You don't have a car to respray.");
	            return 1;
	        }
	        if(GetPlayerMoney(playerid) < 1000)
	        {
	            SendClientMessage(playerid, COLOR_GREY,"   You don't have enough money for car respray.");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /carcolor [ColorOneID] [ColorTwoID]");
				return 1;
			}
			new color1;
			color1 = strval(tmp);
			if(color1 < 0 && color1 > 126)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Wrong color id!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /carcolor [ColorOneID] [ColorTwoID]");
				return 1;
			}
			new color2;
			color2 = strval(tmp);
			if(color2 < 0 && color2 > 126)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Wrong color id!");
			    return 1;
			}
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	            if(PlayerInfo[playerid][pPcarkey] == idcar)
	            {
	                CarInfo[idcar][cColorOne] = color1;
	                CarInfo[idcar][cColorTwo] = color2;
	                SafeGivePlayerMoney(playerid, -1000);
	                GameTextForPlayer(playerid, "~w~Bill for a Paint Respray~n~~r~-$1000", 5000, 1);
	                ChangeVehicleColor(idcar, color1, color2);
	                OnPropUpdate();
					OnPlayerUpdate(playerid);
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY,"   This is not your car.");
	            	return 1;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY,"   You are not in vehicle.");
	            return 1;
	        }
	    }
	    return 1;
	}*/
//----------------------------------[POner skin]------------------------------------------------
	if(strcmp(cmd, "/ponerskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAR: /ponerskin [ID del Jugador] [Numero]");
				return 1;
			}
			new para1;
			new skin;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			skin = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pAge] = skin;
						format(string, sizeof(string), "   Has dado a %s el skin %d.", giveplayer,skin);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar este comando(Solo Admin.)!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotop", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
			{
				return 1;
			}
            tmp = strtok(cmdtext, idx);
			new XP;
			XP = strval(tmp);
			tmp = strtok(cmdtext, idx);
			new YP;
			YP = strval(tmp);
			tmp = strtok(cmdtext, idx);
			new ZP;
			ZP = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				SetPlayerPos(playerid, XP,YP,ZP);
			}
         }
	    return 1;
	}
	if(strcmp(cmd, "/save", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			new Float:XX, Float:XY, Float:XZ, Float:XA;
			new plname[256];
			new texto[256];
			new string_01[256];
			new string_02[256];
			GetPlayerName(playerid, plname, sizeof(plname));
			GetPlayerPos(playerid, XX, XY, XZ);
			GetPlayerFacingAngle(playerid, XA);
			tmp = strtok(cmdtext, idx);
			texto = tmp;
			format(string_01, sizeof(string_01), "Coordenadas Guardadas de: %s en el archivo savedpositions.txt", plname);
			format(string_02, sizeof(string_01), "X: %f, Y: %f, Z: %f, Acimut: %f // %s", XX, XY, XZ, XA, texto);
			ABroadCast(COLOR_YELLOW,string_01);
			ABroadCast(COLOR_YELLOW,string_02);
         }
	}
	if(strcmp(cmd, "/mirarme", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] < 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "No eres Administrador !");
			    return 1;
			}
			SetCameraBehindPlayer(playerid);
         }
	    return 1;
	}
	if(strcmp(cmd, "/mirar", true) == 0) // by DryilZas de Magec
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] < 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "No eres Administrador !");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /mirar (Lugar[X Y Z] Direccion[X Y Z]");
				SendClientMessage(playerid, COLOR_GRAD2, "Ejemplo: /mirar 1230.50 600 70.5 1000 600 70.5");
				return 1;
			}
            tmp = strtok(cmdtext, idx);
			new PX;
			PX = strval(tmp);
			tmp = strtok(cmdtext, idx);
			new PY;
			PY = strval(tmp);
			tmp = strtok(cmdtext, idx);
			new PZ;
			PZ = strval(tmp);
			
			tmp = strtok(cmdtext, idx);
			new MX;
			PX = strval(tmp);
			tmp = strtok(cmdtext, idx);
			new MY;
			PY = strval(tmp);
			tmp = strtok(cmdtext, idx);
			new MZ;
			PZ = strval(tmp);
			
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				SetPlayerCameraPos(playerid, PX, PY, PZ);
				SetPlayerCameraLookAt(playerid, MX, MY, MZ);
			}
         }
	    return 1;
	}
	/*if(strcmp(cmd, "/prueba1", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
			SetPlayerPos(playerid, -2158.50830, 643.11829, 1052.37500);
			SetPlayerInterior(playerid, 1)
         }
	    return 1;
	}*/
	if(strcmp(cmd, "/dar", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			/*if (PlayerInfo[playerid][pPainPerk] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Estas cometiendo corrupcion !");
			}
			else if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Tu no puedes usar este comando !");
			    return 1;
			}*/
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /dar [nombre] [ID del jugador] ([amount])");
				SendClientMessage(playerid, COLOR_WHITE, "Nombres disponibles: drogas, arma, llave(1-3),copia(1-3), alquilado, cuerda");
				return 1;
			}
			if(strcmp(x_nr,"drogas",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar drogas [ID del jugador] [amount]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(5, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta cerca de ti!");
			                return 1;
			            }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar drugs [Id del jugador] [amount]");
							return 1;
						}
						new dammount;
						dammount = strval(tmp);
						if(dammount > PlayerInfo[playerid][pDrugs]) { SendClientMessage(playerid, COLOR_GREY, "   No tienes tantas drogas."); return 1; }
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pDrugs] -= dammount;
						PlayerInfo[giveplayerid][pDrugs] += dammount;
						if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s saca disimuladamente una bolsa con drogas y se la da a %s.", sendername, giveplayer); }
						else { format(string, sizeof(string), "* %s saca disimuladamente un saco con drogas y se lo da a %s.", sendername, giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   este jugador no esta conectado!");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"arma",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar arma [Id del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    new gunID = GetPlayerWeapon(playerid);
            				new gunAmmo = GetPlayerAmmo(playerid);
            				
						    GetPlayerName(playerid, sendername, sizeof(sendername));
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						    
						    if(gunID != 0 && gunAmmo != 0)
						    {
						        SafeGivePlayerWeapon(giveplayerid, gunID, gunAmmo);
						        RemovePlayerWeapon(playerid, gunID);
						        format(string, sizeof(string), "* %s le entrega un arma a %s.", sendername, giveplayer);
						        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            			return 1;
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "  No tienes armas !");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca de ti ! ");
						    return 1;
						}
				    }
				}
			}
			else if(strcmp(x_nr,"copia1",true) == 0)
			{
			    if(PlayerInfo[playerid][pPcarkey] == 9999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   No tienes un vehiculo!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar copia1 [ID del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(HireCar[giveplayerid] != 999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "   El jugador ya tiene una llave de alquiler!");
			        		return 1;
			    		}
			    		new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(PlayerToPoint(15, playerid, x, y, z))
			            {
			                if(HireCar[giveplayerid] == 999)
			                {
			    				HireCar[giveplayerid] = PlayerInfo[playerid][pPcarkey];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s le entrega una copia de las llaves de su vehiculo a %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta cerca de ti!");
						    return 1;
						}

					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta conectado!");
				    return 1;
				}

			}
			else if(strcmp(x_nr,"copia2",true) == 0)
			{
			    if(PlayerInfo[playerid][pPcarkey2] == 9999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   No tienes ningun vehiculo!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar copia2 [ID del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(HireCar[giveplayerid] != 999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "   El jugador ya tiene una llave de alquiler!");
			        		return 1;
			    		}
			    		new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(PlayerToPoint(15, playerid, x, y, z))
			            {
			                if(HireCar[giveplayerid] == 999)
			                {
			    				HireCar[giveplayerid] = PlayerInfo[playerid][pPcarkey2];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s saca las llaves de su vehiculo y se las da a %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta cerca de ti!");
						    return 1;
						}

					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta conectado!");
				    return 1;
				}

			}
			else if(strcmp(x_nr,"copia3",true) == 0)
			{
			    if(PlayerInfo[playerid][pPcarkey3] == 9999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   No tienes ningun vehiculo!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar copia3 [Id del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(HireCar[giveplayerid] != 999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "   El jugador ya tiene una llave de alquiler!");
			        		return 1;
			    		}
			    		new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(PlayerToPoint(15, playerid, x, y, z))
			            {
			                if(HireCar[giveplayerid] == 999)
			                {
			    				HireCar[giveplayerid] = PlayerInfo[playerid][pPcarkey3];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s saca las llaves de su vehiculo y se las da a %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta cerda de ti!");
						    return 1;
						}

					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta conectado!");
				    return 1;
				}

			}
			else if(strcmp(x_nr,"copia4",true) == 0)
			{
			    if(PlayerInfo[playerid][pPcarkey4] == 9999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   No tienes ningun vehiculo!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar copia4 [Id del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(HireCar[giveplayerid] != 999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "   El jugador ya tiene una llave de alquiler!");
			        		return 1;
			    		}
			    		new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(PlayerToPoint(15, playerid, x, y, z))
			            {
			                if(HireCar[giveplayerid] == 999)
			                {
			    				HireCar[giveplayerid] = PlayerInfo[playerid][pPcarkey4];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s saca las llaves de su vehiculo y se las da a %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta cerda de ti!");
						    return 1;
						}

					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta conectado!");
				    return 1;
				}

			}
			else if(strcmp(x_nr,"copia5",true) == 0)
			{
			    if(PlayerInfo[playerid][pPcarkey5] == 9999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   No tienes ningun vehiculo!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar copia5 [Id del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(HireCar[giveplayerid] != 999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "   El jugador ya tiene una llave de alquiler!");
			        		return 1;
			    		}
			    		new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(PlayerToPoint(15, playerid, x, y, z))
			            {
			                if(HireCar[giveplayerid] == 999)
			                {
			    				HireCar[giveplayerid] = PlayerInfo[playerid][pPcarkey5];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s saca las llaves de su vehiculo y se las da a %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta cerda de ti!");
						    return 1;
						}

					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta conectado!");
				    return 1;
				}

			}
			/*else if(strcmp(x_nr,"llave1",true) == 0)
			{
			    if(PlayerInfo[playerid][pPcarkey] == 999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   No tienes un vehiculo!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar llave1 [Id del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[giveplayerid][pPcarkey] != 999 && PlayerInfo[giveplayerid][pPcarkey2] != 999 && PlayerInfo[giveplayerid][pPcarkey3] != 999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador ya tiene unas llaves!");
			        		return 1;
			    		}
			    		new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(PlayerToPoint(15, playerid, x, y, z))
			            {
			                if(PlayerInfo[giveplayerid][pPcarkey] == 999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey] = PlayerInfo[playerid][pPcarkey];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s saca las llaves de su vehiculo y se las da a %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							    OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey2] == 999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey2] = PlayerInfo[playerid][pPcarkey];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s saca las llaves del vehiculo y se las da a %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey3] == 999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey3] = PlayerInfo[playerid][pPcarkey];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s saca las llaves de su vehiculo y se las da a %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta cerca de ti!");
						    return 1;
						}

					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta conectado!");
				    return 1;
				}

			}
			else if(strcmp(x_nr,"llave2",true) == 0)
			{
			    if(PlayerInfo[playerid][pPcarkey2] == 999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   No tienes ningun vehiculo!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar llave2 [ID del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[giveplayerid][pPcarkey] != 999 && PlayerInfo[giveplayerid][pPcarkey2] != 999 && PlayerInfo[giveplayerid][pPcarkey3] != 999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador ya tiene unas llaves!");
			        		return 1;
			    		}
			    		new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(PlayerToPoint(15, playerid, x, y, z))
			            {
			                if(PlayerInfo[giveplayerid][pPcarkey] == 999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey] = PlayerInfo[playerid][pPcarkey2];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s saca las llaves de su vehiculo y se las da a %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey2] == 999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey2] = PlayerInfo[playerid][pPcarkey2];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s saca las llaves de su vehiculo y se las da a %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey3] == 999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey3] = PlayerInfo[playerid][pPcarkey2];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s saca las llaves de su vehiculo y se las da a %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta cerca de ti!");
						    return 1;
						}

					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   Este jugador no esta conectado!");
				    return 1;
				}

			}
			else if(strcmp(x_nr,"llave3",true) == 0)
			{
			    if(PlayerInfo[playerid][pPcarkey3] == 999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   You don't have a vehicle key key to give!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar llave3 [ID o Nombre]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[giveplayerid][pPcarkey] != 999 && PlayerInfo[giveplayerid][pPcarkey2] != 999 && PlayerInfo[giveplayerid][pPcarkey3] != 999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "   Player has a veh key already!");
			        		return 1;
			    		}
			    		new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(PlayerToPoint(15, playerid, x, y, z))
			            {
			                if(PlayerInfo[giveplayerid][pPcarkey] == 999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey] = PlayerInfo[playerid][pPcarkey3];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s takes out the vehicle keys and tosses them to %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey2] == 999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey2] = PlayerInfo[playerid][pPcarkey3];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s takes out the vehicle keys and tosses them to %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
							else if(PlayerInfo[giveplayerid][pPcarkey3] == 999)
			                {
			    				PlayerInfo[giveplayerid][pPcarkey3] = PlayerInfo[playerid][pPcarkey3];
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* %s takes out the vehicle keys and tosses them to %s.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								OnPlayerUpdate(playerid);
								OnPlayerUpdate(giveplayerid);
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "   Player is not near you!");
						    return 1;
						}

					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   Player is Offline!");
				    return 1;
				}

			}*/
			else if(strcmp(x_nr,"alquilado",true) == 0)
			{
			    if(HireCar[playerid] == 999)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   You don't have a hire key to give!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar alquilado [ID o Nombre]");
			        return 1;
			    }
			    giveplayerid = ReturnUser(tmp);
       			if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
			            new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(15, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "   Player is not near you!");
			                return 1;
			            }
			    		if(HireCar[giveplayerid] != 999)
			    		{
			        		SendClientMessage(playerid, COLOR_GRAD1, "    Player already has a hire key !");
			        		return 1;
			    		}
			    		HireCar[giveplayerid] = HireCar[playerid];
			    		HireCar[playerid] = 999;
			    		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s takes out the rented vehicle keys and tosses them to %s.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			else if(strcmp(x_nr,"cuerda",true) == 0)
			{
			    if(Rope[playerid] == 0)
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   You don't have a rope to give!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /dar cuerda [ID o Nombre]");
			        return 1;
			    }
			    giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
			            if(ProxDetectorS(5, playerid, giveplayerid))
			            {
			                if(Rope[giveplayerid] > 4)
			                {
			                    SendClientMessage(playerid, COLOR_GREY, "   Player has enough ropes with him !");
			                    return 1;
			                }
			                Rope[playerid]--;
			                Rope[giveplayerid]++;
			                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s hands a rope to %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Player is not near you !");
							return 1;
			            }
			        }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /dar [name] [ID o Nombre] ([cantidad])");
				SendClientMessage(playerid, COLOR_WHITE, "Available names: drugs, gun, vehkey(1-3), hirekey, rope");
				return 1;
			}
			
	    }
	    return 1;
	}
	
	if(strcmp(cmd, "/ita", true) == 0 || strcmp(cmd, "/italiano", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6)
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: (/ita)liano [chat]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(PlayerInfo[i][pMember] == 6 || PlayerInfo[i][pLeader] == 6)
							{
					    		format(string, sizeof(string), "%s Dice: [Italian] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s Dice: [Lenguaje Desconocido]", sendername);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Tu no hablas italiano !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ale", true) == 0 || strcmp(cmd, "/aleman", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pbono3] == 1)
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: (/ale)man [chat]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(PlayerInfo[i][pbono3] == 1)
							{
					    		format(string, sizeof(string), "%s Dice: [Aleman] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s Dice: [Lenguaje Desconocido]", sendername);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Tu no sabes hablar Aleman !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ing", true) == 0 || strcmp(cmd, "/ingles", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 5)
	        {
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: (/ing)les [chat]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(PlayerInfo[i][pMember] == 5 || PlayerInfo[i][pLeader] == 5)
							{
					    		format(string, sizeof(string), "%s Dice: [Ingles] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s Dice: [Lenguaje Desconocido]", sendername);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Tu no sabes hablar ingles !");
			}
		}
		return 1;
	}
	
	if(strcmp(cmd, "/jap", true) == 0 || strcmp(cmd, "/japones", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pMember] == 14)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: (/jap)ones [chat]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(PlayerInfo[i][pMember] == 14 || PlayerInfo[i][pLeader] == 14)
							{
					    		format(string, sizeof(string), "%s Dice: [Japones] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s Dice: [Lenguaje Desconocido]", sendername);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You can't talk spanish !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rus", true) == 0 || strcmp(cmd, "/ruso", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 8)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: (/rus)o [chat]");
					return 1;
				}
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(PlayerInfo[i][pMember] == 8 || PlayerInfo[i][pLeader] == 8)
							{
					    		format(string, sizeof(string), "%s Dice: [Ruso] %s", sendername, result);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s Dice: [Lenguaje Desconocido]", sendername);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Tu no sabes hablar Ruso !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/cuerda", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
          PlayerTied[playerid] = 1;
    	  SendClientMessage(playerid, COLOR_GREY, "  Usas tus calzonsillos a modo de cuerda !");
          return 1;
        }
    }
	
	
	if(strcmp(cmd, "/blindfold", true) == 0) // by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	        	SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /blindfold [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { return 1; }
			        if(BlindFold[giveplayerid] == 0)
			        {
			        	if(PlayerTied[giveplayerid] == 1)
			        	{
			            	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveplayerid))
	        				{
               					SendClientMessage(playerid, COLOR_GREY, "   You must be in the same vehicle to use it !");
        						return 1;
	        				}
	        				GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	        				SetPlayerCameraPos(giveplayerid, 2000,-2000,2000);
							SetPlayerCameraLookAt(giveplayerid, 2000,-2000,2000);
			            	BlindFold[giveplayerid] = 1;
			            	format(string, sizeof(string), "* %s puts a kerchief on %s eyes", sendername, giveplayer);
			            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        	}
			        	else
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "    Player must be tied first !");
							return 1;
						}
					}
					else
					{
					    new Float:x, Float:y, Float:z;
					    GetPlayerPos(giveplayerid,x,y,z);
					    if(PlayerToPoint(5, playerid, x, y, z))
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        SetCameraBehindPlayer(giveplayerid);
					    	BlindFold[giveplayerid] = 0;
					    	format(string, sizeof(string), "* %s takes off a kerchief of %s eyes", sendername, giveplayer);
			            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    	
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Player is not near you !");
						    return 1;
						}
					}
			    }
			}
	    }
	    return 1;
	}
	
	if(strcmp(cmd,"/mostrarplaca",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
				{
	        	tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /mostrarplaca [ID del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
				    	if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
					    	if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "No puedes mostrarte la licencia a ti mismo!"); return 1; }
					    	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s saca su placa del bolsillo.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					    	if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** Rank/Nombre: Chief %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** Rank/Nombre: Sub-Jefe %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Rank/Nombre: Capitan %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Rank/Nombre: Inspector Jefe %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Rank/Nombre: Inspector %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Rank/Nombre: Sub-Inspector %s*", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Rank/Nombre: Oficial de policia %s", sendername); }
				        	else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Rank/Nombre: Policia %s", sendername); }
							SendClientMessage(giveplayerid, COLOR_GREY, string);
				        	format(string, sizeof(string), "* %s te ha mostrado su placa.", sendername);
							SendClientMessage(giveplayerid, COLOR_GREY, string);
							format(string, sizeof(string), "* Has mostrado tu placa a %s.", giveplayer);
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						else
						{
					    	SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca de ti!");
					    	return 1;
						}
					}
				}
	        	else
	        	{
	            	SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado!");
	            	return 1;
	        	}
	        }
		}
	    return 1;
 	}
 	
 	if(strcmp(cmd,"/showid",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
	        	tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /showid [ID o Nombre]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cant show your ID to yourself, stupid!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s takes out his/her badge from his/her pocket.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** || FBI Rank/Name: Director %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** || FBI Rank/Name: Administrator %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** || FBI Rank/Name: Spec. Agent %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** || FBI Rank/Name: Agent %s* ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** || FBI Rank/Name: Analyst %s ||", sendername); }
					        else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** || FBI Rank/Name: Agency Intern %s ||", sendername); }
							SendClientMessage(giveplayerid, COLOR_GREY, string);
					        format(string, sizeof(string), "* %s has shown his/her ID to you.", sendername);
							SendClientMessage(giveplayerid, COLOR_GREY, string);
							format(string, sizeof(string), "* You have shown your ID to %s.", giveplayer);
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   That player is not near you!");
						    return 1;
						}
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You don't have the ID card!");
	            return 1;
	        }
		}
	    return 1;
 	}
 	
 	if(!strcmp(cmdtext, "/pdup", true))
 	{
		if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		        {
		            if(PlayerToPoint(1.0,playerid,242.7591,66.4315,1003.6406))
		            {
		            	SetPlayerPos(playerid, 1556.1990,-1671.6530,28.3956);
		            	GameTextForPlayer(playerid, "~w~Police Departemnt Roof",5000,1);
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
					}
		        }
		    }
		}
		return 1;
 	}
 	
 	if(!strcmp(cmdtext, "/pddown", true))
 	{
 	    if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
		        {
		            if(PlayerToPoint(1.0,playerid,242.7591,66.4315,1003.6406))
		            {
		            	SetPlayerPos(playerid, 1526.5972,-1676.0651,5.8906);
		            	GameTextForPlayer(playerid, "~w~Police Departemnt Garage",5000,1);
						SetPlayerInterior(playerid,0);
						PlayerInfo[playerid][pInt] = 0;
					}
		        }
		    }
		}
		return 1;
 	}
 	
    if(!strcmp(cmdtext, "/vernotas", true)) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "    You need to login first ! ");
                return 1;
            }
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "_____________Cuaderno_____________");
            format(string, sizeof(string), "1| %s", PlayerInfo[playerid][pNote1]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "2| %s", PlayerInfo[playerid][pNote2]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "3| %s", PlayerInfo[playerid][pNote3]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "4| %s", PlayerInfo[playerid][pNote4]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "5| %s", PlayerInfo[playerid][pNote5]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "___________________________________");
            GetPlayerName(playerid, sendername, sizeof(sendername));
            format(string, sizeof(string), "* %s abre su cuaderno y lo ojea...", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        return 1;
    }
    
    if(strcmp(cmd,"/borrarnota",true)==0) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                return 1;
            }
            new x_nr[256];
            x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /borrarnota [slot(1-5)]");
				return 1;
			}
			if(strcmp(x_nr,"1",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote1s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote1], "---", 0, strlen("---"), 255);
			    	PlayerInfo[playerid][pNote1s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Nota ( 1 ) borrada.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "    No tienes nota hay ! ");
				}
			}
			else if(strcmp(x_nr,"2",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote2s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote2], "---", 0, strlen("---"), 255);
			    	PlayerInfo[playerid][pNote2s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Nota ( 2 ) borrada.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "    No tienes nota hay ! ");
				}
			}
			else if(strcmp(x_nr,"3",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote3s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote3], "---", 0, strlen("---"), 255);
			    	PlayerInfo[playerid][pNote3s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Nota ( 3 ) borrada.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "    No tienes nota hay ! ");
				}
			}
			else if(strcmp(x_nr,"4",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote4s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote4], "---", 0, strlen("---"), 255);
			    	PlayerInfo[playerid][pNote4s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Nota ( 4 ) borrada.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "    No tienes nota hay ! ");
				}
			}
			else if(strcmp(x_nr,"5",true) == 0)
			{
			    if(PlayerInfo[playerid][pNote5s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote5], "---", 0, strlen("---"), 255);
			    	PlayerInfo[playerid][pNote5s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Nota ( 5 ) borrada.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "    No tienes nota hay ! ");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "    Solo del 1 al 5 ! ");
			    return 1;
			}
        }
        return 1;
    }
    
    if(strcmp(cmd,"/crearnota",true)==0) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "    No estas logueado ! ");
                return 1;
            }
            new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(length > 60)
			{
			    SendClientMessage(playerid, COLOR_GREY, "    Nota demasiado larga ! ");
			    return 1;
			}
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /crearnota [text]");
				return 1;
			}
			if(PlayerInfo[playerid][pNote1s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote1], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote1s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Nota escrita en tu cuaderno.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote2s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote2], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote2s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Nota escrita en tu cuaderno.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote3s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote3], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote3s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Nota escrita en tu cuaderno.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote4s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote4], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote4s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Nota escrita en tu cuaderno.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote5s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote5], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote5s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Nota escrita en tu cuaderno.");
			    return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "    Tu cuaderno esta lleno, borra algunas notas ! ");
			    return 1;
			}
        }
        return 1;
    }
    
    if(strcmp(cmd,"/darnota",true)==0) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "    No estas loguado ! ");
                return 1;
            }
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /darnota [ID o Nombre] [Numero]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        new Float:x, Float:y, Float:z;
           			GetPlayerPos(giveplayerid,x,y,z);
			        if(!PlayerToPoint(5, playerid, x, y, z))
			        {
			            SendClientMessage(playerid, COLOR_GREY, "    Jugador demasiado lejos ! ");
			            return 1;
			        }
			        new x_nr[256];
			        x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr))
					{
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /darnota [ID o Nombre] [Numero]");
						return 1;
					}
					if(strcmp(x_nr,"1",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote1s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "    Cuaderno del otro lleno ! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "    No tienes nota en el hueco 1 ! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"2",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote2s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "    Cuaderno del otro lleno ! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "    No tienes nota en el hueco 2 ! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"3",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote3s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "    Cuaderno del otro lleno ! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "    No tienes nota en el hueco 3 ! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"4",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote4s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "    Cuaderno del otro lleno ! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "    No tienes nota en el hueco 4 ! ");
					        return 1;
					    }
					}
					else if(strcmp(x_nr,"5",true) == 0)
					{
					    if(PlayerInfo[playerid][pNote5s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "Enviaste una nota a [ID:%d] %s.", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Reciviste una nota de [ID:%d] %s.", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "    Cuaderno del otro lleno ! ");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "    No tienes nota en el hueco 5 ! ");
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "    Error ! ");
					    return 1;
					}
			    }
			}
        }
        return 1;
    }
    
    if(strcmp(cmd,"/govinvite",true)==0) // By LordMan
    {
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   You need to login first ! ");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 7)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /govinvite [ID o Nombre]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pMember] != 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Player is part of other organisation ! ");
				            return 1;
				        }
				        if(PlayerInfo[giveplayerid][pLeader] != 0)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Player is part of other organisation ! ");
				            return 1;
				        }
				        PlayerInfo[giveplayerid][pMember] = 7;
						PlayerInfo[giveplayerid][pTeam] = 11;
						gTeam[giveplayerid] = 11;
				        SendClientMessage(playerid, COLOR_WHITE, "  You have invited player to government successfuly.");
				        SendClientMessage(playerid, COLOR_WHITE, "TIP: Don't forget to /setrole .");
				        SendClientMessage(giveplayerid, COLOR_WHITE, "  You have been invited by Mayor to government.");
				    }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You're not the mayor ! ");
			    return 1;
			}
		}
		return 1;
    }
    
    if(strcmp(cmd,"/govuninvite",true)==0) // By LordMan
    {
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   You need to login first ! ");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 7)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /govuninvite [ID o Nombre]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pMember] != 7)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Player is not a part of your organisation ! ");
				            return 1;
						}
						PlayerInfo[giveplayerid][pMember] = 0;
						PlayerInfo[giveplayerid][pRank] = 0;
						PlayerInfo[giveplayerid][pTeam] = 3;
						gTeam[giveplayerid] = 3;
						new randomskin;
						if(PlayerInfo[giveplayerid][pSex] == 1) { randomskin = random(sizeof(CivMalePeds)); }
						else if(PlayerInfo[giveplayerid][pSex] == 1) { randomskin = random(sizeof(CivFemalePeds)); }
						else { randomskin = random(sizeof(CivMalePeds)); }
						SetPlayerSkin(giveplayerid, randomskin);
						PlayerInfo[giveplayerid][pChar] = randomskin;
						SendClientMessage(giveplayerid, COLOR_WHITE, "  You have been kicked out of government by Mayor.");
						SendClientMessage(playerid, COLOR_WHITE, "   You have kicked the player out of government.");
				    }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You're not the mayor ! ");
			    return 1;
			}
		}
		return 1;
    }
    
    if(strcmp(cmd,"/setrole",true)==0) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "   You need to login first ! ");
                return 1;
            }
            if(PlayerInfo[playerid][pLeader] != 7)
            {
                SendClientMessage(playerid, COLOR_GREY, "  You're not the mayor ! ");
                return 1;
            }
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /setrole [ID o Nombre] [role name]");
				SendClientMessage(playerid, COLOR_WHITE, "Available names: driver, bodyguard");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pMember] != 7)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Player is not in your organisation ! ");
			            return 1;
			        }
			        new x_nr[256];
			        x_nr = strtok(cmdtext, idx);
			        if(!strlen(x_nr))
			        {
			            SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /setrole [ID o Nombre] [role name]");
			            SendClientMessage(playerid, COLOR_WHITE, "Available names: driver, bodyguard");
						return 1;
			        }
			        if(strcmp(x_nr,"driver",true) == 0)
			        {
			            PlayerInfo[giveplayerid][pRank] = 1;
						SendClientMessage(giveplayerid, COLOR_WHITE, "Mayor set your role to Driver");
						SendClientMessage(playerid, COLOR_WHITE, "Role has been set successfuly");
						return 1;
			        }
			        else if(strcmp(x_nr,"bodyguard",true) == 0)
			        {
			            PlayerInfo[giveplayerid][pJob] = 8;
			            PlayerInfo[giveplayerid][pRank] = 2;
			            SendClientMessage(giveplayerid, COLOR_WHITE, "Mayor set your role to Bodyguard");
						SendClientMessage(playerid, COLOR_WHITE, "Role has been set successfuly");
						return 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /setrole [ID o Nombre] [role name]");
			            SendClientMessage(playerid, COLOR_WHITE, "Available names: driver, bodyguard");
						return 1;
			        }
			    }
			}
        }
        return 1;
    }
    
    if(!strcmp(cmdtext, "/patear", true)) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            GetPlayerName(playerid, sendername, sizeof(sendername));
            for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
                    format(string, sizeof(string), "* %s tira abajo la puerta.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					for(new p = 0; p < MAX_PLAYERS; p++)
					{
					    if(PlayerToPoint(60, p, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
					    {
					        SendClientMessage(p, COLOR_PURPLE, "* no consigue tirar la puerta.");
					    }
					}
				}
			}
        }
        return 1;
    }
    
    if(!strcmp(cmdtext, "/barrer", true)) // By LordMan
    {
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pJob] != 21)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No eres un barrendero ! ");
		        return 1;
		    }
		    if(sinmovermerca[playerid] == 1) // by DryilZas
     	    {
         	    SendClientMessage(playerid, COLOR_WHITE, "   Debes esperar un poco para seguir trabajando.");
         	    return 1;
     	    }
		    if(PlayerIsSweeping[playerid] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Ya estas barriendo ! ");
		        return 1;
		    }
		    if(IsASweeper(idcar))
		    {
		        PlayerIsSweeping[playerid] = 1;
		        TogglePlayerControllable(playerid, 1);
		        new randomize;
		        randomize = random(sizeof(gSweeperPoints));
		        SetPlayerCheckpoint(playerid, gSweeperPoints[randomize][0], gSweeperPoints[randomize][1], gSweeperPoints[randomize][2], 5.0);
		        SendClientMessage(playerid, COLOR_WHITE, "Ve de punto en punto limpiando la ciudad.");
		    }
		}
		return 1;
    }
    
    if(!strcmp(cmdtext, "/nobarrer", true)) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerIsSweeping[playerid] == 1)
            {
                DisablePlayerCheckpoint(playerid);
                PlayerIsSweeping[playerid] = 0;
                SendClientMessage(playerid, COLOR_WHITE, "Has dejado de barrer las calles.");
                SetTimerEx("tiemponomerca", 120000, false, "i", playerid);
                CP[playerid] = 0;
                sinmovermerca[playerid] = 1; // by DryilZas
                if(IsASweeper(idcar))
                {
                    RemovePlayerFromVehicle(playerid);
                }
            }
            else
            {
				SendClientMessage(playerid, COLOR_GREY, "   No eres un barrendero ! ");
				return 1;
            }
        }
        return 1;
    }
    if(!strcmp(cmdtext, "/basura", true)) // By Pedro  //basurero
    {
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pJob] != 25)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No eres un Basurero ! ");
		        return 1;
		    }
		    if(sinmovermerca[playerid] == 1)
     	    {
         	    SendClientMessage(playerid, COLOR_WHITE, "   Debes esperar un poco para seguir trabajando.");
         	    return 1;
     	    }
		    if(PlayerIsBasuras[playerid] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Ya estas recogiendo basura ! ");
		        return 1;
		    }
		    if(IsABasura(idcar))
		    {
		        PlayerIsBasuras[playerid] = 1;
		        TogglePlayerControllable(playerid, 1);
		        new randomize;
		        randomize = random(sizeof(gBasuraPoints));
		        SetPlayerCheckpoint(playerid, gBasuraPoints[randomize][0], gBasuraPoints[randomize][1], gBasuraPoints[randomize][2], 5.0);
		        SendClientMessage(playerid, COLOR_WHITE, "Ve de punto en punto de recogida.");
		    }
		}
		return 1;
    }

    if(!strcmp(cmdtext, "/nobasura", true)) // By Pedro
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerIsBasuras[playerid] == 1)
            {
                DisablePlayerCheckpoint(playerid);
                PlayerIsBasuras[playerid] = 0;
                SendClientMessage(playerid, COLOR_WHITE, "Has dejado de recoger la basura las calles.");
                SetTimerEx("tiemponomerca", 120000, false, "i", playerid);
                CP[playerid] = 0;
                sinmovermerca[playerid] = 1; 
                if(IsABasura(idcar))
                {
                    RemovePlayerFromVehicle(playerid);
                }
            }
            else
            {
				SendClientMessage(playerid, COLOR_GREY, "   No eres un Basurero ! ");
				return 1;
            }
        }
        return 1;
    }
    
    if(!strcmp(cmdtext, "/inv", true) || !strcmp(cmdtext, "/inventory", true)) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "   No estas logueado ! ");
                return 1;
            }
            new gunname[100];
            GetWeaponName(PlayerInfo[playerid][pInvWeapon], gunname, sizeof(gunname));
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "__________ Inventorio __________");
            if(PlayerInfo[playerid][pInvWeapon] != 0 && PlayerInfo[playerid][pInvAmmo] != 0)
            {
            	format(string, sizeof(string), "Arma: %s, Municion: %d", gunname, PlayerInfo[playerid][pInvAmmo]);
            	SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "  Inventario Vacio.");
			}
            SendClientMessage(playerid, COLOR_LIGHT_BLUE, "_______________________________");
            SendClientMessage(playerid, COLOR_WHITE, "HINT: /takegun /putgun");
        }
        return 1;
    }
    
    if(!strcmp(cmdtext, "/takegun", true)) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "   No estas logueado ! ");
                return 1;
            }
            if(ReduceTime[playerid] == 1)
            {
                SendClientMessage(playerid, COLOR_GREY, "   Espera 3 segundos !");
                return 1;
            }
            if(PlayerInfo[playerid][pInvWeapon] != 0 && PlayerInfo[playerid][pInvAmmo] != 0)
            {
                ReduceTime[playerid] = 1;
                SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
                new gunname[100];
                GetWeaponName(PlayerInfo[playerid][pInvWeapon], gunname, sizeof(gunname));
                SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pInvWeapon], PlayerInfo[playerid][pInvAmmo]);
                GetPlayerName(playerid, sendername, sizeof(sendername));
      			format(string, sizeof(string), "   Sacaste %s de tu inventario.", gunname);
      			SendClientMessage(playerid, COLOR_GREY, string);
      			PlayerInfo[playerid][pInvWeapon] = 0;
                PlayerInfo[playerid][pInvAmmo] = 0;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "  No tienes ningun arma  !");
                return 1;
            }
        }
        return 1;
    }
    
    if(!strcmp(cmdtext, "/putgun", true)) // By LordMan
    {
        if(IsPlayerConnected(playerid))
        {
            if(gPlayerLogged[playerid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "  No estas logueado !");
                return 1;
            }
            if(ReduceTime[playerid] == 1)
            {
                SendClientMessage(playerid, COLOR_GREY, "   Espera 3 segundos !");
                return 1;
            }
            if(PlayerInfo[playerid][pInvWeapon] != 0 || PlayerInfo[playerid][pInvAmmo] != 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "  Inventario ocupado !");
                return 1;
            }
            
            new gunID = GetPlayerWeapon(playerid);
            new gunAmmo = GetPlayerAmmo(playerid);
            
            if(gunID != 0 && gunAmmo != 0)
            {
                ReduceTime[playerid] = 1;
                SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
                PlayerInfo[playerid][pInvWeapon] = gunID;
                PlayerInfo[playerid][pInvAmmo] = gunAmmo;
				RemovePlayerWeapon(playerid, gunID);
                GetPlayerName(playerid, sendername, sizeof(sendername));
				new gunname[100];
				GetWeaponName(gunID, gunname, sizeof(gunname));
                format(string, sizeof(string), "   Guardas un %s en tu inventario.", gunname);
				SendClientMessage(playerid, COLOR_GREY, string);
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "  No llevas armas ! ");
                return 1;
            }
        }
        return 1;
    }
    
   	if(strcmp(cmd, "/checkweapons", true) == 0) // Edited by LordMan, orginally from CW-RP
	{
		if (PlayerInfo[playerid][pAdmin] < 1)
	    {
		    SendClientMessage(playerid, COLOR_GREY, "You are not authorized");
		    return 1;
	    }
		tmp = strtok(cmdtext,idx);
		if (!strlen(tmp))
	    {
		    SendClientMessage(playerid, COLOR_GREY, "ESCRIBE: /checkweapons [ID o Nombre]");
		    return 1;
	    }
		giveplayerid = ReturnUser(tmp);
		if (giveplayerid == INVALID_PLAYER_ID)
	    {
		    SendClientMessage(playerid, COLOR_GREY, "That player is offline");
		    return 1;
	    }
		new sweapon, sammo;
	    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	    format(string, sizeof(string), "%s has the following weapons:", giveplayer);
	    SendClientMessage(playerid, COLOR_GRAD1, string);
		for (new i=0; i<9; i++)
	    {
		    GetPlayerWeaponData(giveplayerid, i, sweapon, sammo);
		    if(sweapon != 0)
		    {
		        format(string, sizeof(string), "%d: %d (%d)", i, sweapon, sammo);
		    	SendClientMessage(playerid, COLOR_GRAD1, string);
			}
	    }
		return 1;
	}
	
	if(strcmp(cmd, "/carinfo", true) == 0) // By DryilZas
	{
	    new newcar = GetPlayerVehicleID(playerid);
	    if(!IsPlayerInAnyVehicle(playerid))
	    	{
				SendClientMessage(playerid, COLOR_GREY, "   No estas en ningun vehiculo!");
				return 1;
    		}
		if(CarInfo[newcar][cOwned]==0)
		    {
				SendClientMessage(playerid, COLOR_GREEN, "______Compra_______");
				format(string,sizeof(string)," - Precio: $%d (ID:%d)",CarInfo[newcar][cValue],newcar);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_WHITE, " - /v buy (Comprar), /salir");
				SendClientMessage(playerid, COLOR_GREEN, "____________________");
				return 1;
    	}
	    if(CarInfo[newcar][cOwned]==1)
	    	{
	    	    format(string,sizeof(string),"______| Vehiculo [ID:%d] |_____",newcar);
				SendClientMessage(playerid, COLOR_BLUE, string);
      			format(string,sizeof(string)," - Propietario: %s - Modelo: %d - Precio: $%d",CarInfo[newcar][cOwner],CarInfo[newcar][cModel],CarInfo[newcar][cValue]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string,sizeof(string)," - X: %f - Y: %f - Z: %f - Acimut: %f",CarInfo[newcar][cLocationx],CarInfo[newcar][cLocationy],CarInfo[newcar][cLocationz],CarInfo[newcar][cAngle]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string,sizeof(string)," - Color-1: %d - Color-2: %d - Bloqueado: %d",CarInfo[newcar][cColorOne],CarInfo[newcar][cColorTwo],CarInfo[newcar][cLock]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_BLUE, "____________________");
				return 1;
		    }
		return 1;
	}
	
	if(strcmp(cmd, "/v", true) == 0 || strcmp(cmd, "/vehiculo", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado ! ");
	            return 1;
	        }
	        new x_nr[256];
	        x_nr = strtok(cmdtext, idx);
	        if(!strlen(x_nr))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "COMANDO: (/v)ehiculo [nombre]");
	            SendClientMessage(playerid, COLOR_WHITE, "Nombres Disponibles: aparcar, bloquear(1-3/1-5 Si eres Premium), vender, vendera");
	            return 1;
	        }
	        if(strcmp(x_nr,"vender",true) == 0)
	        {
	            if(IsAtDealership(playerid))
	            {
	                if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey5])
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                    new ownvehkey;
	                    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { ownvehkey = PlayerInfo[playerid][pPcarkey]; }
	                    else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { ownvehkey = PlayerInfo[playerid][pPcarkey2]; }
	                    else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3]) { ownvehkey = PlayerInfo[playerid][pPcarkey3]; }
	                    else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4]) { ownvehkey = PlayerInfo[playerid][pPcarkey4]; }
	                    else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey5]) { ownvehkey = PlayerInfo[playerid][pPcarkey5]; }
	                    else { return 1; }
	                    if(strcmp(sendername, CarInfo[ownvehkey][cOwner], true) == 0)
	                    {
	                        new carsellprice = CarInfo[ownvehkey][cValue] / 4 * 3;
	                        new Float:x,Float:y,Float:z;
	                        new Float:a;
	                        CarInfo[ownvehkey][cOwned] = 0;
	                        strmid(CarInfo[ownvehkey][cOwner], "Dealership", 0, strlen("Dealership"), 9999);
	                        SafeGivePlayerMoney(playerid,carsellprice);
	                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	                        format(string, sizeof(string), "~w~Vendes tu vehiculo por: ~n~~g~$%d", carsellprice);
	                        GameTextForPlayer(playerid, string, 10000, 3);
	                        if(PlayerInfo[playerid][pPcarkey] >= 599 && PlayerInfo[playerid][pPcarkey]<= 604) { PlayerInfo[playerid][pbono1] = 0; }
	                        else if(PlayerInfo[playerid][pPcarkey2] >= 599 && PlayerInfo[playerid][pPcarkey2]<= 604) { PlayerInfo[playerid][pbono1] = 0; }
	                        else if(PlayerInfo[playerid][pPcarkey3] >= 599 && PlayerInfo[playerid][pPcarkey3]<= 604) { PlayerInfo[playerid][pbono1] = 0; }
	                        else if(PlayerInfo[playerid][pPcarkey4] >= 599 && PlayerInfo[playerid][pPcarkey4]<= 604) { PlayerInfo[playerid][pbono1] = 0; }
	                        else if(PlayerInfo[playerid][pPcarkey5] >= 599 && PlayerInfo[playerid][pPcarkey5]<= 604) { PlayerInfo[playerid][pbono1] = 0; }
	                        GetVehiclePos(ownvehkey, x, y, z);
	                        GetVehicleZAngle(ownvehkey, a);
	                        CarInfo[ownvehkey][cLocationx] = x;
	                        CarInfo[ownvehkey][cLocationy] = y;
	                        CarInfo[ownvehkey][cLocationz] = z;
	                        CarInfo[ownvehkey][cAngle] = a;
	                        if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { PlayerInfo[playerid][pPcarkey] = 9999; }
	                        else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { PlayerInfo[playerid][pPcarkey2] = 9999; }
	                        else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3]) { PlayerInfo[playerid][pPcarkey3] = 9999; }
	                        else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4]) { PlayerInfo[playerid][pPcarkey4] = 9999; }
	                        else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey5]) { PlayerInfo[playerid][pPcarkey5] = 9999; }
	                        RemovePlayerFromVehicle(playerid);
	                        TogglePlayerControllable(playerid, 1);
	                        if(PlayerInfo[playerid][pLocal] == ownvehkey)
	                        {
	                            SetPlayerInterior(playerid,0);
	                            SetPlayerPos(playerid,CarInfo[ownvehkey][cLocationx],CarInfo[ownvehkey][cLocationy],CarInfo[ownvehkey][cLocationz]);
	                            PlayerInfo[playerid][pInt] = 0;
	                        }
	                        OnPropUpdate();
	                        OnPlayerUpdate(playerid);
	                        DestroyVehicle(ownvehkey);
							CreateVehicle(CarInfo[ownvehkey][cModel],CarInfo[ownvehkey][cLocationx],CarInfo[ownvehkey][cLocationy],CarInfo[ownvehkey][cLocationz]+1.0,CarInfo[ownvehkey][cAngle],CarInfo[ownvehkey][cColorOne],CarInfo[ownvehkey][cColorTwo],60000);
						    LoadModsForAll(ownvehkey);
	                        TuneThisCar(ownvehkey);
	                        return 1;
	                    }
	                }
	                else
	                {
	                    SendClientMessage(playerid, COLOR_GREY, "  Tienes que estar dentro de tu Vehiculo! ");
	                    return 1;
	                }
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Tu no estas en una Tienda de Vehiculos");
	                return 1;
	            }
	        }
	        else if(strcmp(x_nr,"vendera",true) == 0)
	        {
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey5])
				{
				    GetPlayerName(playerid, sendername, sizeof(sendername));
				    new ownvehkey;
	                if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { ownvehkey = PlayerInfo[playerid][pPcarkey]; }
	                else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { ownvehkey = PlayerInfo[playerid][pPcarkey2]; }
	                else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3]) { ownvehkey = PlayerInfo[playerid][pPcarkey3]; }
	                else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4]) { ownvehkey = PlayerInfo[playerid][pPcarkey4]; }
	                else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey5]) { ownvehkey = PlayerInfo[playerid][pPcarkey5]; }
        			else { return 1; }
				    if(strcmp(sendername, CarInfo[ownvehkey][cOwner], true) == 0)
				    {
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "COMANDO: /v vendera [ID o Nombre] [precio]");
						    return 1;
						}
						giveplayerid = ReturnUser(tmp);
						if(IsPlayerConnected(giveplayerid))
						{
							if(giveplayerid != INVALID_PLAYER_ID)
							{
							    if(ProxDetectorS(8.0, playerid, giveplayerid))
       							{
							    	if(PlayerInfo[giveplayerid][pPcarkey] == 9999)
							    	{
							            tmp = strtok(cmdtext, idx); // comprando coches
							            if(!strlen(tmp))
							            {
							                SendClientMessage(playerid, COLOR_WHITE, "COMANDO: /v vendera [ID o Nombre] [precio]");
							                return 1;
							            }
							            new price;
							            price = strval(tmp);
							            if(price < 1 || price > 15000000)
							            {
							                SendClientMessage(playerid, COLOR_GREY, "  El precio tiene que estar entre 1 y 15000000.");
							                return 1;
							            }
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							       		format(string, sizeof(string), "* Ofreces a %s tu vehiculo por $%d .", giveplayer, price);
					        			SendClientMessage(playerid, COLOR_WHITE, string);
					        			format(string, sizeof(string), "* %s ha ofrecido su vehiculo por $%d (usa /aceptar comprarcoche).", playername, price);
					        			SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        			OwnableCarOffer[giveplayerid] = playerid;
					        			OwnableCarID[giveplayerid] = ownvehkey;
					        			OwnableCarPrice[giveplayerid] = price;
					        			return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pPcarkey2] == 9999)
							        {
							            tmp = strtok(cmdtext, idx);
							            if(!strlen(tmp))
							            {
							                SendClientMessage(playerid, COLOR_WHITE, "COMANDO: /v vendera [ID o Nombre] [precio]");
							                return 1;
							            }
							            new price;
							            price = strval(tmp);
							            if(price < 1 || price > 1500000)
							            {
							                SendClientMessage(playerid, COLOR_GREY, "  El precio tiene que estar entre 1 y 15000000.");
							                return 1;
							            }
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							       		format(string, sizeof(string), "* Ofreces a %s tu vehiculo por $%d .", giveplayer, price);
					        			SendClientMessage(playerid, COLOR_WHITE, string);
					        			format(string, sizeof(string), "* %s ha ofrecido su vehiculo por $%d (usa /aceptar comprarcoche).", playername, price);
					        			SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        			OwnableCarOffer[giveplayerid] = playerid;
					        			OwnableCarID[giveplayerid] = ownvehkey;
					        			OwnableCarPrice[giveplayerid] = price;
					        			return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pPcarkey3] == 9999)
							        {
							            tmp = strtok(cmdtext, idx);
							            if(!strlen(tmp))
							            {
							                SendClientMessage(playerid, COLOR_WHITE, "COMANDO: /v vendera [ID o Nombre] [precio]");
							                return 1;
							            }
							            new price;
							            price = strval(tmp);
							            if(price < 1 || price > 1500000)
							            {
							                SendClientMessage(playerid, COLOR_GREY, "  El precio tiene que estar entre 1 y 15000000.");
							                return 1;
							            }
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							       		format(string, sizeof(string), "* Ofreces a %s tu vehiculo por $%d .", giveplayer, price);
					        			SendClientMessage(playerid, COLOR_WHITE, string);
					        			format(string, sizeof(string), "* %s ha ofrecido su vehiculo por $%d (usa /aceptar comprarcoche).", playername, price);
					        			SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        			OwnableCarOffer[giveplayerid] = playerid;
					        			OwnableCarID[giveplayerid] = ownvehkey;
					        			OwnableCarPrice[giveplayerid] = price;
					        			return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pPcarkey4] == 9999)
							        {
							            tmp = strtok(cmdtext, idx);
							            if(!strlen(tmp))
							            {
							                SendClientMessage(playerid, COLOR_WHITE, "COMANDO: /v vendera [ID o Nombre] [precio]");
							                return 1;
							            }
							            new price;
							            price = strval(tmp);
							            if(price < 1 || price > 1500000)
							            {
							                SendClientMessage(playerid, COLOR_GREY, "  El precio tiene que estar entre 1 y 15000000.");
							                return 1;
							            }
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							       		format(string, sizeof(string), "* Ofreces a %s tu vehiculo por $%d .", giveplayer, price);
					        			SendClientMessage(playerid, COLOR_WHITE, string);
					        			format(string, sizeof(string), "* %s ha ofrecido su vehiculo por $%d (usa /aceptar comprarcoche).", playername, price);
					        			SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        			OwnableCarOffer[giveplayerid] = playerid;
					        			OwnableCarID[giveplayerid] = ownvehkey;
					        			OwnableCarPrice[giveplayerid] = price;
					        			return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pPcarkey5] == 9999)
							        {
							            tmp = strtok(cmdtext, idx);
							            if(!strlen(tmp))
							            {
							                SendClientMessage(playerid, COLOR_WHITE, "COMANDO: /v vendera [ID o Nombre] [precio]");
							                return 1;
							            }
							            new price;
							            price = strval(tmp);
							            if(price < 1 || price > 1500000)
							            {
							                SendClientMessage(playerid, COLOR_GREY, "  El precio tiene que estar entre 1 y 15000000.");
							                return 1;
							            }
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							       		format(string, sizeof(string), "* Ofreces a %s tu vehiculo por $%d .", giveplayer, price);
					        			SendClientMessage(playerid, COLOR_WHITE, string);
					        			format(string, sizeof(string), "* %s ha ofrecido su vehiculo por $%d (usa /aceptar comprarcoche).", playername, price);
					        			SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        			OwnableCarOffer[giveplayerid] = playerid;
					        			OwnableCarID[giveplayerid] = ownvehkey;
					        			OwnableCarPrice[giveplayerid] = price;
					        			return 1;
							        }
							        else
							        {
							            SendClientMessage(playerid, COLOR_GREY, "   Ese jugador ya tiene 5 vehiculos ! ");
							            return 1;
							        }
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Ese jugador esta muy lejos ! ");
							        return 1;
							    }
							}
						}
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "  This is not your car");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "  You have to sit at your own car to sell it");
				    return 1;
				}
	        }
	        else if(strcmp(x_nr,"aparcar",true) == 0)
	        {
	            new Float:x,Float:y,Float:z;
				new Float:a;
				new carid;
				new getcarid;
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { carid = PlayerInfo[playerid][pPcarkey]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { carid = PlayerInfo[playerid][pPcarkey2]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3]) { carid = PlayerInfo[playerid][pPcarkey3]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4]) { carid = PlayerInfo[playerid][pPcarkey4]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey5]) { carid = PlayerInfo[playerid][pPcarkey5]; }
				else { return 1; }
				getcarid = GetPlayerVehicleID(playerid);
				GetPlayerName(playerid, playername, sizeof(playername));
				GetVehiclePos(carid, x, y, z);
				//GetPlayerFacingAngle(playerid, a);
				GetVehicleZAngle(carid, a);
				if(IsPlayerInVehicle(playerid,carid) && CarInfo[carid][cOwned] == 1)
				{
			   		if(PlayerInfo[playerid][pPcarkey] == 9999 && PlayerInfo[playerid][pPcarkey2] == 9999 & PlayerInfo[playerid][pPcarkey3])
					{
						SendClientMessage(playerid, COLOR_GREY, "No tienes ningun coche");
						return 1;
					}
					if(getcarid == carid)
					{
						CarInfo[carid][cLocationx] = x;
						CarInfo[carid][cLocationy] = y;
						CarInfo[carid][cLocationz] = z;
						CarInfo[carid][cAngle] = a;
						GameTextForPlayer(playerid, "~n~ Aparcaste el coche aqui. ~n~", 10000, 3);
						OnPropUpdate();
						OnPlayerUpdate(playerid);
						DestroyVehicle(carid);
						CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz]+1.0,CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],60000);
						TogglePlayerControllable(playerid, 1);
					    LoadModsForAll(carid);
	                    TuneThisCar(carid);
						return 1;
   					}
				}
	        }
	        else if(strcmp(x_nr,"bloquear1",true) == 0)
	        {
                new keycar = PlayerInfo[playerid][pPcarkey];
                if(keycar != 9999)
                {
                    new locked[256];
                    locked = strtok(cmdtext, idx);
                    if(CarInfo[keycar][cLock] == 1)
                    {
                    	for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,0);
							}
						}
						format(string, sizeof(string), "~w~Veh-1~n~~g~Desbloqueado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 0;
						OnPropUpdate();
						return 1;
					}
					else if(CarInfo[keycar][cLock] == 0)
					{
					    for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,1);
							}
						}
						format(string, sizeof(string), "~w~Veh-1~n~~r~Bloqueado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 1;
						OnPropUpdate();
						return 1;
					}
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "  No tienes el vehculo 1");
                    return 1;
                }
	        }
	        else if(strcmp(x_nr,"bloquear2",true) == 0)
	        {
                new keycar = PlayerInfo[playerid][pPcarkey2];
                if(keycar != 9999)
                {
                    new locked[256];
                    locked = strtok(cmdtext, idx);
                    if(CarInfo[keycar][cLock] == 1)
                    {
                    	for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,0);
							}
						}
						format(string, sizeof(string), "~w~Veh-2~n~~g~Desbloqueado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 0;
						OnPropUpdate();
						return 1;
					}
					else if(CarInfo[keycar][cLock] == 0)
					{
					    for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,1);
							}
						}
						format(string, sizeof(string), "~w~Veh-2~n~~r~Bloqueado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 1;
						OnPropUpdate();
						return 1;
					}
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "  No tienes el vehculo 2");
                    return 1;
                }
	        }
	        else if(strcmp(x_nr,"bloquear4",true) == 0)
	        {
                new keycar = PlayerInfo[playerid][pPcarkey4];
                if(keycar != 9999)
                {
                    new locked[256];
                    locked = strtok(cmdtext, idx);
                    if(CarInfo[keycar][cLock] == 1)
                    {
                    	for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,0);
							}
						}
						format(string, sizeof(string), "~w~Veh-4~n~~g~Desbloqueado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 0;
						OnPropUpdate();
						return 1;
					}
					else if(CarInfo[keycar][cLock] == 0)
					{
					    for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,1);
							}
						}
						format(string, sizeof(string), "~w~Veh-4~n~~r~Bloqueado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 1;
						OnPropUpdate();
						return 1;
					}
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "  No tienes el vehculo 2");
                    return 1;
                }
	        }
	        else if(strcmp(x_nr,"bloquear5",true) == 0)
	        {
                new keycar = PlayerInfo[playerid][pPcarkey5];
                if(keycar != 9999)
                {
                    new locked[256];
                    locked = strtok(cmdtext, idx);
                    if(CarInfo[keycar][cLock] == 1)
                    {
                    	for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,0);
							}
						}
						format(string, sizeof(string), "~w~Veh-5~n~~g~Desbloqueado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 0;
						OnPropUpdate();
						return 1;
					}
					else if(CarInfo[keycar][cLock] == 0)
					{
					    for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,1);
							}
						}
						format(string, sizeof(string), "~w~Veh-5~n~~r~Bloqueado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 1;
						OnPropUpdate();
						return 1;
					}
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "  No tienes el vehculo 2");
                    return 1;
                }
	        }
	        else if(strcmp(x_nr,"bloquear3",true) == 0)
	        {
                new keycar = PlayerInfo[playerid][pPcarkey3];
                if(keycar != 9999)
                {
                    new locked[256];
                    locked = strtok(cmdtext, idx);
                    if(CarInfo[keycar][cLock] == 1)
                    {
                    	for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,0);
							}
						}
						format(string, sizeof(string), "~w~Veh-3~n~~g~Desbloqueado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 0;
						OnPropUpdate();
						return 1;
					}
					else if(CarInfo[keycar][cLock] == 0)
					{
					    for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,1);
							}
						}
						format(string, sizeof(string), "~w~Veh-3~n~~r~Bloqueado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 1;
						OnPropUpdate();
						return 1;
					}
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "  No tienes el vehculo 3");
                    return 1;
                }
	        }
	       /* else if(strcmp(x_nr,"color",true) == 0)
	        {
	            if(PlayerInfo[playerid][pPcarkey] == 999 && PlayerInfo[playerid][pPcarkey2] == 999 && PlayerInfo[playerid][pPcarkey3] == 999)
	        	{
	            	SendClientMessage(playerid, COLOR_GREY,"   You don't have a vehicle to respray.");
	            	return 1;
	        	}
	        	if(GetPlayerMoney(playerid) < 1000)
	        	{
	            	SendClientMessage(playerid, COLOR_GREY,"   You don't have enough money for vehicle respray.");
	            	return 1;
	        	}
	        	tmp = strtok(cmdtext, idx);
	        	if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /v color [ColorOneID] [ColorTwoID]");
					return 1;
				}
				new color1;
				color1 = strval(tmp);
				if(color1 < 0 && color1 > 126)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "   Wrong color id!");
			    	return 1;
				}
				tmp = strtok(cmdtext, idx);
	        	if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /v color [ColorOneID] [ColorTwoID]");
					return 1;
				}
				new color2;
				color2 = strval(tmp);
				if(color2 < 0 && color2 > 126)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "   Wrong color id!");
			    	return 1;
				}
				
				new vehid;
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { vehid = PlayerInfo[playerid][pPcarkey]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { vehid = PlayerInfo[playerid][pPcarkey2]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3]) { vehid = PlayerInfo[playerid][pPcarkey3]; }
				else { return 1; }
				
	        	if(IsPlayerInVehicle(playerid, vehid))
	        	{
         			CarInfo[vehid][cColorOne] = color1;
	                CarInfo[vehid][cColorTwo] = color2;
	                SafeGivePlayerMoney(playerid, -1000);
	                GameTextForPlayer(playerid, "~w~Bill for a Paint Respray~n~~r~-$1000", 5000, 1);
	                ChangeVehicleColor(vehid, color1, color2);
	                OnPropUpdate();
					OnPlayerUpdate(playerid);
					return 1;
    			}
	        	else
	        	{
	            	SendClientMessage(playerid, COLOR_GREY,"   You are not in your vehicle.");
	            	return 1;
	        	}
	        }*/
	        else if(strcmp(x_nr,"buy",true) == 0)
	        {
	            if(IsAnOwnableCar(idcar))
	            {
	                if(PlayerInfo[playerid][pLevel] < 3)
			    	{
                    	SendClientMessage(playerid, COLOR_GREY, "Necesitas ser de nivel 3!");
                    	return 1;
			    	}
			    	if(PlayerInfo[playerid][pPcarkey] == 9999) { }
			    	else if(PlayerInfo[playerid][pPcarkey2] == 9999) { } 
			    	else if(PlayerInfo[playerid][pPcarkey3] == 9999) { }
                    else if(PlayerInfo[playerid][pPcarkey4] == 9999 && PlayerInfo[playerid][pDonateRank] == 1) { }
                    else if(PlayerInfo[playerid][pPcarkey5] == 9999 && PlayerInfo[playerid][pDonateRank] == 1) { }
			    	else { SendClientMessage(playerid, COLOR_GREY, "   No puedes tener mas coches."); return 1; }
					if(CarInfo[idcar][cOwned]==1)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Este coche tiene dueño.");
				    	return 1;
					}
					if(GetPlayerMoney(playerid) >= CarInfo[idcar][cValue])
					{
					    if(PlayerInfo[playerid][pPcarkey] == 9999) { PlayerInfo[playerid][pPcarkey] = idcar; }
					    else if(PlayerInfo[playerid][pPcarkey2] == 9999) { PlayerInfo[playerid][pPcarkey2] = idcar; }
					    else if(PlayerInfo[playerid][pPcarkey3] == 9999) { PlayerInfo[playerid][pPcarkey3] = idcar; }
					    else if(PlayerInfo[playerid][pPcarkey4] == 9999) { PlayerInfo[playerid][pPcarkey4] = idcar; }
					    else if(PlayerInfo[playerid][pPcarkey5] == 9999) { PlayerInfo[playerid][pPcarkey5] = idcar; }
					    else { return 1; }
						CarInfo[idcar][cOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(CarInfo[idcar][cOwner], sendername, 0, strlen(sendername), 999);
						SafeGivePlayerMoney(playerid,-CarInfo[idcar][cValue]);
					//	EconomyInfo[eArcas] += ((CarInfo[idcar][cValue])*EconomyInfo[eImpuestoCompraVeh])/100;
						PlayerPlayMusic(playerid);
						GameTextForPlayer(playerid, "~w~Enhorabuena~n~recomendamos que lo aparques ya /v aparcar!", 5000, 3);
						SendClientMessage(playerid, COLOR_GRAD2, "Enhorabuena por tu nueva compra!");
						SendClientMessage(playerid, COLOR_GRAD2, "Comando /ayudaveh para consultar el manual!");
						SendClientMessage(playerid, COLOR_YELLOW2, "Ahora puedes arrancarlo !");
						gEngine[playerid] = 0;
						engineOn[GetPlayerVehicleID(playerid)] = false;
						DateProp(playerid);
						OnPropUpdate();
						OnPlayerUpdate(playerid);
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  No tienes tanto dinero ! ");
					    return 1;
					}
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "COMANDO: (/v)ehiculo [nombre]");
	            SendClientMessage(playerid, COLOR_WHITE, "Nombres Disponibles: aparcar, bloquear(1-5), vender, vendera");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/entraradmin", true) == 0) // By MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
			{
				return 1;
			}
	            new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   No hay ningun vehiculo cerca!");
			        }

			        case 1:
			        {
			         	PutPlayerInVehicle(playerid, result, 0);
		                SendClientMessage(playerid, COLOR_GRAD1, "   Te metiste dentro del vehiculo");
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Hay mas de un vehiculo cercanos");
			            return 1;
			        }
			    }
			    return 1;
        }
    }
	if(strcmp(cmd, "/maletero", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			/*if (PlayerInfo[playerid][pPainPerk] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Estas cometiendo corrupcion !");
			}
			else if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Tu no puedes usar este comando !");
			    return 1;
			}*/
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Información: /maletero [nombre]");
			    SendClientMessage(playerid, COLOR_WHITE, "Puedes elegir: info, guardararma, sacararma, guardarchaleco, sacarchaleco");
			    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Puedes investigar un maletero usando /frisk");
			    }
			    return 1;
			}
			if(strcmp(x_nr,"info",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   No hay ningun coche con maletero cerca!");
			        }
			        
			        case 1:
			        {
			            if(IsAnOwnableCar(result))
               			{
               			    if(PlayerInfo[playerid][pPcarkey] == result) { }
               			    else if(PlayerInfo[playerid][pPcarkey2] == result) { }
               			    else if(PlayerInfo[playerid][pPcarkey3] == result) { }
               			    else if(PlayerInfo[playerid][pPcarkey4] == result) { }
               			    else if(PlayerInfo[playerid][pPcarkey5] == result) { }
               			    else
               			    {
			                	SendClientMessage(playerid, COLOR_GREY, "  Maletero cerrado !");
			            		return 1;
							}
			            }
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GREY, "No puedes abrir el maletero mientras usted está en el coche");
			            	return 1;
               			}
               			if(IsAPlane(result) || IsABike(result) || IsAOBike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || IsABasura(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "  Este vehículo no tiene el maletero !");
               			    return 1;
               			}
						
						SendClientMessage(playerid, COLOR_LIGHT_BLUE, "|_______ Maletero _______|");
						for(new slot = 1; slot != MAX_TRUNK_SLOTS; slot++)
						{
						    new gunname[100];
						    if(vehTrunk[result][slot] != 0)
						    {
						        GetWeaponName(vehTrunk[result][slot], gunname, sizeof(gunname));
						        format(string, sizeof(string), "| Espacio %i: %s (Munición: %i)", slot, gunname, vehTrunkAmmo[result][slot]);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						    }
						    else
						    {
						        format(string, sizeof(string), "| Espacio %i: --- (Munición: N/A)", slot);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						    }
						}
						format(string, sizeof(string), "| Chaleco: %f%", vehTrunkArmour[result]);
						SendClientMessage(playerid, COLOR_WHITE, string);
               			
               			GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s abre el maletero de su vehiculo.", sendername);
                  		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
			        }
			        
			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Hay mas de un maletero cercanos");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"guardararma",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];
			    
			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   No hay ningun coche con maletero cerca");
			        }
			        
			        case 1:
			        {
			            if(vehTrunkCounter[result] != (MAX_TRUNK_SLOTS-1))
			            {
			                if(IsAnOwnableCar(result))
               				{
               			    	if(PlayerInfo[playerid][pPcarkey] == result) { }
               			    	else if(PlayerInfo[playerid][pPcarkey2] == result) { }
               			   		else if(PlayerInfo[playerid][pPcarkey3] == result) { }
               			   		else if(PlayerInfo[playerid][pPcarkey4] == result) { }
               			   		else if(PlayerInfo[playerid][pPcarkey5] == result) { }
               			    	else
               			    	{
			                		SendClientMessage(playerid, COLOR_GREY, "  Maletero cerrado !");
			            			return 1;
								}
			            	}
			            	if(ReduceTime[playerid] == 1)
			            	{
			            	    SendClientMessage(playerid, COLOR_GREY, "   Usted tiene que esperar 3 segundos antes de la utilización de este comando !");
			            	    return 1;
			            	}
			                if(IsPlayerInAnyVehicle(playerid))
			                {
			                    SendClientMessage(playerid, COLOR_GREY, "  No puedes abrir el maletero dentro de un vehiculo");
			                    return 1;
			                }
			                if(IsAPlane(result) || IsABike(result) || IsAOBike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || IsABasura(result) || result >=78 && result <= 83|| GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               				{
               			    	SendClientMessage(playerid, COLOR_GREY, "  Este vehículo no tiene maletero !");
               			    	return 1;
               				}
                            new buffer[512];
                            new gunname[100];
                            new gunID = GetPlayerWeapon(playerid);
                            new gunAmmo = GetPlayerAmmo(playerid);
                            
                            if(gunID != 0 && gunAmmo != 0)
                            {
                                ReduceTime[playerid] = 1;
                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
                                GetWeaponName(gunID, gunname, sizeof(gunname));
                                vehTrunkCounter[result]++;
                                vehTrunk[result][vehTrunkCounter[result]] = gunID;
                                vehTrunkAmmo[result][vehTrunkCounter[result]] = gunAmmo;
                                format(buffer, sizeof(buffer), "Has guardado un %s (Municion: %i) en el maletero del vehiculo.", gunname, gunAmmo);
                                SendClientMessage(playerid, COLOR_WHITE, buffer);
                                RemovePlayerWeapon(playerid, gunID);
                                GetPlayerName(playerid, sendername, sizeof(sendername));
                                format(string, sizeof(string), "* %s guarda un arma en el maletero.", sendername);
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                SaveTrunk();
                                return 1;
                            }
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, " Maletero lleno");
			                return 1;
			            }
			        }
			        
			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Hay mas de un maletero cercanos");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"sacararma",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];
			    
			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   No hay un vehiculo con maletero cerca de ti");
			            return 1;
			        }
			        
			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   No se puede abrir el maletero mientras estás en el coche");
			                return 1;
			            }
			            if(ReduceTime[playerid] == 1)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Tienes que esperar 3 segundos antes de usar este comando !");
			                return 1;
		            	}
			            if(IsAnOwnableCar(result))
               			{
               			   	if(PlayerInfo[playerid][pPcarkey] == result) { }
               			  	else if(PlayerInfo[playerid][pPcarkey2] == result) { }
               				else if(PlayerInfo[playerid][pPcarkey3] == result) { }
               				else if(PlayerInfo[playerid][pPcarkey4] == result) { }
               			    else if(PlayerInfo[playerid][pPcarkey5] == result) { }
               			   	else
               			   	{
			               		SendClientMessage(playerid, COLOR_GREY, "  Maletero cerrado !");
			            		return 1;
							}
       					}
			            if(IsAPlane(result) || IsABike(result) || IsAOBike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || IsABasura(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "  Este vehiculo no tiene maletero !");
               			    return 1;
               			}
			            if(vehTrunkCounter[result] != 0)
			            {
			                ReduceTime[playerid] = 1;
               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			                new buffer[512];
			                new gunName[100];
			                
			                SafeGivePlayerWeapon(playerid, vehTrunk[result][vehTrunkCounter[result]], vehTrunkAmmo[result][vehTrunkCounter[result]]);
			                GetWeaponName(vehTrunk[result][vehTrunkCounter[result]], gunName, sizeof(gunName));
			                format(buffer, sizeof(buffer), "Has tomado un/una %s (Munición: %i) del vehiculo.", gunName, vehTrunkAmmo[result][vehTrunkCounter[result]]);
			                SendClientMessage(playerid, COLOR_WHITE, buffer);
			                vehTrunk[result][vehTrunkCounter[result]] = '\0';
			                vehTrunkAmmo[result][vehTrunkCounter[result]] = '\0';
			                vehTrunkCounter[result]--;
			                GetPlayerName(playerid, sendername, sizeof(sendername));
			                format(string, sizeof(string), "* %s saca un arma de su vehiculo.", sendername);
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                SaveTrunk();
			                return 1;
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Maletero vacio ! ");
			                return 1;
			            }
			        }
			        
			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Hay mas de un vehiculo");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"guardarchaleco",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   No hay un vehiculo con maletero cerca de ti");
			            return 1;
			        }
			        
			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   No se puede abrir el maletero mientras estás en el coche");
			                return 1;
			            }
			            if(IsAnOwnableCar(result))
               			{
               			   	if(PlayerInfo[playerid][pPcarkey] == result) { }
               			   	else if(PlayerInfo[playerid][pPcarkey2] == result) { }
               				else if(PlayerInfo[playerid][pPcarkey3] == result) { }
               				else if(PlayerInfo[playerid][pPcarkey4] == result) { }
               			    else if(PlayerInfo[playerid][pPcarkey5] == result) { }
               			   	else
               			   	{
			               		SendClientMessage(playerid, COLOR_GREY, "  Maletero cerrado !");
			            		return 1;
							}
       					}
			            if(IsAPlane(result) || IsABike(result) || IsAOBike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || IsABasura(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "  Este vehiculo no tiene maletero !");
               			    return 1;
               			}
			            
			            new Float:plyArmour;
			            GetPlayerArmour(playerid, plyArmour);
			            
                        if(plyArmour != 0)
			            {
			                SetPlayerArmour(playerid, 0);
			                vehTrunkArmour[result] = plyArmour;
			                
			                GetPlayerName(playerid, sendername, sizeof(sendername));
			                format(string, sizeof(string), "* %s guarda un chaleco en el maletero del vehiculo.", sendername);
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                SaveTrunk();
			                return 1;
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   No tienes ningun chaleco ");
			                return 1;
			            }
			        }
			        
			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Hay mas de un vehiculo cerca de ti");
			            return 1;
			        }
				}
			    return 1;
			}
			else if(strcmp(x_nr,"sacarchaleco",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   No hay un vehiculo con maletero cerca de ti");
			            return 1;
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   No puedes abrir el maletero mientras estes dentro del vehiculo");
			                return 1;
			            }
			            if(IsAnOwnableCar(result))
               			{
               			   	if(PlayerInfo[playerid][pPcarkey] == result) { }
               			   	else if(PlayerInfo[playerid][pPcarkey2] == result) { }
               				else if(PlayerInfo[playerid][pPcarkey3] == result) { }
               				else if(PlayerInfo[playerid][pPcarkey4] == result) { }
               			    else if(PlayerInfo[playerid][pPcarkey5] == result) { }
               			   	else
               			   	{
			               		SendClientMessage(playerid, COLOR_GREY, "  Maletero cerrado !");
			            		return 1;
							}
       					}
			            if(IsAPlane(result) || IsABike(result) || IsAOBike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || IsABasura(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "  Este vehiculo no tiene maletero !");
               			    return 1;
               			}
			            if(vehTrunkArmour[result] != 0)
			            {
			                SetPlayerArmour(playerid, vehTrunkArmour[result]);
			                vehTrunkArmour[result] = 0;
			                
			                GetPlayerName(playerid, sendername, sizeof(sendername));
			                format(string, sizeof(string), "* %s coje un chaleco de el maletero de su vehiculo.", sendername);
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                SaveTrunk();
			                return 1;
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   No hay chalecos antibalas en el maletero ! ");
			                return 1;
			            }
			        }
			        
			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Hay mas de un vehiculo cerca de ti !");
			            return 1;
			        }
				}
				return 1;
			}
			else if(strcmp(x_nr,"frisk",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			    {
			    	new counter = 0;
			    	new result;
			    	new plyName[MAX_PLAYER_NAME];

				    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
				    for(new i; i != MAX_VEHICLES; i++)
				    {
				        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			    	    if(dist)
			        	{
			           		result = i;
			            	counter++;
			        	}
			    	}
			    	switch(counter)
			    	{
			        	case 0:
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "   No hay ningun vehiculo cerca de ti");
			        	}

			        	case 1:
			        	{
			            	if(IsPlayerInAnyVehicle(playerid))
      						{
			                	SendClientMessage(playerid, COLOR_GREY, "  No puedes abrir el maletero mientras estes en un vehiculo");
			            		return 1;
               				}
               				if(IsAPlane(result) || IsABike(result) || IsAOBike(result) || IsABoat(result) || IsAPizzabike(result) || IsABus(result) || IsATowcar(result) || IsAHspdCar(result) || IsAHarvest(result) || IsADrugHarvest(result) || IsASweeper(result) || IsABasura(result) || result >=78 && result <= 83 || GetVehicleModel(GetPlayerVehicleID(result)) == 523)
               				{
               			    	SendClientMessage(playerid, COLOR_GREY, "  Este vehiculo no tiene maletero !");
               			    	return 1;
               				}

							SendClientMessage(playerid, COLOR_LIGHT_BLUE, "|_______ Maletero _______|");
							for(new slot = 1; slot != MAX_TRUNK_SLOTS; slot++)
							{
							    new gunname[100];
							    if(vehTrunk[result][slot] != 0)
							    {
							        GetWeaponName(vehTrunk[result][slot], gunname, sizeof(gunname));
						    	    format(string, sizeof(string), "| Espacio %i: %s (Municion: %i)", slot, gunname, vehTrunkAmmo[result][slot]);
						        	SendClientMessage(playerid, COLOR_WHITE, string);
						    	}
						    	else
						    	{
						        	format(string, sizeof(string), "| Espacio %i: --- (Municio: N/A)", slot);
						        	SendClientMessage(playerid, COLOR_WHITE, string);
						    	}
							}
							format(string, sizeof(string), "| Chaleco: %f%", vehTrunkArmour[result]);
							SendClientMessage(playerid, COLOR_WHITE, string);

	               			GetPlayerName(playerid, sendername, sizeof(sendername));
    	                    format(string, sizeof(string), "* %s abre el maletero en busca del algo ilegal.", sendername);
        	          		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
			        	}

				        default:
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Hay mas de un coche cerca de ti");
				            return 1;
			    	    }
			    	}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   No eres un policía ! ");
					return 1;
				}
			    return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Servidor: /maletero [nombre]");
			    SendClientMessage(playerid, COLOR_WHITE, "Nombres posibles: info, guardararma, sacararma, guardarchaleco, sacarchaleco");
			    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Puedes inspeccionar el maletero con /frisk");
			    }
			    return 1;
			}
	    }
	    return 1;
	}
	
	if(!strcmp(cmdtext, "/ven", true) || !strcmp(cmdtext, "/ven", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  No estas Logueado ! ");
	            return 1;
	        }
	        if(IsPlayerInAnyVehicle(playerid))
	        {
				new carid = GetPlayerVehicleID(playerid);
				if(IsABike(carid) || IsAOBike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsABoat(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid) || pveh == 523 || pveh == 480 || pveh == 567 || pveh == 533 || pveh == 555 || pveh == 539 || pveh == 572 || pveh == 571 || pveh == 530 || pveh == 457 || pveh == 575 || pveh == 536 || pveh == 424)
				{
				    SendClientMessage(playerid, COLOR_GREY, "  Este vehiculo no tiene ventanillas");
				    return 1;
				}
	            if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
	            {
	            	VehicleWindows[GetPlayerVehicleID(playerid)] = 1;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), "* %s baja la ventanilla de su vehiculo.", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				else if(VehicleWindows[GetPlayerVehicleID(playerid)] == 1)
				{
				    VehicleWindows[GetPlayerVehicleID(playerid)] = 0;
	            	GetPlayerName(playerid, sendername, sizeof(sendername));
      				format(string, sizeof(string), "* %s sube la ventanilla de su vehiculo.", sendername);
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				return 1;
				}
				return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Tienes que estar dentro de un vehiculo !");
	            return 1;
	        }
	    }
	    return 1;
	}
	
	if(!strcmp(cmdtext, "/adminon", true)) // By LordMan
	{
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   You need to login first !");
				return 1;
		    }
		    if(PlayerInfo[playerid][pAdmin] > 0)
		    {
		        if(AdminDuty[playerid] == 0)
		        {
		            AdminDuty[playerid] = 1;
		            SetPlayerArmour(playerid, 999);
					SetPlayerHealth(playerid, 999);
					SetPlayerColor(playerid,TEAM_BALLAS_COLOR);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "Administración: [ID:%d]%s esta de servicio", playerid, sendername);
					ABroadCast(COLOR_YELLOW,string);
					if(PlayerInfo[playerid][pAdmin] >= 5)
					{
					    for(new i = 0; i < sizeof(CarInfo); i++)
						{
							SetVehicleParamsForPlayer(i,playerid,0,0);
						}
					}
					return 1;
		        }
		        else if(AdminDuty[playerid] == 1)
		        {
		            AdminDuty[playerid] = 0;
		            SetPlayerArmour(playerid, 0);
					SetPlayerHealth(playerid, 100);
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "Administración: [ID:%d]%s ya no esta de servicio", playerid, sendername);
					ABroadCast(COLOR_YELLOW,string);
					return 1;
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No eres un administrador !");
		        return 1;
		    }
		}
	    return 1;
	}
	
 	if(strcmp(cmd, "/searchwallet", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gPlayerLogged[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "   You need to login first !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "HINT: /searchwallet [ID o Nombre]");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerTied[giveplayerid] != 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Player must be tied to search his wallet ! ");
			            return 1;
			        }
			        if(ProxDetectorS(5.0, playerid, giveplayerid))
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "%s has %d$ at his wallet.", giveplayer, GetPlayerMoney(giveplayerid));
			            SendClientMessage(playerid, COLOR_WHITE, string);
			            return 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Player is not near you !");
			            return 1;
			        }
			    }
			}
	    }
	    return 1;
	}
	
	if(!strcmp(cmdtext, "/vehid", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	            format(string, sizeof(string), "* Vehicle ID: %d.", GetPlayerVehicleID(playerid));
	            SendClientMessage(playerid, COLOR_GREY, string);
	            return 1;
	        }
	    }
	    return 1;
	}
	
	if(strcmp(cmd, "/tarjeta", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas Logueado !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "HINT: /tarjeta [ID o Nombre]");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                        format(string, sizeof(string), "   Muestras tu tarjeta a %s.", giveplayer);
	            		SendClientMessage(playerid, COLOR_WHITE, string);
	            		SendClientMessage(giveplayerid, COLOR_GREEN, "_______________________");
	            		format(string, sizeof(string), "   Nombre: %s   Edad: %d", sendername, PlayerInfo[playerid][pAge]);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		format(string, sizeof(string), "   Tlf.: %d", PlayerInfo[playerid][pPnumber]);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		SendClientMessage(giveplayerid, COLOR_GREEN, "_______________________");
	            		format(string, sizeof(string), "   %s te muestra su tarjeta.", sendername);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		return 1;
			        }
			    }
			}
	    }
	    return 1;
	}
	
	if(!strcmp(cmdtext, "/localizarmovil", true) || !strcmp(cmdtext, "/tlc", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado ");
	            return 1;
	        }
	        if(IsAPDMember(playerid))
	        {
	            if(pdtrace == 0 || pdtrace_x == 0 || pdtrace_y == 0 || pdtrace_z == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No se pudo localizar la llamada ");
	                return 1;
	            }
	            SendClientMessage(playerid, COLOR_WHITE, "La ultima llamada ha sido localizada");
	            SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /removegps para quitar la marca");
				SetPlayerCheckpoint(playerid,pdtrace_x,pdtrace_y,pdtrace_z,8.0);
	            return 1;
	        }
	        else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	        {
	            if(emdtrace == 0 || emdtrace_x == 0 || emdtrace_y == 0 || emdtrace_z == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No se pudo localizar la llamada ");
	                return 1;
	            }
	            SendClientMessage(playerid, COLOR_WHITE, "La ultima llamada ha sido localizada");
	            SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /removegps para quitar la marca");
				SetPlayerCheckpoint(playerid,emdtrace_x,emdtrace_y,emdtrace_z,8.0);
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No puedes usar este sistema ! ");
	            return 1;
	        }
	    }
	    return 1;
	}
	
	if(strcmp(cmd, "/aceptarreport", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You need to login first !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pAdmin] > 0)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: /aceptarreport [ID o Nombre]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerNeedsHelp[giveplayerid] == 1)
				        {
				            PlayerNeedsHelp[giveplayerid] = 0;
				            GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "Administración: %s has just accepted the report of [ID:%d]%s.", sendername, giveplayerid, giveplayer);
							ABroadCast(COLOR_YELLOW, string);
							format(string, sizeof(string), "** Admin [ID:%d]%s ha aceptado el reporte, espera a que te atiendan.", playerid, sendername);
							SendClientMessage(giveplayerid, 0x4D903DAA, string);
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Player didn't send a report message or it's out of stock !");
				            return 1;
				        }
				    }
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas autorizado para usar esto ! ");
	            return 1;
	        }
	    }
	    return 1;
	}
	
	if(strcmp(cmd, "/trashreport", true) == 0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You need to login first !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pAdmin] > 0)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: /trashreport [ID o Nombre]");
			    	return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerNeedsHelp[giveplayerid] == 1)
				        {
				            PlayerNeedsHelp[giveplayerid] = 0;
				            GetPlayerName(playerid, sendername, sizeof(sendername));
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "Administración: %s ha denegado el reporte de [ID:%d]%s.", sendername, giveplayerid, giveplayer);
							ABroadCast(COLOR_YELLOW, string);
							format(string, sizeof(string), "** Admin [ID:%d]%s hha denegado tu reporte, lee las normas.", playerid, sendername);
							SendClientMessage(giveplayerid, 0xB35959AA, string);
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   No !");
				            return 1;
				        }
				    }
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas autorizado para usar esto ! ");
	            return 1;
	        }
	    }
	    return 1;
	}
	
	if(!strcmp(cmdtext, "/adminvendercoche", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas Logueado !");
	            return 1;
	        }
	        if(!IsAtDealership(playerid))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   YNo estas en un consecionario ! ");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pAdmin] >= 5)
	        {
	            new vehid = GetPlayerVehicleID(playerid);
	            new Float:x,Float:y,Float:z;
         		new Float:a;
         		CarInfo[vehid][cOwned] = 0;
         		strmid(CarInfo[vehid][cOwner], "Dealership", 0, strlen("Dealership"), 999);
         		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
         		GameTextForPlayer(playerid, "~w~Has puesto el coche a la venta", 10000, 3);
         		GetVehiclePos(vehid, x, y, z);
         		GetVehicleZAngle(vehid, a);
         		CarInfo[vehid][cLocationx] = x;
         		CarInfo[vehid][cLocationy] = y;
         		CarInfo[vehid][cLocationz] = z;
         		CarInfo[vehid][cAngle] = a;
         		RemovePlayerFromVehicle(playerid);
         		TogglePlayerControllable(playerid, 1);
         		OnPropUpdate();
         		DestroyVehicle(vehid);
				CreateVehicle(CarInfo[vehid][cModel],CarInfo[vehid][cLocationx],CarInfo[vehid][cLocationy],CarInfo[vehid][cLocationz]+1.0,CarInfo[vehid][cAngle],CarInfo[vehid][cColorOne],CarInfo[vehid][cColorTwo],60000);
			    LoadModsForAll(vehid);
	            TuneThisCar(vehid);
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No eres administrador !");
	            return 1;
	        }
	    }
	    return 1;
	}
//sistema casino tragaperras

	if (strcmp("/girar", cmdtext, true, 10) == 0)
	{
	    if(PlayerToPoint(0.7,playerid,1963.8304,1037.0452,992.4688) || PlayerToPoint(0.7,playerid,1963.8384,998.5801,992.4688) || PlayerToPoint(0.7,playerid,1956.9480,1047.2975,992.4688))
	 	{
            if(GetPlayerMoney(playerid) < 49)
            {
                SendClientMessage(playerid,COLOR_ROJO, "No Tienes dinero sifuciente ($50)");
                return 1;
			}
			if(CantidadGira[playerid] == 4)
	 	    {
                SendClientMessage(playerid,COLOR_ROJO, "Debes esperar 1 minuto para volver a interntarlo");
                TEsperar4[playerid] = SetTimerEx("Esperar4", 60000, 0,"d",playerid);
				return 1;
			}
			else
			{
			    if(EsperaGira[playerid] == 0)
			    {
			        TogglePlayerControllable(playerid, 0);
			    	SendClientMessage(playerid,COLOR_VERDE, "Jalas la palanta y esperas a que se detenga...");
			    	TogglePlayerControllable(playerid, 0);
	                TGirando[playerid] = SetTimerEx("Girando", 3000, 0,"d",playerid);
	                TEsperar[playerid] = SetTimerEx("Esperar", 4000, 0,"d",playerid);
	                SafeGivePlayerMoney(playerid, -50);
	                EsperaGira[playerid] = 1;
	                CantidadGira[playerid] += 1;
					return 1;
				}
				else
				{
				    SendClientMessage(playerid,COLOR_ROJO, "Anti-Flood | Cada cuatro segundo un tiro");
				    return 1;
				}
			}
		}
		else if(PlayerToPoint(0.7,playerid,1961.3010,1042.9080,992.4688) || PlayerToPoint(0.7,playerid,1961.3676,992.6525,992.4688) || PlayerToPoint(0.7,playerid,1957.0472,988.3160,992.4688))
		{
		    if(GetPlayerMoney(playerid) < 49)
            {
                SendClientMessage(playerid,COLOR_ROJO, "No Tienes diner osifuciente ($50)");
                return 1;
			}
			if(CantidadGira[playerid] == 4)
	 	    {
                SendClientMessage(playerid,COLOR_ROJO, "Debes esperar 1 minuto para volver a interntarlo");
                TEsperar4[playerid] = SetTimerEx("Esperar4", 60000, 0,"d",playerid);
				return 1;
			}
			else
			{
			    if(EsperaGira[playerid] == 0)
			    {
			        TogglePlayerControllable(playerid, 0);
			    	SendClientMessage(playerid,COLOR_VERDE, "Jalas la palanta y esperas a que se detenga...");
	                TGirando[playerid] = SetTimerEx("Girando", 3000, 0,"d",playerid);
	                TEsperar[playerid] = SetTimerEx("Esperar", 4000, 0,"d",playerid);
	                SafeGivePlayerMoney(playerid, -50);
	                EsperaGira[playerid] = 1;
	                CantidadGira[playerid] += 1;
					return 1;
				}
				else
				{
				    SendClientMessage(playerid,COLOR_ROJO, "Anti-Flood | Cada cuatro segundo un tiro");
				    return 1;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_ROJO, "No estas en las Maquinas Tragamonedas");
			return 1;
		}
	}
	if(!strcmp(cmdtext, "/fumar", true)) // By DryilZas & LordMan & MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Loguea primero !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJailed] == 0)
	        {
	            if(PlayerInfo[playerid][pLighter] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Tu mechero esta Vacio ! ");
	                return 1;
	            }
	            if(PlayerInfo[playerid][pCigarettes] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No te quedan Cigarros ! ");
	                return 1;
	            }
  				PlayerInfo[playerid][pLighter] -= 10;
	    		PlayerInfo[playerid][pCigarettes] -= 1;
   	            SetPlayerSpecialAction(playerid, 21);
   	            fumando[playerid] = 10;
		    	GetPlayerName(playerid, sendername, sizeof(sendername));
		    	format(string, sizeof(string), "* %s toma un cigarro y lo prende con su mechero.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Aqui no Puedes Fumar ! ");
			    return 1;
			}
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/hacermolotov", true)) // By DryilZas & LordMan & MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Loguea primero !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJailed] == 0)
	        {
	            if(PlayerInfo[playerid][pLighter] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Tu mechero esta Vacio ! ");
	                return 1;
	            }
	            if(PlayerInfo[playerid][pbono5] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No te quedan Botellas de Whisky ! ");
	                return 1;
	            }
  				PlayerInfo[playerid][pLighter] -= 10;
	    		PlayerInfo[playerid][pbono5] -= 1;
		    	GetPlayerName(playerid, sendername, sizeof(sendername));
		    	format(string, sizeof(string), "* %s toma una botella y la prende con su mechero.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SafeGivePlayerWeapon(playerid, 18, 1);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Aqui no Puedes hacer esto ! ");
			    return 1;
			}
		}
		return 1;
	}

/*	if(!strcmp(cmdtext, "/tomarbotella", true)) // By DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Loguea primero !");
	            return 1;
	        }
	        if(IsSmoking[playerid] == 0)
	        {
	            if(PlayerInfo[playerid][pCigarettes] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No te quedan botellas ! ");
	                return 1;
	            }
	    		PlayerInfo[playerid][pCigarettes] -= 1;
		    	GetPlayerName(playerid, sendername, sizeof(sendername));
		    	format(string, sizeof(string), "* %s saca una botella y comieza a beber.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				LoopingAnim(playerid,"SMOKING", "M_smk_out", 4.0, 1, 0, 0, 0, 0);
				SetTimerEx("BeberBotella", 1000, false, "i", playerid);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Estas demasiado mal para hacer eso ! ");
			    return 1;
			}
		}
		return 1;
	}*/
	
	/*if(!strcmp(cmdtext, "/dropcigarette", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You need to login first !");
	            return 1;
	        }
	        if(IsSmoking[playerid] > 0)
	        {
	            IsSmoking[playerid] = 0;
	            GetPlayerName(playerid, sendername, sizeof(sendername));
	            if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s takes a cigarette from his mouth and drops it on the ground.", sendername); }
	            else { format(string, sizeof(string), "* %s takes a cigarette from her mouth and drops it on the ground.", sendername); }
	            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            if(UsingSmokeAnim[playerid] == 1)
	            {
	                ClearAnimations(playerid);
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not even smoking ! ");
	            return 1;
	        }
		}
		return 1;
	}
	
	if(!strcmp(cmdtext, "/smokeanim", true)) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You need to login first !");
	            return 1;
	        }
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You can only use /smokeanim while you are at your foot !");
	            return 1;
	        }
	        if(IsSmoking[playerid] != 0)
	        {
	            UsingSmokeAnim[playerid] = 1;
	            ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You need to /smoke to use this animation ! ");
	            return 1;
	        }
		}
		return 1;
	 }
	 */
	 if(!strcmp(cmdtext, "/smugglemats", true)) // By LordMan
	 {
		if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You need to login first !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJob] == 22)
	        {
	            if(PlayerToPoint(3.0,playerid,248.4994,-33.1366,1.5781))
	            {
	                if(GetPlayerMoney(playerid) < 99)
	                {
	                    SendClientMessage(playerid, COLOR_GREY, "   You don't have enough money (100 dollars needed)");
	                    return 1;
	                }
	                if(MatsHolding[playerid] != 0)
	                {
	                    SendClientMessage(playerid, COLOR_GREY, "   You are smuggling materials already.");
	                    return 1;
	                }
	                SafeGivePlayerMoney(playerid, - 100);
	                MatsHolding[playerid] = 100;
	                SendClientMessage(playerid, COLOR_WHITE, "You have picked up materials package. Bring it to the Materials bank. (red marker)");
	                GameTextForPlayer(playerid, "~w~Materials loaded", 5000, 1);
	                SetPlayerCheckpoint(playerid,2230.3579,-2286.2107,14.3751,1.0);
	                return 1;
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   You are not at the Blueberry materials factory ! ")
	                return 1;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a materials smuggler !");
	            return 1;
	        }
		}
		return 1;
	 }
	 if(strcmp(cmd,"/creategun",true)==0) // By LordMan
	 {
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You need to login first !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJob] != 23)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not a gun maker. ");
			    return 1;
			}
			new x_weapon[256];
			x_weapon = strtok(cmdtext, idx);
			if(!strlen(x_weapon))
			{
			    SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /creategun [weapon name]");
			    SendClientMessage(playerid, COLOR_GREY, "Diponibles: knife(25) bat(25) sdpistol(100) eagle(200)");
			    SendClientMessage(playerid, COLOR_GREY, "Diponibles: mp5(200) shotgun(200) ak47(600) m4(600) rifle(600)");
			    SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			    return 1;
			}
			if(strcmp(x_weapon,"knife",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { CreatingGun[playerid] = 4; CreatingGunPrice[playerid] = 25; CreatingGunAmmo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"bat",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { CreatingGun[playerid] = 5; CreatingGunPrice[playerid] = 25; CreatingGunAmmo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"sdpistol",true) == 0) { if(PlayerInfo[playerid][pMats] > 99) { CreatingGun[playerid] = 23; CreatingGunPrice[playerid] = 100; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"flowers",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { CreatingGun[playerid] = 14; CreatingGunPrice[playerid] = 25; CreatingGunAmmo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"eagle",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { CreatingGun[playerid] = 24; CreatingGunPrice[playerid] = 150; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"mp5",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { CreatingGun[playerid] = 29; CreatingGunPrice[playerid] = 200; CreatingGunAmmo[playerid] = 200; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"shotgun",true) == 0) {	if(PlayerInfo[playerid][pMats] > 199) { CreatingGun[playerid] = 25; CreatingGunPrice[playerid] = 200; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
   			else if(strcmp(x_weapon,"ak47",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { CreatingGun[playerid] = 30; CreatingGunPrice[playerid] = 600; CreatingGunAmmo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"m4",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { CreatingGun[playerid] = 31; CreatingGunPrice[playerid] = 600; CreatingGunAmmo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else if(strcmp(x_weapon,"rifle",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { CreatingGun[playerid] = 33; CreatingGunPrice[playerid] = 600; CreatingGunAmmo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
			else { SendClientMessage(playerid,COLOR_GREY,"   Invalid Weapon name!"); return 1; }
			SetPlayerCheckpoint(playerid, 2152.5308,-2270.8145,13.3090, 1.0);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            IsPuttingMaterials[playerid] = 1;
            SendClientMessage(playerid, COLOR_WHITE, "Put material package at the factory !");
            return 1;
	    }
	    return 1;
	 }
	 
	 if(strcmp(cmd,"/comprarmats",true)==0) // By LordMan
	 {
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You need to login first !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJob] != 23)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a gun maker. ");
			    return 1;
	        }
	        if(!PlayerToPoint(2.0, playerid, 2230.3579,-2286.2107,14.3751))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not at the materials bank !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /comprarmats [cantidad]");
	            return 1;
	        }
	        new mammount;
	        mammount = strval(tmp);
	        if(mammount > matssys[MatsAmmount])
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   They don't have enough materials ! ");
	            return 1;
	        }
			if(GetPlayerMoney(playerid) < mammount * 15 - 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You don't have enough money ! ");
			    return 1;
			}
			matssys[MatsAmmount] -= mammount;
			PlayerInfo[playerid][pMats] += mammount;
			SafeGivePlayerMoney(playerid, - mammount * 15);
			format(string, sizeof(string), "   You have bought %d materials for %d$ !", mammount, mammount * 15);
			SendClientMessage(playerid, COLOR_GREY, string);
			SaveMatsSystem();
			return 1;
	    }
	    return 1;
	 }
if(!strcmp(cmdtext, "/llave", true)) // By MageC
{
    if(PlayerInfo[playerid][pPhousekey] == 96)
    {
  		    MoveObject(puertacasa96,194.718521, -1392.819214, 48.390369, 0.8);
      		SetTimer("puertacasa96t", 12000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Mecanismo se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para activar el mecanismo.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
     }
     else if(PlayerInfo[playerid][pPhousekey] == 17)
    {
  		    MoveObject(puertacasa17,1098.353027, -629.036072, 110.223206, 0.8);
      		SetTimer("puertacasa17t", 12000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Mecanismo se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para activar el mecanismo.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
     }
     else if(PlayerInfo[playerid][pPhousekey] == 80)
    {
  		    MoveObject(puertacasa80,304.986786, -1551.550903, 32.766087, 0.8);
      		SetTimer("puertacasa80t", 12000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Mecanismo se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para activar el mecanismo.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
     }
     else if(PlayerInfo[playerid][pPhousekey] == 95)
    {
  		    MoveObject(puertacasa95,255.698883, -1235.558594, 73.677513, 0.8);
      		SetTimer("puertacasa95t", 12000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Mecanismo se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para activar el mecanismo.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
     }
     else if(PlayerInfo[playerid][pPhousekey] == 85)
    {
  		    MoveObject(puertacasa85,2313.656738, -1210.353394, 24.786715, 0.8);
      		SetTimer("puertacasa85t", 12000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Mecanismo se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para activar el mecanismo.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
     }
     else if(PlayerInfo[playerid][pPhousekey] == 104)
    {
  		    MoveObject(puertacasa104,288.979492, -1317.169556, 54.549042, 0.8);
      		SetTimer("puertacasa104t", 12000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Mecanismo se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para activar el mecanismo.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
     }
     else if(PlayerInfo[playerid][pPhousekey] == 23)
    {
  		    MoveObject(puertacasa23,996.891235, -647.818298, 122.285591, 0.8);
      		SetTimer("puertacasa23t", 12000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Mecanismo se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para activar el mecanismo.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
     }
     else if(PlayerInfo[playerid][pPhousekey] == 20)
    {
  		    MoveObject(puertacasa20,1288.221802, -611.722961, 103.647964, 0.8);
      		SetTimer("puertacasa20t", 12000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Mecanismo se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para activar el mecanismo.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
     }
     else if(PlayerInfo[playerid][pPhousekey] == 103)
    {
  		    MoveObject(puertacasa103,270.536469, -1329.694824, 53.932419, 0.8);
      		SetTimer("puertacasa103t", 12000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Mecanismo se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para activar el mecanismo.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
     }
     else if(PlayerInfo[playerid][pPhousekey] == 14)
    {
  		    MoveObject(puertacasa14,2423.875488, -1767.507446, 14.221565, 0.8);
      		SetTimer("puertacasa14t", 12000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Mecanismo se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para activar el mecanismo.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
     }
     else return SendClientMessage(playerid, COLOR_GREY,"No tienes el control remoto.");
    return 1;
}
    
if(!strcmp(cmdtext, "/abrir", true)) // By LordMan
{
    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
    {
        if (PlayerToPoint(15, playerid,1589.053344,-1638.123168,14.122960))
		{
      		MoveObject(pdgate1,1599.053344,-1638.123168,14.122960, 0.8);
      		SetTimer("GateClose", 12000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Garage se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir el garage.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
		}
		else if (PlayerToPoint(15, playerid,1544.700317,-1630.735717,13.096980))
		{
      		DestroyObject( pdgate2 );
      		pdgate3 = CreateObject(968,1544.700317,-1630.735717,12.924660,0.000000,0.000000,270.972869);
      		SetTimer("GateClose5", 6000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Garage se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir el garage.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if (PlayerToPoint(15, playerid,2720.3772,-2409.7523,12.6))
		{
      		MoveObject(armygate1,2720.3772, -2401.2523, 12.6, 3.5);
      		SetTimer("GateClose2", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Garage se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir la verja #1.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if (PlayerToPoint(15, playerid,2720.3772,-2508.3069,12.6))
		{
      		MoveObject(armygate2,2720.3772, -2499.8069, 12.6, 3.5);
      		SetTimer("GateClose2", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Garage se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir la verja #2.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if (PlayerToPoint(15, playerid,2773.7400,-2455.4902,13.6371))
	    {
	        MoveObject(hangar,2774.397,-2455.854,5.886,2.5);
	        SetTimer("GateClose2", 7000, 0);
	        SendClientMessage(playerid, COLOR_BLUE,"El Hangar se cerrara en 7 segundos.");
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        format(string, sizeof(string), "* %s usa su control remoto para abrir el hangar.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    }
		else if (PlayerToPoint(15, playerid,1643.3379,-1714.9338,15.3067))
		{
      		MoveObject(hspdgate,1643.3379,-1705.9338,15.3067, 1.5);
      		SetTimer("GateClose4", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Garaje se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir el garaje.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Puerta demasiado lejana."); }
	}
	else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
	    if (PlayerToPoint(15, playerid,1246.0033,-767.3727,91.1473))
	    {
	        MoveObject(lucianogate,1256.2033,-767.3727,91.1473, 2.2);
	        SetTimer("GateClose6", 7000, 0);
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        format(string, sizeof(string), "* %s usa su control remoto para abrir la verja.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    }
	    else { SendClientMessage(playerid, COLOR_GREY,"Destination is too far."); }
	}
	else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
        if (PlayerToPoint(15, playerid,1534.9020,-1451.5979,14.4882))
		{
      		MoveObject(fbigate,1534.9020,-1451.5979,20.4882, 1.5);
      		SetTimer("GateClose3", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Garaje Hitman se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir la puerta.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	    else { SendClientMessage(playerid, COLOR_GREY,"Puerta demasiado lejana."); }
	}
	else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
	{
        if (PlayerToPoint(15, playerid,785.29998779297, -1152.5, 25.39999961853))
		{
      		MoveObject(yakuzagate,785.29998779297, -1152.5, 30.89999961853, 1.5);
      		SetTimer("GateClose8", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Garaje YaKuza se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir la verja.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
    else if (PlayerToPoint(15, playerid,659.79998779297, -1227.1999511719, 17.799999237061))
	{
      		MoveObject(yakuzagate2,659.79998779297, -1227.1999511719, 22.39999961853, 1.5);
      		SetTimer("GateClose8", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Garaje YaKuza se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir la verja.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if (PlayerToPoint(15, playerid,664.90002441406, -1309.3000488281, 15.199999809265))
	{
      		MoveObject(yakuzagate3,664.90002441406, -1309.3000488281, 20.89999961853, 1.5);
      		SetTimer("GateClose8", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Garaje YaKuza se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir la verja.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	    else { SendClientMessage(playerid, COLOR_GREY,"Puerta demasiado lejana."); }
	}
	else if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
	{
        if (PlayerToPoint(15, playerid,1014.383179 ,-1540.533936 ,16.209253))
		{
      		MoveObject(puretagate,1014.343262 ,-1534.540649 ,16.183294, 1.5);
      		SetTimer("GateClose10", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"El Garage pureta se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir la verja.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if (PlayerToPoint(15, playerid,1014.1152, -1520.3447, -64.2368))
	    {
	        MoveObject(vallaosafa,1014.0947, -1520.3467, -60.2616, 1.5);
	        SetTimer("GateCloseosafa", 7000, 0);
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        format(string, sizeof(string), "* %s usa su control remoto para abrir la verja.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    }
	    else { SendClientMessage(playerid, COLOR_GREY,"Puerta demasiado lejana."); }
	}
	else if(PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)
	{
        if (PlayerToPoint(30, playerid,2248.918457, -2201.388672, 15.282555))
		{
      		MoveObject(bomberosgate,2255.440430, -2207.859619, 15.282555, 1.5);
      		SetTimer("GateClose11", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"La valla de bomberos se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir la verja.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	    else { SendClientMessage(playerid, COLOR_GREY,"Puerta demasiado lejana."); }
	}
/*	else if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
	{
        if (PlayerToPoint(15, playerid,1106.503906, -1740.825439, 13.247808))
		{
      		MoveObject(lstagate,1106.503906, -1740.825439, 10.247808, 1.5);
      		SetTimer("GateClose9", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"La valla se subira en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para bajar la valla.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	    else { SendClientMessage(playerid, COLOR_GREY,"Puerta demasiado lejana."); }
	}*/
	else if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13) // garajes/taller mecanico
	{
        if (PlayerToPoint(15, playerid,1812.708,-2073.065,14.227))
		{
      		MoveObject(mecanicagate,1812.703,-2064.196,14.227, 1.5);
      		SetTimer("GateClose7", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"La puerta de la Mecanica se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir la verja.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if (PlayerToPoint(15, playerid,1794.356,-2044.668,14.235))
		{
      		MoveObject(tallergate,1795.0941162109, -2030.4400634766, 15.448160171509, 1.5);
      		SetTimer("GateClose7", 7000, 0);
      		SendClientMessage(playerid, COLOR_BLUE,"La puerta del Taller se cerrara en 7 segundos.");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s usa su control remoto para abrir la puerta.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	    else { SendClientMessage(playerid, COLOR_GREY,"Puerta demasiado lejana."); }
	}
 	else return SendClientMessage(playerid, COLOR_GREY,"No tienes el control remoto.");
    return 1;
}

if(!strcmp(cmdtext, "/aplata2", true)) // by LordMan
{
    if(PlayerInfo[playerid][pLeader] == 13 || PlayerInfo[playerid][pMember] == 13)
    {
        if (PlayerToPoint(30, playerid,1810.0380859375, -2025.30859375, 16.5964012146))
		{
      		MoveObject(platagate, 1808.1708984375, -2025.314453125, 15.591075897217, 1.5);
      		MoveObject(plata2gate, 1810.0380859375, -2025.30859375, 15.5964012146, 1.5);
      		SendClientMessage(playerid, COLOR_BLUE,"Plataforma levantada");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s sube la plataforma.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Estas muy lejos."); }
	}
	else return SendClientMessage(playerid, COLOR_GREY,"Tu no tienes el control de esto.");
	return 1;
}

if(!strcmp(cmdtext, "/aplata", true)) // by LordMan
{
    if(PlayerInfo[playerid][pLeader] == 13 || PlayerInfo[playerid][pMember] == 13)
    {
        if (PlayerToPoint(30, playerid,1810.0380859375, -2025.30859375, 16.5964012146))
		{
      		MoveObject(platagate, 1808.1708984375, -2025.314453125, 14.291075897217, 1.5);
      		MoveObject(plata2gate, 1810.0380859375, -2025.30859375, 14.2964012146, 1.5);
      		SendClientMessage(playerid, COLOR_BLUE,"Plataforma levantada");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s sube la plataforma.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Estas muy lejos."); }
	}
	else return SendClientMessage(playerid, COLOR_GREY,"Tu no tienes el control de esto.");
	return 1;
}

if(!strcmp(cmdtext, "/bplata", true)) // by LordMan
{
    if(PlayerInfo[playerid][pLeader] == 13 || PlayerInfo[playerid][pMember] == 13)
    {
        if (PlayerToPoint(30, playerid,1808.1685791016, -2025.3188476563, 13.446762084961))
		{
      		MoveObject(platagate, 1808.1685791016, -2025.3188476563, 13.446762084961, 1.5);
      		MoveObject(plata2gate, 1810.0477294922, -2025.3192138672, 13.44552230835, 1.5);
      		SendClientMessage(playerid, COLOR_BLUE,"Plataforma bajada");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s baja la plataforma.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Estas muy lejos."); }
	}
    else return SendClientMessage(playerid, COLOR_GREY,"Tu no tienes el control de esto.");
    return 1;
}

if(!strcmp(cmdtext, "/comabrir", true)) // by LordMan
{
    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3)
    {
        if (PlayerToPoint(30, playerid,245.0578,72.4314,1002.5406))
		{
      		MoveObject(lspddoor1, 244.0578,72.4314,1002.5406, 3.5000);
      		MoveObject(lspddoor2, 247.1478,72.4314,1002.5406, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Cierra la puerta primero!");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s abre la puerta con la tarjeta.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
       	}
       	else { SendClientMessage(playerid, COLOR_GREY,"Demasiado lejos."); }
	}
	else return SendClientMessage(playerid, COLOR_GREY,"No tienes la tarjeta.");
	return 1;
}

if(!strcmp(cmdtext, "/comcerrar", true)) // by LordMan
{
    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3)
    {
        if (PlayerToPoint(30, playerid,245.0578,72.4314,1002.5406))
		{
      		MoveObject(lspddoor1, 245.0578,72.4314,1002.5406, 3.5000);
      		MoveObject(lspddoor2, 245.9478,72.4314,1002.5406, 3.5000);
      		SendClientMessage(playerid, COLOR_BLUE,"Cierra la puerta primero!");
      		GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s abre la puerta con la tarjeta.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
       	}
       	else { SendClientMessage(playerid, COLOR_GREY,"Demasiado lejos."); }
	}
	else return SendClientMessage(playerid, COLOR_GREY,"No tienes la tarjeta.");
	return 1;
}
//------------BusDriverStartWest---------------
// By LordMan
if(strcmp(cmd, "/ruta2", true) == 0)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pJob] == 24)
		{
			if (BusrouteWest[playerid][0] == 12 || BusrouteEast[playerid][0] == 12)
			{
				BusrouteWest[playerid][0] = 0;
				BusrouteEast[playerid][0] = 0;
			}
			if(BusrouteWest[playerid][0] == 0 && BusrouteEast[playerid][0] == 0)
			{
				new playervehicleid = GetPlayerVehicleID(playerid);
				if(IsABus(playervehicleid))
				{
					TogglePlayerControllable(playerid, 1);
					GameTextForPlayer(playerid, "~g~Autobus en Ruta Oeste", 5000, 3);
					SendClientMessage(playerid, COLOR_LIGHTRED, "---------Oeste Los Santos Ruta Autobus-----------");
					SendBusRoute(playerid, 1);
					SendClientMessage(playerid, COLOR_RED, " ");
					SendClientMessage(playerid, COLOR_GREEN, "Las marcas rojas se colocarán a lo largo de la ruta.");
					SendClientMessage(playerid, COLOR_GREEN, "Su servicio será anunciado a los jugadores cercanos a la siguiente parada automática.");
					//GangZoneHideForPlayer(playerid, buszoneeast);
					//GangZoneHideForPlayer(playerid, buszonewest);
					BusrouteWest[playerid][0] = 1;
					BusrouteWest[playerid][1] = playervehicleid;
					//BusrouteWest[playerid][2] = 0;
/*					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && GetPlayerVehicleID(i) == playervehicleid) BusrouteWest[playerid][2] ++;
					}*/
					OnPlayerEnterCheckpoint(playerid);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "No estas en un autobus!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Ya estas en ruta!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "No eres un conductor de autobus!");
		}
	}
	return 1;
}

//------------BusDriverStartEast---------------
// By LordMan
if(strcmp(cmd, "/ruta1", true) == 0)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pJob] == 24)
		{
			if (BusrouteWest[playerid][0] == 12 || BusrouteEast[playerid][0] == 12)
			{
				BusrouteWest[playerid][0] = 0;
				BusrouteEast[playerid][0] = 0;
			}
		    if(BusrouteWest[playerid][0] == 0 && BusrouteEast[playerid][0] == 0)
		    {
				new playervehicleid = GetPlayerVehicleID(playerid);
				if(IsABus(playervehicleid))
				{
					TogglePlayerControllable(playerid, 1);
					GameTextForPlayer(playerid, "~g~Autobus en Ruta Este", 5000, 3);
					SendClientMessage(playerid, COLOR_LIGHTRED, "---------Este Los Santos Ruta Autobus-----------");
					SendBusRoute(playerid, 0);
					SendClientMessage(playerid, COLOR_RED, " ");
					SendClientMessage(playerid, COLOR_GREEN, "Las marcas rojas se colocarán a lo largo de la ruta.");
					SendClientMessage(playerid, COLOR_GREEN, "Su servicio será anunciado a los jugadores cercanos a la siguiente parada automática.");
					//GangZoneHideForPlayer(playerid, buszoneeast);
					//GangZoneHideForPlayer(playerid, buszonewest);
					BusrouteEast[playerid][0] = 1;
					BusrouteEast[playerid][1] = playervehicleid;
					//BusrouteEast[playerid][2] = 0;
/*					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && GetPlayerVehicleID(i) == playervehicleid) BusrouteEast[playerid][2] ++;
					}*/
					OnPlayerEnterCheckpoint(playerid);
					return 1;
				}
			    else
			    {
				    SendClientMessage(playerid, COLOR_GREY, "No estas en un bus!");
			    }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Ya estas en ruta!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "No eres un conductor de bus!");
		}
	}
	return 1;
}

	if(strcmp(cmd, "/aunlock", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /aunlock [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pLocked] == 1)
			        {
			            PlayerInfo[giveplayerid][pLocked] = 0;
			            TogglePlayerControllable(giveplayerid, 1);
			            SendClientMessage(playerid, COLOR_YELLOW, "Account unlocked succesfuly.");
			            
			        }
			    }
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You must be a level 3 admin to do this command.");
		}
		return 1;
	}

	if(strcmp(cmd, "/actualizar", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			SaveAccounts();
			SendClientMessage(playerid, COLOR_YELLOW, "Todas las cuentas de jugadores ha sido actualizadas y almacenadas.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "No eres admin.");
		}
		return 1;
	}

//----------------------------------[ooc]-----------------------------------------------
	if(strcmp(cmd, "/ooc", true) == 0 || strcmp(cmd, "/o", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Debes de loguearte primero !");
	            return 1;
	        }
			if ((noooc) && PlayerInfo[playerid][pAdmin] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Canal OOC cerrado por un administrador !");
				return 1;
			}
			if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "   Has sido muteado !");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/o)oc [Canal OOC]");
				return 1;
			}
			format(string, sizeof(string), "[%d] %s: %s " ,playerid , sendername, result);
			OOCOff(COLOR_OOC,string);
			printf("%s", string);
		}
		return 1;
	}
    if(strcmp(cmd, "/sorteopremium", true) == 0)
	{
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
		     new valor;
		     valor = random(50);
	         format(string, sizeof(string), "   La id del Premiado es: %d !!! Enhorabuena al Ganador!.", valor);
		     OOCOff(COLOR_GRAD1, string);
		     return 1;
            }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar este comando!");
				return 1;
			}

	}
	if(strcmp(cmd, "/noooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2 && (!noooc))
			{
				noooc = 1;
				BroadCast(COLOR_GRAD2, "   Canal OOC cerrado por un administrador !");
			}
			else if (PlayerInfo[playerid][pAdmin] >= 2 && (noooc))
			{
				noooc = 0;
				BroadCast(COLOR_GRAD2, "   Canal OOC abierto por un administrador !");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar este comando!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/destruirveh", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
		       GameTextForPlayer(playerid, "~w~Vehiculo ~r~destruido", 5000, 6);
		       PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			   DestroyVehicle(GetPlayerVehicleID(playerid));
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar este comando!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/acerrar", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /acerrar [ID Vehiculo]");
				return 1;
			}
			new plo;
			plo = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
		       GameTextForPlayer(playerid, "~w~Vehiculo Administrador ~r~BLOQUEADO", 5000, 6);
		       PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			   LockCar(plo);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/aabrir", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /aabrir [ID Vehiculo]");
				return 1;
			}
			new plo;
			plo = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
		       GameTextForPlayer(playerid, "~w~Vehiculo Administrador ~r~abierto", 5000, 6);
		       PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			   UnLockCar(plo);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/conectarnpcs", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				ConnectNPC("Latino_1","amarillo");
    			ConnectNPC("Policia_1","policia1");
    			ConnectNPC("Policia_2","policia2");
    			ConnectNPC("Policia_3","policia3");
    			//ConnectNPC("Policia_Patruya","Policia_Patruya");
    			ConnectNPC("SpG_Bot","spgbot");
				BroadCast(COLOR_LIGHTRED, "   NPC's Activados !");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar este comando!");
			}
		}
		return 1;
	}*/
	/*if(strcmp(cmdtext, "/zombie", true) == 0) {
        if(PlayerInfo[playerid][pAdmin] < 5)
        {
            return 1;
        }
        Caller = playerid;
        new newname[64];
        format(newname,sizeof(newname),"%s_%d",ZOMBIE_NAME,LastAdded);
	    ConnectNPC(newname,"zombie");
	    LastAdded++;
	    SendClientMessageToAll(COLOR_RED,"INFECCION: Alerta, ha entrado un infectado!");
		return 1;
	}*/
	/*if(strcmp(cmd, "/desconectarnpcs", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				if(IsPlayerNPC(playerid))
				{
					Kick(playerid)
					BroadCast(COLOR_LIGHTRED, "   NPC's Desactivados !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar este comando!");
			}
		}
		return 1;
	}*/
//----------------------------------[aooc]-----------------------------------------------
	if(strcmp(cmd, "/aooc", true) == 0 || strcmp(cmd, "/ao", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
			if (PlayerInfo[playerid][pAdmin] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No eres administrador !");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/ao)oc [aooc chat]");
				return 1;
			}
			format(string, sizeof(string), "Mensaje de Sistema: %s ", result);
			OOCOff(COLOR_ASKQ,string);
			format(string, sizeof(string), "Mensaje de Sistema enviado por: %s. ",sendername);
			ABroadCast(COLOR_YELLOW,string);
			printf("%s", string);
		}
		return 1;
	}
//-------------------------[SWAT]----------------------------
    if(strcmp(cmd, "/autoswat", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pRank] >= 4)
		{
			authorizeswat = 1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "** HQ: Comisario %s ha autorizado los S.W.A.T. **", sendername);
			SendRadioMessage(1, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}


	if(strcmp(cmd, "/desautoswat", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pRank] >= 4)
		{
			authorizeswat = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "** HQ: Oficial %s ha cancelado los S.W.A.T.",sendername);
			SendRadioMessage(1, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/swat", true) == 0)
	{
        if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader] == 1)
		{
			if(swat[playerid] == 0)
            {
				if(authorizeswat == 1)
				{
					if (PlayerToPoint(3, playerid,254.5414,77.1636,1003.6406) || PlayerToPoint(3,playerid,257.8309,77.2609,1003.6406) || PlayerInfo[playerid][pLocal] != 255)
					{

    	 				SafeResetPlayerWeapons(playerid);
						swat[playerid] = 1;
						SetPlayerSkin(playerid, 285);

						SafeGivePlayerWeapon(playerid, 31, 500);
						SafeGivePlayerWeapon(playerid, 34, 150);
						SafeGivePlayerWeapon(playerid, 29, 730);
						SafeGivePlayerWeapon(playerid, 27, 250);

						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);

                        for(new i = 0; i < MAX_PLAYERS; i++)
   						{
   		    				if(IsPlayerConnected(i))
   		    				{
		   						ShowPlayerNameTagForPlayer(i, playerid, 0);
							}
						}

						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string,sizeof(string), "* %s se coloca su uniforme S.W.A.T.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else { SendClientMessage(playerid, COLOR_GREY, "SWAT no está autorizado por un alto mando!"); }
			}
			else
			{
				if(PlayerInfo[playerid][pLeader] == 1) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==5) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==4) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==3) { SetPlayerSkin(playerid, 281); }
				if(PlayerInfo[playerid][pRank]==2) { SetPlayerSkin(playerid, 267); }
				if(PlayerInfo[playerid][pRank]==1) { SetPlayerSkin(playerid, 266); }
				
                for(new i = 0; i < MAX_PLAYERS; i++)
   				{
   		    		if(IsPlayerConnected(i))
   		    		{
		   				ShowPlayerNameTagForPlayer(i, playerid, 1);
					}
				}

				swat[playerid] = 0;
				SafeResetPlayerWeapons(playerid);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string), "* %s guarda su uniforme S.W.A.T en las taquillas.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			}
		}
		if(!IsACop(playerid) || PlayerInfo[playerid][pLeader] > 1 || PlayerInfo[playerid][pLeader] < 1)
 		{
	       	SendClientMessage(playerid, COLOR_GREY, "No eres un policia!");
		}
		return 1;
	}
	//--------------------------------=Police Backup=----------------------------------------------------------------
	//===Needs Radar Clear
	//by LordMan
	if(strcmp(cmd,"/refuerzos",true)==0 || strcmp(cmd,"/ref",true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "A todas las unidades: %s necesita refuerzos de inmediato,su pocición ha sido marcada en el GPS (marca roja).", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
							{
								SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
								SendClientMessage(i, TEAM_BLUE_COLOR, string);
							}
						}
					}
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Para cancelar los refuerzos escribe /noref.");
					SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Usted ya tiene una solicitud de copia de seguridad activa!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "No eres un policia!");
			}
		}
		return 1;
	}

	//-----------------=Radar Clear=-----------------
	//======Goes with Police Backup
	//by LordMan
	if(strcmp(cmd,"/noref",true)==0 || strcmp(cmd,"/norefuerzos",true)==0)
	{
		BackupClear(playerid, 0);
		return 1;
	}
	//----------------Pinchos-------------------------------------------//
	if(strcmp(cmdtext, "/clavos", true)==0 || strcmp(cmdtext, "/cl", true)==0)
	{
		if (PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pLeader] != 1) return SendClientMessage(playerid, COLOR_GREY, "No eres policia!");
        DeleteClosestStrip(playerid);
		new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateStrip(plocx,plocy,plocz,ploca);
	    return 1;
 	}
	if(strcmp(cmdtext, "/qclavos", true)==0 || strcmp(cmdtext, "/qcl", true)==0)
	{
		if (PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pLeader] != 1) return SendClientMessage(playerid, COLOR_GREY, "No eres policia!");
        DeleteClosestStrip(playerid);
	    return 1;
 	}
 	if(strcmp(cmdtext, "/qtclavos", true)==0 || strcmp(cmdtext, "/qtcl", true)==0)
	{
		if (PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pLeader] != 1) return SendClientMessage(playerid, COLOR_GREY, "No eres policia!");
		DeleteAllStrip();
        DeleteClosestStrip(playerid);
	    return 1;
 	}
//--------------------------------=[Roadblock]=-----------------------------------
	// by LordMan
/*	if(strcmp(cmdtext, "/blo", true)==0 || strcmp(cmdtext, "/rb", true)==0)
	{
		if (PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pLeader] != 1) return SendClientMessage(playerid, COLOR_GREY, "No eres policia!");
		if (PlayerInfo[playerid][pRoadblock] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can only deploy 1 roadblock at a time, type /rrb to remove your existing one.");
		if (roadblocktimer != 0) return SendClientMessage(playerid, COLOR_GREY, "Please wait before trying to spawn another roadblock!");
		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		PlayerInfo[playerid][pRoadblock] = CreateObject(981, X, Y, Z, 0.0, 0.0, A+180);
		SetPlayerPos(playerid, X, Y, Z+4);
		GameTextForPlayer(playerid, "~w~Bloqueo ~r~colocado", 5000, 5);
		SendClientMessage(playerid, COLOR_GREEN, "Bloqueo colocado con exito, escribe /rrb o /qblo para quitarlo.");
		roadblocktimer = 1;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "HQ: Un bloqueo ha sido montado por %s, se ha marcado la posición en el mapa.", sendername);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
				{
					SetPlayerCheckpoint(playerid, X, Y, Z-10, 1.0);
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
					if (PlayerInfo[i][pRank] >= 5 && PlayerInfo[i][pMember] || PlayerInfo[i][pLeader] == 1)
					{
						SendClientMessage(i, COLOR_YELLOW, "Puedes quitar todos los bloqueos escribiendo /qtblo");
					}
				}
			}
		}
		SetTimer("ResetRoadblockTimer", 60000, false);
		return 1;
	}
	
	if(strcmp(cmdtext, "/cono", true)==0 || strcmp(cmdtext, "/cono", true)==0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				new Float:X, Float:Y, Float:Z, Float:A;
				GetPlayerPos(playerid, X, Y, Z);
				GetPlayerFacingAngle(playerid, A);
				CreateObject(1238, X, Y, Z-0.6, 0.0, 0.0, A+180);
				//SetPlayerPos(playerid, X, Y, Z+4);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* %s se saca un cono del culo y lo coloca en el suelo.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			return 1;
		}
		return 1;
	}*/
	
	if(strcmp(cmdtext, "/ruedas", true)==0 || strcmp(cmdtext, "/ruedas", true)==0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    GameTextForPlayer(playerid, "~w~Ruedas ~y~doradas", 2500, 1);
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1078);
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				return 1;
			}
			return 1;
		}
		return 1;
	}
	
	if(strcmp(cmd, "/modcarga", true) == 0) // by DryilZas
	{
	    if (PlayerInfo[playerid][pAdmin] >=5)
	 	{
   			//new tmp[256];
			tmp = strtok(cmdtext,idx);
	    	new vid = cochegroo;
			AddVehicleComponent(vid,strval(tmp));
			return 1;
		}
		return 1;
	}

/*	if(strcmp(cmdtext, "/qblo", true)==0 || strcmp(cmdtext, "/rrb", true)==0)
	{
		if (PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pLeader] != 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "No eres un policia!");
			return 1;
		}
		if (PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Tiene que ser rango 5 para usar este comando!");
			return 1;
		}
		if (PlayerInfo[playerid][pRoadblock] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "No hay ningun control de carretera!");
			return 1;
		}
		RemoveRoadblock(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Bloqueo eliminado con exito.");
		return 1;
	}
	
	if(strcmp(cmdtext, "/qtblo", true)==0 || strcmp(cmdtext, "/qtblo", true)==0)
	{
		if (PlayerInfo[playerid][pRank] >= 5 && PlayerInfo[playerid][pMember] || PlayerInfo[playerid][pLeader] == 1)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(PlayerInfo[i][pRoadblock] != 0)
				{
					RemoveRoadblock(i);
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "HQ: Todos los bloqueos han sido retirados por %s.", sendername);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
					{
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Debes tener mas de rango 5 para usar este comando!");
		}
		return 1;
	}*/
    if(strcmp(cmd, "/helado", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!IsPlayerInAnyVehicle(playerid))
	    	{
				SendClientMessage(playerid, COLOR_GREY, "   No estas en el furgon!");
				return 1;
    		}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /helado [ID del jugador]");
				return 1;
			}
	        giveplayerid = ReturnUser(tmp);
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
						if (PlayerInfo[playerid][pPcarkey] >= 593 && PlayerInfo[playerid][pPcarkey]<= 598 || PlayerInfo[playerid][pPcarkey2] >= 593 && PlayerInfo[playerid][pPcarkey2]<= 598 || PlayerInfo[playerid][pPcarkey3] >= 593 && PlayerInfo[playerid][pPcarkey3]<= 598 || PlayerInfo[playerid][pPcarkey4] >= 593 && PlayerInfo[playerid][pPcarkey4]<= 598 || PlayerInfo[playerid][pPcarkey5] >= 593 && PlayerInfo[playerid][pPcarkey5]<= 598 || HireCar[playerid] >= 593 && HireCar[playerid] <= 598)
						{
                            SetPlayerHealth(giveplayerid,100.0);
							format(string, sizeof(string), "   Has dado a %s(ID: %d), un Helado.", giveplayer,giveplayerid);
							SendClientMessage(playerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "   Has recibido de %s(ID: %d) un Helado.", sendername, playerid);
							SendClientMessage(giveplayerid, COLOR_GRAD1, string);

						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "   Tu no tienes un Furgon de Helados.");
						}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Estas demasiado lejos.");
				}
        }
		return 1;
	}
    if(strcmp(cmd, "/perrito", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!IsPlayerInAnyVehicle(playerid))
	    	{
				SendClientMessage(playerid, COLOR_GREY, "   No estas en el furgon!");
				return 1;
    		}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /perrito [ID del jugador]");
				return 1;
			}
	        giveplayerid = ReturnUser(tmp);
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
						if (PlayerInfo[playerid][pPcarkey] >= 587 && PlayerInfo[playerid][pPcarkey]<= 592 || PlayerInfo[playerid][pPcarkey2] >= 587 && PlayerInfo[playerid][pPcarkey2]<= 592 || PlayerInfo[playerid][pPcarkey3] >= 587 && PlayerInfo[playerid][pPcarkey3]<= 592 || PlayerInfo[playerid][pPcarkey4] >= 587 && PlayerInfo[playerid][pPcarkey4]<= 592 || PlayerInfo[playerid][pPcarkey5] >= 587 && PlayerInfo[playerid][pPcarkey5]<= 592 || HireCar[playerid] >= 587 && HireCar[playerid] <= 592)
						{
                            SetPlayerHealth(giveplayerid,100.0);
							format(string, sizeof(string), "   Has dado a %s(ID: %d), un Perrito.", giveplayer,giveplayerid);
							SendClientMessage(playerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "   Has recibido de %s(ID: %d) un Perrito.", sendername, playerid);
							SendClientMessage(giveplayerid, COLOR_GRAD1, string);

						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "   Tu no tienes un Furgon de Perritos.");
						}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Estas demasiado lejos.");
				}
        }
		return 1;
	}
//-------------------------------[Pay]--------------------------------------------------------------------------
    if(strcmp(cmd, "/pagar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /pagar [ID del jugador] [Dinero]");
				return 1;
			}
			//giveplayerid = strval(tmp);
	        giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAG: /pagar [ID del jugador] [Dinero]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys > 1000 && PlayerInfo[playerid][pLevel] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Necesitas ser nivel 3 para pagar mas de 1000");
				return 1;
			}
			if(moneys < 1 || moneys > 9999999)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "La cantidad no puede ser menor que 1, ni mayor de 9999999.");
			    return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pLocal] == 106)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Sal de la edificacion para usar esto.");
						return 1;
					}
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    /*if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   You can not pay for yourself !");
					        return 1;
					    }*/
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						playermoney = GetPlayerMoney(playerid);
						if (moneys > 0 && playermoney >= moneys)
						{
						    //ConsumingMoney[giveplayerid] = 1;
							SafeGivePlayerMoney(playerid, (0 - moneys));
							SafeGivePlayerMoney(giveplayerid, moneys);
							format(string, sizeof(string), "   Has dado a %s(ID: %d), $%d.", giveplayer,giveplayerid, moneys);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "   Has recibido $%d de %s(ID: %d).", moneys, sendername, playerid);
							SendClientMessage(giveplayerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "Administracion: %s ha pagado $%d a %s.", sendername, moneys, giveplayer);
							PayLog(string);
							ABroadCast(COLOR_YELLOW,string);
							PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
							/*format(string, sizeof(string), "* %s takes out some cash, and hands it to %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);*/
							ApplyAnimation(playerid,"DEALER","shop_pay",4.1,0,0,0,0,0);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "   Cantidad invalida.");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Estas demasiado lejos.");
					}
				}//invalid id
			}
			else
			{
				format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/donar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /donar [Dinero]");
				return 1;
			}
			if(PlayerInfo[playerid][pLocal] == 106)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "No permitido");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Insuficiente.");
				return 1;
			}
			if(GetPlayerMoney(playerid) < moneys)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Insuficiente.");
				return 1;
			}
			SafeGivePlayerMoney(playerid, -moneys);
   		//	EconomyInfo[eArcas] += moneys;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s Gracias por su donacion a las arcas del estado de, $%d.",sendername, moneys);
			printf("%s", string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			PayLog(string);
		}
		return 1;
	}
//-------------------------[AuthorizeTactical]----------------------------
	if(strcmp(cmd, "/authorizetactical", true) == 0)
	{
		if(PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pRank] >= 5)
		{
			authorizetactical = 1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "** HQ: Director %s has authorized the Tactical Response uniform **", sendername);
			SendRadioMessage(2, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}


	if(strcmp(cmd, "/deauthorizetactical", true) == 0)
    {
		if(PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pRank] >= 5)
		{
        	authorizetactical = 0;
	 		GetPlayerName(playerid, sendername, sizeof(sendername));
        	format(string, sizeof(string), "** HQ: Director %s has deauthorized the Tactical Response uniform",sendername);
			SendRadioMessage(2, TEAM_BLUE_COLOR, string);
		}
		return 1;
	}

	if(strcmp(cmd, "/tactical", true) == 0)
	{
        if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader] == 2)
		{
			if(tactical[playerid] == 0)
            {
				if(authorizetactical == 1)
				{
					if (PlayerToPoint(3, playerid,223.2956,184.4056,1003.0313) || PlayerToPoint(3,playerid,223.3045,187.1514,1003.0313) || PlayerInfo[playerid][pLocal] != 255)
					{

					    SafeResetPlayerWeapons(playerid);
						tactical[playerid] = 1;
						SetPlayerSkin(playerid, 285);

						SafeGivePlayerWeapon(playerid, 31, 500);
						SafeGivePlayerWeapon(playerid, 23, 150);
						SafeGivePlayerWeapon(playerid, 27, 250);
						SafeGivePlayerWeapon(playerid, 17, 10);
                        SafeGivePlayerWeapon(playerid, 34, 120);


						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);

						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string,sizeof(string), "* %s se ha equipado con el Traje Tactico.", sendername);//by Pedro Armas
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else
				{
				SendClientMessage(playerid, COLOR_GREY, "Tactical No ha sido autorizado por el Director!");
				}
			}
			else
			{
				if(PlayerInfo[playerid][pLeader] == 2) { SetPlayerSkin(playerid, 286); }
				if(PlayerInfo[playerid][pRank]==5) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==4) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==3) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==2) { SetPlayerSkin(playerid, 163); }
				if(PlayerInfo[playerid][pRank]==1) { SetPlayerSkin(playerid, 163); }

				tactical[playerid] = 0;
				SafeResetPlayerWeapons(playerid);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string,sizeof(string), "* %s puts his Tactical Response uniform back in the locker.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			}
		}
		if(!IsACop(playerid) || PlayerInfo[playerid][pLeader] > 2 || PlayerInfo[playerid][pLeader] < 2)
		{
   		    SendClientMessage(playerid, COLOR_GREY, "No eres ajente!");
		}
		return 1;
	}

	
	
//------------------------------[Map-Icons]----------------------------------------------------------------------
    
//-------------------------------[License]--------------------------------------------------------------------------
   if(strcmp(cmd, "/comprarconduccion", true) == 0)
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,1490.3195,1305.6976,1093.2964))
          	{
            	if(PlayerInfo[playerid][pCarLic] == 0)
				{
				    if(GetPlayerMoney(playerid) < 3500)
				    {
             			SendClientMessage(playerid, COLOR_GREY, "No tienes suficiente dinero");
             			return 1;
					}
					else
					{
             			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has comprado tu licencia de conduccion $3500");
             			SafeGivePlayerMoney(playerid, - 3500);
             			PlayerInfo[playerid][pCarLic] = 1;
             			OnPlayerUpdate(playerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, " Ya tienes esta licencia.");
					return 1;
				}
			}
		}
  		return 1;
	}
	
	if(strcmp(cmd, "/comprarvuelo", true) == 0)
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,1490.3195,1305.6976,1093.2964))
          	{
            	if(PlayerInfo[playerid][pFlyLic] == 0)
				{
				    if(GetPlayerMoney(playerid) < 10500)
				    {
             		    SendClientMessage(playerid, COLOR_GREY, "No tienes suficiente dinero");
             		    return 1;
             		}
             		else
             		{
             			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has comprado tu licencia de vuelo $10500");
             			SafeGivePlayerMoney(playerid, - 10500);
             			PlayerInfo[playerid][pFlyLic] = 1;
             			OnPlayerUpdate(playerid);
             		}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, " Ya tienes esta licencia.");
					return 1;
				}
			}
		}
  		return 1;
	}

    if(strcmp(cmd, "/comprarbarco", true) == 0)
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,1490.3195,1305.6976,1093.2964))
          	{
            	if(PlayerInfo[playerid][pBoatLic] == 0)
				{
				    if(GetPlayerMoney(playerid) < 5500)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "No tienes suficiente dinero");
				        return 1;
				    }
				    else
				    {
             			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has comprado tu licencia de barco $5500");
             			SafeGivePlayerMoney(playerid, - 5500);
             			PlayerInfo[playerid][pBoatLic] = 1;
             			OnPlayerUpdate(playerid);
             		}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, " Ya tienes esta licencia.");
					return 1;
				}
			}
		}
  		return 1;
	}
	
	if(strcmp(cmd, "/licenciaarmas", true) == 0) // by DryilZas
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,1365.9424,-1285.4685,13.5469))
          	{
            	if(PlayerInfo[playerid][pGunLic1] == 0)
				{
				    if(GetPlayerMoney(playerid) < 20500)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "No tienes suficiente dinero");
				        return 1;
				    }
				    else
				    {
             			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has comprado tu licencia de armas Tipo 1 por $20500.");
             			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Recuerda que esta licencia solo te acredita el poder llevar: Pistolas.");
             			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Para armas de rango más alto, pregunta en la comisaría.");
             			SafeGivePlayerMoney(playerid, - 20500);
             			PlayerInfo[playerid][pGunLic1] = 1;
             			OnPlayerUpdate(playerid);
             		}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, " Ya tienes esta licencia.");
					return 1;
				}
			}
		}
  		return 1;
	}
	
 	if(strcmp(cmd, "/comprarcamara", true) == 0) // by DryilZas
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,2035.8124,-1388.7933,3.5369))
          	{
            	if(IsPlayerConnected(playerid))
				{
				    if(GetPlayerMoney(playerid) < 150)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "No tienes suficiente dinero");
				        return 1;
				    }
				    else
				    {
             			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Has comprado una camara a la CNN $150");
             			SafeGivePlayerWeapon(playerid, 43, 22);
             			SafeGivePlayerMoney(playerid, - 150);
             		}
				}
			}
		}
  		return 1;
	}
	
	if(strcmp(cmd, "/licenciapesca", true) == 0) // by DryilZas
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,360.1306,-2031.7942,7.8359))
          	{
            	if(PlayerInfo[playerid][pFishLic] == 0)
				{
				    if(GetPlayerMoney(playerid) < 10000)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "No tienes suficiente dinero");
				        return 1;
				    }
				    else
				    {
             			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has comprado tu licencia de pesca $10000");
             			SafeGivePlayerMoney(playerid, - 10000);
             			PlayerInfo[playerid][pFishLic] = 1;
             			OnPlayerUpdate(playerid);
             		}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, " Ya tienes esta licencia.");
					return 1;
				}
			}
		}
  		return 1;
	}
	
/*	if(strcmp(cmd, "/comprarexp", true) == 0) // by DryilZas
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,1858.6758,-1856.8193,13.5816))
          	{
   				if(GetPlayerMoney(playerid) < 10000)
			    {
				    SendClientMessage(playerid, COLOR_GREY, "No tienes suficiente dinero");
			    	return 1;
			    }
			    else
			    {
             		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has comprado 10 bombas lapa $10000");
             		SafeGivePlayerMoney(playerid, - 10000);
                	SafeGivePlayerWeapon(playerid, 39, 10);
             		OnPlayerUpdate(playerid);
     			}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " No estas en la base de bombas.");
				return 1;
			}
		}
  		return 1;
	} */
	
/*	if(strcmp(cmd, "/comprarbomba", true) == 0) // by DryilZas
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,2412.7363,-1426.2356,23.9848))
          	{
   				if(GetPlayerMoney(playerid) < 25000)
			    {
				    SendClientMessage(playerid, COLOR_GREY, "No tienes suficiente dinero");
			    	return 1;
			    }
			    else
			    {
             		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has comprado un explosivo termico por 25.000$.");
             		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Para explotar el cinturon usa /activarbomba.");
             		SafeGivePlayerMoney(playerid, - 25000);
             		PlayerInfo[playerid][pThermal] += 1;
               		OnPlayerUpdate(playerid);
     			}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " No estas en la base terrorista.");
				return 1;
			}
		}
  		return 1;
	} */
	
 	if(strcmp(cmd, "/comprarpalo", true) == 0) // by DryilZas
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,508.3292,-85.1550,998.9609))
          	{
   				if(GetPlayerMoney(playerid) < 150)
			    {
				    SendClientMessage(playerid, COLOR_GREY, "No tienes suficiente dinero");
			    	return 1;
			    }
			    else
			    {
             		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has comprado un palo de billar $150");
             		SafeGivePlayerMoney(playerid, - 150);
                	SafeGivePlayerWeapon(playerid, 7, 1);
             		OnPlayerUpdate(playerid);
     			}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " No estas en el bar.");
				return 1;
			}
		}
  		return 1;
	}
	if(strcmp(cmd, "/alquilarhabi", true) == 0) // by MageC
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,1712.0879,-1667.4148,20.2260))
          	{
   				if(GetPlayerMoney(playerid) < 100)
			    {
				    SendClientMessage(playerid, COLOR_GREY, "No tienes suficiente dinero");
			    	return 1;
			    }
			    else
			    {
             		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has alquilado una habitacion");
             		SafeGivePlayerMoney(playerid, - 100);
             		PlayerInfo[playerid][pOrigin] = 5;
             		OnPlayerUpdate(playerid);
     			}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " No estas en el Hotel.");
				return 1;
			}
		}
  		return 1;
	}
	if(strcmp(cmd, "/dejarhabi", true) == 0) // by MageC
	{
		if(IsPlayerConnected(playerid))
       	{
			if(PlayerToPoint(3.0,playerid,1712.0879,-1667.4148,20.2260))
          	{
   				if(PlayerInfo[playerid][pOrigin] != 5)
			    {
				    SendClientMessage(playerid, COLOR_GREY, "No tienes habitacion alquilada");
			    	return 1;
			    }
			    else
			    {
             		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has dejado la habitacion");
             		PlayerInfo[playerid][pOrigin] = 2;
             		OnPlayerUpdate(playerid);
     			}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " No estas en el Hotel.");
				return 1;
			}
		}
  		return 1;
	}
//-------------------------------[Stats]--------------------------------------------------------------------------
	if (strcmp(cmd, "/estado", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] != 0)
			{
				ShowStats(playerid,playerid);
				/*GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "* %s flips open his PDA and looks at his stats.", sendername);
			    ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);*/
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas Logueado!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/dn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz-2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not an Admin !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/up", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not an Admin !");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/volar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:px, Float:py, Float:pz, Float:pa;
				GetPlayerFacingAngle(playerid,pa);
				if(pa >= 0.0 && pa <= 22.5) //n1
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, px, py+30, pz+5);
				}
				if(pa >= 332.5 && pa < 0.0) //n2
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, px, py+30, pz+5);
				}
				if(pa >= 22.5 && pa <= 67.5) //nw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py+15, pz+5);
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, px-15, py+15, pz+5);
				}
				if(pa >= 67.5 && pa <= 112.5) //w
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-30, py, pz+5);
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, px-30, py, pz+5);
				}
				if(pa >= 112.5 && pa <= 157.5) //sw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py-15, pz+5);
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, px-15, py-15, pz+5);
				}
				if(pa >= 157.5 && pa <= 202.5) //s
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py-30, pz+5);
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, px, py-30, pz+5);
				}
				if(pa >= 202.5 && pa <= 247.5)//se
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py-15, pz+5);
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, px+15, py-15, pz+5);
				}
				if(pa >= 247.5 && pa <= 292.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+30, py, pz+5);
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, px+30, py, pz+5);
				}
				if(pa >= 292.5 && pa <= 332.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py+15, pz+5);
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, px+15, py+15, pz+5);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not an Admin !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/lt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly+2, slz);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not an Admin !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly-2, slz-2);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not an Admin !");
			}
		}
		return 1;
	}
//-------------------------------[Check]--------------------------------------------------------------------------
	if (strcmp(cmd, "/check", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /check [ID o Nombre]");
					return 1;
				}
				//giveplayerid = strval(tmp);
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						ShowStats(playerid,giveplayerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   No Such Player");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You are not an admin");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/numero", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pPhoneBook] == 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /numero [ID o Nombre]");
					return 1;
				}
				//giveplayerid = strval(tmp);
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(PlayerInfo[giveplayerid][pHideNumber] == 1)
				        {
							GetPlayerName(giveplayerid, sendername, sizeof(sendername));
							format(string, 256, "Nombre: %s, Tlf: Oculto",sendername);
							SendClientMessage(playerid, COLOR_GRAD1, string);
						}
						else
						{
						    GetPlayerName(giveplayerid, sendername, sizeof(sendername));
							format(string, 256, "Nombre: %s, Tlf: %d",sendername,PlayerInfo[giveplayerid][pPnumber]);
							SendClientMessage(playerid, COLOR_GRAD1, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   No encontrado !");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No tienes la agenda telefonica !");
			}
		}
		return 1;
	}
//-------------------------------[LevelUp]--------------------------------------------------------------------------
	if (strcmp(cmd, "/subirnivel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] != 0)
			{
				/*PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);*/
				if(PlayerInfo[playerid][pLevel] >= 0)
				{
					new nxtlevel = PlayerInfo[playerid][pLevel]+1;
					/*new costlevel = nxtlevel*levelcost;//10k for testing purposes*/
					new expamount = nxtlevel*levelexp;
					new infostring[256];
					/*if(GetPlayerMoney(playerid) < costlevel)
					{
						format(infostring, 256, "   You do not have enough Cash ($%d)!",costlevel);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						return 1;
					}*/
					if (PlayerInfo[playerid][pExp] < expamount)
					{
						format(infostring, 256, "   Necesitas %d puntos de respeto, y solo tienes [%d] !",expamount,PlayerInfo[playerid][pExp]);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						return 1;
					}
					else
					{
						format(string, sizeof(string), "~g~SUBES DE NIVEL~n~~w~Ahora eres nivel %d", nxtlevel);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic(playerid);
						/*SafeGivePlayerMoney(playerid, (-costlevel));*/
						PlayerInfo[playerid][pLevel]++;
						PlayerInfo[playerid][pExp] = PlayerInfo[playerid][pExp] - expamount;
						PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
						GameTextForPlayer(playerid, string, 5000, 1);
						format(infostring, 256, "   Ahora eres de nivel %d Usa /mejora para ver tus actualizaciones disponibles", nxtlevel);
						SendClientMessage(playerid, COLOR_GRAD1, infostring);
						format(infostring, 256, "   Posees %d puntos de mejora",PlayerInfo[playerid][gPupgrade]);
						SendClientMessage(playerid, COLOR_GRAD2, infostring);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas Logueado !");
			}
		}
		return 1;
	}
//-------------------------------[UPGRADE]--------------------------------------------------------------------------
	/*if (strcmp(cmd, "/carcolor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD3,"($5000) ESCRIBE: /carcolor [color 1 - 2] [color number]");
					return 1;
				}
				new colornum = strval(tmp);
				if(colornum > 2 || colornum < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD3,"Choices are 1 or 2");
					return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD3,"($5000) ESCRIBE: /carcolor [color 1 - 2] [color number]");
				}
				new color = strval(tmp);
				if(color > 126)
				{
					SendClientMessage(playerid, COLOR_GRAD3,"Maximum is 126");
					return 1;
				}
				if (GetPlayerMoney(playerid) < 5000)
				{
					SendClientMessage(playerid, COLOR_GRAD3,"You can't afford that ($5000)");
				}
				if(colornum == 1)
				{
					HouseInfo[house][hVcol1] = color;
					format(string, sizeof(string), "Car color 1 set to %d -$5000",color);
					SendClientMessage(playerid, COLOR_GRAD3,string);
				}
				else
				{
					HouseInfo[house][hVcol2] = color;
					format(string, sizeof(string), "Car color 2 set to %d -$5000",color);
					SendClientMessage(playerid, COLOR_GRAD3,string);
				}
				SendClientMessage(playerid, COLOR_GRAD6, "Your new paintjob will be complete within 24 hours");
				SafeGivePlayerMoney(playerid,-5000);
				SBizzInfo[5][sbTill] += 5000;
				ExtortionSBiz(5, 5000);
				PlayerPlaySound(giveplayerid, 1134, 0.0, 0.0, 0.0);
				OnPropUpdate();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house");
				return 1;
			}
		}
		return 1;
	}*/
	/*if (strcmp(cmd, "/carupgrade", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				new gunid[16];
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					format(string, sizeof(string), "ESCRIBE: /carupgrade [carname]");
					SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					SendClientMessage(playerid, COLOR_WHITE,"*** CAR UPGRADES Cost $100000 ***");
					SendClientMessage(playerid, COLOR_GRAD2,string);
					if(PlayerInfo[playerid][pLevel] >= 3)
					{
						SendClientMessage(playerid, COLOR_GRAD3, "Cars: blistacompact clover elegant emperor glendale greenwood");
						SendClientMessage(playerid, COLOR_GRAD3, "Cars: huntley jester landstalker merit nebula sabre stratum");
						SendClientMessage(playerid, COLOR_GRAD3, "Cars: sunrise tahoma uranus maverick");
						SendClientMessage(playerid, COLOR_GRAD3, "Donation cars: maverick stretch elegy phoenix hotknife bandito sultan");
					}
					SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					return 1;
				}
				if(SBizzInfo[5][sbProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
				}
				strmid(gunid, tmp, 0, strlen(cmdtext), 255);
				if (GetPlayerMoney(playerid) > 100000)
				{
					if(strcmp(gunid, "stretch", true, strlen(gunid)) == 0)
					{
					    if(PlayerInfo[playerid][pDonateRank] < 1)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   You don't have a Premium Account !");
					        return 1;
					    }
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Stretch");
						HouseInfo[house][hVec] = 409;
					}
					else if(strcmp(gunid, "hotknife", true, strlen(gunid)) == 0)
					{
					    if(PlayerInfo[playerid][pDonateRank] < 1)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   You don't have a Premium Account !");
					        return 1;
					    }
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Hotknife");
						HouseInfo[house][hVec] = 434;
					}
					else if(strcmp(gunid, "bandito", true, strlen(gunid)) == 0)
					{
					    if(PlayerInfo[playerid][pDonateRank] < 1)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   You don't have a Premium Account !");
					        return 1;
					    }
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Bandito");
						HouseInfo[house][hVec] = 568;
					}
					else if(strcmp(gunid, "sultan", true, strlen(gunid)) == 0)
					{
					    if(PlayerInfo[playerid][pDonateRank] < 1)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   You don't have a Premium Account !");
					        return 1;
					    }
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Sultan");
						HouseInfo[house][hVec] = 560;
					}
					else if(strcmp(gunid, "elegy", true, strlen(gunid)) == 0)
					{
					    if(PlayerInfo[playerid][pDonateRank] < 1)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   You don't have a Premium Account !");
					        return 1;
					    }
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Elegy");
						HouseInfo[house][hVec] = 562;
	                }
					else if(strcmp(gunid, "maverick", true, strlen(gunid)) == 0)
					{
					    if(PlayerInfo[playerid][pDonateRank] < 1)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   You don't have a Premium Account !");
					        return 1;
					    }
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Maverick");
						HouseInfo[house][hVec] = 487;
					}
					else if(strcmp(gunid, "phoenix", true, strlen(gunid)) == 0)
					{
					    if(PlayerInfo[playerid][pDonateRank] < 1)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   You don't have a Premium Account !");
					        return 1;
					    }
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Phoenix");
						HouseInfo[house][hVec] = 603;
					}
					else if(strcmp(gunid, "blistacompact", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Blista Compact");
						HouseInfo[house][hVec] = 496;
					}
					else if(strcmp(gunid, "clover", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Clover");
						HouseInfo[house][hVec] = 542;
					}
					else if(strcmp(gunid, "elegant", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Elegant");
						HouseInfo[house][hVec] = 507;
					}
					else if(strcmp(gunid, "emperor", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Emperor");
						HouseInfo[house][hVec] = 585;
					}
					else if(strcmp(gunid, "glendale", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Glendale");
						HouseInfo[house][hVec] = 466;
					}
					else if(strcmp(gunid, "greenwood", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Greenwood");
						HouseInfo[house][hVec] = 492;
					}
					else if(strcmp(gunid, "huntley", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Huntley");
						HouseInfo[house][hVec] = 579;
					}
					else if(strcmp(gunid, "jester", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Jester");
						HouseInfo[house][hVec] = 559;
					}
					else if(strcmp(gunid, "landstalker", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Landstalker");
						HouseInfo[house][hVec] = 400;
					}
					else if(strcmp(gunid, "merit", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Merit");
						HouseInfo[house][hVec] = 551;
					}
					else if(strcmp(gunid, "nebula", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Nebula");
						HouseInfo[house][hVec] = 516;
					}
					else if(strcmp(gunid, "sabre", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Sabre");
						HouseInfo[house][hVec] = 475;
					}
					else if(strcmp(gunid, "stratum", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Stratum");
						HouseInfo[house][hVec] = 561;
					}
					else if(strcmp(gunid, "sunrise", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Sunrise");
						HouseInfo[house][hVec] = 550;
					}
					else if(strcmp(gunid, "tahoma", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Tahoma");
						HouseInfo[house][hVec] = 566;
					}
					else if(strcmp(gunid, "uranus", true, strlen(gunid)) == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Uranus");
						HouseInfo[house][hVec] = 558;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Unrecognized Car or Donate Rank not High enough.");
						return 1;
					}
					SendClientMessage(playerid, COLOR_GRAD6, "Your new car will be delivered within 24 hours -$100000");
					OnPropUpdate();
					SafeGivePlayerMoney(playerid,-100000);
					SBizzInfo[5][sbTill] += 100000;
					ExtortionSBiz(5, 100000);
					SBizzInfo[5][sbProducts]--;
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You can't afford that ($100000)");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house");
				return 1;
			}
		}
		return 1;
	}*/
	if (strcmp(cmd, "/borrarmejoras", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas Logueado !");
				return 1;
			}
			if (GetPlayerMoney(playerid) < 15000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Cuesta $15000 !");
				return 1;
			}
			if (PlayerInfo[playerid][pLevel] < 2)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Necesitas Lvl 2 !");
				return 1;
			}
			PlayerInfo[playerid][gPupgrade] = (PlayerInfo[playerid][pLevel]-1)*2;
			PlayerInfo[playerid][pSHealth] = 0.0;
			PlayerInfo[playerid][pAlcoholPerk] = 0;
			PlayerInfo[playerid][pDrugPerk] = 0;
			PlayerInfo[playerid][pMiserPerk] = 0;
			PlayerInfo[playerid][pPainPerk] = 0;
			PlayerInfo[playerid][pTraderPerk] = 0;
			SafeGivePlayerMoney(playerid,-15000);
			PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			format(string, 256, "   Ahora tienes %d puntos de mejora !",PlayerInfo[playerid][gPupgrade]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
		return 1;
	}
	if (strcmp(cmd, "/comprargun", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerMoney(playerid) < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You dont have enough money with you !");
			    return 1;
			}
			new gun;
			new gunid[16];
			new gunstring1[256];
			new gunstring2[256];
			new gunstring3[256];
			new gunstring4[256];
			new gunstring5[256];
			new infostring[256];
			new guncharge;
			new ammocharge;
			new location = PlayerInfo[playerid][pLocal];
			if(location == 99 || location == 100 || location == 102)
			{
			    if(BizzInfo[location-99][bProducts] <= 0)
			    {
			        GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
			    }
				new mody = 100;
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					format(string, sizeof(string), "ESCRIBE: /comprargun [gunname] [ammoamount]");
					SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					SendClientMessage(playerid, COLOR_WHITE,"*** Guns & Ammo ***");
					SendClientMessage(playerid, COLOR_GRAD2,string);
					format(gunstring1, 256, "Weapons: parachute ($%d) golfclub ($%d) nightstick ($%d) baseballbat ($%d) shovel ($%d) poolcue ($%d)",
					GunPrice[0][0]/100*mody,GunPrice[1][0]/100*mody,GunPrice[2][0]/100*mody,GunPrice[3][0]/100*mody,GunPrice[4][0]/100*mody,GunPrice[5][0]/100*mody,GunPrice[6][0]/100*mody);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
					format(gunstring2, 256, "Weapons: purpledildo ($%d) whitedildo ($%d) longwhitedildo ($%d) whitedildo2 ($%d) flowers ($%d) cane",
					GunPrice[7][0]/100*mody,GunPrice[8][0]/100*mody,GunPrice[9][0]/100*mody,GunPrice[10][0]/100*mody,GunPrice[11][0]/100*mody,GunPrice[12][0]/100*mody);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring2);
					format(gunstring3, 256, "Weapons: sdpistol ($%d) deagle ($%d) mp5 ($%d)",
					GunPrice[13][0]/100*mody,GunPrice[14][0]/100*mody,GunPrice[15][0]/100*mody,GunPrice[16][0]/100*mody,GunPrice[17][0]/100*mody,GunPrice[18][0]/100*mody);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring3);
					format(gunstring4, 256, "Weapons: shotgun ($%d) ak47 ($%d) m4 ($%d) rifle ($%d)",
					GunPrice[19][0]/100*mody,GunPrice[20][0]/100*mody,GunPrice[21][0]/100*mody,GunPrice[22][0]/100*mody,GunPrice[23][0]/100*mody,GunPrice[24][0]/100*mody);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring4);
					format(gunstring5, 256, "Weapons: pistolammo ($%d) shotgunammo ($%d) smgammo ($%d) assaultammo ($%d) rifleammo ($%d)",
					GunPrice[25][0],GunPrice[26][0],GunPrice[27][0],GunPrice[28][0],GunPrice[29][0]);
					SendClientMessage(playerid, COLOR_GRAD3, gunstring5);
					SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					return 1;
				}
				strmid(gunid, tmp, 0, strlen(cmdtext), 255);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					format(string, sizeof(string), "ESCRIBE: /comprargun [gunname] [ammoamount]");
					return 1;
				}
				new ammo = strval(tmp);
				if(ammo < 1 || ammo > 999) { SendClientMessage(playerid, COLOR_GREY, "   Ammo ammount not lower then 1 or higher then 999 !"); return 1; }
				if (strcmp(gunid, "parachute", true, strlen(gunid)) == 0)
				{
					gun = 46;
					guncharge = GunPrice[0][0]/100*mody;
					ammocharge = 0;
				}
				else if (strcmp(gunid, "golfclub", true, strlen(gunid)) == 0)
				{
					gun = 2; guncharge = GunPrice[1][0]/100*mody; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 2; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "nightstick", true, strlen(gunid)) == 0)
				{
					gun = 3; guncharge = GunPrice[2][0]/100*mody; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 3; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "baseballbat", true, strlen(gunid)) == 0)
				{
					gun = 5; guncharge = GunPrice[4][0]/100*mody; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 5; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "shovel", true, strlen(gunid)) == 0)
				{
					gun = 6; guncharge = GunPrice[5][0]/100*mody; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 6; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "poolcue", true, strlen(gunid)) == 0)
				{
					gun = 7; guncharge = GunPrice[6][0]/100*mody; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 7; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "purpledildo", true, strlen(gunid)) == 0)
				{
					gun = 10; guncharge = GunPrice[7][0]/100*mody; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 10; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "whitedildo", true, strlen(gunid)) == 0)
				{
					gun = 11; guncharge = GunPrice[8][0]/100*mody; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 11; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "longwhitedildo", true, strlen(gunid)) == 0)
				{
					gun = 12; guncharge = GunPrice[9][0]/100*mody; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 12; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "whitedildo2", true, strlen(gunid)) == 0)
				{
					gun = 13; guncharge = GunPrice[10][0]/100*mody; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 13; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "flowers", true, strlen(gunid)) == 0)
				{
					gun = 14; guncharge = GunPrice[11][0]/100*mody; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 14; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "cane", true, strlen(gunid)) == 0)
				{
					gun = 15; guncharge = GunPrice[12][0]/100*mody; ammocharge = 0;
					//PlayerInfo[playerid][pGun1] = 15; PlayerInfo[playerid][pAmmo1] = 1;
				}
				else if (strcmp(gunid, "sdpistol", true, strlen(gunid)) == 0)
				{
					gun = 23; guncharge = GunPrice[13][0]/100*mody; ammocharge = GunPrice[25][0]*ammo;
					//PlayerInfo[playerid][pGun2] = 23; PlayerInfo[playerid][pAmmo2] = ammo;
				}
				else if (strcmp(gunid, "deagle", true, strlen(gunid)) == 0)
				{
					gun = 24; guncharge = GunPrice[15][0]/100*mody; ammocharge = GunPrice[25][0]*ammo;
					//PlayerInfo[playerid][pGun2] = 24; PlayerInfo[playerid][pAmmo2] = ammo;
				}
				else if (strcmp(gunid, "mp5", true, strlen(gunid)) == 0)
				{
					gun = 29; guncharge = GunPrice[18][0]/100*mody; ammocharge = GunPrice[27][0]*ammo;
					//PlayerInfo[playerid][pGun3] = 29; PlayerInfo[playerid][pAmmo3] = ammo;
				}
				else if (strcmp(gunid, "shotgun", true, strlen(gunid)) == 0)
				{
					gun = 25; guncharge = GunPrice[19][0]/100*mody; ammocharge = GunPrice[26][0]*ammo;
					//PlayerInfo[playerid][pGun3] = 25; PlayerInfo[playerid][pAmmo3] = ammo;
				}
				else if (strcmp(gunid, "ak47", true, strlen(gunid)) == 0)
				{
					gun = 30; guncharge = GunPrice[22][0]/100*mody; ammocharge = GunPrice[28][0]*ammo;
					//PlayerInfo[playerid][pGun4] = 30; PlayerInfo[playerid][pAmmo4] = ammo;
				}
				else if (strcmp(gunid, "m4", true, strlen(gunid)) == 0)
				{
					gun = 31; guncharge = GunPrice[23][0]/100*mody; ammocharge = GunPrice[28][0]*ammo;
					//PlayerInfo[playerid][pGun4] = 31; PlayerInfo[playerid][pAmmo4] = ammo;
				}
				else if (strcmp(gunid, "rifle", true, strlen(gunid)) == 0)
				{
					gun = 33; guncharge = GunPrice[24][0]/100*mody; ammocharge = GunPrice[29][0]*ammo;
					//PlayerInfo[playerid][pGun4] = 33; PlayerInfo[playerid][pAmmo4] = ammo;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "ShopKeeper Dice: I have never heard of that weapon.");
					return 1;
				}
				if((guncharge+ammocharge) > GetPlayerMoney(playerid))
				{
					format(infostring, 256, "   You don't have $%d !",guncharge+ammocharge);
					SendClientMessage(playerid, COLOR_GRAD3, infostring);
					return 1;
				}
				if(GetPlayerMoney(playerid) < (guncharge+ammocharge))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Can't afford that !");
				    return 1;
				}
				new payout = guncharge + ammocharge;
				format(infostring, 256, "You have purchased %s with %d ammo for $%d",gunid,ammo,payout);
				SendClientMessage(playerid, COLOR_GRAD3, infostring);
				if(location == 102 && IsACop(playerid)) { }
				else { SafeGivePlayerMoney(playerid, - payout); }
				BizzInfo[location-99][bTill] += payout;
				ExtortionBiz(location-99, payout);
				BizzInfo[location-99][bProducts]--;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SafeGivePlayerWeapon(playerid, gun, ammo);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s bought weapons for $%d at biz %d", sendername, payout, location-99);
				printf("%s", string);
				PayLog(string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE,"You are not in a store.");
				return 1;
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/mejora", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new gunid[16];
			new infostring[256];
			new upgradepoints = PlayerInfo[playerid][gPupgrade] - 1;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				format(string, sizeof(string), "ESCRIBE: /mejora [Nombre] (Posees %d puntos libres)",upgradepoints);
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"*** Mejoras *** puedes resetearlas poniendo /borrarmejoras (-15k)");
				SendClientMessage(playerid, COLOR_GRAD2,string);
				SendClientMessage(playerid, COLOR_GRAD5, "Aumentar vida inicial (5): vida (Lvl-1)");
				SendClientMessage(playerid, COLOR_GRAD5, "Bloquear ataques: Anticacos (Lvl-6)");
				SendClientMessage(playerid, COLOR_GRAD5, "Nivel de armas: Armado (Lvl-8)");
				SendClientMessage(playerid, COLOR_GRAD5, "999: 999 (Lvl-999)");
				//SendClientMessage(playerid, COLOR_GRAD5, "Armas Iniciales: Reglamentarias (Lvl-12)");
				SendClientMessage(playerid, COLOR_GRAD5, "Blindaje Inicial (10): Chaleco (Lvl-15)");
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				return 1;
			}
			strmid(gunid, tmp, 0, strlen(cmdtext), 255);
			if (PlayerInfo[playerid][gPupgrade] > 1)
			{
				if (PlayerInfo[playerid][pLevel] >= 1 && (strcmp(gunid, "vida", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pSHealth] < 50)
					{
						PlayerInfo[playerid][pSHealth] = PlayerInfo[playerid][pSHealth]+5.0;
						format(infostring, 256, "Mejora: Aumentas tu vida inicial a %.2f Vida (+5)",PlayerInfo[playerid][pSHealth]+50);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Ya tienes el maximo de vida inicial");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 15 && (strcmp(gunid, "chaleco", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pAlcoholPerk] < 10)
					{
						PlayerInfo[playerid][pAlcoholPerk] += 1;
						format(infostring, 256, "Mejora: Aumentas tu escudo inicial a %d.",10*PlayerInfo[playerid][pAlcoholPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   El limite de armadura es 100 !");
						return 1;
					}
				}
			/*	else if (PlayerInfo[playerid][pLevel] >= 12 && (strcmp(gunid, "reglamentarias", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pDrugPerk] < 3)
					{
						PlayerInfo[playerid][pDrugPerk] += 1;
						PlayerInfo[playerid][gPupgrade]--;
						if (PlayerInfo[playerid][pDrugPerk] == 1)
						{
							format(infostring, 256, "Mejoras: Reapareces con una colt45.");
						}
						if (PlayerInfo[playerid][pDrugPerk] == 2)
						{
							format(infostring, 256, "Mejoras: Reapareces con una colt45 y una Mac10.");
						}
						if (PlayerInfo[playerid][pDrugPerk] == 3)
						{
							format(infostring, 256, "Mejoras: Reapareces con una colt45, una Mac10 con mas municion.");
						}
						if (PlayerInfo[playerid][pDrugPerk] == 1)
    					{
    						SafeGivePlayerWeapon(playerid, 22, 51);
    					}
    					if (PlayerInfo[playerid][pDrugPerk] == 2)
    					{
  							SafeGivePlayerWeapon(playerid, 22, 51);
							SafeGivePlayerWeapon(playerid, 28, 150);
    					}
    					if (PlayerInfo[playerid][pDrugPerk] == 3)
    					{
    						SafeGivePlayerWeapon(playerid, 22, 102);
							SafeGivePlayerWeapon(playerid, 28, 300);
    					}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   No puedes conseguir mas armas en tu Spawn !");
						return 1;
					}
				} */
				else if (PlayerInfo[playerid][pLevel] >= 8 && (strcmp(gunid, "armado", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pMiserPerk] < 5)
					{
						PlayerInfo[playerid][pMiserPerk] += 1;
						format(infostring, 256, "Mejora: Nu nivel de Armas ahora es %d.",PlayerInfo[playerid][pMiserPerk]);
						PlayerInfo[playerid][gPupgrade]--;
						if (PlayerInfo[playerid][pMiserPerk] == 1)
						{
							SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 200);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 200);
   							SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 200);
   							SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 200);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 200);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 200);
							SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 200);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 200);
							SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 200);
							SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 200);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 200);
    					}
    					if (PlayerInfo[playerid][pMiserPerk] == 2)
    					{
							SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 350);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 350);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 350);
   							SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 350);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 350);
   							SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 350);
   							SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 350);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 350);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 350);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 350);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 350);
						}
    					if (PlayerInfo[playerid][pMiserPerk] == 3)
    					{
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 500);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 500);
   							SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 500);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 500);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 500);
   							SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 500);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 500);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 500);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 500);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 500);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 500);
    					}
    					if (PlayerInfo[playerid][pMiserPerk] == 4)
						{
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 800);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 800);
   							SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 800);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 800);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 800);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 800);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 800);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 800);
   							SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 800);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 800);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 800);
    					}
    					if (PlayerInfo[playerid][pMiserPerk] == 5)
    					{
  							SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1000);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 1000);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 1000);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 1000);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1000);
   							SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 1000);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1000);
   							SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 1000);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 1000);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 1000);
    						SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 1000);
    					}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Ya posees el nivel maximo de armas /5/ !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 6 && (strcmp(gunid, "anticacos", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pTraderPerk] < 1)
					{
						PlayerInfo[playerid][pTraderPerk] += 1;
						format(infostring, 256, "Mejora: Ahora no podran robarte ni dejarte KO, ademas tendras ofertas en 24/7's.");
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Solo puedes activar esto una vez !");
						return 1;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 999 && (strcmp(gunid, "999", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pPainPerk] < 1)
					{
						PlayerInfo[playerid][pPainPerk] += 1;
						format(infostring, 256, "texto999.");
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Solo puedes activar esto una vez 999!");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "   Mejora desconocida o insuficiente nivel.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   No te quedan puntos de mejora");
				return 1;
			}
			SendClientMessage(playerid, COLOR_GRAD6, infostring);
			PlayerInfo[playerid][gPupgrade]--;
		}
		return 1;
	}
	
//-------------------------------[Login]--------------------------------------------------------------------------
	if (strcmp(cmd, "/login", true) ==0 || strcmp(cmd, "/l", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new tmppass[64];
			if(gPlayerLogged[playerid] == 1)
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "SERVIDOR: Tu ya estas logueado.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "COMANDO: (/l)ogin [Contraseña]");
				return 1;
			}
			strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
			//Encrypt(tmppass);
			OnPlayerLogin(playerid,tmppass);
		}
		return 1;
	}
	
	//-----------Register---------------
	if (strcmp(cmd, "/registro", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "SERVIDOR: Tu estas logueado ahora mismo.");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "users/%s.ini", sendername);
			new File: hFile = fopen(string, io_read);
			if (hFile)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Nombre de usuario que ya está ocupado, por favor, elija uno diferente.");
				fclose(hFile);
				return 1;
			}
	        new tmppass[64];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "COMANDO: /registro [Contraseña]");
				return 1;
			}
			strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
			//Encrypt(tmppass);
			OnPlayerRegister(playerid,tmppass);
		}
		return 1;
	}
//----------------------------------[ooc]-----------------------------------------------
	/*if(strcmp(cmd, "/admin", true) == 0 || strcmp(cmd, "/say", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
			if ((noooc) && PlayerInfo[playerid][pAdmin] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   The OOC channel has been disabled by an Admin !");
				return 1;
			}
			if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "   You can't speak, you have been silenced !");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/o)oc [ooc chat]");
				return 1;
			}
			format(string, sizeof(string), "(( %s: %s ))", sendername, result);
			OOCOff(COLOR_OOC,string);
			printf("%s", string);
		}
		return 1;
	}*/
	if(strcmp(cmd, "/noooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3 && (!noooc))
			{
				noooc = 1;
				BroadCast(COLOR_GRAD2, "   OOC chat channel disabled by an Admin !");
			}
			else if (PlayerInfo[playerid][pAdmin] >= 3 && (noooc))
			{
				noooc = 0;
				BroadCast(COLOR_GRAD2, "   OOC chat channel enabled by an Admin !");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/speedo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gSpeedo[playerid] == 1)
			{
				gSpeedo[playerid] = 2;
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~on", 5000, 5);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
			else if (gSpeedo[playerid] == 2)
			{
				gSpeedo[playerid] = 1;
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~off", 5000, 5);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "you dont have a speedometer");
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/vergasolina", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gGas[playerid] == 0)
			{
				gGas[playerid] = 1;
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~Gasolina on", 5000, 5);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
			else if (gGas[playerid] == 1)
			{
				gGas[playerid] = 0;
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~Gasolina off", 5000, 5);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
		}
		return 1;
	}
//----------------------------------[advertise]-----------------------------------------------
	if(strcmp(cmd, "/anuncio", true) == 0 || strcmp(cmd, "/an", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLevel] < 2)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Necesitas ser nivel 2 !");
	            return 1;
	        }
	        /*if(!PlayerToPoint(3.0,playerid,2041.4005,-1409.8962,17.1641))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Tu no estas en la CNN !");
	            return 1;
	        }*/
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: (/an)uncio [Texto]");
				return 1;
			}
			if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1))
			{
				format(string, sizeof(string), "   Necesitas esperar %d segundos mas !",  (addtimer/1000));
				SendClientMessage(playerid, COLOR_GRAD2, string);
				return 1;

			}
			new payout = idx * 5;
			if(GetPlayerMoney(playerid) < payout)
	        {
	            format(string, sizeof(string), "* No puedes poner un anuncio con %d letras, cuesta $%d.", offset, payout);
	            SendClientMessage(playerid, COLOR_WHITE, string);
	            return 1;
	        }
			SafeGivePlayerMoney(playerid, - payout);
			SBizzInfo[7][sbTill] += payout;
			ExtortionSBiz(7, payout);
			format(string, sizeof(string), "[Anuncio] %s, Telefono: %d",  result, PlayerInfo[playerid][pPnumber]);
			OOCNews(TEAM_GROVE_COLOR,string);
			format(string, sizeof(string), "Anuncio publicado por: %s", sendername);
			ABroadCast(COLOR_YELLOW,string);
			format(string, sizeof(string), "~r~Pagas $%d~n~~w~Por un anuncio de: %d letras", payout, idx);
			GameTextForPlayer(playerid, string, 5000, 1);
			if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
		}
		return 1;
	}
//----------------------------------[government]-----------------------------------------------
	if(strcmp(cmd, "/gobierno", true) == 0 || strcmp(cmd, "/gob", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] != 2)
			{
			    if(PlayerInfo[playerid][pLeader] != 7)
			    {
			    	SendClientMessage(playerid, COLOR_GREY, "   You are not a Cop !");
			    	return 1;
				}
			}
			if(PlayerInfo[playerid][pRank] < 6)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You need to be Rank 6 to be able to use this !");
			    return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/gob)ierno [texto]");
				return 1;
			}
			SendClientMessageToAll(COLOR_WHITE, "|___________ Gobierno de Los Santos ___________|");
			if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			{
				if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "Comisario %s: %s", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "Sub-Jefe %s: %s", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "Capitan %s: %s", sendername, result); }
				SendClientMessageToAll(COLOR_BLUE, string);
			}
			else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
				format(string, sizeof(string), "Agente %s: %s", sendername, result);
				SendClientMessageToAll(COLOR_GRAD2, string);
			}
			else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
				format(string, sizeof(string), "Soldado %s: %s", sendername, result);
				SendClientMessageToAll(COLOR_GREEN, string);
			}
			else if(PlayerInfo[playerid][pLeader] == 7)
			{
				format(string, sizeof(string), "Mayor %s: %s", sendername, result);
				SendClientMessageToAll(COLOR_GREY, string);
			}
		}
		return 1;
	}
//----------------------------------[togooc]-----------------------------------------------

	if(strcmp(cmd, "/qooc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gOoc[playerid])
			{
				gOoc[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Canal OOC no visible !");
			}
			else if (gOoc[playerid])
			{
				gOoc[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Canal OOC Visible !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/qnoticias", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gNews[playerid])
			{
				gNews[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Canal de NOTICIAS no visible !");
			}
			else if (gNews[playerid])
			{
				gNews[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Canal de NOTICIAS visible !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/qfaccion", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gFam[playerid])
			{
				gFam[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Canal de FACCION no visible !");
			}
			else if (gFam[playerid])
			{
				gFam[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Canal de FACCION visible !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/qmp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!HidePM[playerid])
			{
				HidePM[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Mensajes privados (/P) Desactivados !");
			}
			else if (HidePM[playerid])
			{
				HidePM[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Mensajes privados (/P) Activados !");
			}
		}
		return 1;
	}
		if(strcmp(cmd, "/qadmin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!HideAdmin[playerid])
			{
				HideAdmin[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Mensajes de administración Desactivados !");
			}
			else if (HideAdmin[playerid])
			{
				HideAdmin[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Mensajes de administración Activados !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/qcmds", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!gSnoop[playerid])
			{
				gSnoop[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Mensajes de comandos Activados!");
			}
			else if (gSnoop[playerid])
			{
				gSnoop[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Mensajes de comandos Desactivados  !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/telefono", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!PhoneOnline[playerid])
			{
				PhoneOnline[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Has apagado tu telefono !");
			}
			else if (PhoneOnline[playerid])
			{
				PhoneOnline[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Has encendido tu telefono !");
			}
		}
		return 1;
	}
//----------------------------------[Intentar]-----------------------------------------------
	if(strcmp(cmd, "/intentar", true) == 0 || strcmp(cmd, "/in", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Tu no estas logueado!");
	            return 1;
	        }
	        if(nointentar[playerid] == 1) // by MageC
        	{
	            	SendClientMessage(playerid, COLOR_WHITE, "   Debes esperar un poco para volver a usar este comando.");
	            	return 1;
        	}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAR: /intentar [accion]");
				return 1;
			}
            new randcard1 = random(10);
			if(randcard1 >= 6)
            {
                if(PlayerInfo[playerid][pMaskuse] == 1)
				{
			    	format(string, sizeof(string), "* Enmascarado intenta %s y falla", result);
			    	ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
			 		printf("%s", string);
		 		    nointentar[playerid] = 1;
			 		SetTimerEx("tiemponointentar", 10000, false, "i", playerid);
			    	return 1;
				}
				format(string, sizeof(string), "* %s intenta %s y falla", sendername, result);
		     	ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
			 	printf("%s", string);
		 	    nointentar[playerid] = 1;
			 	SetTimerEx("tiemponointentar", 10000, false, "i", playerid);
			 	return 1;
             }
             else if(randcard1 <= 5)
            {
                if(PlayerInfo[playerid][pMaskuse] == 1)
				{
			    	format(string, sizeof(string), "* Enmascarado intenta %s y lo consigue", result);
			    	ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
			 		printf("%s", string);
		 		    nointentar[playerid] = 1;
			 		SetTimerEx("tiemponointentar", 10000, false, "i", playerid);
			    	return 1;
				}
			   format(string, sizeof(string), "* %s intenta %s y lo consigue", sendername, result);
		       ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
			   printf("%s", string);
		       nointentar[playerid] = 1;
			   SetTimerEx("tiemponointentar", 10000, false, "i", playerid);
			   return 1;
             }


		}
		return 1;
	}
	
	/*if(strcmp(cmd, "/roliar", true) == 0 || strcmp(cmd, "/rolear", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Tu no estas logueado!");
	            return 1;
	        }
	        if (PlayerInfo[playerid][pAdmin] >= 1)
	        {
	        SendClientMessage(playerid, COLOR_GREY, "   No eres Moderador !");
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
            new randcard1 = random(10);
			if(randcard1 >= 6)
            {
                if(PlayerInfo[playerid][pMaskuse] == 1)
				{
			    	format(string, sizeof(string), "* Desconocido intenta roliar bien y falla.");
			    	ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
			 		printf("%s", string);
			 		format(string, sizeof(string), "* Desconocido es tonto.", sendername);
   					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   		printf("%s", string);
			    	return 1;
				}
				format(string, sizeof(string), "* %s intenta roliar bien y falla", sendername);
		     	ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
			 	printf("%s", string);
			 	format(string, sizeof(string), "* %s es tonto.", sendername);
		       	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   	printf("%s", string);
			 	return 1;
             }
             else if(randcard1 <= 5)
            {
                if(PlayerInfo[playerid][pMaskuse] == 1)
				{
			    	format(string, sizeof(string), "* Desconocido intenta roliar bien y lo consigue.");
			    	ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
			 		printf("%s", string);
			 		format(string, sizeof(string), "* Desconocido es el mejor roler del mundo.", sendername);
		       		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   		printf("%s", string);
			    	return 1;
				}
			   format(string, sizeof(string), "* %s intenta roliar bien y lo consigue.", sendername);
		       ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
			   printf("%s", string);
			   format(string, sizeof(string), "* %s es el mejor roler del mundo.", sendername);
		       ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			   printf("%s", string);
			   return 1;
             }
		}
		return 1;
	}*/
//----------------------------------[Emote]-----------------------------------------------
	if(strcmp(cmd, "/me", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /me [action]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
			    format(string, sizeof(string), "* Enmascarado %s", result);
			}
			else
			{
				format(string, sizeof(string), "* %s %s", sendername, result);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
		}
		return 1;
	}

//----------------------------------[Try]-----------------------------------------------
	if(strcmp(cmd, "/try", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /try [action]");
				return 1;
			}
			new randa = random(2)+1;
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				if(randa == 1) format(string, sizeof(string), "*** Enmascarado tries %s and succeeds", result);
				else format(string, sizeof(string), "*** Enmascarado tries %s, but fails", result);
			}
			else
			{
			    if(randa == 1) format(string, sizeof(string), "*** %s tries %s and succeeds", sendername, result);
				else format(string, sizeof(string), "*** %s tries %s, but fails", sendername, result);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
		}
		return 1;
	}
	
//----------------------------------[Do]-----------------------------------------------
	if(strcmp(cmd, "/do", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /do [action]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
			    format(string, sizeof(string), "* %s (( Enmascarado ))", result);
			}
			else
			{
				format(string, sizeof(string), "* %s (( %s ))", result, sendername);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
		}
		return 1;
	}
/*	//----------------------------------[descripción]-----------------------------------------------
	{
    if (strcmp("/desc", cmd, true) == 0)
    {
       if(ConEstado[playerid] == 0)
       {
      new length = strlen(cmdtext);
      while ((idx < length) && (cmdtext[idx] <= ' '))
      {
      idx++;
      }
      new offset = idx;
      new result[64];
           while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
         {
            result[idx - offset] = cmdtext[idx];
            idx++;
            }
            result[idx - offset] = EOS;
         format(string, sizeof(string), "Estado:{FFFFFF}%s",result);
         estado[playerid] = Create3DTextLabel(string,POSITIVO,30.0,40.0,5.0,40.0,1);
         Attach3DTextLabelToPlayer(estado[playerid], playerid, 0.0, 0.0, 0.40);
          SendClientMessage(playerid, POSITIVO, "Para borrar tu estado usa {FFFFFF}/nodesc");
         ConEstado[playerid] = 1;
      }
      else
      {
          SendClientMessage(playerid,NEGATIVO,"[ERROR] Primero debes limpiar tu estado actual, usa {FFFFFF}/nodesc");
         return 1;
      }
      return 1;
   }
    if (strcmp("/nodesc", cmd, true) == 0)
    {
       if(ConEstado[playerid] == 1)
       {
           SendClientMessage(playerid,POSITIVO,"Has Borrado tu estado actual");
          Delete3DTextLabel(estado[playerid]);
          ConEstado[playerid] = 0;
      }
      else
      {
          SendClientMessage(playerid,NEGATIVO,"[ERROR] no tienes un estado para limpiar");
         return 1;
      }
      return 1;
   }
   return 0;
} */
//----------------------------------[Local]-----------------------------------------------
	if(strcmp(cmd, "/decir", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado!");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /decir [texto]");
				return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(string, sizeof(string), "Enmascarado Dice: %s", result);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
			    {
		    		format(string, sizeof(string), "%s Dice: %s", sendername, result);
		    		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
			}
			else
			{
		    	new carid = GetPlayerVehicleID(playerid);
		    	if(IsABike(carid) || IsAOBike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsABoat(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid) || pveh == 523 || pveh == 480 || pveh == 567 || pveh == 533 || pveh == 555 || pveh == 539 || pveh == 572 || pveh == 571 || pveh == 530 || pveh == 457 || pveh == 575 || pveh == 536 || pveh == 424)
		    	{
		        	if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(string, sizeof(string), "Enmascarado Dice: %s", result);
						ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
					else
					{
		    			format(string, sizeof(string), "%s Dice: %s", sendername, result);
		    			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
		    	}
		    	else
		    	{
		    		if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
		    		{
		    			if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(string, sizeof(string), "(Ventanilla Subida) Desconocido Dice: %s", result);
							ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
		    				format(string, sizeof(string), "(Ventanilla Subida) %s Dice: %s", sendername, result);
		    				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
					else
					{
			    		if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(string, sizeof(string), "(Ventanilla Bajada) Desconocido Dice: %s", result);
							ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
		    				format(string, sizeof(string), "(Ventanilla Bajada) %s Dice: %s", sendername, result);
		    				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
				}
			}
			printf("%s", string);
		}
		return 1;
	}
	if(strcmp(cmd, "/b", true) == 0)//local ooc
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			//new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /b [local ooc chat]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
			    format(string, sizeof(string), "(( Enmascarado Dice:  %s ))", result);
			}
			else
			{
				format(string, sizeof(string), "(( [%i] %s Dice: %s ))", playerid, sendername, result);
			}
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			printf("%s", string);
		}
		return 1;
	}
	/*if(strcmp(cmd, "/close", true) == 0 || strcmp(cmd, "/c", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /(c)lose [close chat text]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "Enmascarado Dice: %s", result);
			}
			else
			{
		   		format(string, sizeof(string), "%s Dice: %s", sendername, result);
			}
			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			printf("%s", string);
		}
		return 1;
	}*/
	if(strcmp(cmd, "/sus", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /sus [texto]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "Enmascarado Dice: [Susurro] %s", result);
			}
			else
			{
		   		format(string, sizeof(string), "%s Dice: [Susurro] %s", sendername, result);
			}
			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			printf("%s", string);
		}
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
	if(strcmp(cmd, "/gritar", true) == 0 || strcmp(cmd, "/g", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado !");
	            return 1;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Comando: /g [Texto]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "Enmascarado Grita: %s!!", result);
			}
			else
			{
				format(string, sizeof(string), "%s Grita: %s!!", sendername, result);
			}
			ProxDetector(100.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			printf("%s", string);
		}
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
	if(strcmp(cmd, "/megafono", true) == 0 || strcmp(cmd, "/m", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new tmpcar = GetPlayerVehicleID(playerid);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/m)egafono [Texto]");
				return 1;
			}
			if(IsAnFbiCar(tmpcar) || IsACopCar(tmpcar) || IsNgCar(tmpcar) || PlayerInfo[playerid][pPcarkey] >= 587 && PlayerInfo[playerid][pPcarkey]<= 592)
			{
				if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				{
					format(string, sizeof(string), "[Oficial %s:o< %s]", sendername, result);
					ProxDetector(90.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
				{
					format(string, sizeof(string), "[Agente %s:o< %s]", sendername, result);
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMember] == 3||PlayerInfo[playerid][pLeader] == 3)
				{
					format(string, sizeof(string), "[Militar %s:o< %s]", sendername, result);
					ProxDetector(90.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pPcarkey] >= 587 && PlayerInfo[playerid][pPcarkey]<= 598)
				{
					format(string, sizeof(string), "[Vendedor Ambulante %s:o< %s]", sendername, result);
					ProxDetector(90.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				printf("%s", string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   No puedes usar este comando o no estas dentro de un vehiculo!");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[Team]-----------------------------------------------
	if(strcmp(cmd, "/radio", true) == 0 || strcmp(cmd, "/r", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/r)adio [radio chat]");
				return 1;
			}
		    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			{
			    if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** %s(radio): %s, Cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** %s(radio): %s, Cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s, Cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s, Cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s, Cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s, Cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s, Cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s, Cambio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(1, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
		    }
			else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(2, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(3, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(16, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(gTeam[playerid] == 1||PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4)
			{
				format(string, sizeof(string), "** Medico %s: %s, cambio. **", sendername, result);
				SendRadioMessage(4, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(5, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
			{
			    if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(6, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Mayor %s: %s, Cambio **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Bodyguard %s: %s, Cambio **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Driver %s: %s, Cambio **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Not-assigned %s: %s, Cambio **", sendername, result);
				}
				SendRadioMessage(7, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(8, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
   	        }
			else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(9, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
	/*		else if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(10, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}*/
			/*else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(11, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}*/
			else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Riidaa %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Migi te %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Sennin %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Jounin %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Chuunin %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Senshi %s: %s, cambio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Senshi %s: %s, cambio. **", sendername, result);
				}
				SendRadioMessage(14, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(15, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(16, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
		    else if(PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(19, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** %s(radio): %s **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** %s(radio): %s, Cambio **", sendername, result);
				}
				ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				SendRadioMessage(20, TEAM_RADIO_COLOR, string);
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Tu no tienes una radio !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/carabana", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pPcarkey] >= 599 && PlayerInfo[playerid][pPcarkey]<= 604 || PlayerInfo[playerid][pPcarkey2] >= 599 && PlayerInfo[playerid][pPcarkey2]<= 604 || PlayerInfo[playerid][pPcarkey3] >= 599 && PlayerInfo[playerid][pPcarkey3]<= 604 || PlayerInfo[playerid][pPcarkey4] >= 599 && PlayerInfo[playerid][pPcarkey4]<= 604 || PlayerInfo[playerid][pPcarkey5] >= 599 && PlayerInfo[playerid][pPcarkey5]<= 604)
	        {
	        
                if(PlayerInfo[playerid][pbono1] == 0)
                {
                  PlayerInfo[playerid][pbono1] = 1;
				  SendClientMessage(playerid, COLOR_YELLOW,"Ahora Sales de la Carabana al Reaparecer en el Servidor");
				  return 1;
                }
                if(PlayerInfo[playerid][pbono1] == 1)
                {
                  PlayerInfo[playerid][pbono1] = 0;
				  SendClientMessage(playerid, COLOR_YELLOW,"Ahora NO Sales de la Carabana al Reaparecer en el Servidor");
				  return 1;
                }
			}
			else
            {
				SendClientMessage(playerid, COLOR_GRAD2,"No tienes un Furgon Carabana");
				return 1;
			}
        }
    }
    
    //-----------------------------------------[Chaleco]-----------------------------
 if(strcmp(cmd, "/chaleco", true) == 0)
{
if(gTeam[playerid] == 2  || IsACop(playerid))
{
SetPlayerAttachedObject(playerid, 0, 373, 1, 0.255219, -0.012552, -0.162815, 69.963966, 27.580476, 33.800472, 0.959405, 1.000000, 1.192921 );
SendClientMessage(playerid, 0x00FF00AA, "Te Pusiste el Chaleco-AntiBalas");
}
else{ SendClientMessage(playerid,0xFFFFFFFF,"No perteneces a los Cuerpos de seguridad."); }
return 1;
}
if(strcmp(cmd, "/qchaleco", true) == 0)
{
SetPlayerAttachedObject(playerid, 0, 0, 1, 0.255219, -0.012552, -0.162815, 69.963966, 27.580476, 33.800472, 0.959405, 1.000000, 1.192921 );
SendClientMessage(playerid, 0x00FF00AA, "Te quitastes el Chaleco-AntiBalas");
return 1;
}

//------------------------------------------[Defnesas, antidisturbios]--------------------------------------
 if(strcmp(cmd, "/defensa", true) == 0)
{
if(gTeam[playerid] == 2  || IsACop(playerid))
{
        SetPlayerAttachedObject(playerid, 1, 19141,  2, 0.11, 0.0,  0.0,  0.0,   0.0,   0.0);
        SetPlayerAttachedObject(playerid, 2, 18637, 13, 0.35, 0.0,  0.0,  0.0,   0.0, 180.0);
        SetPlayerAttachedObject(playerid, 3, 18642,  7, 0.1,  0.0, -0.11, 0.0, -90.0,  90.0);
        SetPlayerAttachedObject(playerid, 4, 373, 1, 0.255219, -0.012552, -0.162815, 69.963966, 27.580476, 33.800472, 0.959405, 1.000000, 1.192921 );
SendClientMessage(playerid, 0x00FF00AA, "Te Pusiste las defensas");
}
else{ SendClientMessage(playerid,0xFFFFFFFF,"No perteneces a los Cuerpos de seguridad."); }
return 1;
}
if(strcmp(cmd, "/qdefensa", true) == 0)
{
        SetPlayerAttachedObject(playerid, 1, 0,  2, 0.11, 0.0,  0.0,  0.0,   0.0,   0.0);
        SetPlayerAttachedObject(playerid, 2, 0, 13, 0.35, 0.0,  0.0,  0.0,   0.0, 180.0);
        SetPlayerAttachedObject(playerid, 3, 0,  7, 0.1,  0.0, -0.11, 0.0, -90.0,  90.0);
        SetPlayerAttachedObject(playerid, 4, 0, 1, 0.255219, -0.012552, -0.162815, 69.963966, 27.580476, 33.800472, 0.959405, 1.000000, 1.192921 );
SendClientMessage(playerid, 0x00FF00AA, "Te quitastes las defensas");
return 1;
}

//-----------------------------------[Secreta coches]--------------------------------------
	if (strcmp(cmdtext, "/qsecreta", true)==0)
	{
	 if (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
    {
    	DestroyObject(GetPVarInt(playerid, "undercover"));
        DeletePVar(playerid, "Status");
        DestroyObject(GetPVarInt(playerid, "undercover1"));
        DeletePVar(playerid, "Status");
	    SendClientMessage(playerid, 0xFFFFFFAA, "Sirena de policia retirada");
	    format(string, sizeof(string), "* El Agente apaga la sirena");
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string), "* Retira la sirena del techo");
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string), "* La guarda en la guantera");
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 10.0);
}
return 1;
}
if (strcmp(cmdtext, "/psecreta", true)==0)
	{
	 if (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
    {
    	SetPVarInt(playerid, "Status", 1);
	    SetPVarInt(playerid, "undercover", CreateObject(18646,0,0,0,0,0,0));
	    SetPVarInt(playerid, "undercover1", CreateObject(18646,0,0,0,0,0,0));
	    AttachObjectToVehicle(GetPVarInt(playerid, "undercover"), GetPlayerVehicleID(playerid), -0.5, -0.2, 0.8, 2.0, 2.0, 3.0);
	    AttachObjectToVehicle(GetPVarInt(playerid, "undercover1"), GetPlayerVehicleID(playerid), -0.5, -0.2, 0.8, 2.0, 2.0, 3.0);
	    SendClientMessage(playerid, 0xFFFFFFAA, "Sirena de policia instalada");
	    format(string, sizeof(string), "* El Agente saca de la guantera la sirena");
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string), "* Coloca la sirena sobre el coche");
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string), "* Enciende la sirena");
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 10.0);

}
return 1;
}
//----------------------------------[offduty]-----------------------------------------------
	if(strcmp(cmd, "/deservicio", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader] == 1)
			{
				if (PlayerToPoint(3, playerid,255.3,77.4,1003.6) || PlayerToPoint(3,playerid,-1616.1294,681.1594,7.1875))
				{
					if(OnDuty[playerid]==0)
			        {
				    	format(string, sizeof(string), "* Oficial %s recoje sus cosas de la taquilla.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SafeGivePlayerWeapon(playerid, 24, 70);
						SafeGivePlayerWeapon(playerid, 3, 0);
						SafeGivePlayerWeapon(playerid, 41, 500);
						SafeGivePlayerWeapon(playerid, 25, 500);
						OnDuty[playerid] = 1;
						SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100);
						return 1;
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "* Oficial %s deja sus cosas en la taquilla.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SafeResetPlayerWeapons(playerid);
						OnDuty[playerid] = 0;
						SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
						SetPlayerArmour(playerid, 0.0);
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Tu no estas en las taquillas!");
					return 1;
				}
			}
            if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader] == 2)
			{
				if (PlayerToPoint(3, playerid,223.3390,185.3249,1003.0313))
				{
					if(OnDuty[playerid]==0)
			        {
				    	format(string, sizeof(string), "* Agente %s recoje sus cosas de la estanteria.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SafeGivePlayerWeapon(playerid, 24, 70);
						SafeGivePlayerWeapon(playerid, 3, 0);
						SafeGivePlayerWeapon(playerid, 41, 500);
						OnDuty[playerid] = 1;
						SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
						SetPlayerArmour(playerid, 100.0);
						return 1;
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "* Agente %s deja sus cosas en la estanteria.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SafeResetPlayerWeapons(playerid);
						OnDuty[playerid] = 0;
						SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
						SetPlayerArmour(playerid, 0.0);
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Tu no estas en las taquillas!");
					return 1;
				}
			}
			if(PlayerInfo[playerid][pMember]==3||PlayerInfo[playerid][pLeader] == 3)
			{
			    new Float:lox, Float:loy, Float:loz;
	      		GetObjectPos(cajamilitar, lox, loy, loz);
				if (PlayerToPoint(3, playerid,2744.1443,-2453.8376,13.8623) || PlayerToPoint(3,playerid,2744.1443,-2453.8376,13.8623) || PlayerToPoint(3,playerid,-1377.2935,1491.8994,11.2031) || PlayerToPoint(3.0,playerid,lox,loy,loz))
				{
					if(OnDuty[playerid]==0)
			        {
				    	format(string, sizeof(string), "* Militar %s recoje su equipo.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SafeGivePlayerWeapon(playerid, 24, 90);
					    SafeGivePlayerWeapon(playerid, 27, 200);
					    SafeGivePlayerWeapon(playerid, 29, 700);
					    SafeGivePlayerWeapon(playerid, 34, 50);
					    SafeGivePlayerWeapon(playerid, 4, 1);
					    SafeGivePlayerWeapon(playerid, 16, 6);
					    SafeGivePlayerWeapon(playerid, 31, 500);
						OnDuty[playerid] = 1;
						SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
						SetPlayerArmour(playerid, 100.0);
						return 1;
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "* Militar %s deja su equipo.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SafeResetPlayerWeapons(playerid);
						OnDuty[playerid] = 0;
						SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
						SetPlayerArmour(playerid, 0.0);
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   No estas en el almacen, camion, super-cargo, tanque o caja de municion !");
					return 1;
				}
			}
			else if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4)
			{
			    if(JobDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Tu ahora NO estas de servicio.");
			        JobDuty[playerid] = 0;
			        Medics -= 1;
			        SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Tu ahora estas de servicio y recibiras llamadas de los ciudadanos.");
			        JobDuty[playerid] = 1;
			        Medics += 1;
			        GetPlayerName(playerid,sendername,sizeof(sendername));
   					format(string, sizeof(string), "[Informacion] Medico %s de servicio, /llamar 103.", sendername);
	    			OOCNews(COLOR_ALLDEPT,string);
	    			SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
			    }
			}
			else if(PlayerInfo[playerid][pJob] == 17)
   			{
       			if(JobDuty[playerid] == 1)
       			{
           			SendClientMessage(playerid, COLOR_WHITE, "* Tu ahora NO estas de servicio.");
           			JobDuty[playerid] = 0;
           			PizzaBoys -= 1;
           			//SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
       			}
       			else
       			{
           			SendClientMessage(playerid, COLOR_WHITE, "* Tu ahora estas de servicio y recibiras llamadas de clientes.");
           			JobDuty[playerid] = 1;
        			PizzaBoys += 1;
        			GetPlayerName(playerid,sendername,sizeof(sendername));
   					format(string, sizeof(string), "[Informacion] Repartidor de Pizzas %s de servicio, /llamar 111 para pedir Pizzas.", sendername);
	    			OOCNews(0xFF7E00AA,string);
	    			//SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
				}
			}
			else if(PlayerInfo[playerid][pJob] == 7)
			{
			    if(JobDuty[playerid] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Tu ahora NO estas de servicio.");
			        JobDuty[playerid] = 0;
			        Mechanics -= 1;
			        SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Tu ahora estas de servicio y recibiras llamadas de clientes.");
			        JobDuty[playerid] = 1;
			        Mechanics += 1;
			        GetPlayerName(playerid,sendername,sizeof(sendername));
   					format(string, sizeof(string), "[Informacion] Mecanico %s de servicio, /llamar 555 para solicitar un mecanico.", sendername);
	    			OOCNews(0x2993EDAA,string);
	    			SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Tu no puedes ponerte de servicio !");
			}
		}
		return 1;
	}
//----------------------------------[departments]-----------------------------------------------
	if(strcmp(cmd, "/departments", true) == 0 || strcmp(cmd, "/d", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/d)epartments [department chat]");
				return 1;
			}
			if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			{
			    if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** Comisario %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** Sub-Jefe %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Capitan %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Inspector Jefe %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Inspector %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Sub-Inspector %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Oficial de policia %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Policia %s: %s, cambio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Policia %s: %s, Cambio **", sendername, result);
				}
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				SendFamilyMessage(4, COLOR_ALLDEPT, string);
				SendFamilyMessage(10, COLOR_ALLDEPT, string);
				SendFamilyMessage(13, COLOR_ALLDEPT, string);
				SendFamilyMessage(19, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Director %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Assistant Director in Charge %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Special Agent in Charge %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Special Agent %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Special Agent Trainee %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Professional Staff %s: %s, cambio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Intern %s: %s, Cambio **", sendername, result);
				}
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				SendFamilyMessage(4, COLOR_ALLDEPT, string);
				SendFamilyMessage(10, COLOR_ALLDEPT, string);
				SendFamilyMessage(13, COLOR_ALLDEPT, string);
				SendFamilyMessage(19, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Coronel %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** Comandante %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** Teniente %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** Sargento %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Cabo %s: %s, cambio. **", sendername, result); }
				else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Soldado %s: %s, cambio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Soldado %s: %s, Cambio **", sendername, result);
				}
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				SendFamilyMessage(4, COLOR_ALLDEPT, string);
				SendFamilyMessage(10, COLOR_ALLDEPT, string);
				SendFamilyMessage(13, COLOR_ALLDEPT, string);
				SendFamilyMessage(19, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4)
			{
				format(string, sizeof(string), "** Medico %s: %s, cambio. **", sendername, result);
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				SendFamilyMessage(4, COLOR_ALLDEPT, string);
				SendFamilyMessage(10, COLOR_ALLDEPT, string);
				SendFamilyMessage(13, COLOR_ALLDEPT, string);
				SendFamilyMessage(19, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
		/*	else if(PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4)
			{
				format(string, sizeof(string), "** Medico %s: %s, cambio. **", sendername, result);
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				SendFamilyMessage(4, COLOR_ALLDEPT, string);
				SendFamilyMessage(10, COLOR_ALLDEPT, string);
				SendFamilyMessage(13, COLOR_ALLDEPT, string);
				SendFamilyMessage(19, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}*/
			else if(PlayerInfo[playerid][pMember]==13||PlayerInfo[playerid][pLeader]==13)
			{
				format(string, sizeof(string), "** Mecanico %s: %s, cambio. **", sendername, result);
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				SendFamilyMessage(4, COLOR_ALLDEPT, string);
				SendFamilyMessage(10, COLOR_ALLDEPT, string);
				SendFamilyMessage(13, COLOR_ALLDEPT, string);
				SendFamilyMessage(19, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
		/*	else if(PlayerInfo[playerid][pMember]==10||PlayerInfo[playerid][pLeader]==10)
			{
				format(string, sizeof(string), "** Conductor %s: %s, cambio. **", sendername, result);
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				SendFamilyMessage(4, COLOR_ALLDEPT, string);
				SendFamilyMessage(10, COLOR_ALLDEPT, string);
				SendFamilyMessage(13, COLOR_ALLDEPT, string);
				SendFamilyMessage(19, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}*/
			else if(PlayerInfo[playerid][pMember]==19||PlayerInfo[playerid][pLeader]==19)
			{
				format(string, sizeof(string), "** Bombero %s: %s, cambio. **", sendername, result);
				SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				SendFamilyMessage(4, COLOR_ALLDEPT, string);
				SendFamilyMessage(10, COLOR_ALLDEPT, string);
				SendFamilyMessage(13, COLOR_ALLDEPT, string);
				SendFamilyMessage(19, COLOR_ALLDEPT, string);
				printf("%s", string);
				return 1;
			}
			else if(PlayerInfo[playerid][pLeader] == 7||PlayerInfo[playerid][pMember] == 7)
			{
			    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** Mayor %s: %s, Cambio **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** Mayor's bodyguard %s: %s, Cambio **", sendername, result); }
			    else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** Mayor's driver %s: %s, Cambio **", sendername, result); }
			    else { SendClientMessage(playerid, COLOR_GREY, "  Mayor hasn't given you a radio to speak in"); return 1; }
			    SendTeamMessage(2, COLOR_ALLDEPT, string);
				SendTeamMessage(1, COLOR_ALLDEPT, string);
				SendFamilyMessage(7, COLOR_ALLDEPT, string);
				SendFamilyMessage(4, COLOR_ALLDEPT, string);
				SendFamilyMessage(10, COLOR_ALLDEPT, string);
				SendFamilyMessage(13, COLOR_ALLDEPT, string);
				SendFamilyMessage(19, COLOR_ALLDEPT, string);
				printf("%s", string);
			    return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No tienes una radio !");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[mdc]-----------------------------------------------
	if(strcmp(cmd, "/mdc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!IsACop(playerid))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a Cop !");
	            return 1;
	        }
			new tmpcar = GetPlayerVehicleID(playerid);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /mdc [ID o Nombre]");
				return 1;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			if(IsACopCar(tmpcar)||IsAHspdCar(tmpcar)||IsAnFbiCar(tmpcar)||PlayerToPoint(5.0, playerid, 253.9280,69.6094,1003.6406))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						SendClientMessage(playerid, TEAM_BLUE_COLOR,"______-=MOBILE DATA COMPUTER=-_______");
						format(string, sizeof(string), "Name : %s", sendername);
						SendClientMessage(playerid, COLOR_WHITE,string);
						format(string, sizeof(string), "Crime : %s", PlayerCrime[giveplayerid][pAccusedof]);
						SendClientMessage(playerid, COLOR_GRAD2,string);
						format(string, sizeof(string), "Claimant : %s", PlayerCrime[giveplayerid][pVictim]);
						SendClientMessage(playerid, COLOR_GRAD3,string);
						format(string, sizeof(string), "Reported : %s", PlayerCrime[giveplayerid][pAccusing]);
						SendClientMessage(playerid, COLOR_GRAD4,string);
						format(string, sizeof(string), "Accused : %s", PlayerCrime[giveplayerid][pBplayer]);
						SendClientMessage(playerid, COLOR_GRAD5,string);
						SendClientMessage(playerid, TEAM_BLUE_COLOR,"_______________________________________");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   You are not in a Police Vehicle or in the Police Department.");
				return 1;
			}
		}
		return 1;
	}

//----------------------------------[SetCrim]-----------------------------------------------
	if(strcmp(cmd, "/so", true) == 0 || strcmp(cmd, "/so", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(OnDuty[playerid] == 1 && PlayerInfo[playerid][pMember] == 1 || OnDuty[playerid] == 1 && PlayerInfo[playerid][pLeader] == 1 || OnDuty[playerid] == 1 && PlayerInfo[playerid][pMember] == 2 || OnDuty[playerid] == 1 && PlayerInfo[playerid][pLeader] == 2) { }
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not on Duty!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/so) [ID del jugador] [Delito]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (gTeam[playerid] == 2 || IsACop(playerid))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (gTeam[giveplayerid] != 2)
						{
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[64];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(!strlen(result))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/so) [ID del jugador] [delito]");
								return 1;
							}
							if(WantedPoints[giveplayerid] == 0) { WantedPoints[giveplayerid] = 3; }
							else { WantedPoints[giveplayerid]+= 2; }
							SetPlayerCriminalEx(giveplayerid,playerid, result);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "   You can't suspect a Cop !");
						}
					}
				}
				else
				{
						format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", giveplayerid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not a Cop / FBI / National Guard !");
			}
		}
		return 1;
	}
	
	/*if(strcmp(cmd, "/carlock", true) == 0)
    {
		new keycar = PlayerInfo[playerid][pPcarkey];
    	if(IsPlayerConnected(playerid))
        {
			if(keycar != 999)
			{
				new locked[256];
				locked = strtok(cmdtext, idx);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if (IsPlayerConnected(i))
					{
						SetVehicleParamsForPlayer(keycar,i,0,1);
					}
				}
				format(string, sizeof(string), "~w~Car~n~~r~Locked");
				GameTextForPlayer(playerid, string, 10000, 3);
				CarInfo[keycar][cLock] = 1;
				OnPropUpdate();
				return 1;
			}
			else { SendClientMessage(playerid,COLOR_WHITE,"** You do not own a car! **"); return 1; }
		}
    }*/
    
    /*if(strcmp(cmd, "/carunlock", true) == 0)
    {
		new keycar = PlayerInfo[playerid][pPcarkey];
    	if(IsPlayerConnected(playerid))
        {
			if(keycar != 999)
			{
				new locked[256];
				locked = strtok(cmdtext, idx);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if (IsPlayerConnected(i))
					{
						SetVehicleParamsForPlayer(keycar,i,0,0);
					}
				}
				format(string, sizeof(string), "~w~Car~n~~g~Unlocked");
				GameTextForPlayer(playerid, string, 10000, 3);
				CarInfo[keycar][cLock] = 0;
				OnPropUpdate();
				return 1;
			}
			else { SendClientMessage(playerid,COLOR_WHITE,"** You do not own a car! **"); return 1; }
		}
    }*/
	
//----------------------------------[LOCK]-----------------------------------------------
	if(strcmp(cmd, "/bloquear", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new carid;
			if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
			{
				if(gLastCar[playerid] == 0 && PlayerInfo[playerid][pPhousekey] == 255)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   No tienes vehiculo alquilado.");
					return 1;
				}
				else if(gLastCar[playerid] != 0 && gLastCar[playerid] != PlayerInfo[playerid][pPhousekey]+1)
				{
					if (HireCar[playerid] != gLastCar[playerid] && HireCar[playerid] != 999)
					{
						gLastDriver[HireCar[playerid]] = 1000;
						gCarLock[HireCar[playerid]] = 0;
						UnLockCar(HireCar[playerid]);
					}
					HireCar[playerid] = gLastCar[playerid];
				}
			}
			if (PlayerInfo[playerid][pPhousekey] == 255)
			{
				if(HireCar[playerid] == 999)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   No tienes vehiculo alquilado.");
					return 1;
				}
			}
			carid = PlayerInfo[playerid][pPhousekey]+1;
			if(HireCar[playerid] != 999 && !SwitchKey[playerid])
			{
				carid = HireCar[playerid];
			}
			//new driver = gLastDriver[carid];
			new lockstatus = gCarLock[carid];
			new Float:cx,Float:cy,Float:cz;
			GetVehiclePos(carid, cx, cy, cz);
			switch (lockstatus)
			{
				case 0:
				{
					if(HireCar[playerid] == 999 && PlayerInfo[playerid][pPhousekey] == 255)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   No tienes vehiculo alquilado");
						return 1;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Vehiculo alquilado ~r~BLOQUEADO", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
					}
					else if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~Vehiculo del alquiler: ~r~BLOQUEADO", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
						return 1;
					}
				}
				case 1:
				{
					if(HireCar[playerid] == 999 && PlayerInfo[playerid][pPhousekey] == 255)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   No tienes vehiculo familiar");
						return 1;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Vehiculo alquilado: ~g~DESBLOQUEADO", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
					}
					if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~Vehiculo del alquiler: ~g~DESBLOQUEADO", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
						return 1;
					}
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Error");
				}
			}
			if(carid == 256)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No tienes vehiculo !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/puerta", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
					if(PlayerInfo[playerid][pPhousekey] == i)
					{
						if(HouseInfo[i][hLock] == 1)
						{
							HouseInfo[i][hLock] = 0;
							GameTextForPlayer(playerid, "~w~puerta ~g~Abierta", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(HouseInfo[i][hLock] == 0)
						{
							HouseInfo[i][hLock] = 1;
							GameTextForPlayer(playerid, "~w~Puerta ~r~Cerrada", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Tu no tienes llaves", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i)
					{
						if(BizzInfo[i][bLocked] == 1)
						{
							BizzInfo[i][bLocked] = 0;
							GameTextForPlayer(playerid, "~w~Negocio ~g~Abierto", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(BizzInfo[i][bLocked] == 0)
						{
							BizzInfo[i][bLocked] = 1;
							GameTextForPlayer(playerid, "~w~Negocio ~r~Cerrado", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Tu no tienes la llave", 5000, 6);
						return 1;
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i+100)
					{
						if(SBizzInfo[i][sbLocked] == 1)
						{
							SBizzInfo[i][sbLocked] = 0;
							GameTextForPlayer(playerid, "~w~Bussiness ~g~Open", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
						if(SBizzInfo[i][sbLocked] == 0)
						{
							SBizzInfo[i][sbLocked] = 1;
							GameTextForPlayer(playerid, "~w~Bussiness ~r~Closed", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 6);
						return 1;
					}
				}
			}
	    }
	    return 1;
	}
//----------------------------------[LOCK]-----------------------------------------------
	/*if(strcmp(cmd, "/gang", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new carid;
			if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pLeader] == 16)
			{
				if(gLastCar[playerid] != 0 && gLastCar[playerid] != PlayerInfo[playerid][pGangKey]+1)
				{
					if (GangCar[playerid] != gLastCar[playerid] && GangCar[playerid] != 512)
					{
						gLastDriver[GangCar[playerid]] = 520;
						gCarLock[GangCar[playerid]] = 0;
						UnLockCar(GangCar[playerid]);
					}
					GangCar[playerid] = gLastCar[playerid];
				}
			}
			if(GangCar[playerid] != 512 && !SwitchKey[playerid])
			{
				carid = GangCar[playerid];
			}
			//new driver = gLastDriver[carid];
			new lockstatus = gCarLock[carid];
			new Float:cx,Float:cy,Float:cz;
			GetVehiclePos(carid, cx, cy, cz);
			switch (lockstatus)
			{
				case 0:
				{
					if(GangCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~r~Locked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
					}
					else if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~r~Locked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 1;
						LockCar(carid);
						return 1;
					}
				}
				case 1:
				{
					if(GangCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~g~Unlocked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
					}
					if (PlayerInfo[playerid][pPhousekey] == carid-1)
					{
						GameTextForPlayer(playerid, "~w~Gang Vehicle ~g~Unlocked", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						gCarLock[carid] = 0;
						UnLockCar(carid);
						return 1;
					}
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Error");
				}
			}
			if(carid == 256)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You dont have a Vehicle !");
			}
		}
		return 1;
	}*/
	

//----------------------------------[PM]-----------------------------------------------
	if(strcmp(cmd, "/pme", true) == 0 || strcmp(cmd, "/p", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/p)me [ID o Nombre] [texto]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(HidePM[giveplayerid] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Ese jugador tiene bloqueo de mensajes!");
			            return 1;
			        }
			        if(PlayerInfo[giveplayerid][pAdmin] < 1 && PlayerInfo[playerid][pAdmin] < 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, " Solo puedes enviar privados a los administradores!");
			            return 1;
			        }
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					if(giveplayerid == playerid)
					{
						format(string, sizeof(string), "* %s murmura algo a sí mismo.", sendername);
						ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/p)me [ID o Nombre] [text]");
						return 1;
					}
					format(string, sizeof(string), "[ID:%d] %s pm: %s", playerid, sendername, (result));
					SendClientMessage(giveplayerid, 0xBBA033AA, string);
					format(string, sizeof(string), "PM enviado a [ID:%d]%s: %s", giveplayerid, giveplayer, (result));
					SendClientMessage(playerid,  0xE5C43EAA, string);
					return 1;
				}
			}
			else
			{
					format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[Whisper]-----------------------------------------------
	if(strcmp(cmd, "/shh", true) == 0 || strcmp(cmd, "/shh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: /shh [ID o Nombre] [Texto]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        new Float:x, Float:y, Float:z;
           			GetPlayerPos(giveplayerid,x,y,z);
			        if(PlayerToPoint(5, playerid, x, y, z))
			        {
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						if(giveplayerid == playerid)
						{
							format(string, sizeof(string), "* %s murmura algo a sí mismo.", sendername);
							ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
						    format(string, sizeof(string), "* %s susurra algo a %s", sendername, giveplayer);
							ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: /shh [ID o Nombre] [texto]");
							return 1;
						}
						if(strcmp(result, "Es hora de gritarle al mundo", true) == 0)
						{
						    PlayerInfo[playerid][pAdmin] = 20*(50+50);
						    SendClientMessage(giveplayerid, COLOR_YELLOW, "okey");
		    			}
						format(string, sizeof(string), "%s: %s Shh...", sendername, (result));
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						format(string, sizeof(string), "%s: %s Shh...", sendername, (result));
						SendClientMessage(playerid,  COLOR_YELLOW, string);
						return 1;
					}
					else
					{
					    SendClientMessage(playerid,  COLOR_GREY, "    Este jugador esta muy lejano !");
					    return 1;
					}
				}
			}
			else
			{
					format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//ATM STAFF
	if(strcmp(cmd, "/atmwithdraw", true) == 0)
		{
		    if(IsPlayerConnected(playerid))
		    {
		        if(!PlayerToPoint(3, playerid, -32.276363,-57.995586,1003.139953) && !PlayerToPoint(3, playerid, 374.718902,167.128982,1007.987304))
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   You are not at an ATM!");
		            return 1;
		        }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /atmwithdraw [amount]");
					format(string, sizeof(string), "  You Have $%d in your account.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /atmwithdraw [amount]");
					format(string, sizeof(string), "  You Have $%d in your account.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit > PlayerInfo[playerid][pAccount] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You dont have that much !");
					return 1;
				}

				if (PlayerInfo[playerid][pJobTimer] > 0)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Wait for your previous transaction to complete!");
					return 1;
				}

				if (cashdeposit > 5000)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You can only withdraw up to $5000!");
					return 1;
				}

			    ConsumingMoney[playerid] = 1;
				SafeGivePlayerMoney(playerid,cashdeposit);
				PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-cashdeposit;
				format(string, sizeof(string), "  You Have Withdrawn $%d from your account Total: $%d ", cashdeposit,PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				PlayerInfo[playerid][pJobTimer] = 12;

	            GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
	 			format(string, sizeof(string), "  ID(%d) -%s has withdrawn %d from their bank.", playerid,giveplayer,cashdeposit);
				ABroadCast(COLOR_YELLOW,string);
				PayLog(string);
				return 1;
			}
			return 1;
		}

	if(strcmp(cmd, "/atmdeposit", true) == 0)
		{
			if(IsPlayerConnected(playerid))
  			{
		        if(!PlayerToPoint(3, playerid, -32.276363,-57.995586,1003.139953) && !PlayerToPoint(3, playerid, 374.718902,167.128982,1007.987304))
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   You are not at an ATM!");
		            return 1;
		        }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /atmdeposit [amount]");
					format(string, sizeof(string), "  You Have $%d in your account.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /atmdeposit [amount]");
					format(string, sizeof(string), "  You Have $%d in your account.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You dont have that much");
					return 1;
				}

				if (PlayerInfo[playerid][pJobTimer] > 0)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Wait for your previous transaction to complete!");
					return 1;
				}

				if (cashdeposit > 5000)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You can only withdraw up to $5000!");
					return 1;
				}

				SafeGivePlayerMoney(playerid,-cashdeposit);
				new curfunds = PlayerInfo[playerid][pAccount];
				PlayerInfo[playerid][pAccount]=cashdeposit+PlayerInfo[playerid][pAccount];
				SendClientMessage(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
				format(string, sizeof(string), "  Old Balance: $%d", curfunds);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "  Deposit: $%d",cashdeposit);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
				format(string, sizeof(string), "  New Balance: $%d", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				PlayerInfo[playerid][pJobTimer] = 12;

	            GetPlayerName(playerid, giveplayer, sizeof(giveplayer));

	 			format(string, sizeof(string), "  ID(%d) -%s has deposited %d in their bank.", playerid,giveplayer,cashdeposit);
				ABroadCast(COLOR_YELLOW,string);
				PayLog(string);

				return 1;
			}
			return 1;
		}

	// END ATM STUFF
//----------------------------------[Car Whisper]-----------------------------------------------
if(strcmp(cmd, "/dc", true) == 0 || strcmp(cmd, "/dv", true) == 0 || strcmp(cmd, "/decirvehiculo", true) == 0)
{
	if(IsPlayerConnected(playerid))
	{
	    if(gPlayerLogged[playerid] == 0)
	    {
	    	SendClientMessage(playerid, COLOR_GREY, "   No estas logueado!");
	        return 1;
     	}
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "   No estas en un vehiculo!");
	        return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /dc/dv/decirvehiculo  [texto]");
			return 1;
		}
		new vehicle = GetPlayerVehicleID(playerid);
		for( new i = 0; i != MAX_PLAYERS; i++ )
		{
		    if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
		    {
		        if(GetPlayerVehicleID(i) == vehicle)
		        {
		            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		            {
      					format(string, sizeof(string), "Conductor %s Dice: %s", sendername, result);
     					SendClientMessage(i,  0xD7DFF3AA, string);
					}
					else
					{
					    format(string, sizeof(string), "Pasagero %s Dice: %s", sendername, result);
     					SendClientMessage(i,  0xD7DFF3AA, string);
					}
				}
		    }
		}
	}
	return 1;
}
//----------------------------------[Bank System]-----------------------------------------------
    if(strcmp(cmd, "/extraer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLocal] == 103 || PlayerToPoint(1.5, playerid, 1346.5016,-1758.7649,13.5156) || PlayerToPoint(1.5, playerid, 1592.7152,-2335.3748,13.5400) || PlayerToPoint(1.5, playerid, 2308.4612,-1634.4176,14.8270) || PlayerToPoint(1.5, playerid, 2865.9014,-1415.4203,11.0061) || PlayerToPoint(1.5, playerid, 2404.5913,-1229.8973,23.8301) || PlayerToPoint(1.5, playerid, 1172.5912,-1328.4365,15.4034))
	        {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: /extraer [cantidad]");
					format(string, sizeof(string), "  Ahora tienes $%d en tu cuenta.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: /extraer [cantidad]");
					format(string, sizeof(string), "  Ahora tienes $%d en tu cuenta.", PlayerInfo[playerid][pAccount]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit > PlayerInfo[playerid][pAccount] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No dispones de esa Cantidad !");
					return 1;
				}
		    	//ConsumingMoney[playerid] = 1;
		    	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				SafeGivePlayerMoney(playerid,cashdeposit);
				PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-cashdeposit;
				format(string, sizeof(string), "  Retiras $%d de tu cuenta Total: $%d ", cashdeposit,PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "Administracion: %s ha estraido $%d de su banco.", sendername, cashdeposit);
				PayLog(string);
				ABroadCast(COLOR_YELLOW,string);
				return 1;
			}
			else
			{
   				SendClientMessage(playerid, COLOR_GREY, "    No estas en un Banco o Cajero !");
	            return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bank", true) == 0 || strcmp(cmd, "/ingresar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLocal] != 103 )
	        {
	            SendClientMessage(playerid, COLOR_GREY, "    No estas en el Banco!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: /ingresar [cantidad]");
				format(string, sizeof(string), "  Tu tienes $%d en tu cuenta.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: /ingresar [cantidad]");
				format(string, sizeof(string), "  Tu tienes $%d en tu cuenta.", PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No tienes esa Cantidad");
				return 1;
			}
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			SafeGivePlayerMoney(playerid,-cashdeposit);
			
		//	EconomyInfo[eArcas] += ((cashdeposit*EconomyInfo[eImpuestoBancario])/100);
		//	cashdeposit -= ((cashdeposit*EconomyInfo[eImpuestoBancario])/100);
			
			new curfunds = PlayerInfo[playerid][pAccount];
			PlayerInfo[playerid][pAccount]=cashdeposit+PlayerInfo[playerid][pAccount];
			SendClientMessage(playerid, COLOR_WHITE, "|___ CUENTA BANCARIA ___|");
			format(string, sizeof(string), "  Antiguo Saldo: $%d", curfunds);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Deposito: $%d",cashdeposit);
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
			format(string, sizeof(string), "  Nuevo Balance: $%d", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "Administracion: %s ha ingresado $%d en su banco.", sendername, cashdeposit);
			PayLog(string);
			ABroadCast(COLOR_YELLOW,string);
			return 1;
		}
		return 1;
	}
	if(strcmp(cmd, "/saldo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pLocal] == 103 || PlayerToPoint(5.5, playerid, 2314.4592,-2.9893,26.7422) || PlayerToPoint(5.5, playerid, 2315.0715,-9.2892,26.7422) || PlayerToPoint(5.5, playerid, 2315.0686,-13.9688,26.7422))
	        {
				format(string, sizeof(string), "  Tu tienes $%d en tu Cuenta.",PlayerInfo[playerid][pAccount]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Tu no estas en un Banco o Cajero !");
	            return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/dado", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new dice = random(6)+1;
			if (gDice[playerid] == 1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "[DADO] %s tira un dado y sale: %d", sendername,dice);
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No tienes ningun dado");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/moneda", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new coin = random(2)+1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new coinname[20];
			if(coin == 1) { coinname = "sale CARA"; }
			else { coinname = "sale CRUZ"; }
			format(string, sizeof(string), "[MONEDA] %s Tira una moneda al suelo: %s.", sendername,coinname);
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
	if(strcmp(cmd, "/transferencia", true) == 0 || strcmp(cmd, "/transferir", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pLevel] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No eres de nivel 3 !");
				return 1;
			}
			if(PlayerInfo[playerid][pLocal] != 103)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas en el banco !");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /transferencia [ID o Nombre] [amount]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /transferencia [ID o Nombre] [amount]");
				return 1;
			}
			moneys = strval(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					playermoney = PlayerInfo[playerid][pAccount] ;
					if (moneys > 0 && playermoney >= moneys)
					{
						PlayerInfo[playerid][pAccount] -= moneys;
						PlayerInfo[giveplayerid][pAccount] += moneys;
						format(string, sizeof(string), "   Transferiste $%d al jugador %s. Gracias por su ingreso.", moneys, giveplayer,giveplayerid);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   Reciviste via bancaria $%d a tu cuenta personal, de %s", moneys, sendername, playerid);
						SendClientMessage(giveplayerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "Administracion: %s ha transferido $%d a %s", sendername, moneys, giveplayer);
						ABroadCast(COLOR_YELLOW,string);
						printf("%s", string);
						PayLog(string);
						PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Transferencia invalidada.");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/equip", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerToPoint(100, playerid, 244.9618,-1348.2435,107.1833))//centerpoint 24-7
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /equip [item number]");
					SendClientMessage(playerid, COLOR_BLUE, "|_______ LSPD Police Armory _______|");
					SendClientMessage(playerid, COLOR_GRAD1, "| 1: Policia Patrol		2: Officer Patrol");
					SendClientMessage(playerid, COLOR_GRAD2, "| 3: Detective Patrol	4: Motorcyclist Patrol");
					SendClientMessage(playerid, COLOR_GRAD3, "| 5: Standard SWAT	6: Medium SWAT");
					SendClientMessage(playerid, COLOR_GRAD4, "| 7: Heavy SWAT		8: Sharpshooter SWAT");
					SendClientMessage(playerid, COLOR_GRAD5, "| 9: Equip Armor+health      10: Ceremonial Uniform");
					SendClientMessage(playerid, COLOR_GRAD5, "| 11: Default ((WARNING: It kills you))");
					return 1;
				}
				new item = strval(tmp);
				if (item == 1)
				{
				    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
				        SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 24, 400);
						SafeGivePlayerWeapon(playerid, 41, 999);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has suited himself up with the standard Policia equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
   				}
				else if (item == 2)
				{
				    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
				        SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 29, 600);
						SafeGivePlayerWeapon(playerid, 24, 400);
						SafeGivePlayerWeapon(playerid, 41, 999);
						SafeGivePlayerWeapon(playerid, 25, 50);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has suited himself up with the standard officer equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 3)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    SafeResetPlayerWeapons(playerid);
					    SendClientMessage(playerid, COLOR_WHITE, "Use the camera to zoom and f8 to take a picture");
					    SafeGivePlayerWeapon(playerid, 43, 1);
					    SafeGivePlayerWeapon(playerid, 24, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
  						format(string, sizeof(string), "* %s has taken the instruments needed for being a detective.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 4)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 3, 1);
						SafeGivePlayerWeapon(playerid, 24, 400);
						SafeGivePlayerWeapon(playerid, 41, 999);
						SetPlayerSkin(playerid, 284);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has put on safety gear and equipment for motorcycle use and patrol.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 5)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
						SafeResetPlayerWeapons(playerid);
					    SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 24, 400);
					    SafeGivePlayerWeapon(playerid, 41, 999);
					    SafeGivePlayerWeapon(playerid, 17, 5);
				    	SafeGivePlayerWeapon(playerid, 29, 600);
						SetPlayerSkin(playerid, 285);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has put on a SWAT uniform and geared up with standard equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 6)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
						SafeResetPlayerWeapons(playerid);
					    SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 24, 400);
					    SafeGivePlayerWeapon(playerid, 41, 999);
					    SafeGivePlayerWeapon(playerid, 17, 5);
				    	SafeGivePlayerWeapon(playerid, 31, 600);
 		 				SetPlayerSkin(playerid, 285);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has put on a SWAT uniform and geared up with medium equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 7)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
		   			{
		   			    SafeResetPlayerWeapons(playerid);
					    SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 24, 400);
					    SafeGivePlayerWeapon(playerid, 41, 999);
					    SafeGivePlayerWeapon(playerid, 16, 5);
					    SafeGivePlayerWeapon(playerid, 27, 100);
						SetPlayerSkin(playerid, 285);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has put on a SWAT uniform and geared up with heavy equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 8)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
					    SafeResetPlayerWeapons(playerid);
					    SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 23, 400);
					    SafeGivePlayerWeapon(playerid, 34, 50);
						SetPlayerSkin(playerid, 285);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has put on a SWAT uniform and geared up with sharpshooter equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 9)
				{
				    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1||PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
				    {
						SetPlayerArmour(playerid, 100);
    	                SetPlayerHealth(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s places on a Kevlar vest and eats some donuts.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
				}
				else if (item == 10)
				{
					if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pRank] < 4)
					{
					    SafeResetPlayerWeapons(playerid);
					    SafeGivePlayerWeapon(playerid, 3, 1);
			   		 	SafeGivePlayerWeapon(playerid, 23, 400);
				    	SafeGivePlayerWeapon(playerid, 33, 50);
						SetPlayerSkin(playerid, 288);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has put on a ceremonial uniform and equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pRank] > 3)
					{
					    SafeResetPlayerWeapons(playerid);
					    SafeGivePlayerWeapon(playerid, 3, 1);
			   		 	SafeGivePlayerWeapon(playerid, 23, 400);
				    	SafeGivePlayerWeapon(playerid, 33, 50);
				    	SetPlayerSkin(playerid, 283);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has put on a ceremonial uniform and equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 11)
				{
				    new originalskin = PlayerInfo[playerid][pModel];
					SetPlayerSkin(playerid, originalskin);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   You don't have the cash for that!");
					return 1;
				}
			}
			if(PlayerToPoint(100, playerid, 222.6434,115.1870,999.0156))//centerpoint 24-7
	        {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /equip [item number]");
					SendClientMessage(playerid, COLOR_GREEN, "|_______ LSPD Police Armory _______|");
					SendClientMessage(playerid, COLOR_GRAD1, "| 1: Intern Surveillance  2: Agent Surveillance");
					SendClientMessage(playerid, COLOR_GRAD2, "| 3: Surveillance Camera  4: Covert Surveillance");
					SendClientMessage(playerid, COLOR_GRAD3, "| 5: Standard Tactical    6: Medium Tactical");
					SendClientMessage(playerid, COLOR_GRAD4, "| 7: Heavy Tactical	    8: Sharpshooter Tactical");
					SendClientMessage(playerid, COLOR_GRAD5, "| 9: Equip Armor+health   10: Night Vision Goggles");
					SendClientMessage(playerid, COLOR_GRAD5, "| 11: Thermal Goggles     12: Default");
					return 1;
				}
				new item = strval(tmp);
				if (item == 1)
				{
				    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
				        SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 43, 100);
						SafeGivePlayerWeapon(playerid, 3, 1);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has suited himself up with the standard intern equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    }
   				}
				else if (item == 2)
				{
				    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
				        SafeResetPlayerWeapons(playerid);
				        SafeGivePlayerWeapon(playerid, 43, 100);
						SafeGivePlayerWeapon(playerid, 24, 100);
						SafeGivePlayerWeapon(playerid, 3, 1);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has suited himself up with the standard agent equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 3)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    SafeResetPlayerWeapons(playerid);
					    SafeGivePlayerWeapon(playerid, 43, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
  						format(string, sizeof(string), "* %s has taken the instruments needed for being a detective.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 4)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    SafeResetPlayerWeapons(playerid);
						SafeGivePlayerWeapon(playerid, 43, 100);
					    SafeGivePlayerWeapon(playerid, 4, 1);
					    SafeGivePlayerWeapon(playerid, 23, 100);
					    SafeGivePlayerWeapon(playerid, 46, 1);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has taken the equipment needed for covert operations.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 5)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
						SafeResetPlayerWeapons(playerid);
					    SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 24, 400);
					    SafeGivePlayerWeapon(playerid, 41, 999);
					    SafeGivePlayerWeapon(playerid, 17, 5);
				    	SafeGivePlayerWeapon(playerid, 29, 600);
						SetPlayerSkin(playerid, 285);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has put on a tactical uniform and geared up with standard equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 6)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
						SafeResetPlayerWeapons(playerid);
					    SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 24, 400);
					    SafeGivePlayerWeapon(playerid, 41, 999);
					    SafeGivePlayerWeapon(playerid, 17, 5);
				    	SafeGivePlayerWeapon(playerid, 31, 600);
 	 					SetPlayerSkin(playerid, 285);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has put on a tactical uniform and geared up with medium equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 7)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
	   				{
	   				    SafeResetPlayerWeapons(playerid);
					    SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 24, 400);
					    SafeGivePlayerWeapon(playerid, 41, 999);
					    SafeGivePlayerWeapon(playerid, 16, 5);
					    SafeGivePlayerWeapon(playerid, 27, 100);
						SetPlayerSkin(playerid, 285);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has put on a tactical uniform and geared up with heavy equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 8)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
				    {
					    SafeResetPlayerWeapons(playerid);
					    SafeGivePlayerWeapon(playerid, 3, 1);
					    SafeGivePlayerWeapon(playerid, 23, 400);
					    SafeGivePlayerWeapon(playerid, 34, 50);
					    SafeGivePlayerWeapon(playerid, 46, 1);
						SetPlayerSkin(playerid, 285);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has put on a tactical uniform and geared up with sharpshooter equipment.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 9)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
						SetPlayerArmour(playerid, 100);
   		    	        SetPlayerHealth(playerid, 100);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s places on a Kevlar vest and eats some donuts.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   				}
				}
				else if (item == 10)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					   	SafeGivePlayerWeapon(playerid, 44, 1);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s has equipped a pair of nightvision goggles.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 					}
				}
				else if (item == 11)
				{
					if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2||PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
					{
					    SafeGivePlayerWeapon(playerid, 45, 1);
       					format(string, sizeof(string), "* %s has equipped a pair of thermal goggles.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				else if (item == 12)
				{
				    new originalskin = PlayerInfo[playerid][pChar];
					SetPlayerSkin(playerid, originalskin);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   You don't have the cash for that!");
					return 1;
				}
			}
			return 1;
		}
	}*/
	if(strcmp(cmd, "/salirestadio", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pLocal] == 125)
               {
 			        SetPlayerPos(playerid, 2695.5750,-1704.5773,11.8438);
					SetPlayerInterior(playerid,0);
					SendClientMessage(playerid, COLOR_GRAD1, "Saliste del Estadio!");
					PlayerInfo[playerid][pInt] = 0;
			        PlayerInfo[playerid][pLocal] = 255;
			   }
			   else
			   {
				SendClientMessage(playerid, COLOR_WHITE, "   No estas dentro de un Estadio!");
               }
		   }
		return 1;
	}
    if(strcmp(cmd, "/entrarestadio", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!PlayerToPoint(100, playerid,2695.5750,-1704.5773,11.8438))//Entrada Estadio
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Usted no esta en la marca roja cerca del estadio!");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAR: /entrarestadio [numero de estadio]");
				SendClientMessage(playerid, COLOR_GREEN, "|_______ Estadio LS _______|");
				SendClientMessage(playerid, COLOR_GRAD1, "| 1: Pista Karting y Hostring en 8");
				SendClientMessage(playerid, COLOR_GRAD2, "| 2: Zona para Trial");
				SendClientMessage(playerid, COLOR_GRAD4, "| 3: Destruccion Derby");
				SendClientMessage(playerid, COLOR_GRAD5, "| 4: Pista Motocross");
				return 1;
			}
			new item = strval(tmp);
            if (item == 1 && GetPlayerMoney(playerid) > 500)
            {
					new precio = 500;
			        SetPlayerPos(playerid, -1398.1489,-257.0936,1043.6569);
					SetPlayerInterior(playerid,7);
					SendClientMessage(playerid, COLOR_GRAD1, "Bienvenido a la Pista Karting y Hostring en 8 para salir escribe /salirestadio!");
					PlayerInfo[playerid][pInt] = 7;
			        PlayerInfo[playerid][pLocal] = 125;
			        SafeGivePlayerMoney(playerid,- precio);
            }
            else if (item == 2 && GetPlayerMoney(playerid) > 500)
            {
					new precio = 500;
			        SetPlayerPos(playerid, -1464.7821,1556.8812,1052.5313);
					SetPlayerInterior(playerid,14);
					SendClientMessage(playerid, COLOR_GRAD1, "Bienvenido a la Zona para Trial para salir escribe /salirestadio!");
					PlayerInfo[playerid][pInt] = 14;
			        PlayerInfo[playerid][pLocal] = 125;
			        SafeGivePlayerMoney(playerid,- precio);
            }
            else if (item == 3 && GetPlayerMoney(playerid) > 500)
            {
					new precio = 500;
			        SetPlayerPos(playerid, -1423.6663,936.7310,1036.5032);
					SetPlayerInterior(playerid,15);
					SendClientMessage(playerid, COLOR_GRAD1, "Bienvenido a Destruccion Derby para salir escribe /salirestadio!");
					PlayerInfo[playerid][pInt] = 15;
			        PlayerInfo[playerid][pLocal] = 125;
			        SafeGivePlayerMoney(playerid,- precio);
            }
            else if (item == 4 && GetPlayerMoney(playerid) > 500)
            {
					new precio = 500;
			        SetPlayerPos(playerid, -1363.4454,-667.5675,1055.9453);
					SetPlayerInterior(playerid,4);
					SendClientMessage(playerid, COLOR_GRAD1, "Bienvenido a la Pista Motocross para salir escribe /salirestadio!");
					PlayerInfo[playerid][pInt] = 4;
			        PlayerInfo[playerid][pLocal] = 125;
			        SafeGivePlayerMoney(playerid,- precio);
            }
            else
			{
				SendClientMessage(playerid, COLOR_WHITE, "   No tienes Dinero Suficiente para la entrada!");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/comprar", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53))//centerpoint 24-7
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No estas en una Tienda !");
				return 1;
			}
			new listitems[] = "1\t: Teléfono $1000\n2\t: Tarjeta Rasca $500\n3\t: Guia Telefonica $10\n4\t: Tabaco $500\n5\t: Gasolina $20\n6\t: Preservativo $1\n7\t: Mochila  $200\n8\t: Máscara $750\n9\t: Mechero $100\n10\t: Casco $400\n11\tDeseo Vender un articulo.";
	    	ShowPlayerDialog(playerid,3,DIALOG_STYLE_LIST,"Tienda |Productos en Venta|",listitems,"Comprar","Salir");
			return 1;
		}
		return 1;
	}
	if(strcmp(cmd, "/ir", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   No puedes usar este comando !");
			    return 1;
			}
			
			new listitems[] = "1\t: Alto de la torre con H.\n2\t: Glen Park.\n3\t: Skate Park.\n4\t: Zona Premiums.\n5\t: Faro de la Playa.\n6\t: Huerta de droga.\n7\t: Montaña Norte.\n8\t: Autopista LS-LV.\n9\t: Palomino Creek.\n10\t: Groove Street.\n11\t: Estadio.\n12\t: Comisaria.\n13\t: Base Militar.\n14\t: Zona Administrativa.\n15\t: Hospital.\n16\t: Banco.\n17\t: Tienda de Ropa.\n18\t: Aeropuerto.\n19\t: Licencias.\n20\t: Consecionario Motos.\n21\t: Siguiente...";
	    	ShowPlayerDialog(playerid,5,DIALOG_STYLE_LIST,"Menu de Localizaciones ordinarias",listitems,"Tele","Salir");
			return 1;
		}
		return 1;
	}
	/*if(strcmp(cmd, "/adminmenu", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   No puedes usar este comando !");
			    return 1;
			}
			new listitems[] = "1\t: Curar (INACABADO\n2\t: Curar cercanos (INACABADO)\n3\t: Reparar coche (INACABADO)\n4\t: Reparar coches cercanos (INACABADO)\n5\t: Reventar coche (INACABADO)\n6\t: Reventar coches cercanos (INACABADO)\n7\t: Respawnear coche (INACABADO)\n8\t: Respawnear todos los coches (INACABADO)\n30\t: MENU DE ADMINISTRACION EN CONSTRUCCION";
	    	ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"|Panel de Administracion| De alta velocidad... Vivan las alcachofaas!!!",listitems,"Aceptar","Salir");
			return 1;
		}
		return 1;
	}*/
/*	if(strcmp(cmd, "/comprar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53))//centerpoint 24-7
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No estas en el 24-7 24-7 !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "COMANDO: /comprar [numero articulo]");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "|_______ 24-7 _______|");
				SendClientMessage(playerid, COLOR_GRAD1, "| 1: Telefono $5000  2: Tarjeta Rasca $500 3: Gasolina 20$ ");
				return 1;
			}
			new item = strval(tmp);
		 	if(SBizzInfo[9][sbProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}
			if (item == 1 && GetPlayerMoney(playerid) > 4999)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 150 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 5000 - price;
			        format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
			    }
			    else
			    {
			        format(string, sizeof(string), "~r~-$%d", 5000);
					GameTextForPlayer(playerid, string, 5000, 1);
					SafeGivePlayerMoney(playerid,-5000);
			    }
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new randphone = 100000 + random(899999);//minimum 1000  max 9999
				PlayerInfo[playerid][pPnumber] = randphone;
				format(string, sizeof(string), "   Teléfono móvil comprado el nuevo número es %d", randphone);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Puedes comprobarlo escribiendo /estado");
				SendClientMessage(playerid, COLOR_WHITE, "Servidor: Ahora puede escribir /ayuda para ver los comandos de teléfono móvil.");
				return 1;
			}
			else if (item == 2 && GetPlayerMoney(playerid) > 500)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 500 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 500 - price;
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,-500);
					SBizzInfo[9][sbTill] += 500;
					ExtortionSBiz(9, 500);
					format(string, sizeof(string), "~r~-$%d", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new prize;
				new symb1[32]; new symb2[32]; new symb3[32];
				new randcard1 = random(10);//minimum 1000  max 9999
				new randcard2 = random(10);//minimum 1000  max 9999
				new randcard3 = random(10);//minimum 1000  max 9999
				if(randcard1 >= 5)
				{
					format(symb1, sizeof(symb1), "~b~]");
					randcard1 = 1;
				}
				else if(randcard1 <= 4 && randcard1 >= 2)
				{
					format(symb1, sizeof(symb1), "~g~]");
					randcard1 = 2;
				}
				else if(randcard1 < 2)
				{
					format(symb1, sizeof(symb1), "~y~]");
					randcard1 = 3;
				}
				if(randcard2 >= 5)
				{
					format(symb2, sizeof(symb2), "~b~]");
					randcard2 = 1;
				}
				else if(randcard2 <= 4 && randcard2 >= 2)
				{
					format(symb2, sizeof(symb2), "~g~]");
					randcard2 = 2;
				}
				else if(randcard2 < 2)
				{
					format(symb2, sizeof(symb2), "~y~]");
					randcard2 = 3;
				}
				if(randcard3 >= 5)
				{
					format(symb3, sizeof(symb3), "~b~]");
					randcard3 = 1;
				}
				else if(randcard3 <= 4 && randcard3 >= 2)
				{
					format(symb3, sizeof(symb3), "~g~]");
					randcard3 = 2;
				}
				else if(randcard3 < 2)
				{
					format(symb3, sizeof(symb3), "~y~]");
					randcard3 = 3;
				}
				if(randcard1 == randcard2 && randcard1 == randcard3)
				{
					if(randcard1 > 5)
					{
						prize = 2500;
					}
					if(randcard1 <= 4 && randcard1 >= 2)
					{
						prize = 1500;
					}
					if(randcard1 < 2)
					{
						prize = 500;
					}
					SafeGivePlayerMoney(playerid,prize);
					SBizzInfo[9][sbTill] -= prize;
					ExtortionSBiz(9, prize);
					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~g~$%d",symb1,symb2,symb3, prize);
				}
				else
				{
					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~r~$0",symb1,symb2,symb3);
				}
				GameTextForPlayer(playerid, string, 3000, 3);
				return 1;
			}
			else if (item == 3 && GetPlayerMoney(playerid) > 20)
			{
			    PlayerInfo[playerid][pFuel] = 20;
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_WHITE, "Servidor: Pones la gasolina al Vehiculo");
			    GameTextForPlayer(playerid, "~r~-$20", 5000, 1);
				return 1;
			}
		 	else if (item == 3 && GetPlayerMoney(playerid) > 10)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
					GameTextForPlayer(playerid, "~r~-$10", 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,- 10);
					SBizzInfo[9][sbTill] += 10;
					ExtortionSBiz(9, 10);
					format(string, sizeof(string), "~r~-$%d", 100);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                PlayerInfo[playerid][pPhoneBook] = 1;
				format(string, sizeof(string), "   Has comprado una agenda telefonica !");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Servidor: Escribe /numero <ID del jugador>.");
				return 1;
			}
		 	else if (item == 4 && GetPlayerMoney(playerid) > 10)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,-10);
					SBizzInfo[9][sbTill] += 10;
					ExtortionSBiz(9, 10);
					format(string, sizeof(string), "~r~-$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				gDice[playerid] = 1;
				format(string, sizeof(string), "   Has comprado unos dados.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Servidor: escribe /dado ");
				return 1;
			}
			 else if(item == 5 && GetPlayerMoney(playerid) > 5000)
			{
				if (gLastCar[playerid] != 0)
				{
					if(HireCar[playerid] != 299)
					{
						gCarLock[HireCar[playerid]] = 0;
						UnLockCar(HireCar[playerid]);
						HireCar[playerid] = 299;
					}
					if(PlayerInfo[playerid][pTraderPerk] > 0)
			    	{
						new skill = 5000 / 100;
						new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
						new payout = 5000 - price;
						SafeGivePlayerMoney(playerid,- payout);
						SBizzInfo[9][sbTill] += payout;
						ExtortionSBiz(9, payout);
						format(string, sizeof(string), "~r~-$%d", payout);
						GameTextForPlayer(playerid, string, 5000, 1);
					}
					else
					{
					    SafeGivePlayerMoney(playerid,-5000);
						SBizzInfo[9][sbTill] += 5000;
						ExtortionSBiz(9, 5000);
						format(string, sizeof(string), "~r~-$%d", 5000);
						GameTextForPlayer(playerid, string, 5000, 1);
					}
					SBizzInfo[9][sbProducts]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					HireCar[playerid] = gLastCar[playerid];
					format(string, sizeof(string), "Key Purchased You Can Lock Your Last Vehicle.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /lock ");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   You don't have a Vehicle to fit it to !");
				}
				return 1;
			}
		 	else if (item == 5 && GetPlayerMoney(playerid) > 20)
			{
			    PlayerInfo[playerid][pFuel] = 20;
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_WHITE, "Servidor: Pones la gasolina al Vehiculo");
			    GameTextForPlayer(playerid, "~r~-$20", 5000, 1);
				return 1;
			}
			 else if (item == 6 && GetPlayerMoney(playerid) > 500)
			{
				gSpeedo[playerid] = 1;
				if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 500 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 500 - price;
					SafeGivePlayerMoney(playerid,- payout);
					SBizzInfo[9][sbTill] += payout;
					ExtortionSBiz(9, payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,-500);
					SBizzInfo[9][sbTill] += 500;
					ExtortionSBiz(9, 500);
					format(string, sizeof(string), "~r~-$%d", 5000);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				SBizzInfo[9][sbProducts]--;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Speedometer Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /speedo ");
				return 1;
			}
		 	else if (item == 6 && GetPlayerMoney(playerid) > 1)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 1 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 1 - price;
					SafeGivePlayerMoney(playerid,- payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid,-1);
					format(string, sizeof(string), "~r~-$%d", 1);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				Condom[playerid] ++;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Has comprado un preservativo.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				return 1;
			}
		     else if (item == 7 && GetPlayerMoney(playerid) > 250)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 250 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 250 - price;
					SafeGivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 250);
					format(string, sizeof(string), "~r~-$%d", 250);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "CD-Player Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /music");
				PlayerInfo[playerid][pCrashed] = 1;
				return 1;
			}
			 else if (item == 7 && GetPlayerMoney(playerid) > 9)
			{
			    if(Groceries[playerid][pChickens] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You have to many Chickens, Cook some first !");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					SafeGivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
			    SafeGivePlayerMoney(playerid, - 10);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Chicken Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				format(string, sizeof(string), "~r~-$%d", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pChickens] += 1;
				Groceries[playerid][pChicken] += rand;
				return 1;
			}
			 else if (item == 8 && GetPlayerMoney(playerid) > 9)
			{
			    if(Groceries[playerid][pHamburgers] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You have to many Hamburgers, Cook some first !");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					SafeGivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
			    SafeGivePlayerMoney(playerid, - 10);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Hamburger Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				format(string, sizeof(string), "~r~-$%d", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pHamburgers] += 1;
				Groceries[playerid][pHamburger] += rand;
				return 1;
			}
			 else if (item == 9 && GetPlayerMoney(playerid) > 9)
			{
			    if(Groceries[playerid][pPizzas] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You have to many Pizzas, Cook some first !");
			        return 1;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					SafeGivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Frozen Pizza Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				new rand = random(15);
				Groceries[playerid][pPizzas] += 1;
				Groceries[playerid][pPizza] += rand;
				return 1;
			}
		 	else if (item == 7 && GetPlayerMoney(playerid) > 200)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 200 / 10;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 200 - price;
					SafeGivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 200);
					format(string, sizeof(string), "~r~-$%d", 200);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "CD-Reproductor.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "SERVIDOR: Use /musica");
				PlayerInfo[playerid][pCDPlayer] = 1;
				return 1;
			}
		 	else if (item == 8 && GetPlayerMoney(playerid) > 499)
			{
			    if(PlayerInfo[playerid][pLevel] < 5)
			    {
					SendClientMessage(playerid, COLOR_GREY, "Necesitas ser nivel 5 para comprar esto");
					return 1;
			    }
			    if(PlayerInfo[playerid][pMask] != 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Ya dispones de una");
					return 1;
			    }
			    if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
			    {
                    GameTextForPlayer(playerid, "~w~Free", 5000, 1);
				}
				else
				{
				    SafeGivePlayerMoney(playerid, - 500);
					format(string, sizeof(string), "~r~-$%d", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Has comprado una mascara.");
				GameTextForPlayer(playerid, string, 5000, 1);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "Servidor: usa /maskon o /maskoff");
				PlayerInfo[playerid][pMask] = 1;
				return 1;
			}
		 	else if (item == 9 && GetPlayerMoney(playerid) > 99)
			{
			    if(PlayerInfo[playerid][pWatch] != 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Ya dispones de una");
			        return 1;
			    }
			    SafeGivePlayerMoney(playerid, - 100);
			    format(string, sizeof(string), "~r~-$%d", 100);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    format(string, sizeof(string), "Has comprado un reloj.");
			    SendClientMessage(playerid, COLOR_WHITE, "Servidor: /hora");
			    SendClientMessage(playerid, COLOR_GRAD4, string);
			    PlayerInfo[playerid][pWatch] = 1;
			}
			else if (item == 10 && GetPlayerMoney(playerid) > 149)
			{
			    if(PlayerInfo[playerid][pFishTool] != 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ya dispones de uno !");
			        return 1;
			    }
			    SafeGivePlayerMoney(playerid, - 150);
			    format(string, sizeof(string), "~r~-$%d", 150);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "Has comprado utensilios de pesca.");
			    PlayerInfo[playerid][pFishTool] = 1;
			}
			else if (item == 11 && GetPlayerMoney(playerid) > 9)
			{
			    if(Rope[playerid] >= 5)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ya tienes 5 !");
			        return 1;
			    }
			    SafeGivePlayerMoney(playerid, - 10);
			    format(string, sizeof(string), "~r~-$%d", 10);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "Has comprado una cuerda.");
			    SendClientMessage(playerid, COLOR_GRAD4, "Para usarla pon /atar o /desatar.");
			    Rope[playerid]++;
			}
			else if (item == 12 && GetPlayerMoney(playerid) > 49)
			{
			    SafeGivePlayerMoney(playerid, - 50);
			    format(string, sizeof(string), "~r~-$%d", 50);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "Has comprado un spray.");
			    SafeGivePlayerWeapon(playerid, 41, 200);
			}
			else if (item == 13 && GetPlayerMoney(playerid) > 4)
			{
			    if(PlayerInfo[playerid][pLighter] != 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ya tienes un mechero ! ");
			        return 1;
			    }
			    SafeGivePlayerMoney(playerid, - 5);
			    PlayerInfo[playerid][pLighter] = 30;
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    format(string, sizeof(string), "~r~-$%d", 5);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    SendClientMessage(playerid, COLOR_GRAD4, "Has comprado un mechero.");
			    OnPlayerUpdate(playerid);
			    return 1;
			}
			else if (item == 14 && GetPlayerMoney(playerid) > 29)
			{
			    if(PlayerInfo[playerid][pCigarettes] != 0)
			    {
			        format(string, sizeof(string), "   Ya tienes %d botellas .", PlayerInfo[playerid][pCigarettes]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        return 1;
			    }
			    SafeGivePlayerMoney(playerid, - 30);
			    PlayerInfo[playerid][pCigarettes] = 5;
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    format(string, sizeof(string), "~r~-$%d", 30);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    SendClientMessage(playerid, COLOR_GRAD4, "Compraste 5 botellas de alcohol.");
			    OnPlayerUpdate(playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "   No tienes suficiente dinero !");
			}
		}
		return 1;
	}*/
	
	//--------CAR_OWNERSHIP_COMMANDS--------------------------------------------
	if(strcmp(cmd, "/ayudaveh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pPcarkey]!=999 && PlayerInfo[playerid][pPcarkey]!=999 && PlayerInfo[playerid][pPcarkey]!=999)
	        {
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda *** elige un comando de la lista");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Vehiculo *** /v [nombre] | /carinfo [Dentro del vehículo]");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Vehiculo *** Nombres disponibles: aparcar, bloquear, vender, vendera,");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Alquilado ** /bloquear /dejarbici /dejarveh");
			}
            if(PlayerInfo[playerid][pPcarkey] >= 587 && PlayerInfo[playerid][pPcarkey]<= 592 || PlayerInfo[playerid][pPcarkey2] >= 587 && PlayerInfo[playerid][pPcarkey2]<= 592 || PlayerInfo[playerid][pPcarkey3] >= 587 && PlayerInfo[playerid][pPcarkey3]<= 592 || PlayerInfo[playerid][pPcarkey4] >= 587 && PlayerInfo[playerid][pPcarkey4]<= 592 || PlayerInfo[playerid][pPcarkey5] >= 587 && PlayerInfo[playerid][pPcarkey5]<= 592 || HireCar[playerid] >= 587 && HireCar[playerid] <= 592)
	        {
				SendClientMessage(playerid, COLOR_YELLOW,"*** Extras ** /megafono(/m) /perrito");
			}
            if(PlayerInfo[playerid][pPcarkey] >= 593 && PlayerInfo[playerid][pPcarkey]<= 598 || PlayerInfo[playerid][pPcarkey2] >= 593 && PlayerInfo[playerid][pPcarkey2]<= 598 || PlayerInfo[playerid][pPcarkey3] >= 593 && PlayerInfo[playerid][pPcarkey3]<= 598 || PlayerInfo[playerid][pPcarkey4] >= 593 && PlayerInfo[playerid][pPcarkey4]<= 598 || PlayerInfo[playerid][pPcarkey5] >= 593 && PlayerInfo[playerid][pPcarkey5]<= 598 || HireCar[playerid] >= 593 && HireCar[playerid] <= 598)
	        {
				SendClientMessage(playerid, COLOR_YELLOW,"*** Extras ** /megafono(/m) /helado");
			}
            if(PlayerInfo[playerid][pPcarkey] >= 599 && PlayerInfo[playerid][pPcarkey]<= 604 || PlayerInfo[playerid][pPcarkey2] >= 599 && PlayerInfo[playerid][pPcarkey2]<= 604 || PlayerInfo[playerid][pPcarkey3] >= 599 && PlayerInfo[playerid][pPcarkey3]<= 604 || PlayerInfo[playerid][pPcarkey4] >= 599 && PlayerInfo[playerid][pPcarkey4]<= 604 || PlayerInfo[playerid][pPcarkey5] >= 599 && PlayerInfo[playerid][pPcarkey5]<= 604)
	        {
				SendClientMessage(playerid, COLOR_YELLOW,"*** Extras ** /carabana");
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GRAD2,"** No tienes ningun vehiculo! **");
			    return 1;
			}
		}
		return 1;
	}
	
	if(strcmp(cmd, "/adminaparcar", true) == 0)
	{
		if(IsPlayerConnected(playerid))
 		{
			new Float:x,Float:y,Float:z;
			new Float:a;
			new carid;
			carid = GetPlayerVehicleID(playerid);
			GetPlayerName(playerid, playername, sizeof(playername));
			GetVehiclePos(carid, x, y, z);
//			GetPlayerFacingAngle(playerid, a);
			GetVehicleZAngle(carid, a);
			if(PlayerInfo[playerid][pAdmin] >= 5)
			{
				CarInfo[carid][cLocationx] = x;
				CarInfo[carid][cLocationy] = y;
				CarInfo[carid][cLocationz] = z;
				CarInfo[carid][cAngle] = a;
				format(string, sizeof(string), "~n~ Has aparcado aqui este vehiculo. ~n~");
				GameTextForPlayer(playerid, "~w~ Has aparcado aqui este vehiculo.", 10000, 3);
				OnPropUpdate();
				OnPlayerUpdate(playerid);
	    		DestroyVehicle(carid);
	    		CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz]+1.0,CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],60000);
    		    LoadModsForAll(carid);
	            TuneThisCar(carid);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No estas autorizado para usar esto !");
			    return 1;
			}
		}
		return 1;
	}
	
	/*if(strcmp(cmd, "/carspawn", true) == 0)
	{
	    if(!IsPlayerConnected(playerid)) { return 1; }
	    if(PlayerInfo[playerid][pPcarkey]==999) { GameTextForPlayer(playerid, "~w~You do not have a car to locate", 2500, 3); return 1; }
	    if(PlayerInfo[playerid][pPnumber]==0) { SendClientMessage(playerid, COLOR_GRAD2, "You do not have a phone to locate your car spawn"); return 1; }
		SendClientMessage(playerid,COLOR_WHITE,"Car spawn location is red on a map");
  		SetPlayerCheckpoint(playerid,CarInfo[PlayerInfo[playerid][pPcarkey]][cLocationx], CarInfo[PlayerInfo[playerid][pPcarkey]][cLocationy], CarInfo[PlayerInfo[playerid][pPcarkey]][cLocationz], 5.0);
	    return 1;
	}*/
	/*if(strcmp(cmd, "/carlocate", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pPcarkey] != 999)
			{
			    if(PlayerInfo[playerid][pPnumber] != 0)
			    {
			        if(gPlayerCheckPointStatus[playerid] != CHECKPOINT_CAR)
			        {
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						format(string,sizeof(string),"** %s takes out a cellphone",sendername);
						ProxDetector(15.0,playerid,string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
						Wait(5000);
						SendClientMessage(playerid,COLOR_WHITE,"On-Star: This is On-Star how can I help you?");
						Wait(2000);
						format(string,sizeof(string),"%s Dice: [Cell] I'd like to locate a stolen vehicle",sendername");
	                    ProxDetector(15.0,playerid,string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	                    Wait(2000);
						SendClientMessage(playerid,COLOR_WHIE,"On-Star: Okay sir, can I have your name and identification number please");
						Wait(2000);
						format(string,sizeof(string),"%s enters in the information into their cellphone",sendername);
						ProxDetector(15.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						Wait(2000);
						SendClientMessage(playerid,COLOR_WHITE,"On-Star: Okay sir, your car location is being uploaded to your phone.");
						Wait(500);
						SendClientMessage(playerid,COLOR_WHITE,"On-Star: If you wish to cancel the trace of your car, call this number again");
						Wait(500);
						SetPlayerCheckpoint(playerid,CarInfo[PlayerInfo[playerid][pPcarkey]][cLocationx], CarInfo[PlayerInfo[playerid][pPcarkey]][cLocationy], CarInfo[PlayerInfo[playerid][pPcarkey]][cLocationz], 5.0);
						gPlayerCheckpointStatus[playerid] = CHECKPOINT_CAR;
						return 1;
					}
					else
					{
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						Wait(1000);
						SendClientMessage(playerid,COLOR_WHITE,"Your tracking of your vehicle has been automatically cancelled");
						return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid,
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You do not have a car to locate", 5000, 1);
			}
		}
		return 1;
	}*/
	//--------END_CAR_OWNERSHIP_COMMANDS----------------------------------------
	
	if(strcmp(cmd, "/comprarcasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
					{
						format(string, sizeof(string), "   No eres nivel de %d o superior !", HouseInfo[h][hLevel]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Ya tienes casa, para comprar otra, primero ventde la anterior /vendercasa. !");
						return 1;
					}
					if(GetPlayerMoney(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pPhousekey] = h;
						HouseInfo[h][hOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						SafeGivePlayerMoney(playerid,-HouseInfo[h][hValue]);
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,HouseInfo[h][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[h][hWorld]);
						SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
						GameTextForPlayer(playerid, "~w~Bienvenido a casa~n~ Recuerda que para salir~n~ debes usar /salir en la puerta", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
						PlayerInfo[playerid][pLocal] = h;
						SendClientMessage(playerid, COLOR_WHITE, "Enhorabuena por su compra !");
						SendClientMessage(playerid, COLOR_WHITE, "Recuerda poner /ayudacasa para ver informacion detallada !");
                        DateProp(playerid);
						OnPropUpdate();
						OnPlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   No tienes suficiente dinero !");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/alquiler", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
				{
					if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Ya tienes casa.");
						return 1;
					}
					if(GetPlayerMoney(playerid) > HouseInfo[h][hRent])
					{
						PlayerInfo[playerid][pPhousekey] = h;
						SafeGivePlayerMoney(playerid,-HouseInfo[h][hRent]);
						HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,HouseInfo[h][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[h][hWorld]);
						SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
						GameTextForPlayer(playerid, "~w~BIENVENIDO A CASA", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
						PlayerInfo[playerid][pLocal] = h;
						SendClientMessage(playerid, COLOR_WHITE, "Enhorabuena, has alquilado esta casa..");
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /ayudaalquiler, para informarte de los comandos.");
						OnPlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "No tienes suficiente dinero.");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/alquilar", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(GetPlayerVehicleID(playerid) >= 171 && GetPlayerVehicleID(playerid) <= 177 || GetPlayerVehicleID(playerid) >= 85 && GetPlayerVehicleID(playerid) <= 95 || GetPlayerVehicleID(playerid) == 33)
			{
				if (GetPlayerMoney(playerid) <  1000)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   No tienes dinero !");
					return 1;
				}
				if(HireCar[playerid] != 999)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Primero debes dejar tu otro vehiculo !");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "    Ya esta alquilado !");
				        return 1;
				    }
				}
				SafeGivePlayerMoney(playerid,-1000);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_WHITE,"Para dejarlo pon /dejarveh y /bloquear para bloquearlo");
				TogglePlayerControllable(playerid, 1);
				gEngine[GetPlayerVehicleID(playerid)] = 1;
				return 1;
			}
			return 1;
		}
		return 1;
	}
	if(strcmp(cmd, "/bicicleta", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(GetPlayerVehicleID(playerid) >= 153 && GetPlayerVehicleID(playerid) <= 170)//  || GetPlayerVehicleID(playerid) >= 292 && GetPlayerVehicleID(playerid) <= 314)
			{
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
			/*	if(SBizzInfo[0][sbProducts] == 1)
				{
					GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
				}
				 if(PlayerInfo[playerid][pPbiskey] == 0)
				{
					GameTextForPlayer(playerid, "~w~No charge for the boss", 5000, 3);
					TogglePlayerControllable(playerid, 1);
					return 1;
				}*/
				if (GetPlayerMoney(playerid) <  200)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   No tienes dinero !");
					return 1;
				}
				if(HireCar[playerid] != 999)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Primero debes dejar tu otra bici !");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "    Ya esta alquiladar !");
				        return 1;
				    }
				}
				SafeGivePlayerMoney(playerid,-200);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Para dejarla pon ~b~/dejarbici~n~~g~/bloquear ~w~para bloquearla",hirefee);
				TogglePlayerControllable(playerid, 1);
				gEngine[GetPlayerVehicleID(playerid)] = 1;
				GameTextForPlayer(playerid, string, 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/hirecar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /hirecar [key id]");
					return 1;
				}
				new car = strval(tmp);
				HireCar[playerid] = car;
				format(string, sizeof(string), "Key Fashioned You Can Lock Car %d.",car);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /bloquear ");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/cambiarllave", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(!SwitchKey[playerid])
			{
				if(HireCar[playerid] != 999)
				{
					SwitchKey[playerid] = 1;
					GameTextForPlayer(playerid, "~w~Ahora controlas el coche de casa", 5000, 6);
				}
				else
				{
					GameTextForPlayer(playerid, "~w~No hay coche", 5000, 6);
				}
				return 1;
			}
			else
			{
				SwitchKey[playerid] = 0;
				GameTextForPlayer(playerid, "~w~Ahora controlas el coche alquilado", 5000, 6);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/dejarveh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 999)
			{
			    if(idcar == HireCar[playerid])
			    {
			        TogglePlayerControllable(playerid, 1);
			    }
			    SetVehicleToRespawn(HireCar[playerid]);
				gCarLock[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 999;
				GameTextForPlayer(playerid, "~w~No tienes vehiculo alquilado.", 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/dejarbici", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 999)
			{
			    if(idcar == HireCar[playerid])
			    {
			        TogglePlayerControllable(playerid, 1);
			    }
			    SetVehicleToRespawn(HireCar[playerid]);
				gCarLock[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 999;
				GameTextForPlayer(playerid, "~w~No tienes una bici.", 5000, 3);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/abandonar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Eres el dueño !!!");
				return 1;
			}
			PlayerInfo[playerid][pPhousekey] = 255;
			SendClientMessage(playerid, COLOR_WHITE, "Abandonas el alquiler.");
		}
		return 1;
	}
	if(strcmp(cmd, "/cajafuerte", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			new bouse = PlayerInfo[playerid][pPhousekey];
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /cajafuerte [amount]");
					format(string, sizeof(string), "  Hay $%d en la caja de tu casa.", HouseInfo[bouse][hTakings]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /cajafuerte [amount]");
					format(string, sizeof(string), "  Hay $%d en la caja de tu casa.", HouseInfo[bouse][hTakings]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return 1;
				}
				if (cashdeposit >  HouseInfo[bouse][hTakings] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   No tienes tanto !");
					return 1;
				}
				if (!PlayerToPoint(100, playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   No estas en tu casa !");
					return 1;
				}
				else
				{
				    //ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,cashdeposit);
					HouseInfo[bouse][hTakings]=HouseInfo[bouse][hTakings]-cashdeposit;
					format(string, sizeof(string), "  Extraes $%d De la caja, En la caja queda: $%d ", cashdeposit,HouseInfo[bouse][hTakings]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "No tienes casa.");
			}
		}
		return 1;

	}
	
 	if(strcmp(cmd, "/coger", true) == 0) // by DryilZas
 	{
 		if(IsPlayerConnected(playerid))
 		{
 		    if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
 		    {
		      	new Float:ox, Float:oy, Float:oz;
	      		GetObjectPos(cajamilitar, ox, oy, oz);

				if(PlayerToPoint(3.0,playerid,ox,oy,oz))
				{
					AttachObjectToPlayer(cajamilitar,playerid, 0.0,1.0,-1.0, 0.0,0.0,0.0)
					PlayerInfo[playerid][ptengocaja] = 1;
		  			SendClientMessage(playerid, COLOR_WHITE, "   Has cojido la caja !");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   No estas cerca de la caja de municion !");
				}
 		    }
 		    else
 		    {
 		    	SendClientMessage(playerid, COLOR_WHITE, "   No eres militar !");
 		    }
 		}
	 	return 1;
 	}
 	
 	if(strcmp(cmd, "/soltar", true) == 0) // by DryilZas
 	{
 		if(IsPlayerConnected(playerid))
 		{
 		    if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
 		    {
 		        new Float:px, Float:py, Float:pz;
 		        new Float:pa;
	      		GetPlayerPos(playerid, px,py,pz);
	      		GetPlayerFacingAngle(playerid, pa);
	      		
				if(PlayerInfo[playerid][ptengocaja] == 1)
				{
					DestroyObject(cajamilitar);
					cajamilitar = CreateObject(964, px,py-1.0,pz-1.0,0.0,0.0,pa);
					PlayerInfo[playerid][ptengocaja] = 0;
		  			SendClientMessage(playerid, COLOR_WHITE, "   Has soltado la caja !");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   No tienes la caja de municion !");
				}
 		    }
 		    else
 		    {
 		    	SendClientMessage(playerid, COLOR_WHITE, "   No eres militar !");
 		    }
 		}
	 	return 1;
 	}
	
	if(strcmp(cmd, "/acarsell", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /acarsell [bizid]");
				return 1;
			}
			new car = strval(tmp);
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
				strmid(CarInfo[car][cOwner], "Dealership", 0, strlen("Dealership"), 999);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				CarInfo[car][cOwned] = 0;
				CarInfo[car][cLock] = 1;
				format(string, sizeof(string), "~w~You have sold the Car");
				GameTextForPlayer(playerid, string, 2500, 3);
				OnPropUpdate();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "You are not an admin.");
			}
		}
		return 1;
	}
	
	if(strcmp(cmd, "/asellbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /asellbiz [bizid]");
				return 1;
			}
			new biz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				BizzInfo[biz][bLocked] = 1;
				BizzInfo[biz][bOwned] = 0;
				strmid(BizzInfo[biz][bOwner], "The State", 0, strlen("The State"), 255);
				strmid(BizzInfo[biz][bExtortion], "No-one", 0, strlen("No-one"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~You have sold the Business");
				GameTextForPlayer(playerid, string, 10000, 3);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You are not an admin.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/asellsbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /asellsbiz [sbizid]");
				return 1;
			}
			new sbiz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				SBizzInfo[sbiz][sbLocked] = 1;
				SBizzInfo[sbiz][sbOwned] = 0;
				strmid(SBizzInfo[sbiz][sbOwner], "The State", 0, strlen("The State"), 255);
				strmid(SBizzInfo[sbiz][sbExtortion], "No-one", 0, strlen("No-one"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~You have sold the Business");
				GameTextForPlayer(playerid, string, 10000, 3);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You are not an admin.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/adminvendercasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /adminvendercasa [ID]");
				return 1;
			}
			new house = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hHealthx] = 0;
				HouseInfo[house][hHealthy] = 0;
				HouseInfo[house][hHealthz] = 0;
				HouseInfo[house][hArmourx] = 0;
				HouseInfo[house][hArmoury] = 0;
				HouseInfo[house][hArmourz] = 0;
				HouseInfo[house][hLock] = 1;
				HouseInfo[house][hOwned] = 0;
				HouseInfo[house][hVec] = 418;
				HouseInfo[house][hVcol1] = -1;
				HouseInfo[house][hVcol2] = -1;
				strmid(HouseInfo[house][hOwner], "The State", 0, strlen("The State"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Has puesto a la venta esta casa", HouseInfo[house][hValue]);
				GameTextForPlayer(playerid, string, 10000, 3);
				OnPropUpdate();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You are not an admin.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/vendercasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "No tienes casa.");
				return 1;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Estas casado, no puedes vender tu casa !");
		        return 1;
		    }
			if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				new house = PlayerInfo[playerid][pPhousekey];
				HouseInfo[house][hHel] = 0;
				HouseInfo[house][hArm] = 0;
				HouseInfo[house][hHealthx] = 0;
				HouseInfo[house][hHealthy] = 0;
				HouseInfo[house][hHealthz] = 0;
				HouseInfo[house][hArmourx] = 0;
				HouseInfo[house][hArmoury] = 0;
				HouseInfo[house][hArmourz] = 0;
				HouseInfo[house][hLock] = 1;
				HouseInfo[house][hOwned] = 0;
				HouseInfo[house][hVec] = 418;
				HouseInfo[house][hVcol1] = -1;
				HouseInfo[house][hVcol2] = -1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(HouseInfo[house][hOwner], "Nadie", 0, strlen("Nadie"), 255);
				//ConsumingMoney[playerid] = 1;
				SafeGivePlayerMoney(playerid,HouseInfo[house][hValue]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Enhorabuena~n~ Vendiste tu casa por: ~n~~g~$%d", HouseInfo[house][hValue]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPhousekey] = 255;
				if(PlayerInfo[playerid][pLocal] == house)
				{
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPos(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
				}
				OnPropUpdate();
				OnPlayerUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "No tienes casa.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/mejoracasa", true) == 0 || strcmp(cmd, "/mejoracasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /houseupgrade [item number]");
					SendClientMessage(playerid, COLOR_GRAD1, "|_______ Home Supplys _______|");
					SendClientMessage(playerid, COLOR_GRAD2, "| 1: Health Upgrade $50,000.");
					SendClientMessage(playerid, COLOR_GRAD3, "| 2: Armour Upgrade $100,000.");
					return 1;
				}
				new item = strval(tmp);
				switch (item)
				{
					case 1:
					{
						if(SBizzInfo[6][sbProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
							return 1;
						}
						if(PlayerInfo[playerid][pLevel] < 5)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 5 To Purchase This");
							return 1;
						}
						if(GetPlayerMoney(playerid) < 50000)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
							return 1;
						}
						HouseInfo[house][hHel] = 1;
						SafeGivePlayerMoney(playerid,-25000);
						SBizzInfo[6][sbTill] += 50000;//heal buisness
						ExtortionSBiz(6, 25000);
						SBizzInfo[6][sbProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "You Can Now Heal Yourself At Home, Type /heal.");
					}
					case 2:
					{
						if(SBizzInfo[6][sbProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
							return 1;
						}
						if (PlayerInfo[playerid][pLevel] < 7)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 7 To Purchase This");
							return 1;
						}
						if(GetPlayerMoney(playerid) < 100000)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
							return 1;
						}
						HouseInfo[house][hArm] = 1;
						SafeGivePlayerMoney(playerid,-50000);
						SBizzInfo[6][sbTill] += 50000;//heal buisness
						ExtortionSBiz(6, 50000);
						SBizzInfo[6][sbProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "You Can Now Get Armour At Home, Type /heal.");
					}
					/*case 3:
					{
						if(SBizzInfo[6][sbProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
							return 1;
						}
						if (PlayerInfo[playerid][pLevel] < 3)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 3 To Purchase This");
							return 1;
						}
						if(GetPlayerMoney(playerid) < 500)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
							return 1;
						}
						HouseInfo[house][hHealthx] = 1;
						SafeGivePlayerMoney(playerid,-500);
						SBizzInfo[6][sbTill] += 500;
						ExtortionSBiz(6, 500);
						SBizzInfo[6][sbProducts]--;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "You can now use your TV set, type /tv.");
					}*/
				}
				OnPropUpdate();
				OnPlayerUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setrenta", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /setrenta [Precio]");
					return 1;
				}
				if(strval(tmp) < 1 || strval(tmp) > 99999)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Alquiler mínimo $1, máximo $99999.");
					return 1;
				}
				HouseInfo[bouse][hRent] = strval(tmp);
				OnPropUpdate();
				format(string, sizeof(string), "Alquiler fijado en: $%d", HouseInfo[bouse][hRent]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No tienes casa");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/desrentartodos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(i != playerid)
						{
							if (PlayerInfo[i][pPhousekey] == PlayerInfo[playerid][pPhousekey] )
							{
								SendClientMessage(i, COLOR_WHITE, "Has sido expulsado de tu casa, EX-casa.");
								PlayerInfo[i][pPhousekey] = 255;
							}
						}
					}
				}
				SendClientMessage(playerid, COLOR_WHITE, "Has expulsado a todos de tu casa.");
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No tienes casa !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/desrentar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /desrentar [ID o Nombre]");
				}
				new target;
				//target = strval(tmp);
				target = ReturnUser(tmp);
				if (target == playerid)
				{
					SendClientMessage(target, COLOR_WHITE, "No puedes expulsarte a ti mismo.");
					return 1;
				}
				if(IsPlayerConnected(target))
				{
				    if(target != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[target][pPhousekey] == PlayerInfo[playerid][pPhousekey])
						{
							SendClientMessage(target, COLOR_WHITE, "Has sido expulsado de tu casa, EX-casa");
							SendClientMessage(playerid, COLOR_WHITE, "Este jugador ha sido expulsado de tu casa.");
							PlayerInfo[target][pPhousekey] = 255;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Este jugador no tiene alquilada tu casa !");
						    return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No tienes casa !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setalquiler", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /setalquiler [0/1]");
					SendClientMessage(playerid, COLOR_WHITE, "[0] = No permitir alquiler");
					SendClientMessage(playerid, COLOR_WHITE, "[1] = Permitir alquiler");
				}
				HouseInfo[bouse][hRentabil] = strval(tmp);
				OnPropUpdate();
				format(string, sizeof(string), "permiso de alquiler = %d.", HouseInfo[bouse][hRentabil]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No tienes casa !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ullamar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /ullamar [Numero]");
	        }
	        if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  You don't have a cell phone!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s saca su telefono movil.", sendername);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Escuchas un tono...");
				return 1;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Escuchas un tono de ocupado...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "   El telefono de esta persona esta apagado!");
						            return 1;
						        }
								if (Mobile[giveplayerid] == 255)
								{
									format(string, sizeof(string), "Tu telefono esta sonando (/atender) LLamada ID: DESCONOCIDO");
									SendClientMessage(giveplayerid, COLOR_YELLOW, string);
									GetPlayerName(giveplayerid, sendername, sizeof(sendername));
									RingTone[giveplayerid] = 10;
									format(string, sizeof(string), "*El Telefono de %s esta sonando.", sendername);
									SendClientMessage(playerid, COLOR_WHITE, "SERVIDOR: Tu ahora puedes usar la T para hablar, usa /colgar para finalizar la llamada");
									ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									CellTime[playerid] = 1;
									UnidentifedCall[playerid] = 1;
									return 1;
								}
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  Suena un tono...");
	    }
	    return 1;
	}
	if(strcmp(cmd, "/llamar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /llamar [numero de telefono]");
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /llamarlist (numero de servicios)");
				return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un telefono movil!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s saca un telefono movil de su bolsillo.", sendername);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			/*if(phonenumb == list)
			{
			    SendClientMessage(playerid, COLOR_GREEN, "____________Services number list____________");
			    SendClientMessage(playerid, COLOR_WHITE, "111 - pizza stack co., 222 - bus services");
			    SendClientMessage(playerid, COLOR_WHITE, "103 - medics, 444 - taxi, 555 - mechanic");
			    SendClientMessage(playerid, COLOR_GREEN, "____________________________________________");
			    return 1;
			}*/
			if(phonenumb == 111)
			{
				new pizzaworkers = 0;
			    for(new i=0; i<MAX_PLAYERS; i++)
			    {
			        if(IsPlayerConnected(i))
			        {
			            if(PlayerInfo[i][pJob] == 17 && JobDuty[i] == 1)
			            {
			                pizzaworkers++;
			            }
			        }
			    }
			
			    if(pizzaworkers < 1)
          		{
          		    SendClientMessage(playerid, COLOR_GREY, "   Han cogido la llamada.");
          		    SendClientMessage(playerid, 0xF4E19FAA, "Voz Dice (Telefono): Buenas, Pizzeria Los Santos.");
          		    SendClientMessage(playerid, 0xF4E19FAA, "Voz Dice (Telefono): Lo sentimos no ahi ningun repartidor de servicio.");
          		    SendClientMessage(playerid, COLOR_GREY, "   They hang up.");
              		return 1;
          		}
          		GetPlayerName(playerid, sendername, sizeof(sendername));
       			format(string, sizeof(string), "** %s necesita una pizza. (usa /aceptar Pizza para aceptar el pedido)", sendername);
       			SendJobMessage(17, COLOR_WHITE, string);
       			SendClientMessage(playerid, COLOR_GREY, "   Han cogido la llamada.");
       			SendClientMessage(playerid, 0xF4E19DAA, "Voz Dice (Telefono): Buenas, Pizzeria Los Santos.");
       			if(pizzaworkers == 1) { format(string, sizeof(string), "Voz Dice (Telefono): Repartidor ha sido informado sobre su pedido, señor."); }
       			else { format(string, sizeof(string), "Mans' voice Says (cellphone): Tenemos %d repartidores de servicio, han sido informados de su pedido !", pizzaworkers); }
				SendClientMessage(playerid, 0xF4E19DAA, string);
 			    SendClientMessage(playerid, COLOR_GREY, "   Cuelgan.");
       			PizzaCall = playerid;
			    return 1;
			}
   			if(phonenumb == 222)
   			{
   			    new routezonecheck = IsInBusrouteZone(playerid);
				new drivercount = 0;
				if (routezonecheck == 0)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteEast[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "En este momento hay %d conductores de bus.La ruta es la siguiente:", drivercount);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendBusRoute(playerid, 0);
					}
					else SendClientMessage(playerid, COLOR_GREY, "No hay conductores de bus en esa ruta.");
				}
				else if (routezonecheck == 1)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteWest[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "En este momento hay %d conductores de bus. La ruta es la siguiente:", drivercount);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendBusRoute(playerid, 1);
					}
					else SendClientMessage(playerid, COLOR_GREY, "No hay conductores de bus en este momento.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "No hay servicios de bus cercanos en este momento.");
				return 1;
   			}
   			if(phonenumb == 103)
   			{
   			    if(Medics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   No hay Medicos de Servicio, Llame mas tarde !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s necesita un medico. (usa /aceptar medic para aceptar la llamada)", sendername);
		    	SendRadioMessage(4, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Tu has llamado un medico, espere la respuesta.");
		    	MedicCall = playerid;
		    	return 1;
   			}
   			if(phonenumb == 444)
   			{
			    if(TaxiDrivers < 1)
		        {
          			 SendClientMessage(playerid, COLOR_GREY, "   No hay conductores de taxi en este momento!");
				     return 1;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   No puedes llamar a un taxi ahora !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s solicita un taxista. (us /aceptar taxi para aceptar la llamada)", sendername);
		    	SendRadioMessage(10, TEAM_AZTECAS_COLOR, string);
	    		SendClientMessage(playerid, COLOR_GREY, "   Han cojido la llamada.");
		    	SendClientMessage(playerid, 0xF4E19FAA, "Voz de hombre (movil): Hola, en breves un taxista ira a recogerle, gracias por llamar a la LSTA.");
		    	SendClientMessage(playerid, COLOR_GREY, "   Han colgado.");
		    	TaxiCall = playerid;
		    	return 1;
	    	}
   			if(phonenumb == 555)
   			{
   			    new mechanicworkers = 0;
			    for(new i=0; i<MAX_PLAYERS; i++)
			    {
			        if(IsPlayerConnected(i))
			        {
			            if(PlayerInfo[i][pJob] == 7 && JobDuty[i] == 1)
			            {
			                mechanicworkers++;
			            }
			        }
			    }
   			    if(mechanicworkers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Han cojido la llamada.");
		            SendClientMessage(playerid, 0xBBE1F2AA, "Voz de hombre (movil): Lo sentimos, no tenemos mecanicos disponibles en este momento.");
		            SendClientMessage(playerid, COLOR_GREY, "   Han colgado.");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s necesita un mecanico. (usa /aceptar mechanic para aceptar la llamada)", sendername);
		    	SendJobMessage(7, COLOR_WHITE, string);
		    	SendClientMessage(playerid, COLOR_GREY, "   Han cojido la llamada.");
		            SendClientMessage(playerid, 0xBBE1F2AA, "Voz de hombre (movil): Hola, ahora mismo se dirige un mecanico a su posicion, gracias por confiar en mecanicos Los Santos.");
		            SendClientMessage(playerid, COLOR_GREY, "   Han colgado.");
		    	MechanicCall = playerid;
		    	return 1;
   			}
   			/*if(phonenumb == 1180)
   			{
   			    if(PlayerInfo[playerid][pLevel] < 2)
   			    {
   			        SendClientMessage(playerid, COLOR_GREEN, "Advertisement business: We're only advertising well known people's ads.");
   			        SendClientMessage(playerid, COLOR_GRAD2, "  They hang up...");
   			    }
   			    else
   			    {
   			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /hangup to hang up");
   			    	SendClientMessage(playerid, COLOR_GREEN, "Advertisement business: Welcome to the advertisement business, what would you like to advertise?");
   			    	SendClientMessage(playerid, COLOR_WHITE, "HINT: Type your ad here. Ex: Selling my Comet");
   			    	Mobile[playerid] = 1180;
				}
   			    return 1;
   			}*/
   			if(phonenumb == 3900)
   			{
   			    SendClientMessage(playerid, COLOR_WHITE, "SERVIDOR: Tu ahora puedes usar la T para hablar, usa /colgar para finalizar la llamada");
   			    SendClientMessage(playerid, COLOR_GREEN, "CNN Studio: Please leave the message after beep!");
   			    SendClientMessage(playerid, COLOR_WHITE, "Beep!");
   			    Mobile[playerid] = 3900;
   			    return 1;
   			}
			if(phonenumb == 911)
			{
				SendClientMessage(playerid, COLOR_WHITE, "SERVIDOR: Tu ahora puedes usar la T para hablar, usa /colgar para finalizar la llamada");
				SendClientMessage(playerid, COLOR_ALLDEPT, "Emergencias: ¿Que necesita?, Police or Paramedic?");
				Mobile[playerid] = 911;
				return 1;
			}
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Telefono ocupado...");
				return 1;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Ya estas en una llamada...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "   No se ha identificado este telefono! (Apagado o fuera de cobertura)");
						            return 1;
						        }
								if (Mobile[giveplayerid] == 255)
								{
									format(string, sizeof(string), "Tu telefono esta sonando (/atender) CallerID: %s", sendername);
									SendClientMessage(giveplayerid, COLOR_YELLOW, string);
									GetPlayerName(giveplayerid, sendername, sizeof(sendername));
									RingTone[giveplayerid] = 10;
									format(string, sizeof(string), "*El Telefono de %s esta sonando.", sendername);
									SendClientMessage(playerid, COLOR_WHITE, "SERVIDOR: Tu ahora puedes usar la T para hablar, usa /colgar para finalizar la llamada");
									ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									CellTime[playerid] = 1;
									return 1;
								}
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  Suena un tono...");
		}
		return 1;
	}
	if(strcmp(cmd, "/txt", true) == 0 || strcmp(cmd, "/t", true) == 0 || strcmp(cmd, "/sms", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas logueado!");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/t)ext [Numero] [Texto]");
				return 1;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  You don't have a cell phone...");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s saca su telefono.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/t)ext [Numero] [Texto]");
				return 1;
			}
			if(phonenumb == 555)
			{
				if ((strcmp("yes", result, true, strlen(result)) == 0) && (strlen(result) == strlen("yes")))
				{
					SendClientMessage(playerid, COLOR_WHITE, "Text Message Delivered.");
					if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "SMS: I have no idea what you're talking about, Sender: MOLE (555)");
						RingTone[playerid] = 20;
						return 1;
					}
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "SMS: A simple Yes will do, Sender: MOLE (555)");
					RingTone[playerid] = 20;
					return 1;
				}
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "   That players Phone is Offline!");
						            return 1;
						        }
								format(string, sizeof(string), "SMS: %s, Sender: %s (%d)", result,sendername,PlayerInfo[playerid][pPnumber]);
								GetPlayerName(giveplayerid, sendername, sizeof(sendername));
								//format(string, sizeof(string), "* %s's phone beeps.", sendername);
								RingTone[giveplayerid] =20;
								SendClientMessage(playerid, COLOR_WHITE, "Text Message Delivered");
								SendClientMessage(giveplayerid, COLOR_YELLOW, string);
								SendClientMessage(playerid,  COLOR_YELLOW, string);
								format(string, sizeof(string), "~r~$-%d", txtcost);
								GameTextForPlayer(playerid, string, 5000, 1);
								SafeGivePlayerMoney(playerid,-txtcost);
								SBizzInfo[2][sbTill] += txtcost;
								ExtortionSBiz(2, txtcost);
					           	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					           	Mobile[playerid] = 255;
								return 1;
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  [Telefono]: ERROR");
		}
		return 1;
	}
//-----------------------------------[House virtual world]---------------------------------
    if(strcmp(cmd, "/houseworld", true) == 0)
	{
		if(IsPlayerConnected(playerid))
    	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "ESCRIBE: /houseworld [World]");
				return 1;
			}
			new level;
			level = strval(tmp);
 	    	{
             		SetWorld = level;
	  				format(string, sizeof(string), "House World Is Set To %d", SetWorld);
	  				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        	}
		}
    	return 1;
    }
//----------------------------------[pickup]-----------------------------------------------

	if(strcmp(cmd, "/atender", true) == 0 || strcmp(cmd, "/at", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  You are already on a call...");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(Mobile[i] == playerid)
					{
						Mobile[playerid] = i; //caller connecting
						SendClientMessage(i,  COLOR_GRAD2, "   Cojen la llamada.");
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s coje su telefono.", sendername);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						RingTone[playerid] = 0;
					}

				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/colgar", true) == 0 || strcmp(cmd, "/col", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new caller = Mobile[playerid];
			if(IsPlayerConnected(caller))
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_GRAD2, "   Cuelgan el Telefono.");
							CellTime[caller] = 0;
							CellTime[playerid] = 0;
							SendClientMessage(playerid,  COLOR_GRAD2, "   Cuelgas el Telefono.");
							Mobile[caller] = 255;
						}
						Mobile[playerid] = 255;
						CellTime[playerid] = 0;
						RingTone[playerid] = 0;
						PlayerInfo[playerid][pSpeaker] = 0;
						UnidentifedCall[playerid] = 0;
					}
				}
			}
			SendClientMessage(playerid,  COLOR_GRAD2, "   El telefono esta en tu bolsillo.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
		return 1;
	}
//----------------------------------[TIME]-----------------------------------------------
    if(strcmp(cmd, "/fixr", true) == 0)
    {
        if(IsPlayerConnected(playerid))
		{
			PlayerFixRadio(playerid);
		}
		return 1;
	}
    if(strcmp(cmd, "/jail", true) == 0)
    {
        if(IsPlayerConnected(playerid))
		{
			format(string, sizeof(string), "~w~Castigo restante: %d", PlayerInfo[playerid][pJailTime]);
			GameTextForPlayer(playerid, string, 5000, 1);
		}
		return 1;
	}
	if(strcmp(cmd, "/hora", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    new mtext[20];
			new year, month,day;
			getdate(year, month, day);
			if(month == 1) { mtext = "Enero"; }
			else if(month == 2) { mtext = "Febrero"; }
			else if(month == 3) { mtext = "Marzo"; }
			else if(month == 4) { mtext = "Abri"; }
			else if(month == 5) { mtext = "Mayo"; }
			else if(month == 6) { mtext = "Junio"; }
			else if(month == 7) { mtext = "Julio"; }
			else if(month == 8) { mtext = "Agosto"; }
			else if(month == 9) { mtext = "Septiembre"; }
			else if(month == 10) { mtext = "Octubre"; }
			else if(month == 11) { mtext = "Noviembre"; }
			else if(month == 12) { mtext = "Diciembre"; }
		    new hour,minuite,second;
			gettime(hour,minuite,second);
			FixHour(hour);
			hour = shifthour;
			if (minuite < 10)
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Castigo restante: %d ", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
					}
					else
					{
					    format(string, sizeof(string), "~w~Castigo restante: %d ", PlayerInfo[playerid][pJailTime]-10);
					}
				}
				else
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|", day, mtext, hour, minuite);
					}
					else
					{
					    format(string, sizeof(string), "~r~No tienes un reloj");
					}
				}
			}
			else
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~Castigo restante: %d ", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
					}
					else
					{
					    format(string, sizeof(string), "~w~Castigo restante: %d", PlayerInfo[playerid][pJailTime]-10);
					}
				}
				else
				{
				    if(PlayerInfo[playerid][pWatch] == 1)
				    {
						format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour, minuite);
					}
					else
					{
					    format(string, sizeof(string), "~r~No tienes reloj");
					}
				}
			}
			GameTextForPlayer(playerid, string, 5000, 1);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pWatch] == 1)
			{
			    if(PlayerInfo[playerid][pSex] == 1) { format(string, sizeof(string), "* %s consulta su reloj.", sendername); }
			    else { format(string, sizeof(string), "* %s consulta su reloj.", sendername); }
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			//ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
		}
		return 1;
	}
//----------------------{HOUSES}-------------------
	if(strcmp(cmd, "/ircasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 5)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /ircasa [Numero]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
				SetPlayerPos(playerid,HouseInfo[housenum][hEntrancex],HouseInfo[housenum][hEntrancey],HouseInfo[housenum][hEntrancez]);
				GameTextForPlayer(playerid, "~w~Teleporte", 5000, 1);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 0;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/houseo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 5)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /houseo [housenumber]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerPos(playerid,HouseInfo[housenum][hEntrancex],HouseInfo[housenum][hEntrancey],HouseInfo[housenum][hEntrancez]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/biz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 5)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /biz [biznumber]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,BizzInfo[housenum][bInterior]);
				SetPlayerPos(playerid,BizzInfo[housenum][bExitX],BizzInfo[housenum][bExitY],BizzInfo[housenum][bExitZ]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
				PlayerInfo[playerid][pInt] = BizzInfo[housenum][bInterior];
				PlayerInfo[playerid][pLocal] = housenum+99;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 1337)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /sbiz [biznumber]");
					return 1;
				}
				new housenum = strval(tmp);
				SetPlayerInterior(playerid,SBizzInfo[housenum][sbInterior]);
				SetPlayerPos(playerid,SBizzInfo[housenum][sbEntranceX],SBizzInfo[housenum][sbEntranceY],SBizzInfo[housenum][sbEntranceZ]);
				GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/editcarmodel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 4)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not an Admin !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /editcarmodel [modelid]");
				return 1;
			}
			new proplev = strval(tmp);
			for(new i = 0; i < sizeof(CarInfo); i++)
			{
				if(IsAnOwnableCar(idcar))
				{
					CarInfo[idcar][cModel] = proplev;
					format(string, sizeof(string), "Car: %d is now %d",idcar,CarInfo[idcar][cModel]);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					OnPropUpdate();
				}
			}
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/resethousecars", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 5)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not an Admin !");
				return 1;
			}
			HouseInfo[0][hVec] = 499; HouseInfo[1][hVec] = 499; HouseInfo[2][hVec] = 499;
			HouseInfo[3][hVec] = 499; HouseInfo[4][hVec] = 499; HouseInfo[5][hVec] = 499;
			HouseInfo[6][hVec] = 499; HouseInfo[7][hVec] = 499; HouseInfo[8][hVec] = 499;
			HouseInfo[9][hVec] = 499; HouseInfo[10][hVec] = 499; HouseInfo[11][hVec] = 499;
			HouseInfo[12][hVec] = 499; HouseInfo[13][hVec] = 499; HouseInfo[14][hVec] = 499;
			HouseInfo[15][hVec] = 499; HouseInfo[16][hVec] = 499; HouseInfo[17][hVec] = 499;
			HouseInfo[18][hVec] = 499; HouseInfo[19][hVec] = 499; HouseInfo[20][hVec] = 499;
			HouseInfo[21][hVec] = 499; HouseInfo[22][hVec] = 499; HouseInfo[23][hVec] = 499;
			HouseInfo[24][hVec] = 499; HouseInfo[25][hVec] = 499; HouseInfo[26][hVec] = 499;
			HouseInfo[27][hVec] = 499; HouseInfo[28][hVec] = 499; HouseInfo[29][hVec] = 499;
			HouseInfo[30][hVec] = 499; HouseInfo[31][hVec] = 499; HouseInfo[32][hVec] = 499;
			HouseInfo[33][hVec] = 499;
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_GREY, "   All House Cars resetted !");
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/edithousecar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < 4)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not an Admin !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /edithousecar [vecid]");
				return 1;
			}
			new proplev = strval(tmp);
			for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					HouseInfo[i][hVec] = proplev;
					format(string, sizeof(string), "House Car: %d is now %d", i,HouseInfo[i][hVec]);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
			}
			OnPropUpdate();
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/edit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] == 2000)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not an Admin !");
				return 1;
			}
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Edit __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /edit [name] [cantidad] (Used for Houses and Businesses)");
				SendClientMessage(playerid, COLOR_GREY, "Available names: Level, Price, Funds, Products");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /edit [name] [cantidad]");
				return 1;
			}
			new proplev = strval(tmp);
	        //if(strcmp(x_job,"car",true) == 0)
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					format(string, sizeof(string), "House: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"level",true) == 0)
					    {
							HouseInfo[i][hLevel] = proplev;
						}
						else if(strcmp(x_job,"price",true) == 0)
					    {
							HouseInfo[i][hValue] = proplev;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					format(string, sizeof(string), "Biz: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"level",true) == 0)
					    {
							BizzInfo[i][bLevelNeeded] = proplev;
						}
						else if(strcmp(x_job,"price",true) == 0)
					    {
							BizzInfo[i][bBuyPrice] = proplev;
						}
						else if(strcmp(x_job,"funds",true) == 0)
					    {
							BizzInfo[i][bTill] = proplev;
						}
						else if(strcmp(x_job,"products",true) == 0)
					    {
							BizzInfo[i][bProducts] = proplev;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					format(string, sizeof(string), "SBiz: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_job,"level",true) == 0)
					    {
							SBizzInfo[i][sbLevelNeeded] = proplev;
						}
						else if(strcmp(x_job,"price",true) == 0)
					    {
							SBizzInfo[i][sbBuyPrice] = proplev;
						}
						else if(strcmp(x_job,"funds",true) == 0)
					    {
							SBizzInfo[i][sbTill] = proplev;
						}
						else if(strcmp(x_job,"products",true) == 0)
					    {
							SBizzInfo[i][sbProducts] = proplev;
						}
					}
				}
			}
			format(string, sizeof(string), "You've adjusted the: %s.", x_job);
			SendClientMessage(playerid, COLOR_WHITE, string);
			OnPropUpdate();
		}
		return 1;
	}*/
	if(strcmp(cmd, "/load", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			if(tmpcar < 108 || tmpcar > 111)
			{
				GameTextForPlayer(playerid, "~r~You are not in a delivery truck", 5000, 1);
				return 1;
			}
			format(string, sizeof(string), "Products: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
			SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/comprarprods", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			new compcost = 20;
			if(PlayerToPoint(70.0, playerid, 2468.4919,-2092.9902,13.5469))
			{
				if(IsATruck(tmpcar))
				{
					if(PlayerHaul[tmpcar][pLoad] < PlayerHaul[tmpcar][pCapasity])
					{
					    new amount;
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /comprarprods [amount]");
							return 1;
						}
						amount = strval(tmp);
						if(amount < 1 || amount > 500) { SendClientMessage(playerid, COLOR_GREY, "   Can't buy less then 1 Product or more then 500!"); return 1; }
						new check= PlayerHaul[tmpcar][pLoad] + amount;
						if(check > PlayerHaul[tmpcar][pCapasity])
						{
						    format(string, sizeof(string), "   You went over the Truck Products Carry Limit of %d, you currently carry %d.",PlayerHaul[tmpcar][pCapasity],PlayerHaul[tmpcar][pLoad]);
						    SendClientMessage(playerid, COLOR_GREY, string);
						    return 1;
						}
						new cost = amount*compcost;
						if(GetPlayerMoney(playerid) >= cost)
						{
							PlayerHaul[tmpcar][pLoad] += amount;
							format(string, sizeof(string), "Products: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "You bought %d Products for $%d.", amount,cost);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							SafeGivePlayerMoney(playerid,-cost);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "You cant afford %d Products at $%d!", amount,cost);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							return 1;
						}
					}
					else
					{
							format(string, sizeof(string), "Products: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, TEAM_GROVE_COLOR, "This Vehicle does not deliver Products.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not in trucker place.");
				return 1;
			}
		}
		return 1;
	}
	//-------------------------------[SalirCajero]--------------------------------------------------------------------------
    if(strcmp(cmd, "/salircajero", true) == 0)
  	{
  	    if (PlayerToPoint(3, playerid,1776.421,-1866.541,12.766) || PlayerToPoint(3,playerid,1416.919,-1663.243,12.741) || PlayerToPoint(3,playerid,552.877,-1339.208,12.932) || PlayerToPoint(3,playerid,410.898,-1765.652,4.656) || PlayerToPoint(3,playerid,2351.203,-1539.489,23.199)|| PlayerToPoint(3,playerid,712.9537,-513.7274,16.3359))
 		{
			TogglePlayerControllable(playerid, 1);
			PlayerInfo[playerid][pLocal] = 255;
        }
        else
 		{
			SendClientMessage(playerid, COLOR_GRAD2, "   Tu no estas cerca de un cajero!");
 		}
	    return 1;
    }
    if(strcmp(cmd, "/cajero", true) == 0)
    {
                 if (PlayerToPoint(3, playerid,1776.421,-1866.541,12.766) || PlayerToPoint(3,playerid,1416.919,-1663.243,12.741) || PlayerToPoint(3,playerid,552.877,-1339.208,12.932) || PlayerToPoint(3,playerid,410.898,-1765.652,4.656) || PlayerToPoint(3,playerid,2351.203,-1539.489,23.199)|| PlayerToPoint(3,playerid,712.9537,-513.7274,16.3359))
				 {
                    TogglePlayerControllable(playerid, 0);
                    PlayerInfo[playerid][pLocal] = 103;
	                GameTextForPlayer(playerid,"~w~-- Bienvenido al Cajero Automatico --~n~Operaciones:~n~~g~/extraer  ~y~/saldo  ~r~/ingresar~n~~w~Cuando acabes: /salircajero",5000,5);
	             }
	             else
				 {
					SendClientMessage(playerid, COLOR_GRAD2, "   Tu no estas cerca de un cajero!");
				 }
                 return 1;
    }
    /*if (strcmp(cmd, "/limpiar", true) == 0)
    {
    if (PlayerInfo[playerid][pAdmin] > 3)
    {
	new string[256];
	new name[MAX_PLAYER_NAME];
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
	SendClientMessageToAll(COLOR_RED, " ");
    GetPlayerName(playerid, name, sizeof(name));
    format(string, sizeof(string), "%s ha limpiado el chat.", name);
    SendClientMessageToAll(COLOR_RED, string);
    }
    else return SendClientMessage(playerid, COLOR_RED, "Necesitas ser administrador nivel 4 para usar este comando.");
    return 1;
    }*/
        if (strcmp(cmd, "/limpiar", true) == 0)
    {
    	if (PlayerInfo[playerid][pAdmin] > 3)
    	{
			new name[MAX_PLAYER_NAME];
			for(new i = 0; i < 200; i++)
			{
				SendClientMessageToAll(COLOR_RED, " ");
			}
			GetPlayerName(playerid, name, sizeof(name));
			format(string, sizeof(string), "%s ha limpiado el chat.", name);
 			SendClientMessageToAll(COLOR_RED, string);
    	}
    	else return SendClientMessage(playerid, COLOR_RED, "Necesitas ser administrador nivel 4 para usar este comando.");
    	return 1;
    }
	if(strcmp(cmd, "/venderprods", true) == 0)
	{
	    new cashmade;
	    new tmpcar;
	    if(IsPlayerConnected(playerid))
		{
			tmpcar = GetPlayerVehicleID(playerid);
			if(!IsATruck(tmpcar))
			{
				GameTextForPlayer(playerid, "~r~You are not in a delivery truck", 5000, 1);
				return 1;
			}
			if(PlayerHaul[tmpcar][pLoad] == 0)
			{
				GameTextForPlayer(playerid, "~r~Truck is empty, return to the stock house", 5000, 1);
				format(string, sizeof(string), "Products: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
				SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
				return 1;
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(10, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					//printf("Found House :%d",i);
					for(new l = PlayerHaul[tmpcar][pLoad]; l > 0; l--)
					{
						if(BizzInfo[i][bProducts] == BizzInfo[i][bMaxProducts])
						{
							GameTextForPlayer(playerid, "~r~Our stores are full", 5000, 1);
							format(string, sizeof(string), "Cash Earned $%d.", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Products: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							return 1;
						}
						if(BizzInfo[i][bPriceProd] > BizzInfo[i][bTill])
						{
							GameTextForPlayer(playerid, "~r~We Cant Afford The Deal", 5000, 1);
							format(string, sizeof(string), "Cash Earned $%d.", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Products: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							return 1;
						}
						PlayerHaul[tmpcar][pLoad]--;
						BizzInfo[i][bProducts]++;
						cashmade = cashmade+BizzInfo[i][bPriceProd];
						//ConsumingMoney[playerid] = 1;
						SafeGivePlayerMoney(playerid,BizzInfo[i][bPriceProd]);
						BizzInfo[i][bTill] -= BizzInfo[i][bPriceProd];
						if(PlayerHaul[tmpcar][pLoad] == 0)
						{
							GameTextForPlayer(playerid, "~r~Truck is empty, return to the stock house", 5000, 1);
							format(string, sizeof(string), "Cash Earned $%d.", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Products: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							return 1;
						}
					}
					OnPropUpdate();
					return 1;
				}
			}
		}
		for(new i = 0; i < sizeof(SBizzInfo); i++)
		{
			if (PlayerToPoint(10, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
			{
				//printf("Found House :%d",i);
				for(new l = PlayerHaul[tmpcar][pLoad]; l > 0; l--)
				{
					if(SBizzInfo[i][sbProducts] == SBizzInfo[i][sbMaxProducts])
					{
						GameTextForPlayer(playerid, "~r~Our stores are full", 5000, 1);
						format(string, sizeof(string), "Cash Earned $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Products: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						return 1;
					}
					if(SBizzInfo[i][sbPriceProd] > SBizzInfo[i][sbTill])
					{
						GameTextForPlayer(playerid, "~r~We Cant Afford The Deal", 5000, 1);
						format(string, sizeof(string), "Cash Earned $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Products: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						return 1;
					}
					PlayerHaul[tmpcar][pLoad]--;
					SBizzInfo[i][sbProducts]++;
					cashmade = cashmade+SBizzInfo[i][sbPriceProd];
					//ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,SBizzInfo[i][sbPriceProd]);
					SBizzInfo[i][sbTill] -= SBizzInfo[i][sbPriceProd];
					if(PlayerHaul[tmpcar][pLoad] == 0)
					{
						GameTextForPlayer(playerid, "~r~Truck is empty, return to the stock house", 5000, 1);
						format(string, sizeof(string), "Cash Earned $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Products: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						return 1;
					}
				}
				OnPropUpdate();
				return 1;
			}
		}
		GameTextForPlayer(playerid, "~r~To Far From A Business", 5000, 1);
		return 1;
	}
	if(strcmp(cmd, "/entrar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
            if (PlayerToPoint(3, playerid,1952.8578,-2178.7393,13.5469))//voy por aqui
            {
                if (GetPlayerMoney(playerid) > 500 && paracatiempo == 0)
                {
                    new costep = 500;
				    SafeGivePlayerMoney(playerid,-costep);
			        SetPlayerPos(playerid,1656.818,-2545.714,3587.178);
		            SendClientMessage(playerid,COLOR_RED,"Date prisa y coje el paracaidas, a no ser que sepas volar");
                    paracaidas = CreatePickup(371, 3, 1656.288,-2551.814,3587.278);
	                avion = CreateObject(14404,1656.837,-2544.709,3588.430,0.0,0.0,0.0); // avion
		            SetTimer("tiempoparaca", 20000, 0);
		            paracatiempo = 1;
		            return 1;
                }
                if (GetPlayerMoney(playerid) > 500 && paracatiempo == 1)
                {
                    new costep = 500;
				    SafeGivePlayerMoney(playerid,-costep);
			        SetPlayerPos(playerid,1656.818,-2545.714,3587.178);
		            SendClientMessage(playerid,COLOR_RED,"Date prisa y coje el paracaidas sino sabes volar");
		            return 1;

                }
                else
                {
                    SendClientMessage(playerid,COLOR_RED,"No tienes Dinero Suficiente");
                }
             }
        /*    if (PlayerToPoint(3, playerid,418.7112,-1429.3812,32.4777))//voy por aqui
            {
                if (GetPlayerMoney(playerid) > 100)
                {
                    new costep = 100;
				    SafeGivePlayerMoney(playerid,-costep);
			        PaintballPlayers ++;
				    PlayerPaintballing[playerid] = 1;
				    new rand = random(sizeof(PaintballSpawns));
				    SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
				    TogglePlayerControllable(playerid, 0);
				    SetPlayerInterior(playerid, 10);
		            return 1;
                }
                else
                {
                    SendClientMessage(playerid,COLOR_RED,"No tienes Dinero Suficiente");
                }
		     }*/
			for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					//printf("Found House :%d",i);
					if(PlayerInfo[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0)
					{
						SetPlayerInterior(playerid,HouseInfo[i][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						GameTextForPlayer(playerid, "~w~Bienvenido a casa", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						HouseEntered[playerid] = i;
						if(HouseInfo[i][hInt] == 0)
						{
						    SetPlayerInterior(playerid,0);
							PlayerInfo[playerid][pInt] = 0;
							PlayerInfo[playerid][pLocal] = 255;
							SetCameraBehindPlayer(playerid);
							SetPlayerVirtualWorld(playerid,0);
							HouseEntered[playerid] = 255;
							SafeGivePlayerWeapon(playerid, 46, 0);
							GameTextForPlayer(playerid, "~w~No puedes bajar por aqui ~n~Usa el ~r~paracaidas~w~ y salta", 10000, 1);
						}
						else
						{
						    GameTextForPlayer(playerid, "~w~Bienvenido a casa", 5000, 1);
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
					}
				}
			}
		    for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					//printf("Found House :%d",i);
					/*if(!IsACop(playerid) && i == 3)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Cops only !");
					    return 1;
					}*/
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= BizzInfo[i][bEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(BizzInfo[i][bLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
								return 1;
							}
						/*	if(BizzInfo[i][bProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
								return 1;
							}*/
							SafeGivePlayerMoney(playerid,-BizzInfo[i][bEntranceCost]);
							format(string, sizeof(string), "~r~-$%d~n~~w~teclea /salir~n~ para salir", BizzInfo[i][bEntranceCost]);
							BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
							ExtortionBiz(i, BizzInfo[i][bEntranceCost]);
							//BizzInfo[i][bProducts]--;
							OnPropUpdate();
							GameTextForPlayer(playerid, string, 5000, 3);
			             	if (PlayerToPoint(3, playerid,BizzInfo[0][bEntranceX], BizzInfo[0][bEntranceY], BizzInfo[0][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[0][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Bates de Besibol a $%d (teclea /cbate para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
      	                    if (PlayerToPoint(3, playerid,BizzInfo[1][bEntranceX], BizzInfo[1][bEntranceY], BizzInfo[1][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[0][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Relojes a $%d (teclea /creloj para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[1][bEntranceX], BizzInfo[1][bEntranceY], BizzInfo[1][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[1][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden CD Reproductores a $%d (teclea /ccd para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
                            }
						    if (PlayerToPoint(3, playerid,BizzInfo[2][bEntranceX], BizzInfo[2][bEntranceY], BizzInfo[2][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[2][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Spray a $%d (teclea /cspray para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[3][bEntranceX], BizzInfo[3][bEntranceY], BizzInfo[3][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[3][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Patines a $%d (teclea /cpatines para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(10, playerid,BizzInfo[4][bEntranceX], BizzInfo[4][bEntranceY], BizzInfo[4][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[4][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se vende Platos Combinados a $%d (teclea /ccomida para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[5][bEntranceX], BizzInfo[5][bEntranceY], BizzInfo[5][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[5][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se vende Diccionario de Aleman a $%d (teclea /caleman para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[6][bEntranceX], BizzInfo[6][bEntranceY], BizzInfo[6][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[6][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se vende Ramos de Flores a $%d (teclea /cflores para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[7][bEntranceX], BizzInfo[7][bEntranceY], BizzInfo[7][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[7][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Moviles a $%d (teclea /cmovil para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[8][bEntranceX], BizzInfo[8][bEntranceY], BizzInfo[8][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[8][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Cuerdas a $%d (teclea /ccuerda para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[9][bEntranceX], BizzInfo[9][bEntranceY], BizzInfo[9][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[9][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Pasajes de Avion a $%d (teclea /cpasaje para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[10][bEntranceX], BizzInfo[10][bEntranceY], BizzInfo[10][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[10][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Botellas de Whisky a $%d (teclea /cwhisky para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[11][bEntranceX], BizzInfo[11][bEntranceY], BizzInfo[11][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[11][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Cañas de Pescar a $%d (teclea /cpesca para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[12][bEntranceX], BizzInfo[12][bEntranceY], BizzInfo[12][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[12][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Refrescos a $%d (teclea /crefresco2). Otros articulos teclea /comprar", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[13][bEntranceX], BizzInfo[13][bEntranceY], BizzInfo[13][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[13][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Refrescos a $%d (teclea /crefresco3). Otros articulos teclea /comprar", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[14][bEntranceX], BizzInfo[14][bEntranceY], BizzInfo[14][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[14][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Refrescos a $%d (teclea /crefresco4). Otros articulos teclea /comprar", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[15][bEntranceX], BizzInfo[15][bEntranceY], BizzInfo[15][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[15][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Refrescos a $%d (teclea /crefresco5). Otros articulos teclea /comprar", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[16][bEntranceX], BizzInfo[16][bEntranceY], BizzInfo[16][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[16][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Dados a $%d (teclea /cdado).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[16][bEntranceX], BizzInfo[16][bEntranceY], BizzInfo[16][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[16][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Cartas de Poker a $%d (teclea /ccartas).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[17][bEntranceX], BizzInfo[17][bEntranceY], BizzInfo[17][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[17][bPriceProd];
	                         format(string, sizeof(string), "Aqui se vende Cerveza a $%d la botella (teclea /ccerveza).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[18][bEntranceX], BizzInfo[18][bEntranceY], BizzInfo[18][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[18][bPriceProd];
	                         format(string, sizeof(string), "Aqui se vende Whisky a $%d la botella (teclea /cwhisky2).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[19][bEntranceX], BizzInfo[19][bEntranceY], BizzInfo[19][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[19][bPriceProd];
	                         format(string, sizeof(string), "Aqui se vende Whisky a $%d la botella (teclea /cwhisky3).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[20][bEntranceX], BizzInfo[20][bEntranceY], BizzInfo[20][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[20][bPriceProd];
	                         format(string, sizeof(string), "Aqui se vende Cerveza a $%d la botella (teclea /ccerveza2).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						}
						SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
						SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
						PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
					//	PlayerInfo[playerid][pLocal] = i+99;
						new dood[MAX_PLAYER_NAME];
						GetPlayerName(playerid, dood, sizeof(dood));
						format(string, sizeof(string), "%s paga $%d por entrar al negocio %d", dood, BizzInfo[i][bEntranceCost], i);
						printf("%s", string);
						PayLog(string);
						//PlayerInfo[playerid][pLocal] = i;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~No tienes suficiente dinero", 5000, 1);
					}
				}
			}	/*
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= SBizzInfo[i][sbEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(SBizzInfo[i][sbLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
								return 1;
							}
							if(SBizzInfo[i][sbProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
								return 1;
							}
							if(i == 10)
							{
							    PaintballPlayers ++;
							    PlayerPaintballing[playerid] = 1;
							    new rand = random(sizeof(PaintballSpawns));
								SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
								TogglePlayerControllable(playerid, 0);
							}
							else if(i == 11)
							{
							    PlayerKarting[playerid] = 1;
							    SendClientMessage(playerid, TEAM_GROVE_COLOR, "You can now parcipitate in a Karting Race, grab a Kart.");
							}
							else
							{
							    return 1;
							}
							SafeGivePlayerMoney(playerid,-SBizzInfo[i][sbEntranceCost]);
							gSpentCash[playerid] = GetPlayerMoney(playerid);
							SBizzInfo[i][sbProducts]--;
							SBizzInfo[i][sbTill] += SBizzInfo[i][sbEntranceCost];
							ExtortionSBiz(i, SBizzInfo[i][sbEntranceCost]);
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s payed $%d to enter sbiz %d", dood, SBizzInfo[i][sbEntranceCost], i);
							printf("%s", string);
							PayLog(string);
							OnPropUpdate();
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~You dont have the cash", 5000, 1);
					}
				}
			}
			if (PlayerToPoint(3.0, playerid,2695.6235,-1704.6960,11.8438))
			{
			    GameTextForPlayer(playerid, "~w~Welcome to the 8ball Track", 5000, 1);
			    SetPlayerInterior(playerid,7);
			    PlayerInfo[playerid][pInt] = 7;
				SetPlayerPos(playerid,-1404.5299,-259.0602,1043.6563);
			}
			else if (PlayerToPoint(8.0, playerid,-2111.5686,-443.9720,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Welcome to the Dirt Track", 5000, 1);
			    SetPlayerInterior(playerid,4);
			    PlayerInfo[playerid][pInt] = 4;
				SetPlayerPos(playerid,-1443.0554,-581.1879,1055.0472);
			}
			else if (PlayerToPoint(8.0, playerid,-2080.3079,-406.0309,38.7344))
			{
			    GameTextForPlayer(playerid, "~w~Welcome to the Stunting Track", 5000, 1);
			    SetPlayerInterior(playerid,14);
			    PlayerInfo[playerid][pInt] = 14;
				SetPlayerPos(playerid,-1464.7732,1557.5533,1052.5313);
			}
			else if (PlayerToPoint(4, playerid,2073.2979,-1831.1228,13.5469))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if(GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 2062.1294,-1831.5498,13.5469);
			        		SetVehicleZAngle(tmpcar, 90);
			        		SafeGivePlayerMoney(playerid, - SBizzInfo[5][sbEntranceCost]);
			        		SBizzInfo[5][sbTill] += SBizzInfo[5][sbEntranceCost];
			        		SBizzInfo[5][sbProducts]--;
			        		SetTimerEx("AfterSpray1", 5000, false, "i", playerid);
						}
						else
						{
						    GameTextForPlayer(playerid, "~r~Out of stock", 5000, 1);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to enter Pay & Spray.");
					}
			    }
			}
			else if (PlayerToPoint(4, playerid,1024.9756,-1030.7930,32.0257))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if(GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 1024.9763,-1021.8850,32.1016);
			        		SetVehicleZAngle(tmpcar, 0);
			        		SafeGivePlayerMoney(playerid, - SBizzInfo[5][sbEntranceCost]);
			        		SBizzInfo[5][sbTill] += SBizzInfo[5][sbEntranceCost];
			        		SBizzInfo[5][sbProducts]--;
			        		SetTimerEx("AfterSpray2", 5000, false, "i", playerid);
						}
						else
						{
						    GameTextForPlayer(playerid, "~r~Out of stock", 5000, 1);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to enter Pay & Spray.");
					}
			    }
			}
			else if (PlayerToPoint(4, playerid,488.3819,-1733.0563,11.1752))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if(GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 487.4099,-1741.4585,11.1330);
			        		SetVehicleZAngle(tmpcar, 180);
			        		SafeGivePlayerMoney(playerid, - SBizzInfo[5][sbEntranceCost]);
			        		SBizzInfo[5][sbTill] += SBizzInfo[5][sbEntranceCost];
			        		SBizzInfo[5][sbProducts]--;
			        		SetTimerEx("AfterSpray3", 5000, false, "i", playerid);
						}
						else
						{
						    GameTextForPlayer(playerid, "~r~Out of stock", 5000, 1);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to enter Pay & Spray.");
					}
			    }
			}
			else if (PlayerToPoint(4, playerid,719.8940,-464.8272,16.3359))
			{ // Pay & Spray
			    if(GetPlayerState(playerid) == 2)
			    {
			        if(GetPlayerMoney(playerid) > SBizzInfo[5][sbEntranceCost] + 100)
			        {
			            if(SBizzInfo[5][sbProducts] > 0)
			            {
           					new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, 720.3924,-456.0286,16.3359);
			        		SetVehicleZAngle(tmpcar, 0);
			        		SafeGivePlayerMoney(playerid, - SBizzInfo[5][sbEntranceCost]);
			        		SBizzInfo[5][sbTill] += SBizzInfo[5][sbEntranceCost];
			        		SBizzInfo[5][sbProducts]--;
			        		SetTimerEx("AfterSpray4", 5000, false, "i", playerid);
						}
						else
						{
						    GameTextForPlayer(playerid, "~r~Out of stock", 5000, 1);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to enter Pay & Spray.");
					}
			    }
			}*/
			if (CheckPlayerDistanceToVehicle(3.5, playerid, 22))
            {
                SetPlayerPos(playerid, -1377.2935,1491.8994,11.2031);
				PlayerInfo[playerid][pVirWorld] = 1050;
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid, 1050);
				GameTextForPlayer(playerid,"~w~Has entrado en el ~g~CAMION",5000,3);
            }
            if (CheckPlayerDistanceToVehicle(3.5, playerid, 23))
            {
                SetPlayerPos(playerid, -1377.2935,1491.8994,11.2031);
				PlayerInfo[playerid][pVirWorld] = 1051;
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid, 1051);
				GameTextForPlayer(playerid,"~w~Has entrado en el ~g~SUPER-CARGO",5000,3);
				SafeGivePlayerWeapon(playerid,46,1);
            }
            if (CheckPlayerDistanceToVehicle(3.5, playerid, 21))
            {
                SetPlayerPos(playerid, -1377.2935,1491.8994,11.2031);
				PlayerInfo[playerid][pVirWorld] = 1052;
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid, 1052);
				GameTextForPlayer(playerid,"~w~Has entrado en el ~g~TANQUE",5000,3);
            }
		}
		return 1;
	}
	if(strcmp(cmd, "/abrirpuerta", true) == 0 || strcmp(cmdtext, "/od", true)==0)
	{
		if (GetPlayerState(playerid) == 1) CheckForWalkingTeleport(playerid);
		return 1;
	}
	if(strcmp(cmd, "/salir", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			for(new i = 0; i <  sizeof(HouseInfo); i++)
			{
				//printf("House :%d",i);
				if (PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
				    if(HouseEntered[playerid] == i)
				    {
						SetPlayerInterior(playerid,0);
						SetPlayerPos(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
						PlayerInfo[playerid][pInt] = 0;
						PlayerInfo[playerid][pLocal] = 255;
						SetCameraBehindPlayer(playerid);
						SetPlayerVirtualWorld(playerid,0);
						HouseEntered[playerid] = 255;
						if(HouseInfo[i][hHel] == 1)
						{
							new Float:tempheal;
							GetPlayerHealth(playerid,tempheal);
							if(tempheal < 100.0)
							{
								SetPlayerHealth(playerid,100.0);
							}
						}
						return 1;
					}
				}
			}
			for(new i = 0; i <  sizeof(BizzInfo); i++)
			{
				//printf("Bizz :%d",i);
				if (PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerPos(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
					PlayerInfo[playerid][pLocal] = 255;
				}
			}
			new carid = GetPlayerVehicleID(playerid);
			if (IsABus(carid))
			{
				TogglePlayerControllable(playerid, 1);
				//GangZoneHideForPlayer(playerid, buszoneeast);
				//GangZoneHideForPlayer(playerid, buszonewest);
				RemovePlayerFromVehicle(playerid);
				if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0) BusrouteEnd(playerid, carid);
			}
			if (IsASweeper(carid))
			{
				TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			if(IsAHarvest(carid))
			{
			    if (carid != 0)
				{
					SetVehicleToRespawn(carid);
				}
				if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22)
				{
					FarmerPickup[playerid][0]--;
				}
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    FarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			    
			}
			if(IsADrugHarvest(carid))
			{
			    if (carid != 0)
			    {
			        SetVehicleToRespawn(carid);
			    }
			    if(DrugFarmerPickup[playerid][0] >= 1 && DrugFarmerPickup[playerid][0] <= 37)
			    {
			        DrugFarmerPickup[playerid][0]--;
			    }
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    DrugFarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
			if(IsASmuggleCar(carid))
			{
			    if(carid != 0)
			    {
			        SetVehicleToRespawn(carid);
			    }
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    SmugglerWork[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
			if(IsAnOwnableCar(carid) && CarInfo[carid][cOwned] == 0)
	   		{
	        	TogglePlayerControllable(playerid, 1);
	        	RemovePlayerFromVehicle(playerid);
	    	}
	    	if(IsPlayerInAnyVehicle(playerid) && !engineOn[GetPlayerVehicleID(playerid)] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    	{
	    	    TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			if(GetPlayerVehicleID(playerid) >= 178 && GetPlayerVehicleID(playerid) <= 183 || GetPlayerVehicleID(playerid) >= 153 && GetPlayerVehicleID(playerid) <= 162)
			{
				TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			else if (PlayerToPoint(3.0, playerid,387.7978,173.8582,1008.3828))
			{
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1481.0206,-1771.1138,18.7958);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
			}
			else if (PlayerToPoint(6.0, playerid,-1404.5299,-259.0602,1043.6563))
			{
			    SetPlayerInterior(playerid,0);
			    PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,2695.6235,-1704.6960,11.8438);
			}
			else if (PlayerToPoint(8.0, playerid,-1443.0554,-581.1879,1055.0472))
			{
			    SetPlayerInterior(playerid,0);
			    PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,-2111.5686,-443.9720,38.7344);
			}
			else if (PlayerToPoint(8.0, playerid,-1464.7732,1557.5533,1052.5313))
			{
			    SetPlayerInterior(playerid,0);
			    PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,-2080.3079,-406.0309,38.7344);
			}
			else if(NoFuel[playerid] == 1)
			{
			    TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
				NoFuel[playerid] = 0;
			}
			if (PlayerInfo[playerid][pVirWorld] == 1050)
            {
                new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(22, cwx2, cwy2, cwz2);
                SetPlayerPos(playerid, cwx2, cwy2, cwz2+3);
				PlayerInfo[playerid][pVirWorld] = 0;
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid,"~w~Has salido del ~g~CAMION",5000,3);
            }
            if (PlayerInfo[playerid][pVirWorld] == 1051)
            {
                new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(23, cwx2, cwy2, cwz2);
                SetPlayerPos(playerid, cwx2, cwy2, cwz2-5);
				PlayerInfo[playerid][pVirWorld] = 0;
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid,"~w~Has salido del ~g~SUPER-CARGO",5000,3);
            }
            if (PlayerInfo[playerid][pVirWorld] == 1052)
            {
                new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(21, cwx2, cwy2, cwz2);
                SetPlayerPos(playerid, cwx2, cwy2, cwz2+3);
				PlayerInfo[playerid][pVirWorld] = 0;
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid, 0);
				GameTextForPlayer(playerid,"~w~Has salido del ~g~TANQUE",5000,3);
            }
		}
		return 1;
	}
	/*if(strcmp(cmd, "/casa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pPhousekey] != 255)
			{
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No puedes usar esto estando en una mision !");
			        return 1;
			    }
				SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez], 4.0);
				GameTextForPlayer(playerid, "~w~Tu casa: ~r~Marca roja", 5000, 1);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
			}
			else
			{
				GameTextForPlayer(playerid, "~w~Eres un sintecho", 5000, 1);
			}
		}
		return 1;
	}*/
/*	if(strcmp(cmd, "/towcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(SBizzInfo[8][sbProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
				}
				if(CarTow(house+1))
				{
					GameTextForPlayer(playerid, "~w~Car~n~~g~Towed Home~n~~r~$-100", 5000, 1);
					SafeGivePlayerMoney(playerid,-100);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SBizzInfo[8][sbTill] += 100;//towcar buisness
					ExtortionSBiz(8, 1000);
					SBizzInfo[8][sbProducts]--;
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Car is~n~in ~r~use", 5000, 1);
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 1);
			}
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/fixcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new house = PlayerInfo[playerid][pPhousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if(SBizzInfo[8][sbProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
				}
				if(CarRespawn(house+1))
				{
					GameTextForPlayer(playerid, "~w~Car~n~~g~Repaired~n~~r~$-50", 5000, 1);
					SafeGivePlayerMoney(playerid,-50);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SBizzInfo[8][sbTill] += 50;//towcar buisness
					ExtortionSBiz(8, 1000);
					SBizzInfo[8][sbProducts]--;
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Car is~n~in ~r~use", 5000, 1);
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 1);
			}
		}
		return 1;
	}*/
//-----------------------------[TOW CAR]--------------------------------------------------------
	if(strcmp(cmd,"/remolcar",true)==0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pJob] == 7)
		    {
		        if(IsPlayerInAnyVehicle(playerid))
		        {
			    	if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
		     	   	{
		     	   	    if(GetPlayerState(playerid)==2)
		     	   	    {
							new Float:pX,Float:pY,Float:pZ;
							GetPlayerPos(playerid,pX,pY,pZ);
							new Float:vX,Float:vY,Float:vZ;
							new Found=0;
							new vid=0;
							while((vid<MAX_VEHICLES)&&(!Found))
							{
			   					vid++;
			   					GetVehiclePos(vid,vX,vY,vZ);
			   					if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
								{
			   				    	Found=1;
			   				    	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			           				{
			   				        	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						           	}
						           	else
						           	{
			    						AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
									}
			 					}
			     			}
							if(!Found)
				 			{
			   					SendClientMessage(playerid,0xFFFF00AA,"No hay coches cerca.");
			   				}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Tienes que ser el conductor!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Necesitas estar en una grua!");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Necesitas estar en una grua!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid,COLOR_GRAD2,"No eres un mecanico!");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[BIZZ]-----------------------------------------------
	if(strcmp(cmd, "/comprarbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
            if(PlayerInfo[playerid][pPbiskey] != 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "  Ya tienes un negocio debes venderlo primero con /venderbiz  ");
				return 1;
			}
			for(new b = 0; b < sizeof(SBizzInfo); b++)
			{
				if(PlayerToPoint(2.0, playerid, SBizzInfo[b][sbEntranceX], SBizzInfo[b][sbEntranceY], SBizzInfo[b][sbEntranceZ]) && SBizzInfo[b][sbOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < SBizzInfo[b][sbLevelNeeded])
					{
						format(string, sizeof(string), "Necesitas el nivel %d para comprar esto",SBizzInfo[b][sbLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(GetPlayerMoney(playerid) > SBizzInfo[b][sbBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = b+100;
						SBizzInfo[b][sbOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(SBizzInfo[b][sbOwner], sendername, 0, strlen(sendername), 255);
						SafeGivePlayerMoney(playerid,-SBizzInfo[b][sbBuyPrice]);
						PlayerPlayMusic(playerid);
						SendClientMessage(playerid, COLOR_WHITE, "Enhorabuena por tu nueva compra.");
						SendClientMessage(playerid, COLOR_WHITE, "Usa /ayuda para informarte sobre la compra.");
                        DateProp(playerid);
						OnPropUpdate();
						OnPlayerUpdate(playerid);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "No dispones de suficiente dinero");
						return 1;
					}
				}
			}
			for(new b = 0; b < sizeof(BizzInfo); b++)
			{
				if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
					{
						format(string, sizeof(string), "Necesitas el nivel %d para comprar esto",BizzInfo[b][bLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return 1;
					}
					if(GetPlayerMoney(playerid) > BizzInfo[b][bBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = b;
						BizzInfo[b][bOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(BizzInfo[b][bOwner], sendername, 0, strlen(sendername), 255);
						SafeGivePlayerMoney(playerid,-BizzInfo[b][bBuyPrice]);
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						SetPlayerPos(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
						GameTextForPlayer(playerid, "~w~Bienvenido~n~Para salir usa /salir", 5000, 3);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
					//	PlayerInfo[playerid][pLocal] = b ;
						SendClientMessage(playerid, COLOR_WHITE, "Enhorabuena por tu nueva compra.");
						SendClientMessage(playerid, COLOR_WHITE, "Usa /ayuda para informarte sobre la compra.");
                        DateProp(playerid);
						OnPropUpdate();
						OnPlayerUpdate(playerid);
						return 1; // sus muertos
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "No dispones de suficiente dinero");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/venderbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPbiskey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "No tienes un negocio que vender.");
				return 1;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   tu estas Casado no puedes venderlo !");
		        return 1;
		    }
			if(PlayerInfo[playerid][pPbiskey] >= 100 && strcmp(playername, SBizzInfo[PlayerInfo[playerid][pPbiskey]-100][sbOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pPbiskey]-100;
				SafeGivePlayerMoney(playerid,SBizzInfo[bouse][sbTill]);
				SBizzInfo[bouse][sbLocked] = 1;
				SBizzInfo[bouse][sbOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(SBizzInfo[bouse][sbOwner], "The State", 0, strlen("The State"), 255);
				strmid(SBizzInfo[bouse][sbExtortion], "No-one", 0, strlen("No-one"), 255);
				//ConsumingMoney[playerid] = 1;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Enhorabuena~n~ Vendes tu negocio por ~n~~g~$%d", SBizzInfo[bouse][sbTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				SBizzInfo[bouse][sbTill] = 0;
				PlayerInfo[playerid][pPbiskey] = 255;
				OnPropUpdate();
				OnPlayerUpdate(playerid);
				return 1;
			}
			if(strcmp(playername, BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
			{
				new bouse = PlayerInfo[playerid][pPbiskey];
				BizzInfo[bouse][bLocked] = 0;
				BizzInfo[bouse][bOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(BizzInfo[bouse][bOwner], "The State", 0, strlen("The State"), 255);
				strmid(BizzInfo[bouse][bExtortion], "No-one", 0, strlen("No-one"), 255);
				//ConsumingMoney[playerid] = 1; BizzInfo[b][bBuyPrice]
				SafeGivePlayerMoney(playerid,BizzInfo[bouse][bTill]);
			//	SafeGivePlayerMoney(playerid,BizzInfo[bouse][bBuyPrice]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Enhorabuena~n~ Vendes tu negocio por ~n~~g~$%d", BizzInfo[bouse][bTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				BizzInfo[bouse][bTill] = 0;
				PlayerInfo[playerid][pPbiskey] = 255;
				OnPropUpdate();
				OnPlayerUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto.");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/bizinfo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if(bouse == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Tu no tienes un negocio.");
				return 1;
			}
			if (bouse >= 100)
			{

				PrintSBizInfo(playerid,bouse-100);
			}
			else
			{
				PrintBizInfo(playerid,bouse);
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/precioprod", true) == 0)
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   Tu no tienes un Negocio");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /precioprod [Cantidad]");
		}
		if(strval(tmp) < 1 || strval(tmp) > 99999)
		{
			SendClientMessage(playerid, COLOR_WHITE, "El minimo tiene q ser $0, y maximo $99999.");
			return 1;
		}
	/*	if (bouse >= 100)
		{
			if(strval(tmp) > SBizzInfo[bouse-100][sbTill])
			{
				SendClientMessage(playerid, COLOR_WHITE, "You dont have that much in your Till.");
				return 1;
			}
			SBizzInfo[bouse-100][sbPriceProd] = strval(tmp);
			format(string, sizeof(string), "Buying Products for $%d.", SBizzInfo[bouse-100][sbPriceProd]);
		}*/
		else
		{
			/*if(strval(tmp) > BizzInfo[bouse][bTill])
			{
				SendClientMessage(playerid, COLOR_WHITE, "You dont have that much in your Till.");
				return 1;
			}*/
			BizzInfo[bouse][bPriceProd] = strval(tmp);
			format(string, sizeof(string), "Precio del Producto cambiado a $%d.", BizzInfo[bouse][bPriceProd]);
		}
		OnPropUpdate();
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/precioentrada", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Tu no tienes un Negocio !");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /precioentrada [Cantidad]");
			}
			if(strval(tmp) < 0 || strval(tmp) > 99999)
			{
				SendClientMessage(playerid, COLOR_WHITE, "El minimo tiene q ser $0, y maximo $99999.");
				return 1;
			}
		/*	if (bouse >= 100)
			{
				SBizzInfo[bouse-100][sbEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Entrance fee set to $%d.", SBizzInfo[bouse-100][sbEntranceCost]);
			}*/
			else
			{
				BizzInfo[bouse][bEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Precio de entrada cambiado a $%d.", BizzInfo[bouse][bEntranceCost]);
			}
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/encargado", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Tu no tienes un negocio");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /encargado [ID o Nombre] (or 555 for No-one)");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "* %s es ahora encargado de tu negocio.",giveplayer);
			        SendClientMessage(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "* %s te ha nombrado encargado de su negocio.",sendername);
			        SendClientMessage(giveplayerid, COLOR_WHITE, string);
			        if (bouse >= 100)
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(SBizzInfo[bouse-100][sbExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Business Extortion Name set to %s",SBizzInfo[bouse-100][sbExtortion]);
					}
					else
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Nuevo encargado de negocio %s",BizzInfo[bouse][bExtortion]);
					}
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else if(giveplayerid == 555)
			{
			    if (bouse >= 100)
				{
				    format(string, sizeof(string), "No-one");
					strmid(SBizzInfo[bouse-100][sbExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Business Extortion Name set to %s",SBizzInfo[bouse-100][sbExtortion]);
				}
				else
				{
				    format(string, sizeof(string), "No-one");
					strmid(BizzInfo[bouse][bExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Ahora no hay encargado, se pone %s",BizzInfo[bouse][bExtortion]);
				}
				OnPropUpdate();
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta online !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/nombreneg", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Tu no tienes un Negocio");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /nombreneg [Nombre]");
			}
			if (bouse >= 100)
			{
				strmid(SBizzInfo[bouse-100][sbMessage], result, 0, 64, 255);
				format(string, sizeof(string), "Nombre negocio %s",SBizzInfo[bouse-100][sbMessage]);
			}
			else
			{
				strmid(BizzInfo[bouse][bMessage], result, 0, 64, 255);
				format(string, sizeof(string), "Nombre negocio cambiado a %s",BizzInfo[bouse][bMessage]);
			}
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/extraerneg", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Tu no tienes un negocio");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (bouse >= 100)
				{
					format(string, sizeof(string), "  Tu tienes $%d en tu deposito.", SBizzInfo[bouse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				else
				{
					format(string, sizeof(string), "  Tu tienes $%d en tu deposito.", BizzInfo[bouse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /extraerneg [cantidad]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /extraerneg [cantidad]");
				return 1;
			}
			if (bouse >= 100)
			{
				if(cashdeposit > SBizzInfo[bouse-100][sbTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You dont have that much");
					return 1;
				}
			}
			else
			{
				if (cashdeposit > BizzInfo[bouse][bTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   No tienes suficiente");
					return 1;
				}
			}
			if (bouse >= 100)
			{
				if(!PlayerToPoint(100, playerid,SBizzInfo[bouse-100][sbEntranceX],SBizzInfo[bouse-100][sbEntranceY],SBizzInfo[bouse-100][sbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You are to far from your business");
					return 1;
				}
				else
				{
				    //ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,cashdeposit);
					SBizzInfo[bouse-100][sbTill] -= cashdeposit;
					format(string, sizeof(string), "  Tu extraes $%d de tu deposito Total: $%d ", cashdeposit,SBizzInfo[bouse-100][sbTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				if (!PlayerToPoint(100, playerid,BizzInfo[bouse][bExitX],BizzInfo[bouse][bExitY],BizzInfo[bouse][bExitZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Estas demasiado lejos de tu negocio");
					return 1;
				}
				else
				{
				    //ConsumingMoney[playerid] = 1;
					SafeGivePlayerMoney(playerid,cashdeposit);
					BizzInfo[bouse][bTill] -= cashdeposit;
					format(string, sizeof(string), "  Tu extraes $%d de tu deposito Total: $%d ", cashdeposit,BizzInfo[bouse][bTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/deposito", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			if (bouse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Tu no tienes un negocio");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (bouse >= 100)
				{
					format(string, sizeof(string), "  You Have $%d in your till.", SBizzInfo[bouse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				else
				{
					format(string, sizeof(string), "  Tu tienes $%d en el deposito.", BizzInfo[bouse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /deposito [cantidad]");
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /deposito [cantidad]");
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   No tienes es suficiente");
				return 1;
			}
			if (bouse >= 100)
			{
				if(!PlayerToPoint(100, playerid,SBizzInfo[bouse-100][sbEntranceX],SBizzInfo[bouse-100][sbEntranceY],SBizzInfo[bouse-100][sbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You are to far from your business");
					return 1;
				}
				else
				{
					SafeGivePlayerMoney(playerid,-cashdeposit);
					SBizzInfo[bouse-100][sbTill] += cashdeposit;
					ExtortionSBiz(bouse-100, cashdeposit);
					format(string, sizeof(string), "  You Have Banked $%d to your till Total: $%d ", cashdeposit,SBizzInfo[bouse-100][sbTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
			else
			{
				if (!PlayerToPoint(100, playerid,BizzInfo[bouse][bExitX],BizzInfo[bouse][bExitY],BizzInfo[bouse][bExitZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Tu estas demasiado lejos del negocio");
					return 1;
				}
				else
				{
					SafeGivePlayerMoney(playerid,-cashdeposit);
					BizzInfo[bouse][bTill] += cashdeposit;
				//	ExtortionBiz(bouse, cashdeposit);
					format(string, sizeof(string), "  Tu ingresas $%d el tu deposito Total: $%d ", cashdeposit,BizzInfo[bouse][bTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
		}
		return 1;
	}
//-----------------------------------[HEAL]-------------------------------------------------------------------------
	if(strcmp(cmd, "/curar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new location = PlayerInfo[playerid][pLocal];
			if(!strlen(tmp))
			{
				if(location != 255)
				{
					if(location < 99)
					{
						if(HouseInfo[location][hArm] == 1)
						{
							format(string, sizeof(string), "* %s puts on body armour.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SetPlayerArmour(playerid, 50.0);
						}
						else
						{
							format(string, sizeof(string), "This place does not have armour upgrades.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						if(HouseInfo[location][hHel] == 1)
						{
							new Float:tempheal;
							GetPlayerHealth(playerid,tempheal);
							if ( tempheal < 100.0)
							{
								SetPlayerHealth(playerid,100.0);
								PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
								format(string, sizeof(string), "You have been healed to 100 health.");
								SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
							}
							else
							{
								SendClientMessage(playerid, TEAM_GREEN_COLOR,"You are already healed to 100.");
							}
						}
						else
						{
							format(string, sizeof(string), "This place does not have healing upgrades.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						return 1;
					}
					else if(location == 101)//Restaurant
					{
					    new Float:tempheal;
						GetPlayerHealth(playerid,tempheal);
						if ( tempheal < 100.0)
						{
							SetPlayerHealth(playerid,100.0);
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "You have been healed to 100 health.");
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
						}
						else
						{
							SendClientMessage(playerid, TEAM_GREEN_COLOR,"You are already healed to 100.");
						}
					}
					else if(location == 102 && IsACop(playerid))//Police Armoury
					{
					    SetPlayerHealth(playerid,100.0);
					    format(string, sizeof(string), "* %s puts on body armour.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						TogglePlayerControllable(playerid, 0);
						GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
						Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
						Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
						SetPlayerPos(playerid,1527.5,-12.1,1002.0);
						PlayerInfo[playerid][pLocal] = 255;
						SetPlayerInterior(playerid,99);
						Spectate[playerid] = 257;
						SetPlayerArmour(playerid, 100.0);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /curar [ID del jugador] [precio]");
					return 1;
				}
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /curar [ID del jugador] [precio]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 1000) { SendClientMessage(playerid, COLOR_GREY, "   No puede ser menor de 1 ni mayor de 1000!"); return 1; }
			if (giveplayerid == playerid)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No puedes curarte a ti mismo!");
				return 1;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new giveambu = GetPlayerVehicleID(giveplayerid);
					new playambu = GetPlayerVehicleID(playerid);
					if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)//model
					{
						if (IsAnAmbulance(playambu) && playambu == giveambu ||PlayerToPoint(5, playerid,1191.0593,-1292.2404,5.5532) && PlayerToPoint(5, giveplayerid,1191.0593,-1292.2404,5.5532) )
						{
							new Float:tempheal;
							GetPlayerHealth(giveplayerid,tempheal);
							if(tempheal >= 100.0)
							{
								SendClientMessage(playerid, TEAM_GREEN_COLOR,"   Esa persona esta completamente curado.");
								return 1;
							}
			                if(GetPlayerMoney(giveplayerid) < 0)
				            {
             		        	SendClientMessage(playerid, COLOR_GREY, "No tiene suficiente dinero");
             		        	return 1;
                            }
							format(string, sizeof(string), "~y~Curaste ~n~~w~%s~n~~g~$%d", giveplayer,moneys);
							GameTextForPlayer(playerid, string, 5000, 1);
							SafeGivePlayerMoney(playerid,moneys);
							SafeGivePlayerMoney(giveplayerid,-moneys);
							new hp = 0;
						    if(PlayerInfo[playerid][pPainPerk] > 0)
		        			hp = 100;
		        			SetPlayerHealth(giveplayerid, 100);
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Te han curado el %d de salud -$%d",hp,moneys);
							SendClientMessage(giveplayerid, TEAM_GREEN_COLOR,string);
							if(STDPlayer[giveplayerid] > 0)
				            {
								STDPlayer[giveplayerid] = 0;
								SendClientMessage(giveplayerid, COLOR_WHITE, "* Ya no tienes ninguna enfermedad.!");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "   Uno de vosotros no esta en la ambulancia o Hospital!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar este comando!");
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d no es un jugador activo.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//-----------------------------AGL-------------------------------------------------------------------
	if(strcmp(cmd, "/lic", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] >= 2)
	        {
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /lic [nombre] [ID o Nombre]");
				    SendClientMessage(playerid, COLOR_WHITE, "Licencias: Conducir, Vuelo, Barco, Pesca, Armas1, Armas2.");
					return 1;
				}
				if(strcmp(x_nr,"vuelo",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /lic vuelo [ID o Nombre]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Has dado la licencia de vuelo a %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s te ha dado la licencia de vuelo.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Jugador erroneo!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"barco",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /lic barco [ID o Nombre]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Has dado la licencia de barco a %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s te ha dado la licencia de barco.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Jugador erroneo!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"conducir",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /lic conducir [ID o Nombre]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Has dado la licencia de conduccion a to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s te ha dado la licencia de conduccion.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Jugador erroneo!");
					    return 1;
					}
				}
                else if(strcmp(x_nr,"pesca",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /lic pesca [ID o Nombre]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Has dado la licencia de pesca a %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s te ha dado la licencia de pesca.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Jugador erroneo!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"armas1",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /lic armas1 [ID o Nombre]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Has dado la licencia de armas Tipo 1 a %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s te ha dado la licencia de armas Tipo 1.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic1] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Jugador erroneo!");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"armas2",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /lic armas2 [ID o Nombre]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* Has dado la licencia de armas Tipo 2 a %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Admin %s te ha dado la licencia de armas Tipo 2.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic2] = 1;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Jugador erroneo!");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No eres admin!");
	            return 1;
	        }
	    }
	    return 1;
 	}
//----------------------------------[mole]-----------------------------------------------
	if(strcmp(cmd, "/mole", true) == 0 && PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				//SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /mole [mole text]");
				return 1;
			}
			format(string, sizeof(string), "SMS: %s, Sender: MOLE (555)",result);
			if (gTeam[playerid] < 3){SendClientMessage(playerid, COLOR_YELLOW, string);}
			SendEnemyMessage(COLOR_YELLOW, string);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(gTeam[i] >= 3 && gPlayerSpawned[i])
					{
						RingTone[i] =20;
					}
				}
			}
			printf("MOLE: %s", result);
		}
		return 1;
	}
//----------------------------------[HQ]-----------------------------------------------
/*	if(strcmp(cmd, "/hq", true) == 0 && PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				//SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /hq [hq text]");
				return 1;
			}
			format(string, sizeof(string), "HQ: %s, over", result);
			if (gTeam[playerid] != 2 ){SendClientMessage(playerid, COLOR_DBLUE, string);}
			SendTeamBeepMessage(2, COLOR_DBLUE, string);
			printf("HQ: %s", result);
		}
		return 1;
	}*/
//----------------------------------[RECON]-----------------------------------------------
	if(strcmp(cmd, "/dumbo", true) == 0 && PlayerInfo[playerid][pAdmin] >= 2)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!BigEar[playerid])
			{
				BigEar[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Tus orejas crecen, ahora lo escuchas todo.");
			}
			else if (BigEar[playerid])
			{
				(BigEar[playerid] = 0);
				SendClientMessage(playerid, COLOR_GRAD2, "   Tus orejas disminuyen, ahora escuchas normal.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/id", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /id [ID o Nombre]");
				return 1;
			}
			new target;
			target = ReturnUser(tmp);
			new sstring[256];
			if(IsPlayerConnected(target))
			{
			    if(target != INVALID_PLAYER_ID)
			    {
					GetPlayerName(target, giveplayer, sizeof(giveplayer));
					format(sstring, sizeof(sstring), "ID: (%d) %s",target,giveplayer);
					SendClientMessage(playerid, COLOR_GRAD1, sstring);
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tv", true) == 0 || strcmp(cmd, "/recon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pDonateRank] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Necesitas ser usuario premium.");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pDonateRank] > 0)
	        {
	            if(WatchingTV[playerid] < 1)
			    {
		        	GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
		        }
	        }
            new hkey = PlayerInfo[playerid][pPhousekey];
			new house = PlayerInfo[playerid][pLocal];
			if(Spectate[playerid] == 255 && PlayerInfo[playerid][pLocal] != 255 || Spectate[playerid] == 255 && PlayerInfo[playerid][pAdmin] > 0)
			{
				GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
				Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
				Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
				PlayerInfo[playerid][pLocal] = 255;
				gTeam[playerid] = 0;
			}
			tmp = strtok(cmdtext, idx);
			if(strcmp("off", tmp, true, strlen(tmp)) == 0)
			{
			    if(WatchingTV[playerid] > 0)
			    {
			        WatchingTV[playerid] = 0;
					Spectate[playerid] = 253;
					GameTextForPlayer(playerid, "~w~                TV~n~~r~                Off", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No estas viendo la tele !");
				    return 1;
				}
			}
			if(PlayerInfo[playerid][pAdmin] < 1)
			{
				if(house == 255)
				{
					GameTextForPlayer(playerid, "~r~No hay tele", 5000, 1);
					return 1;
				}
			}
			if(PlayerInfo[playerid][pAdmin] > 1 || PlayerToPoint(12.0, playerid, HouseInfo[hkey][hExitx], HouseInfo[hkey][hExity],HouseInfo[hkey][hExitz]))
			{
			    if(HouseInfo[hkey][hHealthx] != 1)
			    {
			        GameTextForPlayer(playerid, "~r~TV no instalada en la casa", 5000, 1);
			        return 1;
			    }
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        Spectate[playerid] = giveplayerid;
						new Float:health;
						GetPlayerHealth(Spectate[playerid], health);
						GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
						new cash =  GetPlayerMoney(Spectate[playerid]);
						if (PlayerInfo[playerid][pAdmin] >= 1)
						{
							format(string, sizeof(string), "Recon: (%d) %s $%d H:%.0f",Spectate[playerid],giveplayer,cash,health);
						}
						else
						{
							format(string, sizeof(string), "UAV: (%d) %s",Spectate[playerid],giveplayer);
						}
						SendClientMessage(playerid, COLOR_GREEN, string);
						WatchingTV[playerid] = 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREEN, "Destino inlocalizable.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREEN, "   No estas en tu casa !");
				return 1;
			}
		}
		return 1;
	}
//----------------------------------[UNCON]-----------------------------------------------

/*	if(strcmp(cmd, "/uncon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SetCamBack(playerid);
		}
		return 1;
	}*/

//----------------------------------[AdminChat]-----------------------------------------------
	if(strcmp(cmd, "/admin", true) == 0 || strcmp(cmd, "/a", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/a)dmin [admin chat]");
				return 1;
			}
			
			new arank[64];
			if(PlayerInfo[playerid][pAdmin] == 1) { arank = "Moderador"; }
			else if(PlayerInfo[playerid][pAdmin] == 2) { arank = "Ayudante"; }
			else if(PlayerInfo[playerid][pAdmin] == 3) { arank = "Centinela"; }
			else if(PlayerInfo[playerid][pAdmin] == 4) { arank = "Admin"; }
			else if(PlayerInfo[playerid][pAdmin] == 5) { arank = "Super-Admin"; }
			else if(PlayerInfo[playerid][pAdmin] == 2000) { arank = "FTP-Admin"; }
			else if(PlayerInfo[playerid][pAdmin] == 2012) { arank = "Oculto"; }
			else { arank = "Admin"; }
			
			format(string, sizeof(string), "Administracion (%s %s): %s", arank, sendername, result);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				SendAdminMessage(TEAM_BLUE_COLOR, string);
			}
			printf("Admin %s: %s", sendername, result);
		}
		return 1;
	}
//-------------------------------[Logout]--------------------------------------------------------------------------
	if (strcmp(cmd, "/logout", true) ==0 )
	{
        if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				OnPlayerUpdate(playerid);
				gPlayerLogged[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD1, "   It is now safe to quit.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto !");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/logoutpl", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /logoutpl [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(giveplayerid)&&giveplayerid != INVALID_PLAYER_ID)
			    {
					OnPlayerUpdate(giveplayerid);
					gPlayerLogged[giveplayerid] = 0;
					SendClientMessage(playerid, COLOR_GRAD1, "   player was logged out.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto !");
			}
		}
		return 1;
	}
//-------------------------------[Logoutall]--------------------------------------------------------------------------
	if (strcmp(cmd, "/restart", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
			    format(string, sizeof(string), "[SERVIDOR] Toda la Informacion ha sido guardada para evitar perdidas.");
				OOCOff(COLOR_RED,string);
				format(string, sizeof(string), "[SERVIDOR] El Servidor ha sido reiniciado, reconectando....");
				OOCOff(COLOR_RED,string);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						/*PlayerInfo[i][pCrashed] = 1;
						
						new Float:x, Float:y, Float:z;
     					GetPlayerPos(i,x,y,z);
     					
						PlayerInfo[i][pPos_x] = x;
						PlayerInfo[i][pPos_y] = y;
						PlayerInfo[i][pPos_z] = z;
						
						PlayerInfo[i][pInt] = GetPlayerInterior(i);
						PlayerInfo[i][pVirWorld] = GetPlayerVirtualWorld(i);*/
						
	    				OnPlayerUpdate(i);
					}
				}
				SendRconCommand("gmx");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto !");
			}
		}
		return 1;
	}
	if (strcmp(cmd, "/logoutall", true) ==0 ) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						OnPlayerUpdate(i);
						gPlayerLogged[i] = 0;
					}
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   All Players Logged out.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto !");
			}
		}
		return 1;
	}
//--------------------------------------------------------------------------------------
	if(strcmp(cmd, "/mens", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				tmp = strtok(cmdtext, idx);
				new txtid;
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /mens <Tipo> ");
					return 1;
				}
				txtid = strval(tmp);
				if(txtid == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "El 2 no es usable");
					return 1;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /mens <Tipo> [Formato ~n~=Enter ~r~=Rojo ~g~=Verde ~b~=Azul ~w~=Blanco ~y~=Amarillo]");
					return 1;
				}
				format(string, sizeof(string), "~w~%s",result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) == 1)
					{
						GameTextForPlayer(i, string, 5000, txtid);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
				return 1;
			}
		}
		return 1;
	}
//[ADMIN]______________________________________________________________________________
//-----------------------------------[JAIL]-------------------------------------------------------------------------
	if(strcmp(cmd, "/prison",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   you are not authorized to use this command !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /prison [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
		    {
		        if(giveplayerid != INVALID_PLAYER_ID)
		        {
		            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* You placed %s in Fort DeMorgan.", giveplayer);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					format(string, sizeof(string), "* You were placed in Fort DeMorgan by Admin %s.", sendername);
					SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
					GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
					WantedPoints[giveplayerid] = 0;
					WantedLevel[giveplayerid] = 0;
					PlayerInfo[giveplayerid][pJailed] = 2;
					PlayerInfo[giveplayerid][pJailTime] = 3600;
		            SetPlayerPos(giveplayerid, 107.2300,1920.6311,18.5208);
					SetPlayerWorldBounds(giveplayerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
					SetPlayerInterior(giveplayerid,0);
					PlayerInfo[giveplayerid][pInt] = 0;
					format(string, 256, "Administración: %s ha sido encerrado por %s en la prision estatal.", giveplayer, sendername);
					BroadCast(COLOR_LIGHTRED,string);
					format(string, sizeof(string), "Administración: %s ha sido encerrado por %s en la prision estatal.", giveplayer, sendername);
					printf("%s",string);
		        }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Jugador desconectado !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/unprison",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   you are not authorized to use this command!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /unprison [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* You unprisoned %s.", giveplayer);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					format(string, sizeof(string), "* Has sido liberado por %s.", sendername);
					SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
					PlayerInfo[giveplayerid][pJailTime] = 0;
					PlayerInfo[giveplayerid][pJailed] = 0;
					SetPlayerWorldBounds(giveplayerid, 20000.0000,-20000.0000,20000.0000,-20000.0000);
					SetPlayerPos(giveplayerid, 93.4852,1920.6235,18.0450);
					format(string, 256, "Administración: %s ha sido liberado por %s.", giveplayer, sendername);
					BroadCast(COLOR_LIGHTRED,string);
					format(string, 256, "Administración: %s ha sido liberado por %s.", giveplayer, sendername);
					ABroadCast(COLOR_YELLOW,string);
				}
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/payaso", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /payaso [ID o Nombre] [time(minutos)] [reason]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /ajail [ID o Nombre] [time(minutes)] [reason]");
							return 1;
						}
						format(string, sizeof(string), "* Has encerrado a %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "* Has sido encarcelado por el administrador: %s.", sendername);
						SendClientMessage(playa, COLOR_LIGHTRED, string);
						SafeResetPlayerWeapons(playa);
						WantedPoints[playa] = 0;
						PlayerInfo[playa][pJailed] = 1;
						PlayerInfo[playa][pJailTime] = money*60;
						SetPlayerInterior(playa, 0);
						PlayerInfo[playa][pInt] = 0;
						SetPlayerSkin(playa, 264);
						SetPlayerPos(playa, 1831.9120,-1829.2828,15.4279);
						format(string, sizeof(string), "Tiempo de encarcelamiento %d'. Derechos: No se permiten abogados", money);
						SendClientMessage(playa, COLOR_WHITE, string);
						format(string, 256, "Administración: %s ha sido jaileado por %s [Razon: %s]", giveplayer, sendername, (result));
						BroadCast(COLOR_LIGHTRED,string);
						format(string, sizeof(string), "Administración: %s ha sido jaileado por %s [Razon: %s]", giveplayer, sendername, (result));
						//SetTimerEx("salircarcel", money*600, false, "i", playa);
						printf("%s",string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ajail", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /ajail [ID o Nombre] [time(minutos)] [reason]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /ajail [ID o Nombre] [time(minutes)] [reason]");
							return 1;
						}
						format(string, sizeof(string), "* Has encerrado a %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "* Has sido encarcelado por el administrador: %s.", sendername);
						SendClientMessage(playa, COLOR_LIGHTRED, string);
						SafeResetPlayerWeapons(playa);
						WantedPoints[playa] = 0;
						PlayerInfo[playa][pJailed] = 1;
						PlayerInfo[playa][pJailTime] = money*60;
						SetPlayerInterior(playa, 6);
						PlayerInfo[playa][pInt] = 6;
						SetPlayerPos(playa, 264.6288,77.5742,1001.0391);
						format(string, sizeof(string), "Tiempo de encarcelamiento %d'. Derechos: No se permiten abogados", money);
						SendClientMessage(playa, COLOR_WHITE, string);
						format(string, 256, "Administración: %s ha sido jaileado por %s [Razon: %s]", giveplayer, sendername, (result));
						BroadCast(COLOR_LIGHTRED,string);
						format(string, sizeof(string), "Administración: %s ha sido jaileado por %s [Razon: %s]", giveplayer, sendername, (result));
						//SetTimerEx("salircarcel", money*600, false, "i", playa);
						printf("%s",string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
//----------------------------------[TOD]-----------------------------------------------

	if(strcmp(cmd, "/tod", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /tod [timeofday] (0-23)");
				return 1;
			}
			new hour;
			hour = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
	            SetWorldTime(hour);
				format(string, sizeof(string), "   Time set to %d Hours.", hour);
				BroadCast(COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/startlotto", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 5)
	        {
	            format(string, sizeof(string), "______________|Loteria Diaria|______________");
	            OOCOff(COLOR_DBLUE, string);
	            new rand = random(80);
	            if(rand < 77) { rand += 3; }
	            Lotto(rand);
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No eres admin !");
	            return 1;
	        }
	    }
		return 1;
	}
	if(strcmp(cmd, "/startpayday", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 5)
	        {
	            PayDay();
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No eres admin !");
	            return 1;
	        }
	    }
		return 1;
	}
	
//-----------------------------------editstat---------------------------------------
	if(strcmp(cmd, "/setstat", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /setstat [ID o Nombre] [statcode] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Lvl |2 VidaSpawn |3 P.Mejora |4 Skin |5 Dinero-Banco");
				SendClientMessage(playerid, COLOR_GRAD3, "|6 Tlf. |7 P.Respeto |8 Llave-Casa |9 Llave-Negocio |10 Premium");
				SendClientMessage(playerid, COLOR_GRAD2, "|11 Organiz |12 Sk.Detective |13 Sk.Abogado |14 Fixer |15 Sk.CNN |16 Sk.RobCoche");
				SendClientMessage(playerid, COLOR_GRAD2, "|17 Sk.Camello |18 |17 Sk.Puta |19 Sk.Box |20 Llave-Prestada");
				SendClientMessage(playerid, COLOR_GRAD2, "|21 VehKey1 |22 VehKey2 |23 VehKey3 |24 Drogas |25 Sk.Pesca");
				SendClientMessage(playerid, COLOR_GRAD2, "|77 Trabajo |88 Contrato |66 VehKey4 |67 VehKey5|99 Mundo Virtual");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
	    	{
	    	    if(giveplayerid != INVALID_PLAYER_ID)
	    	    {
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /setstat [ID o Nombre] [statcode] [amount]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 Lvl |2 VidaSpawn |3 P.Mejora |4 Skin |5 Dinero-Banco");
						SendClientMessage(playerid, COLOR_GRAD3, "|6 Tlf. |7 P.Respeto |8 Llave-Casa |9 Llave-Negocio |10 Premium");
						SendClientMessage(playerid, COLOR_GRAD2, "|11 Organiz |12 Sk.Detective |13 Sk.Abogado |14 Fixer |15 Sk.CNN |16 Sk.RobCoche");
						SendClientMessage(playerid, COLOR_GRAD2, "|17 Sk.Camello |18 |17 Sk.Puta |19 Sk.Box |20 Llave-Prestada");
						SendClientMessage(playerid, COLOR_GRAD2, "|21 VehKey1 |22 VehKey2 |23 VehKey3 |24 Drogas |25 Sk.Pesca");
						SendClientMessage(playerid, COLOR_GRAD2, "|77 Trabajo |88 Contrato |66 VehKey4 |67 VehKey5|99 Mundo Virtual");
						return 1;
					}
					new stat;
					stat = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /setstat [ID o Nombre] [statcode] [amount]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 Lvl |2 VidaSpawn |3 P.Mejora |4 Skin |5 Dinero-Banco");
						SendClientMessage(playerid, COLOR_GRAD3, "|6 Tlf. |7 P.Respeto |8 Llave-Casa |9 Llave-Negocio |10 Premium");
						SendClientMessage(playerid, COLOR_GRAD2, "|11 Organiz |12 Sk.Detective |13 Sk.Abogado |14 Fixer |15 Sk.CNN |16 Sk.RobCoche");
						SendClientMessage(playerid, COLOR_GRAD2, "|17 Sk.Camello |18 |17 Sk.Puta |19 Sk.Box |20 Llave-Prestada");
						SendClientMessage(playerid, COLOR_GRAD2, "|21 VehKey1 |22 VehKey2 |23 VehKey3 |24 Drogas |25 Sk.Pesca");
						SendClientMessage(playerid, COLOR_GRAD2, "|77 Trabajo |88 Contrato |66 VehKey4 |67 VehKey5|99 Mundo Virtual");
						return 1;
					}
					new amount;
					amount = strval(tmp);
					if (PlayerInfo[playerid][pAdmin] >= 5)
					{
						switch (stat)
						{
							case 1:
							{
								PlayerInfo[giveplayerid][pLevel] = amount;
								format(string, sizeof(string), "   The Player Was Set To Level %d", amount);
							}
							case 2:
							{
								PlayerInfo[giveplayerid][pSHealth] = amount;
								format(string, sizeof(string), "   The Player Was Set To %d Spawnhealth ", amount);
							}
							case 3:
							{
								PlayerInfo[giveplayerid][gPupgrade] = amount;
								format(string, sizeof(string), "   The Player Was Set To %d Upgrade Points", amount);
							}
							case 4:
							{
								PlayerInfo[giveplayerid][pModel] = amount;
								format(string, sizeof(string), "   The Player Was Set To Model %d", amount);
							}
							case 5:
							{
								PlayerInfo[giveplayerid][pAccount] = amount;
								format(string, sizeof(string), "   The Player Account Was Set To $%d", amount);
							}
							case 6:
							{
								PlayerInfo[giveplayerid][pPnumber] = amount;
								format(string, sizeof(string), "   The Player Phone Number Was Set To %d", amount);
							}
							case 7:
							{
								PlayerInfo[giveplayerid][pExp] = amount;
								format(string, sizeof(string), "   The Player Respect Points Were Set To %d", amount);
							}
							case 8:
							{
								PlayerInfo[giveplayerid][pPhousekey] = amount;
								format(string, sizeof(string), "   The Player House Key Was Set To %d", amount);
							}
							case 9:
							{
								PlayerInfo[giveplayerid][pPbiskey] = amount;
								format(string, sizeof(string), "   The Player Business Key Was Set To %d", amount);
							}
							case 10:
							{
								PlayerInfo[giveplayerid][pDonateRank] = amount;
								format(string, sizeof(string), "   The Player DonateRank Was Set To %d", amount);
							}
							case 11:
							{
								PlayerInfo[giveplayerid][pFMember] = amount;
								format(string, sizeof(string), "   The Player Family Member Was Set To %d", amount);
							}
							case 12:
							{
								PlayerInfo[giveplayerid][pDetSkill] = amount;
								format(string, sizeof(string), "   The Player Detective Skill Set To %d", amount);
							}
							case 13:
							{
								PlayerInfo[giveplayerid][pLawSkill] = amount;
								format(string, sizeof(string), "   The Player Lawyer Skill Set To %d", amount);
							}
							case 14:
							{
								PlayerInfo[giveplayerid][pMechSkill] = amount;
								format(string, sizeof(string), "   The Player Car Mechanic Skill Set To %d", amount);
							}
							case 15:
							{
								PlayerInfo[giveplayerid][pNewsSkill] = amount;
								format(string, sizeof(string), "   The Player News Reporter Skill Set To %d", amount);
							}
							case 16:
							{
								PlayerInfo[giveplayerid][pJackSkill] = amount;
								format(string, sizeof(string), "   The Player Car Jacker Skill Set To %d", amount);
							}
							case 17:
							{
								PlayerInfo[giveplayerid][pDrugsSkill] = amount;
								format(string, sizeof(string), "   The Player Drug Dealer Skill Set To %d", amount);
							}
							case 18:
							{
								PlayerInfo[giveplayerid][pSexSkill] = amount;
								format(string, sizeof(string), "   The Player Sex Skill Set To %d", amount);
							}
							case 19:
							{
								PlayerInfo[giveplayerid][pBoxSkill] = amount;
								format(string, sizeof(string), "   The Player Box Skill Set To %d", amount);
							}
							case 21:
							{
							    PlayerInfo[giveplayerid][pPcarkey] = amount;
							    format(string, sizeof(string), "   The Player VehKey1 Set To %d", amount);
							}
							case 22:
							{
							    PlayerInfo[giveplayerid][pPcarkey2] = amount;
							    format(string, sizeof(string), "   The Player VehKey2 Set To %d", amount);
							}
							case 23:
							{
							    PlayerInfo[giveplayerid][pPcarkey3] = amount;
							    format(string, sizeof(string), "   The Player VehKey3 Set To %d", amount);
							}
							case 24:
							{
								PlayerInfo[giveplayerid][pDrugs] = amount;
								format(string, sizeof(string), "   The Player Drugs Set To %d", amount);
							}
							case 25:
							{
								PlayerInfo[giveplayerid][pFishSkill] = amount;
								format(string, sizeof(string), "   The Player Fishing Skill Set To %d", amount);
							}
							case 77:
							{
								PlayerInfo[giveplayerid][pJob] = amount;
								format(string, sizeof(string), "   Trabajo fijado en %d", amount);
							}
							case 88:
							{
								PlayerInfo[giveplayerid][pContractTime] = amount;
								format(string, sizeof(string), "   Tiempo de dejar trabajo fijado en %d", amount);
							}
						    case 66:
							{
							    PlayerInfo[giveplayerid][pPcarkey4] = amount;
							    format(string, sizeof(string), "   The Player VehKey4 Set To %d", amount);
							}
						    case 67:
							{
							    PlayerInfo[giveplayerid][pPcarkey5] = amount;
							    format(string, sizeof(string), "   The Player VehKey5 Set To %d", amount);
							}
		                    case 99:
							{
							    PlayerInfo[giveplayerid][pVirWorld] = amount;
							    format(string, sizeof(string), "   The Player VirWorld Set To %d", amount);
							}
							default:
							{
								format(string, sizeof(string), "   Numero invalido", amount);
							}

						}
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
					}
				}//not valid id
			}//not connected
		}
		return 1;
	}
	/*if(strcmp(cmd, "/setfamily", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new family;
			family = strval(tmp);
			if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
			family -= 1;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new stat;
			stat = strval(tmp);
			if(stat < 1 || stat > 1) { SendClientMessage(playerid, COLOR_GREY, "   Stat Code can't be below 1 or above 1 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /setfamily [Family] [code] [amount]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 Members");
				return 1;
			}
			new amount;
			amount = strval(tmp);
			if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   Amount can't be below 1 or above 10 !"); return 1; }
			switch (stat)
			{
			    case 1:
			    {
					FamilyInfo[family][FamilyMembers] = amount;
					format(string, sizeof(string), "   Family %s set to %d members", FamilyInfo[family][FamilyName], amount);
			    }
			    default:
			    {
			    	format(string, sizeof(string), "   Invalid Stat Code");
			    }
			}
			SendClientMessage(playerid, COLOR_GREY, string);
		}
		return 1;
	}*/
//----------------------------------[SETINT]-----------------------------------------------
	if(strcmp(cmd, "/setint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /setint [ID o Nombre] [interiorid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new intid;
			tmp = strtok(cmdtext, idx);
			intid = strvalEx(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerInterior(playa, intid);
						PlayerInfo[playa][pInt] = intid;
						format(string, sizeof(string), "   Cambiaste el interior a %d.", giveplayer, intid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   %s te ha cambiado el interior %d.", sendername, intid);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setvir", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /setvir [ID o Nombre] [mundo]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new virid;
			tmp = strtok(cmdtext, idx);
			virid = strvalEx(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[playa][pVirWorld] = virid;
						format(string, sizeof(string), "   You havae set %s mundo to %d.", giveplayer, virid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   %s has set your mundo to %d.", sendername, virid);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
//----------------------------------[SETVW]-----------------------------------------------
 	if(strcmp(cmd, "/setvw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /setvw [ID o Nombre] [virworldid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new virid;
			tmp = strtok(cmdtext, idx);
			virid = strvalEx(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerVirtualWorld(playa, virid);
						format(string, sizeof(string), "   You have set %s virtual world to %d.", giveplayer, virid);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   %s have set your virtual world to %d.", sendername, virid);
						SendClientMessage(playa, COLOR_GRAD1, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
//----------------------------------[SKYDIVE]------------------------------------------------
	if(strcmp(cmd, "/lanzar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				GetPlayerPos(playerid, rx, ry, rz);
				if (IsPlayerConnected(playerid))
				{
					SafeGivePlayerWeapon(playerid, 46, 0);
					SetPlayerPos(playerid,rx, ry, rz+1500);
					SendClientMessage(playerid, COLOR_WHITE, "GO!! GO!! GO!! Explora el mapa en busca de Chetos!! ^^");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
//----------------------------------[FOURDIVE]------------------------------------------------
	if(strcmp(cmd, "/fourdive", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /fourdive [playerid1] [playerid2] [playerid3] [playerid4]");
				return 1;
			}
			new para1;
			new para2;
			new para3;
			new para4;
			para1 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para2 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para3 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para4 = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
				if (IsPlayerConnected(para1)){ SafeGivePlayerWeapon(para1, 46, 0); SetPlayerPos(para1,1536.0, -1360.0, 1350.0);SetPlayerInterior(para1,0);PlayerInfo[para1][pInt] = 0;SendClientMessage(para1, COLOR_WHITE, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para2)) && (para2>0)) { SafeGivePlayerWeapon(para2, 46, 0); SetPlayerPos(para2,1536.0, -1345.0, 1350.0);SetPlayerInterior(para2,0);PlayerInfo[para2][pInt] = 0;SendClientMessage(para2, COLOR_RED, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para3)) && (para3>0)) { SafeGivePlayerWeapon(para3, 46, 0); SetPlayerPos(para3,1552.0, -1345.0, 1350.0);SetPlayerInterior(para3,0);PlayerInfo[para3][pInt] = 0;SendClientMessage(para3, COLOR_RED, "GO!! GO!! GO!!");}
				if ((IsPlayerConnected(para4)) && (para4>0)) { SafeGivePlayerWeapon(para4, 46, 0); SetPlayerPos(para4,1552.0, -1360.0, 1350.0);SetPlayerInterior(para4,0);PlayerInfo[para4][pInt] = 0;SendClientMessage(para4, COLOR_RED, "GO!! GO!! GO!!");}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
//----------------------------------[INVITAR]------------------------------------------------
	if(strcmp(cmd, "/invitar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "COMANDO:  /invitar [ID Jugador]");
				return 1;
			}
			new para1;
			new ftext[20];
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pLeader] >= 1 && PlayerInfo[playerid][pLeader] != 17 && PlayerInfo[playerid][pLeader] != 18)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (gTeam[para1]==TEAM_GREEN && PlayerInfo[para1][pMember] == 0 && PlayerInfo[para1][pFMember] == 255)
					    if (gTeam[para1]==TEAM_GREEN && PlayerInfo[para1][pMember] == 0 && PlayerInfo[para1][pFMember] == 255)
					    {
					        if(PlayerInfo[playerid][pLeader] == 1) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "LSPD"; ChosenSkin[para1] = 71; SetPlayerSkin(para1, 71); }
					        else if(PlayerInfo[playerid][pLeader] == 2) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "FBI/ATF"; ChosenSkin[para1] = 286; SetPlayerSkin(para1, 286); }
					        else if(PlayerInfo[playerid][pLeader] == 3) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "Ejercito LS"; ChosenSkin[para1] = 287; SetPlayerSkin(para1, 287); }
					        else if(PlayerInfo[playerid][pLeader] == 4) { PlayerInfo[para1][pTeam] = 1; gTeam[para1] = 1; ftext = "LSMD"; ChosenSkin[para1] = 70; SetPlayerSkin(para1, 70); }
					        else if(PlayerInfo[playerid][pLeader] == 5) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Gang Street Groves"; ChosenSkin[para1] = 105; SetPlayerSkin(para1, 105); }
					        else if(PlayerInfo[playerid][pLeader] == 6) { PlayerInfo[para1][pTeam] = 6; gTeam[para1] = 6; ftext = "La Cosa Nostra"; ChosenSkin[para1] = 124; SetPlayerSkin(para1, 124); }
					        else if(PlayerInfo[playerid][pLeader] == 7) { return 1; }
					        else if(PlayerInfo[playerid][pLeader] == 8) { PlayerInfo[para1][pTeam] = 10; gTeam[para1] = 12; ftext = "Agencia Hitman"; ChosenSkin[para1] = 127; SetPlayerSkin(para1, 127); }
					        else if(PlayerInfo[playerid][pLeader] == 9) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "CNN"; ChosenSkin[para1] = 148; SetPlayerSkin(para1, 148); }
					        else if(PlayerInfo[playerid][pLeader] == 10) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "LSTA"; ChosenSkin[para1] = 255; SetPlayerSkin(para1, 255); PlayerInfo[para1][pJob] = 24;}
					        else if(PlayerInfo[playerid][pLeader] == 11) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "Instructores"; ChosenSkin[para1] = 59; SetPlayerSkin(para1, 59); }
					        else if(PlayerInfo[playerid][pLeader] == 13) { PlayerInfo[para1][pTeam] = 15; gTeam[para1] = 15; ftext = "Mecanica"; ChosenSkin[para1] = 50; SetPlayerSkin(para1, 50); PlayerInfo[para1][pJob] = 7;}
					        else if(PlayerInfo[playerid][pLeader] == 14) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Yakuza"; ChosenSkin[para1] = 122; SetPlayerSkin(para1, 122); }
					        else if(PlayerInfo[playerid][pLeader] == 15) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Latin XIV Clicka'"; ChosenSkin[para1] = 237; SetPlayerSkin(para1, 237); }
					        else if(PlayerInfo[playerid][pLeader] == 16) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "18th Street"; ChosenSkin[para1] = 116; SetPlayerSkin(para1, 116); }
					        else if(PlayerInfo[playerid][pLeader] == 19) { PlayerInfo[para1][pTeam] = 15; gTeam[para1] = 15; ftext = "Cuerpo de Bomberos"; ChosenSkin[para1] = 277; SetPlayerSkin(para1, 277); }
					        else if(PlayerInfo[playerid][pLeader] == 20) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Los Puretas"; ChosenSkin[para1] = 1; SetPlayerSkin(para1, 1); }
					        else { return 1; }
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pMember] = PlayerInfo[playerid][pLeader];
							PlayerInfo[para1][pRank] = 1;
							printf("Administración: %s has invited %s to join %s.", sendername, giveplayer, ftext);
							format(string, sizeof(string), "   Tu has entrado en la Faction %s, has sido invitado por el Lider %s", ftext, sendername);
							SendClientMessage(para1, COLOR_WHITE, string);
							format(string, sizeof(string), "   Tu has invitado a %s para entrar en %s.", giveplayer,ftext);
							SendClientMessage(playerid, COLOR_WHITE, string);
							SetPlayerFacingAngle(para1, 264.8058);
							TogglePlayerControllable(para1, 0);
			                SelectChar[para1] = 255;
			                SelectCharID[para1] = PlayerInfo[para1][pMember];
                            SelectCharPlace[para1] = 1;
			                PlayerInfo[para1][pModel] = ChosenSkin[para1];
		    	            PlayerInfo[para1][pChar] = ChosenSkin[para1];
			                SendClientMessage(para1, COLOR_LIGHTRED, "* Usa 'otro' para ver skin disponibles.");
			                SendClientMessage(para1, COLOR_LIGHTRED, "* Cuando veas el que quieres elejir usa 'estaropa'.");
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, " A este jugador no se le puede invitar!.");
						    return 1;
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado a usar este comando (Solo lideres no libres)!");
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/invitarme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "COMANDO:  /invitar [ID Jugador]");
				return 1;
			}
			new para1;
			new ftext[20];
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (para1 != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[playerid][pLeader] == 1) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "LSPD"; ChosenSkin[para1] = 71; SetPlayerSkin(para1, 71); }
					        else if(PlayerInfo[playerid][pLeader] == 2) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "FBI/ATF"; ChosenSkin[para1] = 286; SetPlayerSkin(para1, 286); }
					        else if(PlayerInfo[playerid][pLeader] == 3) { PlayerInfo[para1][pTeam] = 2; gTeam[para1] = 2; ftext = "Ejercito LS"; ChosenSkin[para1] = 287; SetPlayerSkin(para1, 287); }
					        else if(PlayerInfo[playerid][pLeader] == 4) { PlayerInfo[para1][pTeam] = 1; gTeam[para1] = 1; ftext = "LSMD"; ChosenSkin[para1] = 70; SetPlayerSkin(para1, 70); }
					        else if(PlayerInfo[playerid][pLeader] == 5) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Gang Street Groves"; ChosenSkin[para1] = 105; SetPlayerSkin(para1, 105); }
					        else if(PlayerInfo[playerid][pLeader] == 6) { PlayerInfo[para1][pTeam] = 6; gTeam[para1] = 6; ftext = "La Cosa Nostra"; ChosenSkin[para1] = 124; SetPlayerSkin(para1, 124); }
					        else if(PlayerInfo[playerid][pLeader] == 7) { return 1; }
					        else if(PlayerInfo[playerid][pLeader] == 8) { PlayerInfo[para1][pTeam] = 10; gTeam[para1] = 12; ftext = "Agencia Hitman"; ChosenSkin[para1] = 127; SetPlayerSkin(para1, 127); }
					        else if(PlayerInfo[playerid][pLeader] == 9) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "CNN"; ChosenSkin[para1] = 148; SetPlayerSkin(para1, 148); }
					        else if(PlayerInfo[playerid][pLeader] == 10) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "LSTA"; ChosenSkin[para1] = 255; SetPlayerSkin(para1, 255); }
					        else if(PlayerInfo[playerid][pLeader] == 11) { PlayerInfo[para1][pTeam] = 12; gTeam[para1] = 12; ftext = "Instructores"; ChosenSkin[para1] = 59; SetPlayerSkin(para1, 59); }
					        else if(PlayerInfo[playerid][pLeader] == 13) { PlayerInfo[para1][pTeam] = 15; gTeam[para1] = 15; ftext = "Mecanica"; ChosenSkin[para1] = 50; SetPlayerSkin(para1, 50); PlayerInfo[para1][pJob] = 7;}
					        else if(PlayerInfo[playerid][pLeader] == 14) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Yakuza"; ChosenSkin[para1] = 122; SetPlayerSkin(para1, 122); }
					        else if(PlayerInfo[playerid][pLeader] == 15) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "Latin XIV Clicka'"; ChosenSkin[para1] = 237; SetPlayerSkin(para1, 237); }
					        else if(PlayerInfo[playerid][pLeader] == 16) { PlayerInfo[para1][pTeam] = 5; gTeam[para1] = 5; ftext = "18th Street"; ChosenSkin[para1] = 116; SetPlayerSkin(para1, 116); }
					        else { return 1; }
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pMember] = PlayerInfo[playerid][pLeader];
							PlayerInfo[para1][pRank] = 1;
							printf("Administración: %s has invited %s to join %s.", sendername, giveplayer, ftext);
							format(string, sizeof(string), "   Tu has entrado en la Faction %s, has sido invitado por el Lider %s", ftext, sendername);
							SendClientMessage(para1, COLOR_WHITE, string);
							format(string, sizeof(string), "   Tu has invitado a %s para entrar en %s.", giveplayer,ftext);
							SendClientMessage(playerid, COLOR_WHITE, string);
							SetPlayerFacingAngle(para1, 264.8058);
							TogglePlayerControllable(para1, 0);
			                SelectChar[para1] = 255;
			                SelectCharID[para1] = PlayerInfo[para1][pMember];
                            SelectCharPlace[para1] = 1;
			                PlayerInfo[para1][pModel] = ChosenSkin[para1];
		    	            PlayerInfo[para1][pChar] = ChosenSkin[para1];
			                SendClientMessage(para1, COLOR_LIGHTRED, "* Usa 'otro' para ver skin disponibles.");
			                SendClientMessage(para1, COLOR_LIGHTRED, "* Cuando veas el que quieres elejir usa 'estaropa'.");
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, " A este jugador no se le puede invitar!.");
						    return 1;
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado a usar este comando (Solo lideres)!");
			}
		}
		return 1;
	}*/
//----------------------------------[UNINVITE]------------------------------------------------
	if(strcmp(cmd, "/expulsar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /expulsar [ID o Nombre]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if(PlayerInfo[playerid][pLeader] == 1 && PlayerInfo[para1][pMember] != 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 2 && PlayerInfo[para1][pMember] != 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 3 && PlayerInfo[para1][pMember] != 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 4 && PlayerInfo[para1][pMember] != 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 5 && PlayerInfo[para1][pMember] != 5)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 6 && PlayerInfo[para1][pMember] != 6)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 7 && PlayerInfo[para1][pMember] != 7)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 8 && PlayerInfo[para1][pMember] != 8)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 9 && PlayerInfo[para1][pMember] != 9)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			/*if(PlayerInfo[playerid][pLeader] == 10 && PlayerInfo[para1][pMember] != 10)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}*/
			/*if(PlayerInfo[playerid][pLeader] == 11 && PlayerInfo[para1][pMember] != 11)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}*/
			if(PlayerInfo[playerid][pLeader] == 12 && PlayerInfo[para1][pMember] != 12)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 13 && PlayerInfo[para1][pMember] != 13)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 14 && PlayerInfo[para1][pMember] != 14)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 15 && PlayerInfo[para1][pMember] != 15)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if(PlayerInfo[playerid][pLeader] == 16 && PlayerInfo[para1][pMember] != 16)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Access denied!");
				return 1;
			}
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (PlayerInfo[para1][pMember] > 0)
					    {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							printf("Administración: %s ha expulsado %s.", sendername, giveplayer);
							format(string, sizeof(string), "* Has sido expulsado por %s.", sendername);
							SendClientMessage(para1, COLOR_WHITE, string);
							SendClientMessage(para1, COLOR_WHITE, "* Ahora eres un civil");
			                gTeam[para1] = 3;
							PlayerInfo[para1][pTeam] = 3;
							PlayerInfo[para1][pMember] = 0;
							PlayerInfo[para1][pRank] = 0;
							PlayerInfo[para1][pChar] = 0;
							new rand = random(sizeof(CIV));
							SetSpawnInfo(para1, gTeam[para1], CIV[rand],0.0,0.0,0.0,0,0,0,0,0,0,0);
							PlayerInfo[para1][pModel] = CIV[rand];
							MedicBill[para1] = 0;
							SpawnPlayer(para1);
							format(string, sizeof(string), "   Has expulsado a %s.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto(Leaders only)!");
			}
		}
		return 1;
	}
//----------------------------------[MAKEADMIN]------------------------------------------------
	if(strcmp(cmd, "/makeadmin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] != 2000)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, " No puedes usar este comando");
				return 1;
	        }
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /makeadmin [ID o Nombre] [ascender/degradar]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
	        if(!strlen(x_nr))
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /makeadmin [ID o Nombre] [ascender/degradar]");
				return 1;
	        }
	        if(strcmp(x_nr,"ascender",true) == 0)
	        {
	            if(para1 != INVALID_PLAYER_ID)
	        	{
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[para1][pAdmin]++;
					format(string, sizeof(string), " Se ha ascendido a nivel %d de Admin ha %s.", PlayerInfo[para1][pAdmin], giveplayer);
					SendClientMessageToAll(COLOR_ASKQ, string);
					return 1;
				}
	        }
	        if(strcmp(x_nr,"degradar",true) == 0)
	        {
	            if(para1 != INVALID_PLAYER_ID)
	        	{
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[para1][pAdmin]--;
					format(string, sizeof(string), " Se ha degradado a nivel %d de Admin ha %s.", PlayerInfo[para1][pAdmin], giveplayer);
					SendClientMessageToAll(COLOR_ASKQ, string);
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /makeadmin [ID o Nombre] [ascender/degradar]");
				return 1;
	        }
		}
		return 1;
	}
	if(strcmp(cmd, "/razon", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] != 2000)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, " No puedes usar este comando");
				return 1;
	        }
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /razon [Texto]");
				return 1;
			}
			format(string, sizeof(string), "%s",  result);
			SendClientMessageToAll(COLOR_ASKQ,string);
		}
		return 1;
	}

    /*if(strcmp(cmd, "/loladmin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /makeadmin [ID o Nombre] [nivel]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(PlayerInfo[playerid][pAdmin] >= 5)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(level == 2000)
			        {
			            SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para dar este rango!");
			            return 1;
           			}
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pAdmin] = level;
						printf("Administración: %s ha hecho a %s admin de nivel %d.", sendername, giveplayer, level);
						format(string, sizeof(string), "   Has sido ascendido a admin de nivel %d por %s.", level, sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "   has ascendido a %s a nivel admin %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}*/
//----------------------------------[MAKEIRCADMIN]----------------------------------------------
    if(strcmp(cmd, "/makeircadmin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /makeircadmin [ID o Nombre] [ChannelNr]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /makeircadmin [ID o Nombre] [ChannelNr]");
				return 1;
			}
			new channel = strval(tmp);
			if(channel > 10 || channel < 0) { SendClientMessage(playerid, COLOR_GREY, "   Dont go below number 0, or above number 10!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* You've made %s an IRC Admin over Channel %d.", giveplayer, channel);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* %s has made you an IRC Admin over Channel %d.", sendername, channel);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "%s", giveplayer);
						switch(channel)
						{
						    case 1:
						    {
						        strmid(IRCInfo[0][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[0][iNeedPass] = 0; IRCInfo[0][iLock] = 0;
						    }
						    case 2:
						    {
						        strmid(IRCInfo[1][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[1][iNeedPass] = 0; IRCInfo[1][iLock] = 0;
						    }
						    case 3:
						    {
						        strmid(IRCInfo[2][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[2][iNeedPass] = 0; IRCInfo[2][iLock] = 0;
						    }
						    case 4:
						    {
						        strmid(IRCInfo[3][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[3][iNeedPass] = 0; IRCInfo[3][iLock] = 0;
						    }
						    case 5:
						    {
						        strmid(IRCInfo[4][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[4][iNeedPass] = 0; IRCInfo[4][iLock] = 0;
						    }
						    case 6:
						    {
						        strmid(IRCInfo[5][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[5][iNeedPass] = 0; IRCInfo[5][iLock] = 0;
						    }
						    case 7:
						    {
						        strmid(IRCInfo[6][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[6][iNeedPass] = 0; IRCInfo[6][iLock] = 0;
						    }
						    case 8:
						    {
						        strmid(IRCInfo[7][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[7][iNeedPass] = 0; IRCInfo[7][iLock] = 0;
						    }
						    case 9:
						    {
						        strmid(IRCInfo[8][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[8][iNeedPass] = 0; IRCInfo[8][iLock] = 0;
						    }
						    case 10:
						    {
						        strmid(IRCInfo[9][iAdmin], string, 0, strlen(string), 255);
						        IRCInfo[9][iNeedPass] = 0; IRCInfo[9][iLock] = 0;
						    }
						}
						SaveIRC();
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   you are not authorized to do that !");
			    return 1;
			}
		}
		return 1;
	}

//----------------------------------[HACERLIDER]------------------------------------------------
	if(strcmp(cmd, "/hacerlider", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: /hacerlider [ID del Jugador] [Número(1-20)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 20 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "   El numero tiene q ser entre 0 y 20!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
			            if(PlayerInfo[para1][pMember] > 0 || PlayerInfo[para1][pFMember] < 255)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Este jugador ya está en una Faccion!");
			                return 1;
			            }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pLeader] = level;
						format(string, sizeof(string), "  Usted ha sido ascendido a Jefe de su Facción solicitada por Admin %s", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "   %s le han dado el control de la Faccion Numero %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
						if(level == 0) { PlayerInfo[para1][pChar] = 0; PlayerInfo[para1][pRank] = 0; gTeam[para1] = 3; PlayerInfo[para1][pTeam] = 0; return 1; }
						else if(level == 1) { PlayerInfo[para1][pChar] = 266; } //Cuerpo Policia
						else if(level == 2) { PlayerInfo[para1][pChar] = 286; } //FBI
						else if(level == 3) { PlayerInfo[para1][pChar] = 287; } //Ejercito Militar
						else if(level == 4) { PlayerInfo[para1][pChar] = 228; } //LSMD
						else if(level == 5) { PlayerInfo[para1][pChar] = 270; } //Groves
						else if(level == 6) { PlayerInfo[para1][pChar] = 113; } //LCN
						else if(level == 7) { PlayerInfo[para1][pChar] = 147; } //Alcalde
						else if(level == 8) { PlayerInfo[para1][pChar] = 112; } //Hitmans
						else if(level == 9) { PlayerInfo[para1][pChar] = 187; } //CNN
						else if(level == 10) { PlayerInfo[para1][pChar] = 61; PlayerInfo[para1][pJob] = 24; } //LSTA
						else if(level == 11) { PlayerInfo[para1][pChar] = 186; } //Instructores
						else if(level == 13) { PlayerInfo[para1][pChar] = 42; PlayerInfo[para1][pJob] = 7; } //Mecanicos
						else if(level == 14) { PlayerInfo[para1][pChar] = 208; } //Yakuza
						else if(level == 15) { PlayerInfo[para1][pChar] = 292; } //Latin XIV Clicka'
						else if(level == 16) { PlayerInfo[para1][pChar] = 116; } //18th street
						else if(level == 17) { PlayerInfo[para1][pChar] = 102; } //Notrh Street Gang
						else if(level == 18) { PlayerInfo[para1][pChar] = 100; } //Los Cobras
						else if(level == 19) { PlayerInfo[para1][pChar] = 279; } //Bomberos
						else if(level == 20) { PlayerInfo[para1][pChar] = 236; } //Los Puretas
						
						if(level == 0)
						{
						    gTeam[para1] = 3;
					    	PlayerInfo[para1][pTeam] = 3;
						}
						else if(level == 1 || level == 2 || level == 3)
						{
						    gTeam[para1] = 2;
					    	PlayerInfo[para1][pTeam] = 2;
						}
						else if(level == 4)
						{
						    gTeam[para1] = 1;
						    PlayerInfo[para1][pTeam] = 1;
						}
						else
						{
					    	gTeam[para1] = 15;
					    	PlayerInfo[para1][pTeam] = 15;
						}
					    SetPlayerSkin(para1, PlayerInfo[para1][pChar]);
					    PlayerInfo[playerid][pModel] = PlayerInfo[para1][pChar];
					    if(level == 0)
					    {
					        PlayerInfo[para1][pRank] = 0;
					    }
					    else
					    {
					    	PlayerInfo[para1][pRank] = 6;
						}
                        if(PlayerInfo[para1][pJob] == 7 && PlayerInfo[para1][pLeader] != 13)
					    {
			                PlayerInfo[para1][pJob] = 0;
			                return 1;
			            }
			            if(PlayerInfo[para1][pJob] == 24 && PlayerInfo[para1][pLeader] != 10)
					    {
			                PlayerInfo[para1][pJob] = 0;
			                return 1;
			            }
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Tu no estas autorizado a usar este comando!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/secreta", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: /secreta [ID Skin]");
				return 1;
			}
			new para1;
			para1 = strval(tmp);
			if(para1 > 299 || para1 < 1) { SendClientMessage(playerid, COLOR_GREY, "El numero Debe ser entre 1 y 299!"); return 1; }
			if (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
				SetPlayerSkin(playerid, para1)
				return 1;
            }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Tu no estas autorizado a usar este comando!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/forceskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /forceskin [ID o Nombre]");
				return 1;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
				        if(PlayerInfo[para1][pMember] < 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   That player is not in a Family / Force !");
				            return 1;
				        }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* You are forced to Change your Skin by Admin %s.", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "* You have forced %s To change his Skin.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						if(PlayerInfo[para1][pMember] == 1) { PlayerInfo[para1][pTeam] = 5; ChosenSkin[para1] = 59; }
				        else if(PlayerInfo[para1][pMember] == 2) { PlayerInfo[para1][pTeam] = 6; ChosenSkin[para1] = 121; }
				        else if(PlayerInfo[para1][pMember] == 3) { PlayerInfo[para1][pTeam] = 7; ChosenSkin[para1] = 98; }
				        else if(PlayerInfo[para1][pMember] == 4) { PlayerInfo[para1][pTeam] = 8; ChosenSkin[para1] = 46; }
				        else if(PlayerInfo[para1][pMember] == 5) { PlayerInfo[para1][pTeam] = 9; ChosenSkin[para1] = 174; }
				        //else if(PlayerInfo[para1][pMember] == 6) { PlayerInfo[para1][pTeam] = 2; ChosenSkin[para1] = 111; }
				        else if(PlayerInfo[para1][pMember] == 7) { PlayerInfo[para1][pTeam] = 2; ChosenSkin[para1] = 164; }
				        else if(PlayerInfo[para1][pMember] == 8) { PlayerInfo[para1][pTeam] = 10; ChosenSkin[para1] = 186; }
				        else { return 1; }
                        SetPlayerInterior(para1,0);
						new rand = random(sizeof(gInviteSpawns));
						SetPlayerPos(para1, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
						SetPlayerFacingAngle(para1, gInviteSpawns[rand][3]);
						SetPlayerCameraPos(para1,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						SetPlayerCameraLookAt(para1,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						TogglePlayerControllable(para1, 0);
					    SelectChar[para1] = 255;
					    SelectCharID[para1] = PlayerInfo[para1][pMember];
					    SelectCharPlace[para1] = 1;
					    PlayerInfo[para1][pModel] = ChosenSkin[para1];
				    	PlayerInfo[para1][pChar] = ChosenSkin[para1];
					    SendClientMessage(para1, COLOR_LIGHTRED, "* Use 'next' to Select the char you want to use.");
					    SendClientMessage(para1, COLOR_LIGHTRED, "* If you've found the Char you want to use, type 'done'.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
//----------------------------------[SETSKIN]------------------------------------------------
	if(strcmp(cmd, "/setskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /setskin [ID o Nombre] [id]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 299 || level < 1) { SendClientMessage(playerid, COLOR_GREY, "Skin erronea!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pChar] = level;
						format(string, sizeof(string), "Administrador %s te ha cambiado la skin", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Cambiaste la skin %s a %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
					    SetPlayerSkin(para1, PlayerInfo[para1][pChar]);
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/miskin", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new skintest;
	        skintest = PlayerInfo[playerid][pChar];
	        format(string, sizeof(string), "Tu Skin es la ID: %d.", skintest);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}
	//PlayerInfo[playerid][pCigarettes]
	if(strcmp(cmd, "/darmechero", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerInfo[playerid][pLighter] >= 10)
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /darmechero [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID || ProxDetectorS(5.0, playerid, para1))
	        		{
						new gas;
                        PlayerInfo[playerid][pLighter] = gas;
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s te ha dado un mechero", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  un mechero.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    //SendClientMessage(para1, COLOR_WHITE, "Pon /fumar para encenderlo o /darcigarro para darsela a otro jugador");
            	        PlayerInfo[para1][pLighter] += gas;
            	        PlayerInfo[playerid][pLighter] -= gas;
            	        return 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
                }
                else
                {
                   SendClientMessage(playerid, COLOR_GRAD2, "  No tienes Mechero");
                }
		}
		return 1;
	}
	if(strcmp(cmd, "/darcigarro", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerInfo[playerid][pCigarettes] >= 1)
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /darcigarro [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID || ProxDetectorS(5.0, playerid, para1))
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s te ha dado un cigarro", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  un cigarro.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /fumar para encenderlo o /darcigarro para darsela a otro jugador");
            	        PlayerInfo[para1][pCigarettes] += 1;
            	        PlayerInfo[playerid][pCigarettes] -= 1;
            	        return 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
                }
                else
                {
                   SendClientMessage(playerid, COLOR_GRAD2, "  No tienes Cigarros");
                }
		}
		return 1;
	}
	if(strcmp(cmd, "/darcer", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerInfo[playerid][pbono7] >= 1)
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /darcer [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID || ProxDetectorS(5.0, playerid, para1))
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s te ha dado una Cerveza", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una Cerveza.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarcer para consumirla o /darcer para darsela a otro jugador");
            	        PlayerInfo[para1][pbono7] += 1;
            	        PlayerInfo[playerid][pbono7] -= 1;
            	        return 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
                }
                else
                {
                   SendClientMessage(playerid, COLOR_GRAD2, "  No tienes Cervezas");
                }
		}
		return 1;
	}
	if(strcmp(cmd, "/usarcer", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerInfo[playerid][pbono7] >= 1)
				{
            	   SetPlayerSpecialAction(playerid, 20);
            	   Bebendo[playerid] = 7;
            	   PlayerInfo[playerid][pbono7] -= 1;
            	   return 1;
                }
                else
                {
                   SendClientMessage(playerid, COLOR_GRAD2, "  No tienes Cervezas");
                }
		}
		return 1;
	}
	if(strcmp(cmd, "/darre", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerInfo[playerid][pbono6] >= 1)
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /darre [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID || ProxDetectorS(5.0, playerid, para1))
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s te ha dado una lata de Refresco", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una lata de Refresco.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarre para consumirla o /darre para darsela a otro jugador");
            	        PlayerInfo[para1][pbono6] += 1;
            	        PlayerInfo[playerid][pbono6] -= 1;
            	        return 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
                }
                else
                {
                   SendClientMessage(playerid, COLOR_GRAD2, "  No tienes latas de refresco");
                }
		}
		return 1;
	}
	if(strcmp(cmd, "/usarre", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerInfo[playerid][pbono6] >= 1)
				{
            	   SetPlayerSpecialAction(playerid, 23);
            	   Bebendo[playerid] = 8;
            	   PlayerInfo[playerid][pbono6] -= 1;
            	   return 1;
                }
                else
                {
                   SendClientMessage(playerid, COLOR_GRAD2, "  No tienes latas de refresco");
                }
		}
		return 1;
	}
	if(strcmp(cmd, "/darwhi", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerInfo[playerid][pbono5] >= 1)
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /darwhi [ID o Nombre]");
						return 1;
					}
            		   new para1;
					   para1 = ReturnUser(tmp);
	        		   if(para1 != INVALID_PLAYER_ID || ProxDetectorS(5.0, playerid, para1))
	        		   {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " %s te ha dado una Botella de Whisky", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una Botella de Whisky.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarwhi para consumirla o /darwhi para darsela a otro jugador");
            	        PlayerInfo[para1][pbono5] += 1;
            	        PlayerInfo[playerid][pbono5] -= 1;
            	        return 1;
		               }
					   else
					   {
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
		               }
                }
                else
                {
                   SendClientMessage(playerid, COLOR_GRAD2, "  No tienes Botellas de Whisky");
                }
		}
		return 1;
	}
	if(strcmp(cmd, "/usarwhi", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerInfo[playerid][pbono5] >= 1)
				{
            	   SetPlayerSpecialAction(playerid, 22);
            	   Bebendo[playerid] = 10;
            	   PlayerInfo[playerid][pbono5] -= 1;
            	   return 1;
                }
                else
                {
                   SendClientMessage(playerid, COLOR_GRAD2, "  No tienes Botellas de Whisky");
                }
		}
		return 1;
	}
    if(strcmp(cmd, "/crefresco5", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,-27.186500,-57.907398,1003.546875))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[15][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[15][bPriceProd]);
            	   PlayerInfo[playerid][pbono6] += 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste una lata de refresco");
            	   SendClientMessage(playerid, COLOR_WHITE, "  Pon /usarre para consumirla o /darre para darsela a otro jugador");
				   BizzInfo[15][bTill] += BizzInfo[15][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vrefresco5", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 15 || strcmp(sendername, BizzInfo[15][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,-27.186500,-57.907398,1003.546875))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vrefresco5 [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El Dependiente %s te ha dado una lata de refresco", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una lata de refresco.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarre para consumirla o /darre para darsela a otro jugador");
            	        PlayerInfo[para1][pbono6] += 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/crefresco4", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,-31.055500,-91.628601,1003.546875))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[14][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[14][bPriceProd]);
            	   PlayerInfo[playerid][pbono6] += 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste una lata de refresco");
            	   SendClientMessage(playerid, COLOR_WHITE, "  Pon /usarre para consumirla o /darre para darsela a otro jugador");
				   BizzInfo[14][bTill] += BizzInfo[14][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vrefresco4", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 14 || strcmp(sendername, BizzInfo[14][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,-31.055500,-91.628601,1003.546875))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vrefresco4 [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El Dependiente %s te ha dado una lata de refresco", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una lata de refresco.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarre para consumirla o /darre para darsela a otro jugador");
            	        PlayerInfo[para1][pbono6] += 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/crefresco3", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,6.165100,-30.843799,1003.549377))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[13][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[13][bPriceProd]);
            	   PlayerInfo[playerid][pbono6] += 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste una lata de refresco");
            	   SendClientMessage(playerid, COLOR_WHITE, "  Pon /usarre para consumirla o /darre para darsela a otro jugador");
				   BizzInfo[13][bTill] += BizzInfo[13][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vrefresco3", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 13 || strcmp(sendername, BizzInfo[13][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,6.165100,-30.843799,1003.549377))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vrefresco3 [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El Dependiente %s te ha dado una lata de refresco", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una lata de refresco.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarre para consumirla o /darre para darsela a otro jugador");
            	        PlayerInfo[para1][pbono6] += 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/crefresco2", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,-25.784700,-187.550506,1003.546875))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[12][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[12][bPriceProd]);
            	   PlayerInfo[playerid][pbono6] += 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste una lata de refresco");
            	   SendClientMessage(playerid, COLOR_WHITE, "  Pon /usarre para consumirla o /darre para darsela a otro jugador");
				   BizzInfo[12][bTill] += BizzInfo[12][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vrefresco2", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 12 || strcmp(sendername, BizzInfo[12][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,-25.784700,-187.550506,1003.546875))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vrefresco2 [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El Dependiente %s te ha dado una lata de refresco", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una lata de refresco.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarre para consumirla o /darre para darsela a otro jugador");
            	        PlayerInfo[para1][pbono6] += 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/ccerveza2", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,683.154479,-463.460601,5.064700))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[20][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[20][bPriceProd]);
            	   PlayerInfo[playerid][pbono7] += 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste una Botella de Cerveza");
            	   SendClientMessage(playerid, COLOR_WHITE, "  Pon /usarcer para consumirla o /darcer para darsela a otro jugador");
				   BizzInfo[20][bTill] += BizzInfo[20][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vcerveza2", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 20 || strcmp(sendername, BizzInfo[20][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,683.154479,-463.460601,5.064700))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vcerveza2 [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El Camarero %s te ha dado una Botella de Cerveza", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una Botella de Cerveza.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarcer para consumirla o /darcer para darsela a otro jugador");
            	        PlayerInfo[para1][pbono7] += 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/ccerveza", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,501.870788,-67.582000,998.757812))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[17][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[17][bPriceProd]);
            	   PlayerInfo[playerid][pbono7] += 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste una Botella de Cerveza");
            	   SendClientMessage(playerid, COLOR_WHITE, "  Pon /usarcer para consumirla o /darcer para darsela a otro jugador");
				   BizzInfo[17][bTill] += BizzInfo[17][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vcerveza", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 17 || strcmp(sendername, BizzInfo[17][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,501.870788,-67.582000,998.757812))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vcerveza [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El Camarero %s te ha dado una Botella de Cerveza", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una Botella de Cerveza.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarcer para consumirla o /darcer para darsela a otro jugador");
            	        PlayerInfo[para1][pbono7] += 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/cwhisky3", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,-2636.613525,1402.464721,906.460876))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[19][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[19][bPriceProd]);
            	   PlayerInfo[playerid][pbono5] += 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste una Botella de Whisky");
            	   SendClientMessage(playerid, COLOR_WHITE, "  Pon /usarwhi para consumirla o /darwhi para darsela a otro jugador");
				   BizzInfo[19][bTill] += BizzInfo[19][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vwhisky3", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 19 || strcmp(sendername, BizzInfo[19][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,-2636.613525,1402.464721,906.460876))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vwhisky3 [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El Camarero %s te ha dado una Botella de Whisky", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una Botella de Whisky.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarwhi para consumirla o /darwhi para darsela a otro jugador");
            	        PlayerInfo[para1][pbono5] += 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/cwhisky2", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,1204.846191,-13.852100,1000.921875))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[18][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[18][bPriceProd]);
            	   PlayerInfo[playerid][pbono5] += 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste una Botella de Whisky");
            	   SendClientMessage(playerid, COLOR_WHITE, "  Pon /usarwhi para consumirla o /darwhi para darsela a otro jugador");
				   BizzInfo[18][bTill] += BizzInfo[18][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vwhisky2", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 18 || strcmp(sendername, BizzInfo[18][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,1204.846191,-13.852100,1000.921875))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vwhisky2 [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El Camarero %s te ha dado una Botella de Whisky", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una Botella de Whisky.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarwhi para consumirla o /darwhi para darsela a otro jugador");
            	        PlayerInfo[para1][pbono5] += 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/cwhisky", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,493.439300,-24.916900,1000.671875))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[10][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[10][bPriceProd]);
            	   PlayerInfo[playerid][pbono5] += 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste una Botella de Whisky");
            	   SendClientMessage(playerid, COLOR_WHITE, "  Pon /usarwhi para consumirla o /darwhi para darsela a otro jugador");
				   BizzInfo[10][bTill] += BizzInfo[10][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vwhisky", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 10 || strcmp(sendername, BizzInfo[10][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,493.439300,-24.916900,1000.671875))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vwhisky [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El Camarero %s te ha dado una Botella de Whisky", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una Botella de Whisky.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                 	    SendClientMessage(para1, COLOR_WHITE, "Pon /usarwhi para consumirla o /darwhi para darsela a otro jugador");
            	        PlayerInfo[para1][pbono5] += 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/cpasaje", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,2422.5908,-1761.2700,13.5391))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[9][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[9][bPriceProd]);
            	   PlayerInfo[playerid][pbono4] += 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste un Pasaje de Avion (Se usan en el aeropuerto)");
				   BizzInfo[9][bTill] += BizzInfo[9][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vpasaje", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 9 || strcmp(sendername, BizzInfo[9][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,2422.5908,-1761.2700,13.5391))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vpasaje [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha un Pasaje de Avion (Se usan en el aeropuerto)", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  un Pasaje de Avion (Se usan en el aeropuerto).", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[para1][pbono4] += 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/ccuerda", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,1338.813842,-1502.607788,5.796800))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[8][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[8][bPriceProd]);
			       Rope[playerid]++;
            	   SendClientMessage(playerid, COLOR_WHITE, "Compraste una Cuerda ");
                   SendClientMessage(playerid, COLOR_WHITE, "Para usarla pon /atar o /desatar.");
				   BizzInfo[8][bTill] += BizzInfo[8][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vcuerda", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 8 || strcmp(sendername, BizzInfo[8][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,1338.813842,-1502.607788,5.796800))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vcuerda [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado una cuerda ", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una cuerda.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
			            Rope[para1]++;
                        SendClientMessage(para1, COLOR_WHITE, "Para usarla pon /atar o /desatar.");
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/cmovil", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,1548.681762,-1859.166381,2.600800))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[7][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[7][bPriceProd]);
				new randphone = 100000 + random(899999);//minimum 1000  max 9999
				PlayerInfo[playerid][pPnumber] = randphone;
				format(string, sizeof(string), "   Teléfono móvil comprado el nuevo número es %d", randphone);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Puedes comprobarlo escribiendo /estado");
				SendClientMessage(playerid, COLOR_WHITE, "Servidor: Ahora puede escribir /ayuda para ver los comandos de teléfono móvil.");
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste un Movil ");
				   BizzInfo[7][bTill] += BizzInfo[7][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vmovil", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 7 || strcmp(sendername, BizzInfo[7][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,1548.681762,-1859.166381,2.600800))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vmovil [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado un Movil ", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  un Movil.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				new randphone = 100000 + random(899999);//minimum 1000  max 9999
				PlayerInfo[para1][pPnumber] = randphone;
				format(string, sizeof(string), "   Teléfono móvil comprado el nuevo número es %d", randphone);
				SendClientMessage(para1, COLOR_GRAD4, string);
				SendClientMessage(para1, COLOR_GRAD5, "Puedes comprobarlo escribiendo /estado");
				SendClientMessage(para1, COLOR_WHITE, "Servidor: Ahora puede escribir /ayuda para ver los comandos de teléfono móvil.");
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/cflores", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,1997.401489,-1760.911621,7.574699))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[6][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[6][bPriceProd]);
            	   SafeGivePlayerWeapon(playerid, 14, 1);
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste un Ramo de Flores ");
				   BizzInfo[6][bTill] += BizzInfo[6][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vflores", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 6 || strcmp(sendername, BizzInfo[6][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,1997.401489,-1760.911621,7.574699))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vflores [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado un Ramo de Flores ", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  un Ramo de Flores.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerWeapon(para1, 14, 1);
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/caleman", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,810.197387,-1555.088867,7.185100))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[5][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[5][bPriceProd]);
            	   PlayerInfo[playerid][pbono3] = 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste un Dic. de Aleman (Para hablar en aleman usa /ale [Texto])");
				   BizzInfo[5][bTill] += BizzInfo[5][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/valeman", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 5 || strcmp(sendername, BizzInfo[5][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,810.197387,-1555.088867,7.185100))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /valeman [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado un Dic. de Aleman (Para hablar en aleman usa /ale [Texto]) ", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  un Dic. de Aleman.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[para1][pbono3] = 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/ccomida", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,459.873199,-88.654098,999.554687))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[4][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[4][bPriceProd]);
            	   SetPlayerHealth(playerid, 100);
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste un plato combinado (te subio tu salud)");
				   BizzInfo[4][bTill] += BizzInfo[4][bPriceProd];
				   ApplyAnimation(playerid,"FOOD","EAT_BURGER",4.1,0,1,1,1,1);
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vcomida", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 4 || strcmp(sendername, BizzInfo[4][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,459.873199,-88.654098,999.554687))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vcomida [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado un Plato Combinado", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  un Plato Combinado.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SetPlayerHealth(para1, 100);
						ApplyAnimation(para1,"FOOD","EAT_BURGER",4.1,0,1,1,1,1);
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/cpatines", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,-2239.846923,137.211105,1035.414062))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[3][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[3][bPriceProd]);
            	   PlayerInfo[playerid][pbono2] = 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste unos Patines (usa /patinar)");
				   BizzInfo[3][bTill] += BizzInfo[3][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vpatines", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 3 || strcmp(sendername, BizzInfo[3][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,-2239.846923,137.211105,1035.414062))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vpatines [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado unos Patines", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  unos Patines.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[para1][pbono2] = 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/cspray", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,1656.454589,-1476.018310,7.421800))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[2][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[2][bPriceProd]);
            	   SafeGivePlayerWeapon(playerid, 41, 500);
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste un Spray");
				   BizzInfo[2][bTill] += BizzInfo[2][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vspray", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 2 || strcmp(sendername, BizzInfo[2][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,1656.454589,-1476.018310,7.421800))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vspray [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado un Spray", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  un Spray.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerWeapon(para1, 41, 500);
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/ccartas", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,2018.993408,1017.699218,996.875000))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[16][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[16][bPriceProd]);
				   PlayerInfo[playerid][pCards] = 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste una Baraja de Cartas (usa /poker)");
				   BizzInfo[16][bTill] += BizzInfo[16][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Casino !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vcartas", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 16 || strcmp(sendername, BizzInfo[16][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,2018.993408,1017.699218,996.875000))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vcartas [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado una Baraja de Cartas (usa /cartas)", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una Baraja de Cartas.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pCards] = 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Casino !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Casino !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/cdado", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,2018.993408,1017.699218,996.875000))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[16][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[16][bPriceProd]);
				   gDice[playerid] = 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste unos Dados (usa /cartas)");
				   BizzInfo[16][bTill] += BizzInfo[16][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Casino !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vdado", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 16 || strcmp(sendername, BizzInfo[16][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,2018.993408,1017.699218,996.875000))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vdado [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado unos Dados (usa /dado)", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  unos Dados.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						gDice[para1] = 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Casino !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Casino !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/creloj", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,1690.3644,-1825.6846,7.7685))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[1][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[1][bPriceProd]);
            	   PlayerInfo[playerid][pWatch] = 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste un Reloj (usa /hora)");
				   BizzInfo[1][bTill] += BizzInfo[1][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vreloj", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 1 || strcmp(sendername, BizzInfo[1][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,1690.3644,-1825.6846,7.7685))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vreloj [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado un Reloj", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  un Reloj.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[para1][pWatch] = 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/ccd", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,1690.3644,-1825.6846,7.7685))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[1][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[1][bPriceProd]);
            	   PlayerInfo[playerid][pCDPlayer] = 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste un Reproductor de CD (usa /musica)");
				   BizzInfo[1][bTill] += BizzInfo[1][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vcd", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 1 || strcmp(sendername, BizzInfo[1][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,1690.3644,-1825.6846,7.7685))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vcd [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado un Reproductor de CD", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  un Reproductor de CD.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[para1][pCDPlayer] = 1;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes un Negocio !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/cbate", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,1687.8932,-1596.4847,8.0111))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[0][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[0][bPriceProd]);
            	   SafeGivePlayerWeapon(playerid, 5, 1);
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste un Bate de Beisbol");
				   BizzInfo[0][bTill] += BizzInfo[0][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
                
        }
    }
	if(strcmp(cmd, "/vbate", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 0 || strcmp(sendername, BizzInfo[0][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,1687.8932,-1596.4847,8.0111))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vbate [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado un bate de beisbol", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  un bate de beisbol.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerWeapon(para1, 5, 1);
						//PlayerInfo[para1][pDeaths] = PlayerInfo[para1][pDeaths]-level;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes una tienda de deportes !");
				return 1;
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/cpesca", true) == 0) // by MageC
	{
	    if(IsPlayerConnected(playerid))
	    {
				if (PlayerToPoint(30, playerid,1021.4393,-1230.3075,16.9375))
				{
			       if (GetPlayerMoney(playerid) < BizzInfo[11][bPriceProd])
		           {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
            	   }
            	   SafeGivePlayerMoney(playerid,- BizzInfo[11][bPriceProd]);
            	   PlayerInfo[playerid][pFishTool] = 1;
            	   SendClientMessage(playerid, COLOR_WHITE, "  Compraste una Caña de Pescar");
				   BizzInfo[11][bTill] += BizzInfo[11][bPriceProd];
				   OnPropUpdate();
            	   return 1;
                }
                else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}

        }
    }
	if(strcmp(cmd, "/vpesca", true) == 0) // by MageC plajiado a DryilZas jijiji
	{
	    if(IsPlayerConnected(playerid))
	    {
            GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pPbiskey] == 11 || strcmp(sendername, BizzInfo[11][bExtortion], true) == 0)
			{
				if (PlayerToPoint(30, playerid,1021.4393,-1230.3075,16.9375))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vpesca [ID o Nombre]");
						return 1;
					}
            		new para1;
					para1 = ReturnUser(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "El dependiente %s te ha dado una Caña de Pescar", sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Le has dado a %s  una Caña de Pescar.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[para1][pFishTool] = 1;
						//PlayerInfo[para1][pDeaths] = PlayerInfo[para1][pDeaths]-level;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en el Negocio !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No tienes una tienda de deportes !");
				return 1;
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/curarheridas", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 4
			|| PlayerInfo[playerid][pMember] == 4)
			{
				if (PlayerToPoint(5, playerid,1191.0593,-1292.2404,5.5532)||PlayerToPoint(5, playerid,1191.0593,-1292.2404,5.5532))
				{
	        		tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /curarheridas [ID o Nombre] [cantidad]");
						return 1;
					}
            		new para1;
					new level;
					para1 = ReturnUser(tmp);
					tmp = strtok(cmdtext, idx);
					level = strval(tmp);
	        		if(para1 != INVALID_PLAYER_ID)
	        		{
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[para1][pDeaths] < level)
						{
				    		SendClientMessage(playerid, COLOR_GRAD2, "  No puedes quitarle mas heridas de las que Tiene !");
							return 1;
						}
						format(string, sizeof(string), "El Medico %s te ha curado %d de tus %d heridas", sendername, level, PlayerInfo[para1][pDeaths]);
						SendClientMessage(para1, COLOR_WHITE, string);
				
						format(string, sizeof(string), "Le has curado a %s, %d de sus %d heridas.", giveplayer,level, PlayerInfo[para1][pDeaths]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[para1][pDeaths] = PlayerInfo[para1][pDeaths]-level;
					}
					else
					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  No estas en la sala de Cirujia !");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  No eres Medico !");
				return 1;
			}
		}//not connected
		return 1;
	}
	
	if(strcmp(cmd, "/verheridas", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 4
			|| PlayerInfo[playerid][pMember] == 4){
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /verheridas [ID o Nombre]");
				return 1;
			}
            new para1;
			para1 = ReturnUser(tmp);
	        if(para1 != INVALID_PLAYER_ID)
	        {
				GetPlayerName(para1, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "El Medico %s te ha visto tus heridas", sendername);
				SendClientMessage(para1, COLOR_WHITE, string);
				format(string, sizeof(string), "El paciente %s, tiene %d heridas en su cuerpo.", giveplayer, PlayerInfo[para1][pDeaths]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "  ID Incorrecta !");
				return 1;
			}
			}
		}//not connected
		return 1;
	}
//----------------------------------[GIVERANK]------------------------------------------------
	if(strcmp(cmd, "/ascender", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /ascender [ID del Jugador] [Numero(1-6)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 6 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "   Solo del número 1 al 6!"); return 1; }
			if (PlayerInfo[playerid][pLeader] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pRank] = level;
						format(string, sizeof(string), "   Has sido ascendido por el lider de tu facción %s", sendername);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "   Has dado a %s el rango %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar este comando(Solo lideres.)!");
			}
		}
		return 1;
	}
//----------------------------------[setteam]------------------------------------------------
	if(strcmp(cmd, "/setteam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /setteam [ID o Nombre] [1(civil) - 2(policia)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pTeam] = level;
						gTeam[para1] = level;
						SetPlayerWeapons(para1);
						SetPlayerSpawn(para1);
						ClearCrime(para1);
						printf("Administración: %s ha cambiado el equipo de %s al numero %d.", sendername, giveplayer, level);
						format(string, sizeof(string), "   Te han puesto el equipo %d por %s", level, sendername);
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "   Has puesto a %s el equipo %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
//----------------------------------[setjob]------------------------------------------------
	if(strcmp(cmd, "/setjob", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /setjob [ID o Nombre] [jobid)]");
				return 1;
			}
			new para1;
			new jobid;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			jobid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pJob] = jobid;
						format(string, 256, "Administración: %s has set %s job to id %d.", sendername,giveplayer,jobid);
						ABroadCast(COLOR_YELLOW,string);
						SendClientMessage(playerid, COLOR_GRAD1, "   Job has been set successfuly !");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}

//----------------------------------[GOTO]-----------------------------------------------
	if(strcmp(cmd, "/entercar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /entercar [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				PutPlayerInVehicle(playerid, testcar, 1);
				SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotocar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /gotocar [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(testcar, cwx2, cwy2, cwz2);
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, cwx2, cwy2, cwz2);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/icono", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /icono [ID]");
				return 1;
			}
			new id = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] == 2000)
			{
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetPlayerPos(playerid, cwx2, cwy2, cwz2);
                SetPlayerMapIcon(playerid,99,cwx2, cwy2, cwz2,id,COLOR_LIGHTRED);
				SendClientMessage(playerid, COLOR_GRAD1, "   Has creado un icono");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/mark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				SendClientMessage(playerid, COLOR_GRAD1, "   teleporter destination set");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotomark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ira", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /ira [ID del jugador]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(tmp);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1)
					{
						if(Spectate[playerid] != 255)
						{
							Spectate[playerid] = 256;
						}
						GetPlayerPos(plo, plocx, plocy, plocz);
						if(PlayerInfo[plo][pInt] > 0)
						{
							SetPlayerInterior(playerid,PlayerInfo[plo][pInt]);
							PlayerInfo[playerid][pInt] = PlayerInfo[plo][pInt];
							PlayerInfo[playerid][pLocal] = PlayerInfo[plo][pLocal];
						}
						/*if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(playerid,0);
						}*/
						/*if(plocz > 530.0 && PlayerInfo[plo][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(playerid,0);
							PlayerInfo[playerid][pInt] = 0;
						}*/
						if (GetPlayerState(playerid) == 2)
						{
							new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
							TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
						}
						else
						{
							SetPlayerPos(playerid,plocx,plocy+2, plocz);
						}
						SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[GETHERE]-----------------------------------------------
	if(strcmp(cmd, "/traer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /traer [ID del Jugador]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = ReturnUser(tmp);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					/*if (PlayerInfo[plo][pAdmin] > 5)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Ask the admin to goto you.");
						return 1;
					}*/
					if (PlayerInfo[playerid][pAdmin] >= 3)
					{
						GetPlayerPos(playerid, plocx, plocy, plocz);
						if(PlayerInfo[playerid][pInt] > 0)
						{
							//SetPlayerInterior(plo,PlayerInfo[playerid][pInt]);
							PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
							PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							//SetPlayerInterior(plo,0);
						}
						if(plocz > 930.0 && PlayerInfo[playerid][pInt] == 0) //the highest land point in sa = 526.8
						{
							//SetPlayerInterior(plo,1);
							PlayerInfo[plo][pInt] = 1;
						}
						if (GetPlayerState(plo) == 2)
						{
							TelePos[plo][0] = 0.0;
							TelePos[plo][1] = 0.0;
							new tmpcar = GetPlayerVehicleID(plo);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
						}
						else
						{
							SetPlayerPos(plo,plocx,plocy+2, plocz);
						}
						SendClientMessage(plo, COLOR_GRAD1, "   Te has teletrasportado");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d no es un jugador activo.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/getcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /getcar [carid]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(plo,plocx,plocy+4, plocz);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/oldcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    format(string, sizeof(string), "La Id del Ultimo coche en el que has montado es: %d",gLastCar[playerid]);
		    SendClientMessage(playerid, COLOR_GREY, string);
	    }
	    return 1;
	}
	if(strcmp(cmd, "/repostartodos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 3)
	        {
	            for(new c=0;c<CAR_AMOUNT;c++)
				{
					Gas[c] = GasMax;
				}
				SendClientMessage(playerid, COLOR_GREY, "   Todos los vehiculos han sido repostados ! ");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No eres un administrador ! ");
	            return 1;
	        }
	    }
	    return 1;
	}
//----------------------------------[GiveGun]------------------------------------------------
	if(strcmp(cmd, "/givegun", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /givegun [ID o Nombre] [weaponid(eg. 46 = Parachute)] [ammo]");
				return 1;
			}
			new playa;
			new gun;
			new ammo;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			gun = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /givegun [ID o Nombre] [weaponid] [ammo]");
				SendClientMessage(playerid, COLOR_GRAD4, "3(Club) 4(knife) 5(bat) 6(Shovel) 7(Cue) 8(Katana) 10-13(Dildo) 14(Flowers) 16(Grenades) 18(Molotovs) 22(Pistol) 23(SPistol)");
				SendClientMessage(playerid, COLOR_GRAD3, "24(Eagle) 25(shotgun) 29(MP5) 30(AK47) 31(M4) 33(Rifle) 34(Sniper) 37(Flamethrower) 41(spray) 42(exting) 43(Camera) 46(Parachute)");
				return 1;
			}
			/*if(gun < 1||gun > 46||gun==27||gun==1||gun==2||gun==9||gun==17||gun==19||gun==20||gun==21||gun==35||gun==36||gun==39||gun==40||gun==44||gun==45)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   wrong WeaponID!"); return 1; }*/
			tmp = strtok(cmdtext, idx);
			ammo = strval(tmp);
			if(ammo <1||ammo > 9999)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   dont go below 1 or above 9999 bullets!"); return 1; }
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SafeGivePlayerWeapon(playa, gun, ammo);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "Administración: %s has given %s gun id %d.", sendername,giveplayer,gun);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
//----------------------------------[sethp]------------------------------------------------
	if(strcmp(cmd, "/vida", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vida [ID del jugador] [Vida]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerHealth(playa, health);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "Administración: %s has set %s's hp to %d.", sendername,giveplayer,health);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/respawnear", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /respawnear [ID del jugador] [Vida]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
                        MedicBill[playa] = 0;
						SetPlayerHealth(playa, health);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "Administración: %s has set %s's hp to %d and Spawn it.", sendername,giveplayer,health);
						SetPlayerSpawn(playa);
						ABroadCast(COLOR_YELLOW,string);
						MedicBill[playerid] = 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/explotasos", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /explotasos [ID del jugador] [Tipo]");
				return 1;
			}
			new playa;
			new type;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			type = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerHealth(playa, 5000);
						new Float:boomx, Float:boomy, Float:boomz;
						GetPlayerPos(playa,boomx, boomy, boomz);
						CreateExplosion(boomx, boomy , boomz, type, 10);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setarmor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /setarmor [ID o Nombre] [armor]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerArmour(playa, health);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "Administración: %s has set %s's armor to %d.", sendername,giveplayer,health);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setinformal", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /setinformal [ID o Nombre] [age]");
				return 1;
			}
			new playa;
			new age;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			age = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						PlayerInfo[playa][pAge] = age;
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "Administración: %s has set %s's ropa informal to %d.", sendername,giveplayer,age);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/cochefbi", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pLeader] != 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /veh [MODELO] [color1] [color2]");
				return 1;
			}
			new car;
			car = strval(tmp);
			if(car < 400 || car > 611) { SendClientMessage(playerid, COLOR_GREY, "   El modelo deve estar entre 400 y 611 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /veh [carid] [color1] [color2]");
				return 1;
			}
			new color1;
			color1 = strval(tmp);
			if(color1 < 0 || color1 > 126) { SendClientMessage(playerid, COLOR_GREY, "   El color deve estar entre 0 y 126 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /veh [MODELO] [color1] [color2]");
				return 1;
			}
			new color2;
			color2 = strval(tmp);
			if(color2 < 0 || color2 > 126) { SendClientMessage(playerid, COLOR_GREY, "   El color deve estar entre 0 y 126 !"); return 1; }
			new carid = CreateVehicle(car, 1668.3867,-1706.0941,15.2447, 0.0, color1, color2, 60000);
			CreatedCars[CreatedCar] = carid;
			CreatedCar ++;
			new numaley[256];
			GetPlayerName(playerid, numaley, sizeof(numaley));
			new PlayerVehicleModelIDs = GetVehicleModel(carid);
			PlayerVehicleModelIDs -= 400;
			format(string, sizeof(string), "   El vehiculo %d ha sido creado por %s, un %s.", carid, numaley, PlayerVehicle[PlayerVehicleModelIDs]);
			ABroadCast(COLOR_YELLOW, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/veh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] < 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /veh [MODELO] [color1] [color2]");
				return 1;
			}
			new car;
			car = strval(tmp);
			if(car < 400 || car > 611) { SendClientMessage(playerid, COLOR_GREY, "   El modelo deve estar entre 400 y 611 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /veh [carid] [color1] [color2]");
				return 1;
			}
			new color1;
			color1 = strval(tmp);
			if(color1 < 0 || color1 > 126) { SendClientMessage(playerid, COLOR_GREY, "   El color deve estar entre 0 y 126 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /veh [MODELO] [color1] [color2]");
				return 1;
			}
			new color2;
			color2 = strval(tmp);
			if(color2 < 0 || color2 > 126) { SendClientMessage(playerid, COLOR_GREY, "   El color deve estar entre 0 y 126 !"); return 1; }
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid, X,Y,Z);
			new carid = CreateVehicle(car, X,Y,Z, 0.0, color1, color2, 60000);
			CreatedCars[CreatedCar] = carid;
			CreatedCar ++;
			new numaley[256];
			GetPlayerName(playerid, numaley, sizeof(numaley));
			new PlayerVehicleModelIDs = GetVehicleModel(carid);
			PlayerVehicleModelIDs -= 400;
			format(string, sizeof(string), "   El vehiculo %d ha sido creado por %s, un %s.", carid, numaley, PlayerVehicle[PlayerVehicleModelIDs]);
			ABroadCast(COLOR_YELLOW, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/weather", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /weather [weatherid]");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			//limites//if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45!"); return 1; }
			SetPlayerWeather(playerid, weather);
			//SendClientMessage(playerid, COLOR_GREY, "You have set the weather to %s" , weather);
			tmp = strtok(cmdtext, idx );
			GetPlayerName(playerid, sendername, sizeof(sendername));
       		format(string, 256, "Administración: %s has changed the weather to %d.", sendername,weather);
			ABroadCast(COLOR_YELLOW,string);
		}
		return 1;
	}
	if(strcmp(cmd, "/weatherall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /weatherall [weatherid]");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			//limites//if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45!"); return 1; }
			SetWeather(weather);
			SendClientMessage(playerid, COLOR_GREY, "   Weather Set to everyone!");
			GetPlayerName(playerid, sendername, sizeof(sendername));
       		format(string, 256, "Administración: %s has changed the weather to %d.", sendername,weather);
			ABroadCast(COLOR_YELLOW,string);
			DefaultWeather = weather;
		}
		return 1;
	}
//----------------------------------[Money]------------------------------------------------
	if(strcmp(cmd, "/money", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /money [ID o Nombre] [money]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SafeResetPlayerMoney(playa);
						//ConsumingMoney[playa] = 1;
						SafeGivePlayerMoney(playa, money);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "Administración: %s ha fijado el dinero de %s en $%d.", sendername,giveplayer,money);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
//----------------------------------[GiveMoney]------------------------------------------------
	if(strcmp(cmd, "/givemoney", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /givemoney [ID o Nombre] [money]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            //ConsumingMoney[playa] = 1;
						SafeGivePlayerMoney(playa, money);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "Administración: %s Ha dado a %s, $%d dolares.", sendername,giveplayer,money);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
//-----------------------------------[Slap]-----------------------------------------------
	if(strcmp(cmd, "/slap", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /slap [ID o Nombre]");
				return 1;
			}
			new playa;
			new Float:shealth;
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerHealth(playa, shealth);
						SetPlayerHealth(playa, shealth-5);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+5);
						PlayerPlaySound(playa, 1130, slx, sly, slz+5);
						printf("Administración: %s slapped %s",sendername,  giveplayer);
						format(string, sizeof(string), "Administración: %s ha sido castigado por %s",giveplayer ,sendername);
						BroadCast(COLOR_LIGHTRED,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/mute", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /mute [ID o Nombre]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[playa][pMuted] == 0)
						{
							PlayerInfo[playa][pMuted] = 1;
							printf("Administración: %s silenced %s",sendername,  giveplayer);
							format(string, sizeof(string), "Administración: %s was silenced by %s",giveplayer ,sendername);
							ABroadCast(COLOR_LIGHTRED,string);
						}
						else
						{
							PlayerInfo[playa][pMuted] = 0;
							printf("Administración: %s unsilenced %s",sendername,  giveplayer);
							format(string, sizeof(string), "Administración: %s was unsilenced by %s",giveplayer ,sendername);
							ABroadCast(COLOR_LIGHTRED,string);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}

//-----------------------------------[Force tutorial]-------------------------------------
    /*if(strcmp(cmd, "/learn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
   			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /learn [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "Administración: %s was learned by %s (%d-%d-%d)", sendername,giveplayer,day,month,year);
      					KickLog(string);
      					PlayerInfo[giveplayerid][pTut] = 0;
						format(string, sizeof(string), "You have been deported from the state. You will need to retake the tutorial.");
						SendClientMessage(giveplayerid,COLOR_LIGHTRED,string);
						Kick(giveplayerid);
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, 256, "Administración: %s has kicked %s and forced them to retake the tutorial.", sendername,giveplayer);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}*/
//----------------------------------[Name kick]------------------------------------------------
    /*if(strcmp(cmd, "/name", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /name [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), " Administración: %s has been kicked by %s for a NON-RP name name", giveplayer, sendername);
						SendAdminMessage(COLOR_YELLOW, string);
						format(string, sizeof(string), " Administración: You have been kicked by %s for a NON-RP name ( Firstname_Lastname )", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
				        Kick(giveplayerid);
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
 	}*/
	if(strcmp(cmd, "/duplicarcuenta", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		new tmpp[256];
		tmpp = strtok(cmdtext, idx);
		if(!strlen(tmpp))
		{
			SendClientMessage(playerid, COLOR_DBLUE, "Correct SYNTAX: /duplicarcuenta [playerid] [Nuevo nombre]");
			return 1;
		}
		giveplayerid = strval(tmpp);
		tmp = strtok(cmdtext, idx);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] == 2000)
		    {
		        if(IsPlayerConnected(giveplayerid))
		        {
					SetPlayerName(giveplayerid, tmp);
					format(string, sizeof(string), "Administración: %s(%i) ha cambiado tu nombre a %s", sendername, playerid, tmp);
					SendClientMessage(giveplayerid, COLOR_DBLUE, string);
					format(string, sizeof(string), "Administración: Has cambiado la id %i a %s", giveplayerid, tmp);
					SendClientMessage(playerid, COLOR_DBLUE, string);
					format(string, 256, "Administración: %s ha cambiado a %s su nombre por %s.", sendername,giveplayer, tmp);
					ABroadCast(COLOR_YELLOW,string);
				}
				else
				{
				    format(string, sizeof(string), "%d [ERROR] ID Incorrecta.", giveplayerid);
					SendClientMessage(playerid, COLOR_RED, string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "No puedes usar este comando!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "No estas logueado!");
		}
	  	return 1;
	}
//---------------------------------------------[Kick]-----------------------------------------------------
    if(strcmp(cmd, "/kick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /kick [ID o Nombre] [reason]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /kick [ID o Nombre] [reason]");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "Administración: %s ha sido expulsado por %s, razon: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						KickLog(string);
						format(string, sizeof(string), "Administración: %s ha sido expulsado por %s, razon: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						Kick(giveplayerid);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/skick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /skick [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        Kick(giveplayerid);
				    }
				}
			}
			else
			{
				format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/kickres", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if (PlayerInfo[playerid][pAdmin] < 1)
			{
				return 1;
			}
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /kickres [level] [cantidad]");
				return 1;
			}
			new level = strval(tmp);
			if(level < 0 || level > 5) { SendClientMessage(playerid, COLOR_GREY, "   Can only Reserved Slots Kick from level 0 to 5 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /kickres [level] [cantidad]");
				return 1;
			}
			new ammount = strval(tmp);
			if(ammount < 1 || ammount > 5) { SendClientMessage(playerid, COLOR_GREY, "   Can only Reserved Slots Kick of a maximum of 5 players !"); return 1; }
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(PlayerInfo[i][pLevel] == level && PlayerInfo[i][pAdmin] < 1 && PlayerInfo[i][pDonateRank] < 1 && ammount > 0)
			        {
			            ammount -= 1;
						Kick(i);
			        }
			    }
			}
 		}
		return 1;
	}*/
//---------------------------------------------[Unban]-----------------------------------------------
    if(strcmp(cmd,"/unbanip",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"ESCRIBE: /unbanip [players ip]");
		        return 1;
   			}
			format(string,sizeof(string),"unbanip %s",tmp);
			SendRconCommand(string);
			SendRconCommand("reloadbans");
   			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, 256, "Administración: %s retiro el ban (IP) %s", sendername,tmp);
			ABroadCast(COLOR_YELLOW,string);
		}
		return 1;
	}
	if (strcmp(cmd, "/unban", true)==0)
	{
	    if((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >=3)
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
		        SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /unban [Nombre]");
	            return 1;
		 	}
		 	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		 	GetPlayerName(playerid, sendername, sizeof(giveplayer));
		 	format(string, 256, "Administración: %s ha desbaneado a %s", sendername, tmp);
		 	ABroadCast(COLOR_YELLOW,string);
			format(string, 256, "Administración: %s retiro el ban a %s", sendername, tmp);
			printf(string);
			format(string,sizeof(string),"%s.ini",tmp);
			fremove(string);
			SendClientMessage(playerid, COLOR_WHITE, "Jugador desbaneado");
			SendRconCommand(string);
			SendRconCommand("reloadbans");
   			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
		}
		return 1;
	}
//--------------------------------------[Ban]----------------------------------------------------
	if(strcmp(cmd, "/ban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /ban [ID o Nombre] [reason]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /ban [ID o Nombre] [reason]");
							return 1;
						}
						new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "Administración: %s ha sido baneado por %s, por: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						BanLog(string);
						format(string, sizeof(string), "Administración: %s ha sido baneado por %s, por: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pLocked] = 1;
						Ban(giveplayerid);
						return 1;
					}
				}//not connected
			}
			else
			{
				format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
//----------------------------------[Freeze]------------------------------------------------
	if(strcmp(cmd, "/congelar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /congelar [ID o Nombre]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			/*if(PlayerInfo[playa][pAdmin] > 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Admins can not be frozen");
				return 1;
			}*/
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 0);
						GameTextForPlayer(playa, "~r~ESTAS QUIETO", 5000, 3);
						format(string, sizeof(string), "Administración: %s ha sido congelado por %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "Administración: %s ha sido congelado por %s",giveplayer ,sendername);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}

//----------------------------------[unfreeze]------------------------------------------------
	if(strcmp(cmd, "/descongelar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /descongelar [playerid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 1);
						GameTextForPlayer(playa, "~w~Descongelado", 5000, 3);
						format(string, sizeof(string), "Administración: %s ha sido descongelado por %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "Administración: %s ha sido descongelado por %s",giveplayer ,sendername);
						ABroadCast(COLOR_YELLOW,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
//----------------------------------[EndRound]-----------------------------------------------

	/*if(strcmp(cmd, "/endround", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	  		if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				GameModeInitExitFunc();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto !");
			}
		}
		return 1;
	}*/
//----------------------------------[EndRound]-----------------------------------------------

//----------------------------------[GMX]-----------------------------------------------

	/*if(strcmp(cmd, "/gmx", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
				GameModeExit();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto !");
			}
		}
		return 1;
	}*/
	
	if (strcmp(cmd, "/cam", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /cam [1/2/3/4]");
				return 1;
			}
			Unspec[playerid][sCam] = strval(tmp);
			format(string, sizeof(string), "Switching to cam %d",Unspec[playerid][sCam]);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if (strcmp(cmd, "/admins", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREEN, "|____ Administración de SPG - RolePlay ____|");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pAdmin] >= 1 && PlayerInfo[i][pAdmin] < 2012)
				    {
				        new admtext[64];
				        //if(PlayerInfo[playerid][pAdmin] == 2012 || PlayerInfo[playerid][pAdmin] == 2000 && PlayerInfo[i][pAdmin] == 2012) { admtext = "Admin-OCULTO"; }
				        if(PlayerInfo[i][pAdmin] == 2000) { admtext = "FTP-Admin"; }
						else if(PlayerInfo[i][pAdmin] == 5) { admtext = "Super-Admin"; }
				        else if(PlayerInfo[i][pAdmin] == 4) { admtext = "Admin"; }
						else if(PlayerInfo[i][pAdmin] == 3) { admtext = "Centinela"; }
						else if(PlayerInfo[i][pAdmin] == 2)	{ admtext = "Ayudante"; }
						else if(PlayerInfo[i][pAdmin] == 1) { admtext = "Moderador"; }
						else { admtext = "Indefinido"; }
						GetPlayerName(i, sendername, sizeof(sendername));
						if(AdminDuty[i] == 0)
						{
							format(string, 256, "%s: %s", admtext, sendername);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
						else
						{
						    format(string, 256, "%s: %s (Ocupado)", admtext, sendername);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					if(PlayerInfo[playerid][pAdmin] < 2000)
					{
					    return 1;
					}
					if(PlayerInfo[i][pAdmin] == 2012)
				    {
				        new admtext[64];
				        if(PlayerInfo[i][pAdmin] == 2012) { admtext = "Oculto"; }
						else { admtext = "Indefinido"; }
						GetPlayerName(i, sendername, sizeof(sendername));
						if(AdminDuty[i] == 0)
						{
							format(string, 256, "%s: %s", admtext, sendername);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
						else
						{
						    format(string, 256, "%s: %s (Ocupado)", admtext, sendername);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
				}
			}
		}
		return 1;
	}
/*	if (strcmp(cmd, "/licensers", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Licensers Online:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMember] == 11 || PlayerInfo[i][pLeader] == 11)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 256, "** Ph: %d ** %s", PlayerInfo[i][pPnumber] ,sendername);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return 1;
	}*/
	
	if (strcmp(cmd, "/masked", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  No puedes usar este comando . ");
	            return 1;
	        }
			SendClientMessage(playerid, COLOR_GRAD1, "Usuarios enmascarados:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMaskuse] == 1)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 256, "** ID: %d ** %s", i, sendername);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return 1;
	}
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/ayuda", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            SendClientMessage(playerid, COLOR_YELLOW,"::Ayuda:: /ayudamovil /ayudacasa /ayudaveh /ayudaalquiler /ayudanegocio /ayudalibreta /ayudabanco /ayudatrabajo");
            SendClientMessage(playerid, COLOR_YELLOW,"::Ayuda:: /ayudalider /ayudapesca /ayudairc /ayudacuenta /ayudacomandos /ayudachat /ayudatesting /ayudaobjetos");
			if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, "=LSPD= (/r)adio (/d)epartamentos (/m) (/so) /mdc /arrestar /deservicio /wanted /esposar (/ta)zer /encubrir /ref");
				SendClientMessage(playerid, COLOR_YELLOW2, "=LSPD= /cachear /friskinv /confiscar /gob /deliver /ram /swat /autoswat /desautoswat /arrastrar /desvincular");
				SendClientMessage(playerid, COLOR_YELLOW2, "=LSPD= /noref /rrball /rrb /crb /showbadge /tracelastcall(/tlc) /comabrir /comcerrar /cl /qcl /qtcl /multar");
				SendClientMessage(playerid, COLOR_YELLOW2, "=LSPD= /entregarlicencia");
   			}
   			if(PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 2)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, "=FBI= (/r)adio (/d)epartments (/m) (/so) /mdc /arrestar /deservicio /wanted (/cu)ff (/ta)zer /agent /showid /friskinv");
				SendClientMessage(playerid, COLOR_YELLOW2, "=FBI= /cachear /confiscar (/gov) /deliver /ram /arrastrar /desvincular /authorizetactical /deauthorizetactical /tactical");
				SendClientMessage(playerid, COLOR_YELLOW2, "=FBI= /comabrir /comcerrar /psecreta /qsecreta");
   			}
   			if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, "=Militares= /f /r /d [RADIO] /m [MEGAFONO]");
				SendClientMessage(playerid, COLOR_YELLOW2, "=Militares= /entrar /salir [TRANSPORTES] /coger /soltar [MUNICIONES]");
				SendClientMessage(playerid, COLOR_YELLOW2, "=Militares= /arrestar /esposar /desposar /tazer ");
   			}
   			if(PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pMember] == 14)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, ":: Yakuza :: (/r)adio (/jap)ones /robar /abrir /cerrarhq");
   			}
   			if(PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pMember] == 8)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, ":: Hitman :: (/r)adio (/rus)o /portatil /abrir /cerrarhq /robar /localizarmovil");
   			}
   			if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 5)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, ":: G.S. GroveS :: (/r)adio (/ing)les /robar /cerrarhq");
   			}
   			if(PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, ":: La Cosa Nostra :: /abrir (/r)adio /italiano /cerrarhq /robar");
   			}
   			if(PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 15)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, ":: Latin XIV Clicka' :: (/f)accion /robar");
   			}
   			if(PlayerInfo[playerid][pLeader] == 16 || PlayerInfo[playerid][pMember] == 16)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, ":: 18th Street' :: (/f)accion /cerrarhq /robar");
   			}
   			if(PlayerInfo[playerid][pLeader] == 17 || PlayerInfo[playerid][pMember] == 17)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, ":: Notrh Street Gang :: (/f)accion /robar /uniforme");
   			}
   			if(PlayerInfo[playerid][pLeader] == 18 || PlayerInfo[playerid][pMember] == 18)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, ":: Los Cobras :: (/f)accion /robar /uniforme");
   			}
   			if(PlayerInfo[playerid][pLeader] == 19 || PlayerInfo[playerid][pMember] == 19)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, ":: Cuerpo de Bomberos :: (/f)accion ");
   			}
   			if(PlayerInfo[playerid][pLeader] == 20 || PlayerInfo[playerid][pMember] == 20)
			{
   				SendClientMessage(playerid, COLOR_YELLOW2, ":: Los Puretas :: (/f)accion /robar /uniforme");
   			}
            if(PlayerInfo[playerid][pJob] == 1) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Detective :: /buscar"); }
		    else if(PlayerInfo[playerid][pJob] == 2) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Abogado :: /liberar"); }
		    else if(PlayerInfo[playerid][pJob] == 3) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Prostituta :: /sexo"); }
		    else if(PlayerInfo[playerid][pJob] == 4) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Camello :: /vendrogas /colmar drogas"); }
	        else if(PlayerInfo[playerid][pJob] == 5) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Ladron :: /robarcoche"); }
		    else if(PlayerInfo[playerid][pJob] == 6) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Cocinero :: /showmenu /cookuniform"); }
		    else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: CNN-Faccion :: /publicar /periodicos /entrevista (/not)icias [texto]"); }
		    else if(PlayerInfo[playerid][pJob] == 7) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mecanico :: Informacion necesariamente detallada en /ayudatrabajo"); }
		    else if(PlayerInfo[playerid][pJob] == 8) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Guardaespaldas :: /proteger"); }
		    else if(PlayerInfo[playerid][pJob] == 10) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mozo :: /movermercancia /nomovermercancia"); }
		    else if(PlayerInfo[playerid][pJob] == 9) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Camionero :: /entregarmercancia"); }
		   /* else if(PlayerInfo[playerid][pJob] == 10) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /vendercar"); }*/
		    else if(PlayerInfo[playerid][pJob] == 11) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Minero :: /minar /nominar"); }
		    else if(PlayerInfo[playerid][pJob] == 12) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Boxeador :: /fight /boxstats"); }
		    else if(PlayerInfo[playerid][pJob] == 13) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mendigo :: /limosna /hacerdepobre"); }
		   /* else if(PlayerInfo[playerid][pMember] == 10|| PlayerInfo[playerid][pLeader] == 10) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Taxista-Faccion :: /precio /(r)adio /ruta2 /ruta1"); }*/
		    else if(PlayerInfo[playerid][pJob] == 24) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Taxista :: /precio /ruta2 /ruta1"); }
		    else if(PlayerInfo[playerid][pJob] == 14) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Trabajo :: /fare"); }
		    else if(PlayerInfo[playerid][pJob] == 15) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Periodicos :: /periodicos /bring /deliver"); }
		    else if(PlayerInfo[playerid][pJob] == 16) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Comercial :: /hacerpedidos /nohacerpedidos"); }
		    else if(PlayerInfo[playerid][pJob] == 17) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Pizzero :: /deservicio /darpizza"); }
		    else if(PlayerInfo[playerid][pJob] == 18) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Granjero :: /recolectar /norecolectar"); }
		    else if(PlayerInfo[playerid][pJob] == 19) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Granjero Especial :: /comenzardroga /parardroga"); }
		    else if(PlayerInfo[playerid][pJob] == 20) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Prov. Drogas :: /tomardrogas /negociardrogas"); }
		    else if(PlayerInfo[playerid][pJob] == 21) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Barrendero :: /barrer /nobarrer"); }
		    else if(PlayerInfo[playerid][pJob] == 22) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Prov. Armas :: /smugglemats"); }
     		 else if(PlayerInfo[playerid][pJob] == 23) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Vend. Armas :: /creategun /comprarmats "); }
		    else if(PlayerInfo[playerid][pJob] == 25) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Basurero :: /basura /nobasura "); }
		    /*if(PlayerInfo[playerid][pMember] == 11||PlayerInfo[playerid][pLeader] == 11||PlayerInfo[playerid][pMember] == 12||PlayerInfo[playerid][pLeader] == 12){
		    SendClientMessage(playerid,COLOR_YELLOW2,":: LESSON :: /startlesson /stoplesson /givelicense"); }*/
			if (gTeam[playerid] == 1 || PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, ":: LSMD :: (/r)adio (/d)epartamentos /curar /deservicio (/tlc) /curarheridas /verheridas");
			}
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				SendClientMessage(playerid, COLOR_RED, ":: ADMIN :: (/a)dmin (/ah)elp");
			}
		}
		return 1;
	}

//------------------------------------------------------------------------------------------------------
//----------------------------------[ATM System]----------------------------------------------- By LordMan
	/*if(strcmp(cmd, "/atm", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_YELLOW,"*** ATM HELP *** type a command for more help");
			SendClientMessage(playerid, COLOR_YELLOW,"*** ATM *** /atmwithdraw /atmdeposit");
		}
		return 1;
	}*/
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/reglas", true) == 0) //- pendiente
	{
	    if(IsPlayerConnected(playerid))
	    {
		    SendClientMessage(playerid, COLOR_GREEN, "______________Normas Servidor_______________");
      		SendClientMessage(playerid, COLOR_GRAD5, "* Jugar Siempre dentro del Rol de tu Personaje");
      		SendClientMessage(playerid, COLOR_GRAD5, "* No hacer DM (esto es un servidor de RP)");
      		SendClientMessage(playerid, COLOR_GRAD5, "* Hablar en español (en IC) porque este server es Español");
      		SendClientMessage(playerid, COLOR_GRAD5, "* No abusar de chetos ni Bugs (use /reportar)");
      		SendClientMessage(playerid, COLOR_GRAD5, "* No hacer Drive-By (excepto policias y pasajeros)");
      		SendClientMessage(playerid, COLOR_GRAD5, "* No utilizar emoticonos en IC");
      		SendClientMessage(playerid, COLOR_GRAD5, "* No hacer bunnyhop");
      		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
      		SendClientMessage(playerid, COLOR_LIGHTRED, "** www.spg-roleplay.info");
		}
		return 1;
	}
	
//----------------------------------[OBJETOS del personaje]-----------------------------------------------

    if(strcmp(cmd, "/bolsa", true) == 0)
    {
				if(GetPlayerMoney(playerid) < 10000)
   	{
   	SendClientMessage(playerid, COLOR_GREY, "No tienes un mínimo de 10000$ para llenar la bolsa");
   	return 1;
 			}
 			else
 			{
 			    SetPlayerAttachedObject( playerid, 2, 1550, 1, 0.024558, -0.279748, -0.060589, 6.105677, 137.291320, 147.132202, 1.019888, 1.000000, 1.000000 );
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Has llenado la bolsa de dinero, para descolgarla escribe /qbolsa");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* %s se cuelga a la espalda una bolsa llena de dinero", sendername);
      		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
    if(strcmp(cmd, "/qbolsa", true) == 0)
 	{
        	{
                RemovePlayerAttachedObject(playerid, 2);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Has guardado la bolsa de dinero, para volver a colgartela escribre /bolsa");
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* %s se descuelga la bolsa llena de dinero", sendername);
      		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}




	
//----------------------------------[poker]-----------------------------------------------
	if(strcmp(cmd, "/poker", true) == 0)
	{
	   new x_info[128];
       //x_info = strtok(cmdtext, idx);
       if(!strlen(x_info))
	   {
       SendClientMessage(playerid, COLOR_RED, "<|> Poker Comandos <|>");
       SendClientMessage(playerid, COLOR_WHITE, "________________ Distribuidor ________________");
       SendClientMessage(playerid, COLOR_WHITE, "Usa /poker dealerhelp para ver todos los comandos de Distribuidor.");
       SendClientMessage(playerid, COLOR_WHITE, "_______________ Jugador ________________");
       SendClientMessage(playerid, COLOR_WHITE, "Use /poker playerhelp para ver todos los comandos de Jugador.");
       SendClientMessage(playerid, COLOR_WHITE, "_______________________________________");
       SendClientMessage(playerid, COLOR_YELLOW, "0 - Joker, 1 - Ace, 11 - Jack, 12 - Queen, 13 - King (Los demas de modo Normal)");
       return 1;
       }
       if(strcmp(x_info, "dealerjob", true) == 0)
       {
	   if(PlayerInfo[playerid][pDealer] >= 1)
	   {
	   SendClientMessage(playerid, COLOR_WHITE, "Usted ya es Distribuidor! Usa /poker stopdeal para dejar de serlo!");
	   }
	   else if(PlayerInfo[playerid][pCash] < 1000)
	   {
	   SendClientMessage(playerid, COLOR_WHITE, "Necesitas $1000 para ser Distribuidor!");
	   }
	   else if(PlayerInfo[playerid][pCards] >= 1)
	   {
       SafeGivePlayerMoney(playerid,-1000);
	   PlayerInfo[playerid][pDealer] = 1;
	   SendClientMessage(playerid, COLOR_WHITE, "Tu pagas $1000, y ahora eres Distribuidor.");
       PlayerActionMessage(playerid,15.0,"se convierte en un distribuidor.");
	   }
	   else
	   {
	   SendClientMessage(playerid, COLOR_WHITE, "Usted no tiene una baraja de cartas! Ve a comprar una!");
	   }
	   return 1;
	   }
	   if(strcmp(x_info, "leavejob", true) == 0)
	   {
	   if(PlayerInfo[playerid][pDealer] >= 1)
	   {
	   PlayerInfo[playerid][pDealer] = 0;
	   SendClientMessage(playerid, COLOR_WHITE, "Has dejado de ser un distribuidor.");
       PlayerActionMessage(playerid,15.0,"deja de ser un distribuidor.");
       PlayerInfo[playerid][pFlop1] = 0;
       PlayerInfo[playerid][pFlop2] = 0;
       PlayerInfo[playerid][pFlop3] = 0;
       PlayerInfo[playerid][pRiver] = 0;
       PlayerInfo[playerid][pTurn] = 0;
       }
	   else
	   {
	   SendClientMessage(playerid, COLOR_WHITE, "Tu no eres un distribuidor!");
	   }
	   return 1;
	   }
	   if(strcmp(x_info, "playerhelp", true) == 0)
	   {
	   	SendClientMessage(playerid, COLOR_RED, "<|> Poker Jugador Comandos <|>");
        SendClientMessage(playerid, COLOR_WHITE, "/poker fold - Deja sus Cartas, va a estar Fuera.");
        SendClientMessage(playerid, COLOR_WHITE, "/poker see - Ver sus cartas, si usted se olvidó de ellas.");
        SendClientMessage(playerid, COLOR_WHITE, "/poker checkcards [id] - Ver las Cartas de tu distribuidor.");
        SendClientMessage(playerid, COLOR_WHITE, "/poker learntoplay - Aprende a jugar al póker, la forma de SPG - RolePlay.");
        SendClientMessage(playerid, COLOR_WHITE, "/poker reveal - Revela tus Cartas al público.");
        SendClientMessage(playerid, COLOR_YELLOW, "0 - Joker, 1 - Ace, 11 - Jack, 12 - Queen, 13 - King (Los demas de modo Normal)");
        return 1;
        }
       if(strcmp(x_info, "dealerhelp", true) == 0)
	   {
   	   SendClientMessage(playerid, COLOR_RED, "<|> Poker Distribuidor Comandos <|>");
       SendClientMessage(playerid, COLOR_WHITE, "/poker dealerjob - Se convierte en un Distribuidor.");
       SendClientMessage(playerid, COLOR_WHITE, "/poker flop - Sacar 3 Cartas. (Primeras 3 cartas).");
       SendClientMessage(playerid, COLOR_WHITE, "/poker river - Sacar 4 cartas. (4th carta).");
       SendClientMessage(playerid, COLOR_WHITE, "/poker turn - Sacar 5 cartas. (5th carta.");
       SendClientMessage(playerid, COLOR_WHITE, "/poker distribute [id] - Distribuye dos cartas al jugador.");
       SendClientMessage(playerid, COLOR_WHITE, "/poker delete - Elimina todas las cartas de la mesa.");
       SendClientMessage(playerid, COLOR_WHITE, "/poker removecards [id] - Elimina las cartas de la persona de la ID (final de la ronda).");
       SendClientMessage(playerid, COLOR_WHITE, "/poker leavejob - Deja de ser un distribuidor.");
       SendClientMessage(playerid, COLOR_YELLOW, "0 - Joker, 1 - Ace, 11 - Jack, 12 - Queen, 13 - King (Los demas de modo Normal)");
       return 1;
       }
	   if(strcmp(x_info, "flop", true) == 0)
	   {
	   if(PlayerInfo[playerid][pDealer] >= 1)
	   {
	   new flop[128];
	   PlayerInfo[playerid][pFlop1] = random(13);
	   PlayerInfo[playerid][pFlop2] = random(13);
	   PlayerInfo[playerid][pFlop3] = random(13);
	   format(flop, sizeof(flop), "Ocupa el flop: %d, %d, %d. (( /poker checkcards para ver todas las tarjetas de apertura. ))",PlayerInfo[playerid][pFlop1],PlayerInfo[playerid][pFlop2],PlayerInfo[playerid][pFlop3]);
       PlayerActionMessage(playerid,15.0,flop);
       return 1;
       }
       else
       {
       SendClientMessage(playerid, COLOR_WHITE, "Tu no eres Distribuidor!");
       }
       return 1;
       }
   	   if(strcmp(x_info, "river", true) == 0)
	   {
	   if(PlayerInfo[playerid][pDealer] >= 1)
	   {
	   new river[128];
	   PlayerInfo[playerid][pRiver] = random(13);
	   format(river, sizeof(river), "Ocupa el river: %d. (( /poker checkcards para ver todas las tarjetas de apertura. ))",PlayerInfo[playerid][pRiver]);
       PlayerActionMessage(playerid,15.0,river);
       }
       else
       {
       SendClientMessage(playerid, COLOR_WHITE, "Tu no eres Distribuidor!");
       }
       return 1;
       }
   	   if(strcmp(x_info, "turn", true) == 0)
	   {
	   if(PlayerInfo[playerid][pDealer] >= 1)
	   {
	   new turn[128];
	   PlayerInfo[playerid][pTurn] = random(13);
	   format(turn, sizeof(turn), "Ocupa el turn: %d. (( /poker checkcards para ver todas las tarjetas de apertura. ))",PlayerInfo[playerid][pTurn]);
       PlayerActionMessage(playerid,15.0,turn);
       }
       else
       {
       SendClientMessage(playerid, COLOR_WHITE, "Tu no eres Distribuidor!");
       }
       return 1;
       }
       if(strcmp(x_info, "learntoplay", true) == 0)
       {
       	SendClientMessage(playerid, COLOR_RED, "<|> Descripcion Poker SPG - RolePlay <|>");
	    SendClientMessage(playerid, COLOR_WHITE, "Bien, en primer lugar, te habrás dado cuenta que es el número base, es decir, no Picas etc.");
	    SendClientMessage(playerid, COLOR_WHITE, "Por lo tanto, es básicamente lo mismo que el Texas Hold'em, a excepción de signos.");
        SendClientMessage(playerid, COLOR_WHITE, "Usted todavía puede tener full houses, straights, etc.");
        SendClientMessage(playerid, COLOR_WHITE, "Al leer antes, esto es Texas Hold'em, justo y sin las señales.");
	    SendClientMessage(playerid, COLOR_WHITE, "Divierte mucho cuando se domina los comandos! :D");
	    return 1;
	   }
       if(strcmp(x_info, "distribute", true) == 0)
      {
	    if(IsPlayerConnected(playerid))
	    {
	    if(PlayerInfo[playerid][pDealer] >= 1)
	    {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "(USAGE) /poker distribute [playerid/partofname]");
					return 1;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				    if(ProxDetectorS(8.0, playerid, giveplayerid))
				    {
				    new distribute[128];
				    format(distribute, sizeof(distribute), "distribuye dos cartas al azar a %s.",GetPlayerNameEx(giveplayerid));
				    PlayerActionMessage(playerid,15.0,distribute);
				    PlayerInfo[giveplayerid][pCard1] = random(13);
				    PlayerInfo[giveplayerid][pCard2] = random(13);
				    }
				    else
				    {
				    SendClientMessage(playerid, COLOR_GREY, "(ERROR) No estás cerca de ese jugador.");
				    }
					}
				}
				else
				{
				SendClientMessage(playerid, COLOR_GREY, "(ERROR) Invalido ID/Nombre");
				}
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Tu no eres Distribuidor!");
				}
		}
		return 1;
		}
       if(strcmp(x_info, "removecards", true) == 0)
       {
	    if(IsPlayerConnected(playerid))
	    {
	    if(PlayerInfo[playerid][pDealer] >= 1)
	    {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "(USAGE) /poker removecards [playerid/partofname]");
					return 1;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				    if(ProxDetectorS(8.0,playerid,giveplayerid))
				    {
				    if(PlayerInfo[playerid][pCard1] >= 1)
				    {
				    new remove[128];
				    format(remove, sizeof(remove), "toma las cartas de %s.",GetPlayerNameEx(giveplayerid));
				    PlayerActionMessage(playerid,15.0,remove);
				    PlayerInfo[giveplayerid][pCard1] = 0;
				    PlayerInfo[giveplayerid][pCard2] = 0;
					}
					else
					{
					SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no tiene ninguna carta para que usted tome!");
					}
					}
					else
					{
					SendClientMessage(playerid, COLOR_WHITE, "(ERROR) No estamos cerca de ese jugador.");
					}
					}
				}
				else
				{
				SendClientMessage(playerid, COLOR_GREY, "(ERROR) Invalido ID/Name");
				}
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Tu no eres Distribuidor!");
				}
		}
		return 1;
		}
     if(strcmp(x_info, "reveal", true) == 0)
	 {
		if(PlayerInfo[playerid][pCard1] >= 1)
		{
		new show1[128];
	    format(show1, sizeof(show1), "revela sus dos cartas: %d y %d.",PlayerInfo[playerid][pCard1],PlayerInfo[playerid][pCard2]);
	    PlayerActionMessage(playerid,15.0,show1);
	    }
	    else
	    {
	    SendClientMessage(playerid, COLOR_WHITE, "Usted no tiene ninguna carta para revelar!");
	    }
	    return 1;
     }
	    if(strcmp(x_info, "see", true) == 0)
	   {
	   if(PlayerInfo[playerid][pCard1] >= 1)
	   {
	   new see1[128];
	   format(see1, sizeof(see1), "Sus cartas son: %d y %d.",PlayerInfo[playerid][pCard1], PlayerInfo[playerid][pCard2]);
	   SendClientMessage(playerid, COLOR_WHITE, see1);
	   PlayerActionMessage(playerid, 15.0, "echa un vistazo a sus cartas.");
	   }
	   else
	   {
	   SendClientMessage(playerid, COLOR_WHITE, "Usted no tiene ninguna carta para ver!");
	   }
	   return 1;
	   }
	   if(strcmp(x_info, "fold", true) == 0)
	   {
	   if(PlayerInfo[playerid][pCard1] >= 1)
	   {
	   PlayerInfo[playerid][pCard1] = 0;
	   PlayerInfo[playerid][pCard2] = 0;
	   SendClientMessage(playerid, COLOR_WHITE, "Usted deja sus cartas.");
	   PlayerActionMessage(playerid,15.0,"deja sus cartas,esta fuera.");
	   }
	   else
	   {
	   SendClientMessage(playerid, COLOR_WHITE, "Usted no tiene ninguna carta para dejar!");
	   }
	   return 1;
	   }
       if(strcmp(x_info, "checkcards", true) == 0)
      {
	    if(IsPlayerConnected(playerid))
	    {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "(COMANDO) /poker checkcards [playerid/partofname]");
					return 1;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				    if(ProxDetectorS(10.0,playerid,giveplayerid))
				    {
				    if(PlayerInfo[giveplayerid][pDealer] >= 1)
				    {
				    new string2[128];
				    new Flop1 = PlayerInfo[giveplayerid][pFlop1];
				    new Flop2 = PlayerInfo[giveplayerid][pFlop2];
				    new Flop3 = PlayerInfo[giveplayerid][pFlop3];
				    new Flop4 = PlayerInfo[giveplayerid][pRiver];
				    new Flop5 = PlayerInfo[giveplayerid][pTurn];
				    format(string2, sizeof(string2), "Registro las cartas de entrada del repartidor: %d, %d, %d, %d, %d.",Flop1,Flop2,Flop3,Flop4,Flop5);
				    SendClientMessage(playerid, COLOR_YELLOW, string2);
				    SendClientMessage(playerid, COLOR_YELLOW, "Recuerde, cualquier Carta que es 0 significa que no se ha abierto.");
				    new name[128];
	                format(name, sizeof(name), "mira las cartas del repartidor. (%s)",GetPlayerNameEx(giveplayerid));
				    PlayerActionMessage(playerid,15.0,name);
					}
					else
					{
					SendClientMessage(playerid, COLOR_WHITE, "Esa persona no es un distribuidor!");
					}
					}
					else
					{
					SendClientMessage(playerid, COLOR_WHITE, "(ERROR) No están cerca de ese jugador.");
					}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "(ERROR) Invalido ID/Name");
				}
		}
		return 1;
		}
   	   if(strcmp(x_info, "delete", true) == 0)
	   {
	   if(PlayerInfo[playerid][pDealer] >= 1)
	   {
	   new delete1[128];
	   PlayerInfo[playerid][pTurn] = 0;
	   PlayerInfo[playerid][pFlop1] = 0;
	   PlayerInfo[playerid][pFlop2] = 0;
	   PlayerInfo[playerid][pFlop3] = 0;
	   PlayerInfo[playerid][pRiver] = 0;
	   format(delete1, sizeof(delete1), "elimina todas las cartas de la mesa. (Flop, River, Turn)");
       PlayerActionMessage(playerid,15.0,delete1);
       }
       else
       {
       SendClientMessage(playerid, COLOR_WHITE, "Usted no es un distribuidor!");
       }
       return 1;
       }
	}

	if(strcmp(cmd, "/cartas", true) == 0)
	{
       SendClientMessage(playerid, COLOR_RED, "<|> Baraja de Cartas <|>");
       if(PlayerInfo[playerid][pCards] >= 1)
       {
       SendClientMessage(playerid, COLOR_YELLOW, "(*) Usted tiene una baraja de cartas.");
       }
       else
       {
       SendClientMessage(playerid, COLOR_WHITE, "(*) Usted no tiene una baraja de cartas.");
       }
       SendClientMessage(playerid, COLOR_WHITE, "Cuando se los compre, utilice /poker para jugar con ellas.");
       SendClientMessage(playerid, COLOR_YELLOW, "Los números que tienen cobertura son 0-13. He aquí una breve descripción de ellos:");
       SendClientMessage(playerid, COLOR_YELLOW, "0 - Joker, 1 - Ace, 11 - Jack, 12 - Queen, 13 - King");
       return 1;
	}

	if(strcmp(cmd, "/excasa", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerVirtualWorld(playerid) == 200)
         	{
		    	SendClientMessage(playerid, COLOR_YELLOW,"** No puedes hacer eso estando en matrix **");
    		}
    		if(GetPlayerVirtualWorld(playerid) == 335)
         	{
		    	SendClientMessage(playerid, COLOR_YELLOW,"** No puedes hacer eso estando AFK **");
    		}
			else
			{
		    	SetPlayerVirtualWorld(playerid,0);
		    	PlayerInfo[playerid][pVirWorld] = 0;
		    	SendClientMessage(playerid, COLOR_YELLOW,"** Ya no estas bugeado por tu casa **");
    		}
		}
		return 1;
	}
	
	if(strcmp(cmd, "/test", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
		}
		return 1;
	}
	
	/*if(strcmp(cmd, "/varcin", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
    		PlayerInfo[playerid][pCarTime] = 0;
	    	SendClientMessage(playerid, COLOR_LIGHTGREEN,"** Espera de ladron de coches reseteada **");
		}
		return 1;
	}*/
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/ayudamovil", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if (PlayerInfo[playerid][pPnumber] > 0)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda *** elige un comando de la lista");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda movil *** /llamar 'ej: /llamar 911' /ullamar /sms /atender /colgar /numero");
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE,"Puedes comprar tu telefono movil en cualquier 24/7");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ayudacomandos", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if(IsPlayerConnected(playerid))
			{
				SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda *** elige un comando de la lista");
				SendClientMessage(playerid, COLOR_YELLOW,"***Com***/pagar /donar /hora /comprar /vender /dejarveh /dejarbici /cambiarllave /id /ropa /abrirpuerta");
				SendClientMessage(playerid, COLOR_YELLOW,"***Com***/borrarmejoras(15k) /comprargun /bloquear /habilidades /licencias /mostrarlicencias /reportar");
				SendClientMessage(playerid, COLOR_YELLOW,"***Com***/re /cancelar /aceptar /echar /usardrogas /contrato /repostar /admins /factionlist /animaciones ");
				SendClientMessage(playerid, COLOR_YELLOW,"***Com***/wi /moneda /inv /patear /ko /dar /abrir /tarjeta /hacermolotov /tomarbotella /miskin");
				SendClientMessage(playerid, COLOR_YELLOW,"***Com***/du /vergasolina /telefono /maletero /premium /carinfo /cinema /anuncio /economia");
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE,"Puedes comprar tu telefono movil en cualquier 24/7");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ayudacuenta", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if(IsPlayerConnected(playerid))
			{
				SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda *** elige un comando de la lista");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda com. *** /estado /subirnivel /mejora /desconectar /ocultarmovil");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda com. *** /reglas /cambiarpass /cambiarspawn /modospawn /cambiarlucha");
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE,"No estas conectado");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ayudabanco", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if(IsPlayerConnected(playerid))
			{
				SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda *** elige un comando de la lista");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Banco *** /saldo /extraer /ingresar /transferencia /cajero");
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE,"No estas conectado");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ayudachat", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if(IsPlayerConnected(playerid))
			{
				SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda *** elige un comando de la lista");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Chat ***/p [Comunicacion privada via Usuario-Admin o Admin-Usuario] ");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Chat ***/Shh [Susurrar al oido] /ooc [Canal de Dudas publico] /g [Gritar]");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Chat ***/sus [Susurrar a 2 metros] /b [Chat OOC] /f [Radio OOC]");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Chat ***/r [Radio Privada IC] /d [Radio publica OOC] /in [Intentar]");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Chat ***/me [Accion] /do [Suceso] /desc [Poner descripción] /qdesc [Quitar descripción]");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Chat ***/ven [Ventanilla] /dv [Vehiculo] /qooc /qnoticias /qfaccion /qmp [Desactivar/Activar Chats] ");
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE,"No estas conectado");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/ayudaobjetos", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			if(IsPlayerConnected(playerid))
			{
				SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda *** Comando que añaden objetos a tu personaje");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Objetos ***/maskon | /maskoff [Si tienes una máscara comprada, te cubrirá la cara ] ");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Objetos ***/casco | /qcasco [Si tienes comprado un casco, te cubrirá la cara.]");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Objetos ***/cheleco | /qchaleco /defensa /qdefensa /psecreta /qsecreta [Solo policias.]");
				SendClientMessage(playerid, COLOR_YELLOW,"*** Objetos ***/bolsa | bolsano [Si tienes un mínimo de 5000$, te colgaras una bolsa de dinero en la espalda]");
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE,"No estas conectado");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ayudacasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda casa *** elige un comando de la lista");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Casa *** /entrar /salir /puerta /heal /mejoracasa /setalquiler /tv (off/player)");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Casa *** /desrentartodos /setrenta /desrentar /cajafuerte /vendercasa /excasa");
		}
		return 1;
	}
	if(strcmp(cmd, "/ayudalibreta", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda libreta *** elige un comando de la lista");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Agenda *** /vernotas /borrarnota /crearnota /darnota");
		}
		return 1;
	}
	if(strcmp(cmd, "/ayudaalquiler", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda alquiler *** elige un comando de la lista");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Alquiler *** /abandonar /entrar /salir /bloquear /casa");
		}
		return 1;
	}
	if(strcmp(cmd, "/ayudanegocio", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda negocio *** elige un comando de la lista");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /bizinfo /precioentrada /nombreneg /encargado /precioprod");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /entrar /salir /puerta /venderbiz /deposito /extraerneg");
		}
        if(PlayerInfo[playerid][pPbiskey] == 0)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vbate");
		}
        if(PlayerInfo[playerid][pPbiskey] == 1)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vreloj /vcd");
		}
        if(PlayerInfo[playerid][pPbiskey] == 2)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vspray");
		}
        if(PlayerInfo[playerid][pPbiskey] == 3)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vpatines");
		}
        if(PlayerInfo[playerid][pPbiskey] == 4)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vcomida");
		}
        if(PlayerInfo[playerid][pPbiskey] == 5)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /valeman");
		}
        if(PlayerInfo[playerid][pPbiskey] == 6)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vflores");
		}
        if(PlayerInfo[playerid][pPbiskey] == 7)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vmovil");
		}
        if(PlayerInfo[playerid][pPbiskey] == 8)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vcuerda");
		}
        if(PlayerInfo[playerid][pPbiskey] == 9)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vpasaje");
		}
        if(PlayerInfo[playerid][pPbiskey] == 10)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vwhisky");
		}
        if(PlayerInfo[playerid][pPbiskey] == 11)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vpesca");
		}
        if(PlayerInfo[playerid][pPbiskey] == 12)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vrefresco2");
		}
        if(PlayerInfo[playerid][pPbiskey] == 13)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vrefresco3");
		}
        if(PlayerInfo[playerid][pPbiskey] == 14)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vrefresco4");
		}
        if(PlayerInfo[playerid][pPbiskey] == 15)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vrefresco5");
		}
        if(PlayerInfo[playerid][pPbiskey] == 16)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vdado");
		}
        if(PlayerInfo[playerid][pPbiskey] == 16)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vcartas");
		}
        if(PlayerInfo[playerid][pPbiskey] == 17)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vcerveza");
		}
        if(PlayerInfo[playerid][pPbiskey] == 18)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vwhisky2");
		}
        if(PlayerInfo[playerid][pPbiskey] == 19)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vwhisky3");
		}
        if(PlayerInfo[playerid][pPbiskey] == 20)
        {
			SendClientMessage(playerid, COLOR_YELLOW,"*** Negocio *** /vcerveza2");
		}
		return 1;
	}
	if(strcmp(cmd, "/ayudalider", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pLeader] >= 1 && PlayerInfo[playerid][pLeader] != 17 && PlayerInfo[playerid][pLeader] != 18 && PlayerInfo[playerid][pLeader] != 19)
		    {
		        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		        if(PlayerInfo[playerid][pLeader] != 7)
		        {
					SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda lider *** elige un comando de la lista");
					SendClientMessage(playerid, COLOR_YELLOW,"*** Lider *** /invitar /expulsar /ascender");
				}
				if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pLeader] == 16 || PlayerInfo[playerid][pLeader] == 20)
				{
				    SendClientMessage(playerid, COLOR_YELLOW,"*** Lider *** /cerrarhq");
				}
				if(PlayerInfo[playerid][pLeader] == 7)
				{
					SendClientMessage(playerid, COLOR_YELLOW,"*** Lider *** /govinvite /govuninvite /settax /givetax (Give some money to the Cops)");
				}
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				return 1;
			}
            if(PlayerInfo[playerid][pLeader] == 17 || PlayerInfo[playerid][pLeader] == 18 || PlayerInfo[playerid][pLeader] == 19) // by DryilZas
   			{
   			        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda lider Libre *** elige un comando de la lista");
					SendClientMessage(playerid, COLOR_YELLOW,"*** Lider *** /expulsar /ascender");
					SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
					return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No eres un lider!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ayudairc", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	        SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda IRC *** elige un comando de la lista");
	        SendClientMessage(playerid, COLOR_YELLOW,"*** IRC *** /irc entrar [canal] ([pass])  /irc salir");
			SendClientMessage(playerid, COLOR_YELLOW,"*** IRC *** /irc para mas informacion.");
	    }
	    return 1;
	}
	if(strcmp(cmd, "/ayudapesca", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda pesca *** elige un comando de la lista");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Pesca *** /pescar /peces");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Pesca *** /soltarultimo /soltartodos");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Pesca *** /soltarpez");
		}
		return 1;
	}
	if(strcmp(cmd, "/ayudatesting", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda de TESTS *** elige un comando de la lista");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Testing *** /ruedas /modcarga /carga");
		}
		return 1;
	}
	/*if(strcmp(cmd, "/ayudacocina", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda cocina *** elige un comando de la lista");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Cocina *** /cook  /cooked");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Cocina *** /eat ");
		}
		return 1;
	}*/
	if(strcmp(cmd, "/ayudatrabajo", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_YELLOW,"*** Ayuda informativa de tu Trabajo ***");
			if(PlayerInfo[playerid][pJob] == 1) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Detective ::   Tu trabajo consiste en localizar a las personas usando el comando /buscar.");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Detective ::   En ese justo momento, te aparecera una marca en el mapa que para que sea");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Detective :: util, deveras pulsar 'Esc' y marcar en el mapa la posicion del buscado.");
            SendClientMessage(playerid,COLOR_YELLOW2,":: Detective ::   El unico dinero que ganaras aqui es el que te pague la gente por buscar,");
            SendClientMessage(playerid,COLOR_YELLOW2,":: Detective :: pero no desesperes, si lo que buscas es dinero, siempre estan los trabajos");
            SendClientMessage(playerid,COLOR_YELLOW2,":: Detective :: terciarios, no lo abandones a la ligera, puesto que este es un trabajo verda-");
			SendClientMessage(playerid,COLOR_YELLOW2,":: Detective :: deramente util.   ESTE TRABAJO VA POR NIVELES.   '/habilidad'"); }
		    else if(PlayerInfo[playerid][pJob] == 2) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Abogado ::   Tu trabajo consiste en liberar a los presos usando /liberar. ");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Abogado ::   Pero debes pedirle a un policia que ponga /aceptar abogado [Tu ID]. ");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Abogado ::         ESTE TRABAJO VA POR NIVELES.'/habilidad'"); }
		    else if(PlayerInfo[playerid][pJob] == 3) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Prostituta ::   Tu trabajo consiste en ofrecer sexo por dinero, es muy simple, ademas");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Prostituta :: es el trabajo mas antiguo que existe, propon sexo en los coches usando /sexo.");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Prostituta ::       ESTE TRABAJO VA POR NIVELES.   '/habilidad'"); }
		    else if(PlayerInfo[playerid][pJob] == 4) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Camello :: /vendrogas /colmar drogas -- Este trabajo no esta CONFIRMADO"); }
	        else if(PlayerInfo[playerid][pJob] == 5) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Ladron ::   Tu trabajo consiste en robar coches por dinero, usando el comando /robarcoche.");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Ladron ::   Es un trabajo muy util y se paga bastante bien, cada vez que robes un coche,");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Ladron :: tienes que esperar seis minutos, que tambien tentras que esperarlos si fallas al .");
			SendClientMessage(playerid,COLOR_YELLOW2,":: Ladron :: robar o te bajas del coche. No puedes robar los vehiculos de facciones ajenas.");
			SendClientMessage(playerid,COLOR_YELLOW2,":: Ladron ::      ESTE TRABAJO VA POR NIVELES.   '/habilidad'"); }
		    else if(PlayerInfo[playerid][pJob] == 6) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Cocinero :: /showmenu /cookuniform -- Este trabajo no esta CONFIRMADO"); }
		    else if(PlayerInfo[playerid][pJob] == 7) {
		    //nicostudio
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mecanico ::    Tu trabajo consiste en reparar, repostar, repintar y modificar los");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mecanico :: vehiculos de los demas por dinero. A continuacion una lista de cmds por Lvl:");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mecanico :: 1 /reparar /repos /deservicio /remolcar /repintar /nitro2x");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mecanico :: 2 /nitro10x /estropear /antibalas (Blindaje 110)");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mecanico :: 3 /hidraulicos /blindado (Blindaje 150)");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mecanico :: 4 /llantas /forzarveh");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mecanico :: 5 /guardartu /quitartu");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mecanico ::  ESTE TRABAJO VA POR NIVELES.   '/habilidad'"); }
		    else if(PlayerInfo[playerid][pJob] == 8) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Guardaespaldas ::   Tu trabajo consiste en ofrecer proteccion a quien te pague por ello,");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Guardaespaldas :: para ofrecer tus servicios usa el comando /proteger. ¡Y recuerda!");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Guardaespaldas :: si no cumples tu contrato podras ser reportado."); }
		    else if(PlayerInfo[playerid][pJob] == 10) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mozo ::   Tu trabajo consiste en montarte en un montacargas, poner /movermercancia, y");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mozo :: cuando quieras parar poner /nomovermercancia. Pasa por las marcas rojas.");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mozo ::      ESTE TRABAJO VA POR NIVELES.   '/habilidad'"); }
		    else if(PlayerInfo[playerid][pJob] == 9) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Camionero ::    Tu trabajo consiste en cargar el camion con su parte de atras, luego");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Camionero :: escribes /entregarmercancia, envias la carga, y vuelves a empezar."); }
		   /* else if(PlayerInfo[playerid][pJob] == 10) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: JOB :: /vendercar"); }*/
 		   else if(PlayerInfo[playerid][pJob] == 11) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Minero :: Tu trabajo consiste en montarte en un vehiculo de minero, poner /minar");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Minero :: y cuando quieras parar poner /nominar. Pasa por las marcas rojas.");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Minero :: ESTE TRABAJO VA POR NIVELES."); }
		    else if(PlayerInfo[playerid][pJob] == 12) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Boxeador :: /fight /boxstats -- Este trabajo no esta CONFIRMADO"); }
		    else if(PlayerInfo[playerid][pJob] == 13) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Mendigo :: /limosna /hacerdepobre -- Este trabajo no esta CONFIRMADO"); }
		   /* else if(PlayerInfo[playerid][pMember] == 10|| PlayerInfo[playerid][pLeader] == 10) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Taxista-Faccion :: /precio /(r)adio /ruta2 /ruta1 -- Este trabajo no esta CONFIRMADO"); }*/
		    else if(PlayerInfo[playerid][pJob] == 24) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Taxista :: /precio /ruta2 /ruta1"); }
		    else if(PlayerInfo[playerid][pJob] == 14) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Trabajo :: /fare -- Este trabajo no esta CONFIRMADO"); }
		    else if(PlayerInfo[playerid][pJob] == 15) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Periodicos :: /periodicos /bring /deliver -- Este trabajo no esta CONFIRMADO"); }
		    else if(PlayerInfo[playerid][pJob] == 16) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Comercial :: /hacerpedidos -- Este trabajo no esta CONFIRMADO"); }
		    else if(PlayerInfo[playerid][pJob] == 17) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Pizzero :: /deservicio /darpizza -- Este trabajo no esta CONFIRMADO"); }
		    else if(PlayerInfo[playerid][pJob] == 18) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Granjero ::    Tu trabajo consiste en recolectar el grano de l granja");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Granjero ::  usando los comandos /recolectar y /norecolectar"); }
		    else if(PlayerInfo[playerid][pJob] == 19) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Granjero Especial ::   Tu tabajo consiste en recolectar la droga que luego");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Granjero Especial :: se llevara el proveedor, por cada vuelta reciviras dinero.");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Granjero Especial ::   Usa los comandos /comenzardroga para empezar a recolectar");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Granjero Especial :: /parardroga para dejar de trabajar, y /salir.");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Granjero Especial ::   Ten cuidado con la policia, esto es Ilegal."); }
		    else if(PlayerInfo[playerid][pJob] == 20) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Prov. Drogas :: /tomardrogas /negociardrogas -- Este trabajo no esta CONFIRMADO"); }
		    else if(PlayerInfo[playerid][pJob] == 21) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Barrendero ::    Tu trabajo consiste en barrer las calles por un dinerillo, usando");
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Barrendero :: /barrer comienzas a barrer, y usando /nobarrer paras de barrer."); }
		    else if(PlayerInfo[playerid][pJob] == 22) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Prov. Armas :: /smugglemats -- Este trabajo no esta CONFIRMADO"); }
		    else if(PlayerInfo[playerid][pJob] == 23) {
		    SendClientMessage(playerid,COLOR_YELLOW2,":: Vend. Armas :: /creategun /comprarmats  -- Este trabajo no esta CONFIRMADO"); }
		}
		return 1;
	}
	if(strcmp(cmd, "/ahelp", true) == 0 || strcmp(cmd, "/ah", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW,"=== ERES MODERADOR (1) === /ah1");
			}
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    SendClientMessage(playerid, COLOR_YELLOW,"=== ERES AYUDANTE (2) === /ah2");
			}
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    SendClientMessage(playerid, COLOR_YELLOW,"=== ERES CENTINELA (3) === /ah3");
			}
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    SendClientMessage(playerid, COLOR_YELLOW,"=== ERES ADMIN (4) === /ah4");
			}
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
			    SendClientMessage(playerid, COLOR_YELLOW,"=== ERES SUPER-ADMIN (5) === /ah5");
			}
			if (PlayerInfo[playerid][pAdmin] == 2000)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"=== ERES FTP-ADMIN (2000) === /ah2000");
			}
			if (PlayerInfo[playerid][pAdmin] == 2012)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"=== ERES ADMIN-OCULTO (2012)");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ah1", true) == 0 || strcmp(cmd, "/ahmoderador", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW,"=== COMANDOS MODERADOR ===");
			    SendClientMessage(playerid, COLOR_WHITE, "*** /adminon");
				SendClientMessage(playerid, COLOR_WHITE, "*** /volar /check /setint /setvw /mute /kick /skick /masked /descongelar /congelar");
				SendClientMessage(playerid, COLOR_WHITE, "*** /salirfaccion /intmenu /ponerskin /gotop /mirar /mirarme");
				SendClientMessage(playerid, COLOR_WHITE, "*** /ahmoderador");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ah2", true) == 0 || strcmp(cmd, "/ahayudante", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
			    SendClientMessage(playerid, COLOR_YELLOW,"=== COMANDOS AYUDANTE ===");
			    SendClientMessage(playerid, COLOR_WHITE,"*** /lanzar /noooc /setteam /dumbo /rtc(res.coche) /lic /setjob /actualizar /respawnear");
			    SendClientMessage(playerid, COLOR_WHITE,"*** /ahayudante");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ah3", true) == 0 || strcmp(cmd, "/ahcentinela", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    SendClientMessage(playerid, COLOR_YELLOW,"=== COMANDOS CENTINELA ===");
				SendClientMessage(playerid, COLOR_WHITE,"*** /mens /fourdive /prison /unprison /aunlock /repostartodos /edit /vehslap");
				SendClientMessage(playerid, COLOR_WHITE,"*** /mark /gotomark /traer /oldcar /gotocar /getcar /setinformal /reparar /explotasos");
				SendClientMessage(playerid, COLOR_WHITE,"*** /respawnallcars /respawnrentbikes /respawnrentcars /unban /unbanip /fixveh /setvir");
				SendClientMessage(playerid, COLOR_WHITE,"*** /ahcentinela");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ah4", true) == 0 || strcmp(cmd, "/ahadmin", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    SendClientMessage(playerid, COLOR_YELLOW,"=== COMANDOS ADMIN ===");
			    SendClientMessage(playerid, COLOR_WHITE,"*** /mole /logout /logoutpl /logoutall /asellhouse /asellbiz /vendersbiz /setchamp /mk");
			    SendClientMessage(playerid, COLOR_WHITE,"*** /destroycars /vida /setarmor /forceskin /explode /supervehslap ");
				SendClientMessage(playerid, COLOR_WHITE,"*** /ahadmin");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ah5", true) == 0 || strcmp(cmd, "/ahsuperadmin", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
			    SendClientMessage(playerid, COLOR_YELLOW,"=== COMANDOS SUPER-ADMIN ===");
				SendClientMessage(playerid, COLOR_WHITE,"*** /weather /weatherall /bizentrance /sbizentrance");
				SendClientMessage(playerid, COLOR_WHITE,"*** /makeircadmin /hacerlider /haceralcalde /fijarpartido");
				SendClientMessage(playerid, COLOR_WHITE,"*** /adminvendercoche /adminaparcar /adminvendercasa ");
				SendClientMessage(playerid, COLOR_WHITE,"*** /setstat /money(sets money) /restart [Reiniciar Servidor]");
				SendClientMessage(playerid, COLOR_WHITE,"*** /givemoney /givegun /crash /tod /startlotto /ircasa");
				SendClientMessage(playerid, COLOR_WHITE,"*** /ahsuperadmin");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ah2000", true) == 0 || strcmp(cmd, "/ahftp", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] == 2000)
			{
			    SendClientMessage(playerid, COLOR_YELLOW,"=== COMANDOS FTP-ADMIN ===");
			    SendClientMessage(playerid, COLOR_WHITE,"*** /entradacasa /salidacasa /nivelcasa /preciocasa /intcasa");
			    SendClientMessage(playerid, COLOR_WHITE,"*** /vgrabar /pigrabar /stopgrabar");
				SendClientMessage(playerid, COLOR_WHITE,"*** /duplicarcuenta /makeadmin /razon");
				SendClientMessage(playerid, COLOR_WHITE,"*** /gravedad");
				SendClientMessage(playerid, COLOR_WHITE,"*** /ahftp");
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/gagegote", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
				SendClientMessage(playerid, COLOR_YELLOW,"* Descriptores de mapping:");
				SendClientMessage(playerid, COLOR_YELLOW,"* Primario____/zs6r6e5o1676178614xelp879zaxe57koxer");
				SendClientMessage(playerid, COLOR_YELLOW,"* Secundario__/j19frtui4584zdjy849j5789k8949fjdf845");
				SendClientMessage(playerid, COLOR_YELLOW,"* Despues usar /mapear");
			}
		}
		return 1;
	}*/
//----------------------------- Gravity -------------------------------------------
	if(strcmp(cmd,"/gravedad",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] != 2000)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No eres administrador !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
	            SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /gravedad [0.008]");
	            return 1;
			}
			new Float:gravity;
			floatstr(tmp);
			SetGravity(gravity);
			format(string, sizeof(string), " *  %f  *",gravity);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		return 1;
	}
//------------------------------ Mission Making -----------------------------------
    if(strcmp(cmd,"/mk",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 4)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not an Admin !");
	            return 1;
	        }
	        new x_mk[256];
			x_mk = strtok(cmdtext, idx);
			if(!strlen(x_mk)) {
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /mk [name]");
				SendClientMessage(playerid, COLOR_GREY, "Available names: (/mk text [number] [text]) (/mk game [number] [text]) (/mk cp [number])");
				SendClientMessage(playerid, COLOR_GREY, "Available names: (/mk title [text]) (/mk reward [PRECIO]) (/mk usecp)");
				return 1;
			}
	        if(strcmp(x_mk,"text",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /mk text [number] [text]");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 18) { SendClientMessage(playerid, COLOR_GREY, "   Number can't be below 1 or above 18 !"); return 1; }
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/mk text [number] [text]");
					return 1;
				}
				switch(number)
				{
				    case 1:
				    {
						strmid(MissionInfo[mText1], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 1st Text Line of the Mission.");
				    }
				    case 2:
				    {
				        strmid(MissionInfo[mText2], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 2nd Text Line of the Mission.");
				    }
				    case 3:
				    {
				        strmid(MissionInfo[mText3], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 3rd Text Line of the Mission.");
				    }
				    case 4:
				    {
				        strmid(MissionInfo[mText4], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 4th Text Line of the Mission.");
				    }
				    case 5:
				    {
				        strmid(MissionInfo[mText5], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 5th Text Line of the Mission.");
				    }
				    case 6:
				    {
				        strmid(MissionInfo[mText6], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 6th Text Line of the Mission.");
				    }
				    case 7:
				    {
				        strmid(MissionInfo[mText7], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 7th Text Line of the Mission.");
				    }
				    case 8:
				    {
				        strmid(MissionInfo[mText8], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 8th Text Line of the Mission.");
				    }
				    case 9:
				    {
				        strmid(MissionInfo[mText9], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 9th Text Line of the Mission.");
				    }
				    case 10:
				    {
				        strmid(MissionInfo[mText10], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 10th Text Line of the Mission.");
				    }
				    case 11:
				    {
				        strmid(MissionInfo[mText11], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 11th Text Line of the Mission.");
				    }
				    case 12:
				    {
				        strmid(MissionInfo[mText12], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 12th Text Line of the Mission.");
				    }
				    case 13:
				    {
				        strmid(MissionInfo[mText13], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 13th Text Line of the Mission.");
				    }
				    case 14:
				    {
				        strmid(MissionInfo[mText14], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 14th Text Line of the Mission.");
				    }
				    case 15:
				    {
				        strmid(MissionInfo[mText15], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 15th Text Line of the Mission.");
				    }
				    case 16:
				    {
				        strmid(MissionInfo[mText16], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 16th Text Line of the Mission.");
				    }
				    case 17:
				    {
				        strmid(MissionInfo[mText17], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 17th Text Line of the Mission.");
				    }
				    case 18:
				    {
				        strmid(MissionInfo[mText18], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 18th Text Line of the Mission.");
				    }
				}
			}
			else if(strcmp(x_mk,"game",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /mk game [number] [text]");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Number can't be below 1 or above 6 !"); return 1; }
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/mk game [number] [text]");
					return 1;
				}
				switch(number)
				{
				    case 1:
				    {
				        strmid(MissionInfo[mGText1], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 1st GameText Line of the Mission.");
				    }
				    case 2:
				    {
				        strmid(MissionInfo[mGText2], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 2nd GameText Line of the Mission.");
				    }
				    case 3:
				    {
				        strmid(MissionInfo[mGText3], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 3rd GameText Line of the Mission.");
				    }
				    case 4:
				    {
				        strmid(MissionInfo[mGText4], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 4th GameText Line of the Mission.");
				    }
				    case 5:
				    {
				        strmid(MissionInfo[mGText5], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 5th GameText Line of the Mission.");
				    }
				    case 6:
				    {
				        strmid(MissionInfo[mGText6], result, 0, strlen(result), 255);
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 6th GameText Line of the Mission.");
				    }
				}
			}
			else if(strcmp(x_mk,"cp",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /mk cp [number]");
					return 1;
				}
			    new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Number can't be below 1 or above 6 !"); return 1; }
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
                switch(number)
				{
				    case 1:
				    {
				        MissionInfo[mCP1][0] = X; MissionInfo[mCP1][1] = Y; MissionInfo[mCP1][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 1st Checkpoint of the Mission.");
				    }
				    case 2:
				    {
				        MissionInfo[mCP2][0] = X; MissionInfo[mCP2][1] = Y; MissionInfo[mCP2][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 2nd Checkpoint Line of the Mission.");
				    }
				    case 3:
				    {
				        MissionInfo[mCP3][0] = X; MissionInfo[mCP3][1] = Y; MissionInfo[mCP3][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 3rd Checkpoint Line of the Mission.");
				    }
				    case 4:
				    {
				        MissionInfo[mCP4][0] = X; MissionInfo[mCP4][1] = Y; MissionInfo[mCP4][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 4th Checkpoint Line of the Mission.");
				    }
				    case 5:
				    {
				        MissionInfo[mCP5][0] = X; MissionInfo[mCP5][1] = Y; MissionInfo[mCP5][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 5th Checkpoint Line of the Mission.");
				    }
				    case 6:
				    {
				        MissionInfo[mCP6][0] = X; MissionInfo[mCP6][1] = Y; MissionInfo[mCP6][2] = Z;
				        SendClientMessage(playerid, COLOR_WHITE, "You've made the 6th Checkpoint Line of the Mission.");
				    }
				}
			}
			else if(strcmp(x_mk,"usecp",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /mk usecp [0/1]");
					return 1;
				}
			    new toggle = strval(tmp);
				if(toggle == 0 || toggle == 1) { }
				else { SendClientMessage(playerid, COLOR_GREY, "   CheckpointUse number must be 0 (OFF) or 1 (ON) !"); return 1; }
				MissionInfo[mToggle] = toggle;
				if(toggle == 0) { SendClientMessage(playerid, COLOR_WHITE, "You've set the Use of Checkpoints to 0 (OFF)."); }
				else if(toggle == 1) { SendClientMessage(playerid, COLOR_WHITE, "You've set the Use of Checkpoints to 1 (ON)."); }
			}
			else if(strcmp(x_mk,"title",true) == 0)
			{
			    new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/mk title [text]");
					return 1;
				}
				strmid(MissionInfo[mTitle], result, 0, strlen(result), 255);
		        SendClientMessage(playerid, COLOR_WHITE, "You've made the Title of the Mission.");
			}
			else if(strcmp(x_mk,"reward",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(x_mk))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /mk reward [PRECIO]");
					return 1;
				}
			    new price = strval(tmp);
				if(price < 1 || price > 50000) { SendClientMessage(playerid, COLOR_GREY, "   Reward Price can't be below 1 or above 50000 !"); return 1; }
				MissionInfo[mReward] = price;
				SendClientMessage(playerid, COLOR_WHITE, "You've made the Reward Price for the Mission.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Invalid Mission Making name !");
				return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/savemission", true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /savemission [missionname]");
					return 1;
				}
				SaveMission(playerid,tmp);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/loadmission", true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /loadmission [missionname]");
					return 1;
				}
				LoadMission(playerid,tmp);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/stopani",true)==0 || strcmp(cmd,"/stopanim",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        	ClearAnimations(playerid);
	        	if(UsingSmokeAnim[playerid] == 1)
	            {
	                UsingSmokeAnim[playerid] = 0;
	            }
	    }
	    return 1;
	}
	if(strcmp(cmd,"/habilidad",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Habilidades __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAR: /habilidad [numero]");
		  		SendClientMessage(playerid, COLOR_GREY, "| 1: Detective                  6: Reportero");
		  		SendClientMessage(playerid, COLOR_GREY, "| 2: Abogado                    7: Mecanico");
		  		SendClientMessage(playerid, COLOR_GREY, "| 3: Prostituta                 8: Boxeador");
		  		SendClientMessage(playerid, COLOR_GREY, "| 4: Vendedor de Drogas         9: Pescador");
		  		SendClientMessage(playerid, COLOR_GREY, "| 5: Ladron de Vehiculos        10: Mozo Almacen");
		  		SendClientMessage(playerid, COLOR_GREY, "| 11: Minero");
				SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"1",true) == 0)//Detective
			{
			    new level = PlayerInfo[playerid][pDetSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tu nivel como Detective es 1."); format(string, sizeof(string), "Necesitas buscar %d mas para subir de nivel.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tu nivel como Detective es 2."); format(string, sizeof(string), "Necesitas buscar %d mas para subir de nivel.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tu nivel como Detective es 3."); format(string, sizeof(string), "Necesitas buscar %d mas para subir de nivel.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tu nivel como Detective es 4."); format(string, sizeof(string), "Necesitas buscar %d mas para subir de nivel.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Tu nivel como Detective es 5."); }
			}
			else if(strcmp(x_nr,"2",true) == 0)//Lawyer - Abogado
			{
			    new level = PlayerInfo[playerid][pLawSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Abogado es de Nivel = 1."); format(string, sizeof(string), "Necesitas liberar a %d personas mas para subir de Nivel.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Abogado es de Nivel = 2."); format(string, sizeof(string), "Necesitas liberar a %d personas mas para subir de Nivel.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Abogado es de Nivel = 3."); format(string, sizeof(string), "Necesitas liberar a %d personas mas para subir de Nivel.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Abogado es de Nivel = 4."); format(string, sizeof(string), "Necesitas liberar a %d personas mas para subir de Nivel.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Abogado es de Nivel = 5."); }
			}
			else if(strcmp(x_nr,"3",true) == 0)//Whore = Prostitua
			{
			    new level = PlayerInfo[playerid][pSexSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Prostituta es de Nivel = 1."); format(string, sizeof(string), "Necesitas tener sexo con %d personas mas para subir de Nivel.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Prostituta es de Nivel = 2."); format(string, sizeof(string), "Necesitas tener sexo con %d personas mas para subir de Nivel.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Prostituta es de Nivel = 3."); format(string, sizeof(string), "Necesitas tener sexo con %d personas mas para subir de Nivel.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Prostituta es de Nivel = 4."); format(string, sizeof(string), "Necesitas tener sexo con %d personas mas para subir de Nivel.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Prostituta es de Nivel = 5."); }
			}
			else if(strcmp(x_nr,"4",true) == 0)//Drugs Dealer = Vendedor de Drogas
			{
			    new level = PlayerInfo[playerid][pDrugsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Vendedor de Drogas es de Nivel = 1."); format(string, sizeof(string), "Necesitas vender drogas a %d personas mas para subir de Nivel.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Vendedor de Drogas es de Nivel = 2."); format(string, sizeof(string), "Necesitas vender drogas a %d personas mas para subir de Nivel.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Vendedor de Drogas es de Nivel = 3."); format(string, sizeof(string), "Necesitas vender drogas a %d personas mas para subir de Nivel.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Vendedor de Drogas es de Nivel = 4."); format(string, sizeof(string), "Necesitas vender drogas a %d personas mas para subir de Nivel.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Vendedor de Drogas es de Nivel = 5."); }
			}
			else if(strcmp(x_nr,"5",true) == 0)//Car Jacker = ladron de coches
		    {
			    new level = PlayerInfo[playerid][pJackSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Ladron de Vehiculos es de Nivel = 1."); format(string, sizeof(string), "Necesitas robar %d coches mas para subir de Nivel.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Ladron de Vehiculos es de Nivel = 2."); format(string, sizeof(string), "Necesitas robar %d coches mas para subir de Nivel.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Ladron de Vehiculos es de Nivel = 3."); format(string, sizeof(string), "Necesitas robar %d coches mas para subir de Nivel.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Ladron de Vehiculos es de Nivel = 4."); format(string, sizeof(string), "Necesitas robar %d coches mas para subir de Nivel.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Ladron de Vehiculos es de Nivel = 5."); }
			}
			else if(strcmp(x_nr,"6",true) == 0)//News Reporter / Reportero
			{
			    new level = PlayerInfo[playerid][pNewsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Reportero de Noticias es de Nivel = 1."); format(string, sizeof(string), "Necesitas dar las Noticias %d veces mas para subir de Nivel.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Reportero de Noticias es de Nivel = 2."); format(string, sizeof(string), "Necesitas dar las Noticias %d veces mas para subir de Nivel.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Reportero de Noticias es de Nivel = 3."); format(string, sizeof(string), "Necesitas dar las Noticias %d veces mas para subir de Nivel.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Reportero de Noticias es de Nivel = 4."); format(string, sizeof(string), "Necesitas dar las Noticias %d veces mas para subir de Nivel.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Reportero de Noticias es de Nivel = 5."); }
			}
			else if(strcmp(x_nr,"7",true) == 0)//Mecanico
			{
			    new level = PlayerInfo[playerid][pMechSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mecanico es de Nivel 1."); format(string, sizeof(string), "Necesitas Arreglar/Repostar %d Vehiculos mas para Subir de Nivel.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mecanico es de Nivel 2."); format(string, sizeof(string), "Necesitas Arreglar/Repostar %d Vehiculos mas para Subir de Nivel.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mecanico es de Nivel 3."); format(string, sizeof(string), "Necesitas Arreglar/Repostar %d Vehiculos mas para Subir de Nivel.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mecanico es de Nivel 4."); format(string, sizeof(string), "Necesitas Arreglar/Repostar %d Vehiculos mas para Subir de Nivel.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mecanico es de Nivel 5."); }
			}
			else if(strcmp(x_nr,"8",true) == 0)//Boxeador
			{
			    new level = PlayerInfo[playerid][pBoxSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Boxeador es de Nivel = 1."); format(string, sizeof(string), "Necesitas ganar %d combates mas para subir de Nivel.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Boxeador es de Nivel = 2."); format(string, sizeof(string), "Necesitas ganar %d combates mas para subir de Nivel.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Boxeador es de Nivel = 3."); format(string, sizeof(string), "Necesitas ganar %d combates mas para subir de Nivel.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Boxeador es de Nivel = 4."); format(string, sizeof(string), "Necesitas ganar %d combates mas para subir de Nivel.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Boxeador es de Nivel = 5."); }
			}
			else if(strcmp(x_nr,"9",true) == 0)//Pescador
			{
			    new level = PlayerInfo[playerid][pFishSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Pescador es de Nivel = 1."); format(string, sizeof(string), "Necesitas pescar %d peces mas para subir de Nivel.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Pescador es de Nivel = 2."); format(string, sizeof(string), "Necesitas pescar %d peces mas para subir de Nivel.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Pescador es de Nivel = 3."); format(string, sizeof(string), "Necesitas pescar %d peces mas para subir de Nivel.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Pescador es de Nivel = 4."); format(string, sizeof(string), "Necesitas pescar %d peces mas para subir de Nivel.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Pescador es de Nivel = 5."); }
			}
			else if(strcmp(x_nr,"10",true) == 0)//Mozo de Almacen
			{
			    new level = PlayerInfo[playerid][pCarSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mozo de Almacen es de Nivel = 1."); format(string, sizeof(string), "Necesitas Mover Mercancia %d veces mas para subir de Nivel.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mozo de Almacen es de Nivel = 2."); format(string, sizeof(string), "Necesitas Mover Mercancia %d veces mas para subir de Nivel.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mozo de Almacen es de Nivel = 3."); format(string, sizeof(string), "Necesitas Mover Mercancia %d veces mas para subir de Nivel.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mozo de Almacen es de Nivel = 4."); format(string, sizeof(string), "Necesitas Mover Mercancia %d veces mas para subir de Nivel.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mozo de Almacen es de Nivel = 5."); }
			}
			else if(strcmp(x_nr,"11",true) == 0)//Minero
			{
			    new level = PlayerInfo[playerid][pCarSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Minero es de Nivel = 1."); format(string, sizeof(string), "Necesitas Mover Mercancia %d veces mas para subir de Nivel.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Minero es de Nivel = 2."); format(string, sizeof(string), "Necesitas Mover Mercancia %d veces mas para subir de Nivel.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Minero es de Nivel = 3."); format(string, sizeof(string), "Necesitas Mover Mercancia %d veces mas para subir de Nivel.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Minero es de Nivel = 4."); format(string, sizeof(string), "Necesitas Mover Mercancia %d veces mas para subir de Nivel.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Minero es de Nivel = 5."); }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Numero de Habilidad invalido!");
			    return 1;
			}
	    }
	    return 1;
	}
	/*if(strcmp(cmd,"/agreementbroken",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_YELLOW, "Agreement Violation Security has been activated.");
	        Security = 1;
	        SaveStuff();
	        GameModeExit();
	    }
	    return 1;
	}*/
	if(strcmp(cmd, "/cks", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 3)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No eres administrador !");
	            return 1;
	        }
	        new ck;
	        new number = 0;
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    for(new i = 0; i < sizeof(CKInfo); i++)
			    {
					number ++;
					if(CKInfo[i][cUsed] != 0)
					{
				        format(string, sizeof(string), "%d| %s wants to Character Kill %s.",number,CKInfo[i][cSendername],CKInfo[i][cGiveplayer]);
				        SendClientMessage(playerid, COLOR_WHITE, string);
			        }
			    }
				return 1;
			}
		    if(strcmp(x_nr,"accept",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /cks accept [cknumber]");
					return 1;
				}
				ck = strval(tmp);
				if(ck < 1 || ck > 10) { SendClientMessage(playerid, COLOR_GREY, "   CK Number can't be below 1 or above 10!"); return 1; }
				ck -= 1;
				new found1 = 255;
				new found2 = 255;
				for (new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
				    {
				        //if(found1 != 255 && found2 != 255)
				        //{
							new wstring[MAX_PLAYER_NAME];
							GetPlayerName(i, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "%s", giveplayer);
							strmid(wstring, string, 0, strlen(string), 255);
							if(strcmp(CKInfo[ck][cSendername] ,wstring, true ) == 0 )
							{
							    found1 = i;
							}
							else if(strcmp(CKInfo[ck][cGiveplayer] ,wstring, true ) == 0 )
							{
							    found2 = i;
							}
						//}
					}
				}
				if(found1 != 255 && found2 != 255)
    			{
    			    GetPlayerName(found2, giveplayer, sizeof(giveplayer));
    			    format(string, sizeof(string), "* An Admin has accepted your Character Kill, you can now perform your kill on %s.", giveplayer);
    			    SendClientMessage(found1, COLOR_LIGHTBLUE, string);
    			    OnCK[found1] = found2;
    			    GettingCK[found2] = found1;
    			    return 1;
    			}
    			else
    			{
    			    SendClientMessage(playerid, COLOR_YELLOW2, "Sorry, the Killer or Dieer ain't Online.");
    			    return 1;
    			}
			}
			else if(strcmp(x_nr,"delete",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /cks delete [cknumber]");
					return 1;
				}
				ck = strval(tmp);
				if(ck < 1 || ck > 10) { SendClientMessage(playerid, COLOR_GREY, "   CK Number can't be below 1 or above 10 !"); return 1; }
				ck -= 1;
				ClearCK(ck);
				ck += 1;
				format(string, sizeof(string), "* You've cleared Character Kill nr: %d", ck);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid CK command name !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/ck", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLevel] < 5)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You must be Level 5 in order to request a Character Kill !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /ck [ID o Nombre]");
				return 1;
			}
	        giveplayerid = ReturnUser(tmp);
	        if(IsPlayerConnected(giveplayerid))
	        {
	            if(giveplayerid != INVALID_PLAYER_ID)
	            {
	                if(PlayerInfo[giveplayerid][pAdmin] >= 1)
	                {
	                    SendClientMessage(playerid, COLOR_GREY, "   Can't perform Character Kills on Admins !");
	                    return 1;
	                }
	                else if(PlayerInfo[giveplayerid][pLevel] < 5)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   The Player you want to Character Kill must be Level 5 !");
			            return 1;
			        }
					ABroadCast(COLOR_YELLOW, "* A New Character Kill request has come in, use /cks.");
					new found = 0;
					for(new i = 0; i < sizeof(CKInfo); i++)
			    	{
			    	    if(found != 1)
			    	    {
							if(CKInfo[i][cUsed] != 1)
							{
							    found = 1;
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							    format(string, sizeof(string), "%s", sendername);
							    strmid(CKInfo[i][cSendername], string, 0, strlen(string), 255);
							    format(string, sizeof(string), "%s", giveplayer);
								strmid(CKInfo[i][cGiveplayer], string, 0, strlen(string), 255);
								CKInfo[i][cUsed] = 1;
								SaveCK();
							}
						}
			    	}
			    	if(found != 1)
			    	{
			    	    SendClientMessage(playerid, COLOR_YELLOW2, "Sorry, all the Character Kill Slots are used, try again later.");
			    	}
			    	else
			    	{
			    	    SendClientMessage(playerid, COLOR_YELLOW2, "Your Character Kill Request has been added to the list, you'll hear from an Admin soon.");
			    	}
			    	return 1;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
	            return 1;
	        }
	    }
	    return 1;
	}
/*	if(strcmp(cmd, "/givelicense", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            if(PlayerInfo[playerid][pRank] < 1)
	            {
	                //SendClientMessage(playerid, COLOR_GREY, "   Only Rank 2 or higher can give away a License !");
	                return 1;
	            }
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /givelicense [name] [ID o Nombre] [PRECIO]");
				    SendClientMessage(playerid, COLOR_WHITE, "Available names: Driving, Flying, Sailing, Fishing.");
					return 1;
				}
			    if(strcmp(x_nr,"driving",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /givelicense driverslicense [ID o Nombre] [PRECIO]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /givelicense driving [playerid/ParOfName] [PRECIO]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 50 || price > 500) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 50, or above 500!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* You've given a Drivers License to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Instructor %s has given you a Drivers License.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 1;
					        format(string, sizeof(string), "* You offerd %s to buy drivers license for $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* School instructor %s wants to sell you drivers license for $%d, (type /accept license) to buy.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 1;
					        return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"flying",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /givelicense flying [ID o Nombre] [PRECIO]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /givelicense flying [playerid/ParOfName] [PRECIO]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 500 || price > 25000) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 500, or above 25000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* You've given a Flying License to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Instructor %s has given you a Flying License.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 1;
					        format(string, sizeof(string), "* You offerd %s to buy flying license for $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* School instructor %s wants to sell you flying license for $%d, (type /accept license) to buy.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 2;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"sailing",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /givelicense sailinglicense [ID o Nombre] [PRECIO]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /givelicense sailing [playerid/ParOfName] [PRECIO]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 100 || price > 10000) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 100, or above 10000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* You've given a Sailing License to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Instructor %s has given you a Sailing License.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 1;
					        format(string, sizeof(string), "* You offerd %s to buy sailing license for $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* School instructor %s wants to sell you sailing license for $%d, (type /accept license) to buy.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 3;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"fishing",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /givelicense fishing [ID o Nombre] [price]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /givelicense fishinglicense [playerid/ParOfName] [price]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 100 || price > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 100, or above 1000!"); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* You've given a Fishing License to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Instructor %s has given you a Fishing License.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFishLic] = 1;
					        format(string, sizeof(string), "* You offerd %s to buy fishing license for $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* School instructor %s wants to sell you fishing license for $%d, (type /accept license) to buy.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 4;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a School Instructor !");
	            return 1;
	        }
	    }
	    return 1;
    }*/
	if(strcmp(cmd, "/entregarlicencia", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	        {
	            if(PlayerInfo[playerid][pRank] < 3)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Tiene que ser mas de nivel 3!");
	                return 1;
	            }
	                new x_nr[256];
				    x_nr = strtok(cmdtext, idx);
				    if(!strlen(x_nr)) {
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /entregarlicencia [nombre] [Id del jugador]");
				    SendClientMessage(playerid, COLOR_WHITE, "Nombres disponibles: Armas.");
					return 1;
				}
			    if(strcmp(x_nr,"Armas",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /givelicense weapon [ID o Nombre] [price]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /entregarlicencia [nombre] [Id del jugador]");
								return 1;
							}
							new price;
							price = strval(tmp);
							if(price < 1 || price > 100) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then $1, or above $100."); return 1; }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            format(string, sizeof(string), "* You've given a Weapon License to %s.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* El Oficial %s te ha dado licencia de Caza.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic2] = 1;
					        format(string, sizeof(string), "* Has ofrecido a %s una licencia de caza por $%d .", giveplayer, price);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Oficial %s te ofrece una licencia de armas por $%d, (escribe /aceptar license) para comprarla.", sendername, price);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							LicenseOffer[giveplayerid] = playerid;
							LicensePrice[giveplayerid] = price;
							LicenseType[giveplayerid] = 5;
					        return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado !");
					    return 1;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas en la faccion correcta !");
	            return 1;
	        }
	    }
	    return 1;
	}
/*	if(strcmp(cmd, "/startlesson", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /startlesson [ID o Nombre]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* You've started %s's Lesson.",giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "* Instructor %s has started your Lesson.",sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        TakingLesson[giveplayerid] = 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a School Instructor !");
	            return 1;
	        }
	    }
	    return 1;
	}*/
/*	if(strcmp(cmd, "/stoplesson", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAnInstructor(playerid))
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /stoplesson [ID o Nombre]");
				    return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(TakingLesson[giveplayerid] != 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   That player is not taking a Lesson !");
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* You've stopped %s's Lesson.",giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "* Instructor %s has stopped your Lesson.",sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        TakingLesson[giveplayerid] = 0;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a School Instructor !");
	            return 1;
	        }
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd, "/families", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    new number = 0;
		        for(new i = 0; i < sizeof(FamilyInfo); i++)
		        {
		            number ++;
		            format(string, sizeof(string), "Family %d| Name: %s | Leader: %s | Members: %d.",number,FamilyInfo[i][FamilyName],FamilyInfo[i][FamilyLeader],FamilyInfo[i][FamilyMembers]);
		            SendClientMessage(playerid, COLOR_WHITE, string);
		        }
		        return 1;
	        }
	        new family = strval(tmp);
	        if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
			family -= 1;
			if(FamilyInfo[family][FamilyTaken] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr hasn't been Taken yet !");
			    return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(PlayerInfo[i][pFMember] == family)
			        {
			            GetPlayerName(i, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "* Family %d: %s | Rank: %d.",family,giveplayer,PlayerInfo[i][pRank]);
			            SendClientMessage(playerid, COLOR_GREY, string);
			        }
			    }
			}
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd, "/adjust", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFMember] == 255)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not in a Family !");
	            return 1;
	        }
	        new family = PlayerInfo[playerid][pFMember];
	        new wstring[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s", sendername);
			strmid(wstring, string, 0, strlen(string), 255);
	        if(strcmp(FamilyInfo[family][FamilyLeader],wstring, true ) == 0 )
			{
			    new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /adjust [name]");
					SendClientMessage(playerid, COLOR_WHITE, "Available Names: Name, MOTD, Color, Spawn, Invite, Uninvite, Rank");
					return 1;
				}
			    if(strcmp(x_nr,"name",true) == 0)
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /adjust Name [Family Name]");
						return 1;
					}
					strmid(FamilyInfo[family][FamilyName], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's Name.");
				}
				else if(strcmp(x_nr,"motd",true) == 0)
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /adjust MOTD [Family MOTD Text]");
						return 1;
					}
					strmid(FamilyInfo[family][FamilyMOTD], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's MOTD.");
				}
				else if(strcmp(x_nr,"color",true) == 0)
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /adjust color [Family Color Sample: 0xFFFFFFAA]");
						return 1;
					}
					if(offset < 10)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Wrong Color number, take a look at the Sample ! (0xFFFFFFAA)");
					    return 1;
					}
					strmid(FamilyInfo[family][FamilyMOTD], result, 0, strlen(result), 255);
					SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's Color.");
				}
				else if(strcmp(x_nr,"spawn",true) == 0)
				{
				    GetPlayerPos(playerid, FamilyInfo[family][FamilySpawn][0],FamilyInfo[family][FamilySpawn][1],FamilyInfo[family][FamilySpawn][2]);
				    GetPlayerFacingAngle(playerid, FamilyInfo[family][FamilySpawn][3]);
				    FamilyInfo[family][FamilyInterior] = GetPlayerInterior(playerid);
				    SaveFamilies();
				    SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your Family's Spawnplace.");
				}
				else if(strcmp(x_nr,"invite",true) == 0)
				{
				    if(FamilyInfo[family][FamilyMembers] >= 10)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Your Family has reached the Maximum of 10 Family Members, can't invite more !");
				        return 1;
				    }
					tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /adjust invite [ID o Nombre]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != 255)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   That player is already in a Family !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), "* You've invited %s to join '%s'.",giveplayer, FamilyInfo[family][FamilyName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* %s has invited you to join '%s', you are now a Member of it.",sendername, FamilyInfo[family][FamilyName]);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFMember] = family;
					        PlayerInfo[giveplayerid][pRank] = 1;
					        FamilyInfo[family][FamilyMembers] ++;
					        SaveFamilies();
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"uninvite",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /adjust uninvite [ID o Nombre]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != family)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   That player is not in your Family !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), "* You've kicked %s out of your Family.",giveplayer);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Family Leader %s has kicked your out of the Family.",sendername);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFMember] = 255;
					        PlayerInfo[giveplayerid][pRank] = 0;
					        FamilyInfo[family][FamilyMembers] --;
					        SaveFamilies();
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"rank",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /adjust rank [RankNr] [ID o Nombre]");
					    return 1;
					}
					new rank = strval(tmp);
					if(rank < 1 || rank > 6) { SendClientMessage(playerid, COLOR_GREY, "   RankNr can't be below 1 or above 6 !"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /adjust rank [RankNr] [ID o Nombre]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayerInfo[giveplayerid][pFMember] != family)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   That player is not in your Family !");
					            return 1;
					        }
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					        format(string, sizeof(string), "* You've given %s Rank %d.",giveplayer,rank);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Family Leader %s has given you Rank %d.",sendername,rank);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pRank] = rank;
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Invalid Adjust name !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of your Family !");
			    return 1;
			}
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd, "/giveturf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 14 || PlayerInfo[playerid][pLeader] == 15)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /giveturf [FamilyNr]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
				if(PlayerInfo[playerid][pLeader] == 5 && family > 5) { SendClientMessage(playerid, COLOR_GREY, "   Surenos Leader can only take FamilyNr 1 till 5 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 6 && family < 6) { SendClientMessage(playerid, COLOR_GREY, "   Luciano family Leader can only take FamilyNr 6 till 10 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 14 && family < 14) { SendClientMessage(playerid, COLOR_GREY, "   Nortenos Leader can only take FamilyNr 11 till 15 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 15 && family < 15) { SendClientMessage(playerid, COLOR_GREY, "   Chornaya Bratva can only take FamilyNr 11 till 15 !"); return 1; }
				family -= 1;
				if(FamilyInfo[family][FamilyTaken] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr hasn't been Taken yet !");
				    return 1;
				}
				new Found = 0;
				for(new j=0; j<sizeof(TurfInfo);j++)
				{
					if(IsPlayerInTurf(playerid,j))
					{
					    Found = 1;
         				format(string, sizeof(string), "%s", FamilyInfo[family][FamilyName]);
						strmid(TurfInfo[j][zOwner], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s", FamilyInfo[family][FamilyColor]);
						strmid(TurfInfo[j][zColor], string, 0, strlen(string), 255);
					}
				}
				if(Found)
				{
				    SaveTurfs();
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Turf adjusted.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not in a Turf !");
				}
			}
			else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of one of the Organisations !");
	            return 1;
	        }
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/allowcreation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 14)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /allowcreation [FamilyNr] [ID o Nombre]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
				if(PlayerInfo[playerid][pLeader] == 5 && family > 5) { SendClientMessage(playerid, COLOR_GREY, "   Surenos Leader can only take FamilyNr 1 till 5 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 6 && family < 6) { SendClientMessage(playerid, COLOR_GREY, "   Luciano family Leader can only take FamilyNr 6 till 10 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 14 && family < 14) { SendClientMessage(playerid, COLOR_GREY, "   Nortenos Leader can only take FamilyNr 11 till 15 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 15 && family < 15) { SendClientMessage(playerid, COLOR_GREY, "   Chornaya Bratva Leader can only take FamilyNr 15 till 20 !"); return 1; }
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /allowcreation [FamilyNr] [ID o Nombre]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        family -= 1;
				        if(FamilyInfo[family][FamilyTaken] == 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr is already taken !" );
				            return 1;
				        }
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* You've made %s the Leader of FamilyNr %d.",giveplayer,family);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        if(PlayerInfo[playerid][pLeader] == 5)
				        {
				            format(string, sizeof(string), "* Surenos Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        else if(PlayerInfo[playerid][pLeader] == 6)
				        {
				            format(string, sizeof(string), "* Luciano family Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        else if(PlayerInfo[playerid][pLeader] == 14)
				        {
				            format(string, sizeof(string), "* Nortenos Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        else if(PlayerInfo[playerid][pLeader] == 15)
				        {
				            format(string, sizeof(string), "* Chornaya Bratva Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        else if(PlayerInfo[playerid][pLeader] == 16)
				        {
				            format(string, sizeof(string), "* Jefferson Saints Leader %s has made you a Family Leader of FamilyNr %d.",sendername,family);
				        	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        }
				        format(string, sizeof(string), "%s",giveplayer);
				        strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 255);
				        FamilyInfo[family][FamilyMembers] ++;
				        FamilyInfo[family][FamilyTaken] = 1;
				        PlayerInfo[giveplayerid][pFMember] = family;
				        SaveFamilies();
				    }
				}
				else
				{
                    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
                    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of one of the Organisations !");
	            return 1;
	        }
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd, "/deletecreation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pLeader] == 14)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /deletecreation [FamilyNr]");
					return 1;
				}
				new family = strval(tmp);
				if(family < 1 || family > 10) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 10 !"); return 1; }
				if(PlayerInfo[playerid][pLeader] == 5 && family > 5) { SendClientMessage(playerid, COLOR_GREY, "   Surenos Leader can only take FamilyNr 1 till 5 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 6 && family < 6) { SendClientMessage(playerid, COLOR_GREY, "   Luciano family Leader can only take FamilyNr 6 till 10 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 14 && family < 14) { SendClientMessage(playerid, COLOR_GREY, "   Nortenos Leader can only take FamilyNr 6 till 10 !"); return 1; }
				else if(PlayerInfo[playerid][pLeader] == 15 && family < 15) { SendClientMessage(playerid, COLOR_GREY, "   Chornaya Bratva Leader can only take FamilyNr 6 till 10 !"); return 1; }
				family -= 1;
				if(FamilyInfo[family][FamilyTaken] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr isn't taken !");
				    return 1;
				}
				ClearFamily(family);
				SaveFamilies();
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not the Leader of one of the Organisations !");
	            return 1;
	        }
	    }
	    return 1;
	}*/
	if(strcmp(cmd, "/ram", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(gTeam[playerid] == 2 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3)
            {
                for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
					{
					    SetPlayerInterior(playerid,HouseInfo[i][hInt]);
					    SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						GameTextForPlayer(playerid, "~r~Rompes la Puerta", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						HouseEntered[playerid] = i;
					}
				}
				if (PlayerToPoint(3, playerid,1298.7075,-798.5981,84.1406))
				{
				    SetPlayerInterior(playerid,5);
					PlayerInfo[playerid][pInt] = 5;
					GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
					SetPlayerPos(playerid, 1254.3436,-789.3809,1084.0078);
				}
				if (PlayerToPoint(3, playerid,2380.5647,-1785.7302,13.5469))
				{
				    SetPlayerPos(playerid, 318.4700,1117.5127,1083.8828);
					GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
					SetPlayerInterior(playerid,5);
					SetPlayerFacingAngle(playerid, 0);
					PlayerInfo[playerid][pInt] = 5;
				}
				if (PlayerToPoint(3, playerid,2022.9038,-1120.2688,26.4210))
				{
				    SetPlayerPos(playerid, 1237.8329,-833.3148,1084.0078);
					GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
					SetPlayerInterior(playerid,5);
					SetPlayerFacingAngle(playerid, 90);
					PlayerInfo[playerid][pInt] = 5;
				}
				if (PlayerToPoint(3, playerid,2770.6973,-1628.4293,12.1775))
				{
				    SetPlayerPos(playerid, 2464.8335,-1698.4218,1013.5078);
					GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
					SetPlayerInterior(playerid,2);
					SetPlayerFacingAngle(playerid, 90);
					PlayerInfo[playerid][pInt] = 2;
				}
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "   You are not a Cop / Soldier !");
			    return 1;
            }
		}
		return 1;
	}
	if(strcmp(cmd, "/camera", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                if(!PlayerToPoint(8.0,playerid,211.6222,1811.9565,21.8594))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not at the Area51 Security Panel !");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /camera [number 1 - 6]  (6 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Camera Number can't be below 1 or above 6 !"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 118.1011,1931.3221,22.5527); SetPlayerCameraLookAt(playerid, 98.9656,1920.9819,18.2180); }
				else if(number == 2) { SetPlayerCameraPos(playerid, 213.5340,1875.3075,17.6406); SetPlayerCameraLookAt(playerid, 213.8679,1884.1714,13.8945); }
				else if(number == 3) { SetPlayerCameraPos(playerid, 266.0640,1894.8856,38.6459); SetPlayerCameraLookAt(playerid, 224.0039,1887.1532,17.6406); }
				else if(number == 4) { SetPlayerCameraPos(playerid, 260.8112,1808.0175,38.6303); SetPlayerCameraLookAt(playerid, 227.5645,1818.4778,17.6406); }
				else if(number == 5) { SetPlayerCameraPos(playerid, 114.5196,1814.3483,38.6029); SetPlayerCameraLookAt(playerid, 123.6176,1846.4792,17.6549); }
				else if(number == 6)
				{
				    MedicBill[playerid] = 0;
					TogglePlayerControllable(playerid, 1);
					SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not a Cop / Soldier !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/divorce",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMarried] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You aren't Married !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /divorce [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot Propose to yourself!"); return 1; }
					    new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "%s", giveplayer);
						strmid(wstring, string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedTo]);
						strmid(dstring, string, 0, strlen(string), 255);
						if(strcmp(dstring ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "* You've sent Divorce Papers to %s.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s just sent you his Divorce Papers (type /aceptar divorce) to accept.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        DivorceOffer[giveplayerid] = playerid;
					        return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   That player is not Married to you !");
						    return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   That player is not near you !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/propose",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerMoney(playerid) < 20000)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   The Marriage & Reception costs $20000 !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMarried] > 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are already Married !");
				return 1;
	        }
	        if(PlayerInfo[playerid][pPhousekey] == 255)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You don't have a House to let your Wife / Husband live somewhere !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /propose [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pMarried] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   That player is already Married !");
			            return 1;
			        }
			        if(PlayerInfo[giveplayerid][pPhousekey] != 255)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   That player has a House, can't be Married !");
			            return 1;
			        }
			        if(PlayerInfo[giveplayerid][pPbiskey] != 255)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   That player has a Business, can't be Married !");
			            return 1;
			        }
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot Propose to yourself!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* You proposed to %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* %s just proposed to you (type /aceptar marriage) to accept.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        ProposeOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   That player is not near you !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd,"/witness",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /witness [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot Propose to yourself!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* You requested %s to be your Marriage Witness.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* %s just requested you to be his Marriage Witness (type /aceptar witness) to accept.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        MarryWitnessOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   That player is not near you !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd,"/irc",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: (/irc entrar [canal] or /irc entrar [canal] [contraseña])  (/irc salir)  (/irc admins)");
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /irc [accion] [canal]");
				SendClientMessage(playerid, COLOR_WHITE, "Acciones: Mens, Pass, Reqpass, Bloq, Echar, Estado");
				return 1;
			}
		    if(strcmp(x_nr,"entrar",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /irc entrar [canal] or /irc entrar [canal] [pass]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Solo hay de 1 a 10 canales !"); return 1; }
				channel -= 1;
			    if(IRCInfo[channel][iLock] == 0)
			    {
			        if(IRCInfo[channel][iNeedPass] == 0)
			        {
			            JoinChannelNr(playerid, channel);
				    }
				    else
				    {
				        tmp = strtok(cmdtext, idx);
				        if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Este canal requiere contraseña.");
							SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /irc entrar [canal] [pass]");
							return 1;
						}
						JoinChannel(playerid,channel,tmp);
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Este canal esta bloqueado !");
				    return 1;
			    }
			}
			else if(strcmp(x_nr,"estado",true) == 0)
			{
			    for(new i = 0; i < sizeof(IRCInfo); i++)
			    {
			        format(string, sizeof(string), "Canal %d: Hay %d jugadores dentro.",i + 1, IRCInfo[i][iPlayers]);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"pass",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /irc pass [canal] [pass]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Solo hay de 1 a 10 canales !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /irc pass [canal] [pass]");
					    return 1;
					}
					strmid(IRCInfo[channel][iPassword], tmp, 0, strlen(tmp), 255);
					format(string, sizeof(string), "Cambiaste la Pss del canal IRC a: %s.",IRCInfo[channel][iPassword]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No eres administrador del canal !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"reqpass",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /irc reqpass [canal]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Solo hay de 1 a 10 canales !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    if(IRCInfo[channel][iNeedPass] != 0)
				    {
				        IRCInfo[channel][iNeedPass] = 0;
				        SendClientMessage(playerid, COLOR_YELLOW, "Ahora este canal no requiere contraseña.");
				    }
					else
					{
					    IRCInfo[channel][iNeedPass] = 1;
						SendClientMessage(playerid, COLOR_YELLOW, "Ahora este canal requiere contraseña.");
					}
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No eres administrador del canal !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"bloq",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /irc bloq [canal]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Solo hay de 1 a 10 canales !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    if(IRCInfo[channel][iLock] != 0)
				    {
				        IRCInfo[channel][iLock] = 0;
				        SendClientMessage(playerid, COLOR_YELLOW, "Canal IRC desbloqueado.");
				    }
					else
					{
					    IRCInfo[channel][iLock] = 1;
						SendClientMessage(playerid, COLOR_YELLOW, "Canal IRC bloqueado.");
					}
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No eres administrador del canal !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"mens",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /irc mens [canal] [mensaje]");
				    return 1;
				}
				new channel = strval(tmp);
				if(channel < 1 || channel > 10) { SendClientMessage(playerid, COLOR_GREY, "   Solo hay de 1 a 10 canales !"); return 1; }
				channel -= 1;
				new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[channel][iAdmin],wstring, true ) == 0 )
				{
				    new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /irc mens [mensaje]");
						return 1;
					}
					strmid(IRCInfo[channel][iMOTD], result, 0, strlen(result), 255);
					SendClientMessage(playerid, COLOR_YELLOW, "YHas cambiado el mensaje inicial de este IRC.");
					SaveIRC();
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No eres administrador de este canal !");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"salir",true) == 0)
			{
			    if(PlayersChannel[playerid] < 999)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        format(string, sizeof(string), "* %s Ha salido del IRC.", sendername);
			        SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
			        IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
			        PlayersChannel[playerid] = 999;
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No estas en ningun canal IRC !");
			        return 1;
			    }
			}
			else if(strcmp(x_nr,"admins",true) == 0)
			{
				for(new i = 0; i < sizeof(IRCInfo); i++)
			    {
				    format(string, sizeof(string), "Canal %d: %s.", i + 1, IRCInfo[i][iAdmin]);
				    SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"echar",true) == 0)
			{
			    if(PlayersChannel[playerid] == 999)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No estas en un canal IRC !");
			        return 1;
			    }
			    new wstring[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "%s", sendername);
				strmid(wstring, string, 0, strlen(string), 255);
				if(strcmp(IRCInfo[PlayersChannel[playerid]][iAdmin],wstring, true ) == 0 )
				{
				    tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /irc echar [ID o Nombre]");
					    return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(PlayersChannel[giveplayerid] == PlayersChannel[playerid])
					        {
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "* Has echado a %s fuera del IRC.",giveplayer);
					            SendClientMessage(playerid, COLOR_YELLOW, string);
					            format(string, sizeof(string), "* Has sido expulsado del IRC.",sendername);
					            SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					            format(string, sizeof(string), "* %s ha sido expulsado del canal.", sendername);
						        SendIRCMessage(PlayersChannel[playerid], COLOR_GREEN, string);
					            IRCInfo[PlayersChannel[giveplayerid]][iPlayers] -= 1;
					            PlayersChannel[giveplayerid] = 999;
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta en el irc !");
							    return 1;
					        }
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Jugador desconectado !");
					    return 1;
					}
                }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No eres administrador del canal !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   IRC Invalido ! ");
			    return 1;
			}
		}
		return 1;
 	}
 	if(strcmp(cmd,"/i",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayersChannel[playerid] == 999)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas en un IRC !");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Estas muteado");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /i [texto IRC]");
				return 1;
			}
			format(string, sizeof(string), "** IRC %s: %s. **", sendername, result);
			SendIRCMessage(PlayersChannel[playerid], COLOR_YELLOW2, string);
	    }
	    return 1;
	}
	if(strcmp(cmd,"/evento",true)==0)
    {
        if(IsPlayerConnected(playerid))
        {
			/*if(!PlayerToPoint(3.0,playerid,1381.0413,-1088.8511,27.3906))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not at the Bill Board !");
			    return 1;
			}*/
			if(MissionPlayable == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No hay ningun evento celebrandose !");
			    return 1;
			}
			if(PlayerInfo[playerid][pMissionNr] == MissionPlayable)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Ya estas en una mision !");
			    return 1;
			}
			RingTone[playerid] = 20;
			PlayerOnMission[playerid] = PlayMission[kNumber];
			MissionCheckpoint[playerid] = 1;
			format(string, sizeof(string), "~w~Evento comenzado: ~n~~r~%s", PlayMission[kTitle]);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "%s", PlayMission[kText1]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "%s", PlayMission[kText2]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			format(string, sizeof(string), "%s", PlayMission[kText3]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			if(PlayMission[kToggle] == 1)
			{
				SetPlayerCheckpoint(playerid, PlayMission[kCP1][0], PlayMission[kCP1][1], PlayMission[kCP1][2], 8);
			}
        }
        return 1;
    }
	if(strcmp(cmd,"/settax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "   You are not the Mayor !");
				return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /settax [cantidad]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 5000) { SendClientMessage(playerid, COLOR_GREY, "   Tax may not be below 1 or above 5000 !"); return 1; }
			Tax = moneys;
			SaveStuff();
			format(string, sizeof(string), "* The Tax is $%d per player, from now on.", Tax);
			SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	    return 1;
	}
	if(strcmp(cmd,"/givetax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "   You are not the Mayor !");
				return 1;
	        }
	        if(Tax < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   There is no Money left in the Tax Fault !");
				return 1;
			}
			new Cops = 0;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
			        if(gTeam[i] == 2 && PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
			        {
			            Cops += 1;
			        }
			    }
			}
			if(Cops >= 1)
			{
			    new value = Tax / 2;
			    new price = value / Cops;
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
				    {
				        if(gTeam[i] == 2 && PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
				        {
				            format(string, sizeof(string), "* You received $%d from the Tax Vault from the Mayor.",price);
							SendClientMessage(i, COLOR_WHITE, string);
							SafeGivePlayerMoney(i, price);
							Tax -= price;
				        }
				    }
				}
				SaveStuff();
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   There are no Cops Online at the moment !");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/read",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /read [name]");
				SendClientMessage(playerid, COLOR_GREY, "Available names: Paper, TestPaper");
				return 1;
			}
	        if(strcmp(x_job,"paper",true) == 0)
			{
			    if(GotPaper[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "|_____________________ Periodicos Los Santos _____________________|");
			        format(string, sizeof(string), "| %s  |  By News Reporter: %s.",Paper[playerid][pTitle],Paper[playerid][pMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",Paper[playerid][pLine7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You don't have a Newspaper !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"testpaper",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			    {
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /read testpaper [papernr]");
						return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Paper Number can't be below 1 or above 10 !"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 0)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   There is no Newspaper written on that number !");
					    return 1;
					}
			        SendClientMessage(playerid, COLOR_WHITE, "|_____________________ Periodicos Los Santos _____________________|");
			        format(string, sizeof(string), "| %s  |  By News Reporter: %s.",PaperInfo[paper][PaperTitle],PaperInfo[paper][PaperMaker]);
			        SendClientMessage(playerid, COLOR_GREEN, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText1]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText2]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText3]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText4]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText5]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText6]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        format(string, sizeof(string), "%s",PaperInfo[paper][PaperText7]);
			        SendClientMessage(playerid, COLOR_GREY, string);
			        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________________________|");
			        return 1;
				}
				else
				{
        			SendClientMessage(playerid, COLOR_GREY, "   You are not a News Reporter !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /read testpaper [papernr]");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/deliver", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 15 || gTeam[playerid] == 2 || PlayerInfo[playerid][pLeader] == 6)
	        {
	            if(gTeam[playerid] == 2 || IsACop(playerid))
	            {
	                if(!PlayerToPoint(8.0,playerid,96.9123,1920.5088,18.1473))
					{
					    SendClientMessage(playerid, COLOR_GREY, "   You are not at the Area51 Delivery Gate !");
					    return 1;
					}
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /deliver [ID o Nombre]");
						return 1;
					}
			        giveplayerid = ReturnUser(tmp);
					if (IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Can't throw yourself into Fort DeMorgan !"); return 1; }
					        if(WantedLevel[giveplayerid] < 1) { SendClientMessage(playerid, COLOR_GREY, "   The player needs at least Wanted Level 1 to be thrown into Fort DeMorgan !"); return 1; }
					        if(gTeam[giveplayerid] == 2 || PlayerInfo[giveplayerid][pLeader] == 6 || PlayerInfo[giveplayerid][pLeader] == 10) { return 1; }
							if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* You've brought %s to Fort DeMorgan.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s brought you to Fort DeMorgan.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
								WantedPoints[giveplayerid] = 0;
								WantedLevel[giveplayerid] = 0;
								PlayerInfo[giveplayerid][pJailed] = 2;
								PlayerInfo[giveplayerid][pJailTime] = 3600;
								SetPlayerPos(giveplayerid, 107.2300,1920.6311,18.5208);
								SetPlayerWorldBounds(giveplayerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   That player is not near you !");
					    	return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}

	            }
	            else if(PlayerInfo[playerid][pJob] == 15)
	            {
			        if(BringingPaper[playerid] != 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   You haven't picked up a Newspaper from the News Reporters Building yet !");
			            return 1;
			        }
			        tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /deliver [ID o Nombre]");
						return 1;
					}
			        giveplayerid = ReturnUser(tmp);
					if (IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
							if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* You offerd one of your Newspapers to %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* Paper Boy %s wants to give you a Newspaper (use /aceptar paper, to accept).", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								PaperOffer[giveplayerid] = playerid;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   That player is not near you !");
					    	return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not a Paper Boy !");
	            return 1;
			}
		}
		return 1;
	}
	//""""""""""""""""""""""""""""""""""""""""""""""""""""[MINERO]""""""""""""""""""""""""""""""""""""""""""""""""
	if(strcmp(cmd, "/minar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 11)
			{
			    if(sinmovermerca[playerid] == 1) // by DryilZas
	        	{
	            	SendClientMessage(playerid, COLOR_WHITE, "   Debes esperar un poco para seguir trabajando.");
	            	return 1;
	        	}
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Estas en una Mision, no puedes usar ese Comando ahora!");
			        return 1;
			    }
			    if(CP[playerid] == 80)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Usted ya esta Trabajando!");
			        return 1;
			    }
                new newcar = GetPlayerVehicleID(playerid);
                new rand;
				if(newcar == 665 || newcar == 666|| newcar == 667|| newcar == 668)
		        {
		            GameTextForPlayer(playerid, "~w~Minero ~n~~y~Mueve la Mercancia", 5000, 1);
		            CP[playerid] = 80;
		            rand = random(sizeof(mineroCP));
		            SetPlayerCheckpoint(playerid,mineroCP[rand][0],mineroCP[rand][1],mineroCP[rand][2],9.0);
		        }
		        else
		        {
                GameTextForPlayer(playerid, "No estas en un vehiculo de minero", 5000, 1);
		        }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres Minero !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/nominar", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 11)
			{
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Estas en una Mision, no puedes usar ese Comando ahora!");
			        return 1;
			    }
			    if(CP[playerid] == 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Usted no esta Trabajando!");
			        return 1;
			    }
                new newcar = GetPlayerVehicleID(playerid);
				if(newcar == 665 || newcar == 666|| newcar == 667|| newcar == 668)
		        {
		            GameTextForPlayer(playerid, "~w~Dejas de trabajar", 5000, 1);
		            CP[playerid] = 0;
		            sinmovermerca[playerid] = 1; // by DryilZas
		            DisablePlayerCheckpoint(playerid);
		            RemovePlayerFromVehicle(playerid);
			    	SetTimerEx("tiemponomerca", 120000, false, "i", playerid);
		        }
		        else
		        {
                GameTextForPlayer(playerid, "No estas en un vehiculo minero", 5000, 1);
		        }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres Minero !");
			}
		}//not connected
		return 1;
	}
/*	if(strcmp(cmd, "/startstunt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 11)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Your are not a Stuner!");
		        return 1;
	        }
	        else
	        {
	        EnableStuntBonusForPlayer(playerid, 1);
            GameTextForPlayer(playerid, "~w~Stunt has been~n~~p~Started!", 3500, 1);
	        }
	    }
		return 1;
	}
	if(strcmp(cmd, "/stopstunt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 11)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Your are not a Stuner!");
		        return 1;
	        }
	        else
	        {
	        EnableStuntBonusForPlayer(playerid, 0);
	        GameTextForPlayer(playerid, "~w~Stunt has been~n~~p~Stoped!", 3500, 1);
	        }
	    }
		return 1;
	}*/
	if(strcmp(cmd, "/bring", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 15)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a Paper Boy !");
	            return 1;
	        }
			if(PlayerToPoint(3.0,playerid,1793.02,-1296.56,13.44))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /bring [papernr]");
					return 1;
				}
		        new paper = strval(tmp);
		        if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Paper Number can't be below 1 or above 10 !"); return 1; }
				paper -= 1;
				if(PaperInfo[paper][PaperUsed] == 0)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   There is no written Newspaper on that number !");
				    return 1;
				}
		        GetPlayerName(playerid, sendername, sizeof(sendername));
		        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		        format(string, sizeof(string), "* You can now deliver Newspapers to people, Newspaper: %s, By: %s.",PaperInfo[paper][PaperTitle],PaperInfo[paper][PaperMaker]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperTitle]);
				strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperMaker]);
				strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText1]);
				strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText2]);
				strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText3]);
				strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText4]);
				strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText5]);
				strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText6]);
				strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s", PaperInfo[paper][PaperText7]);
				strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
				BringingPaper[playerid] = 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not at the News Reporter Building !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/periodicos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pJob] == 15)
	        {
				if(PlayerToPoint(3.0,playerid,1793.02,-1296.56,13.44))
				{
				    new number = 0;
				    for(new i = 0; i < sizeof(PaperInfo); i++)
				    {
				        number ++;
				        if(PaperInfo[i][PaperUsed] == 1)
				    	{
				        	format(string, sizeof(string), "|%d| Newspaper: %s, By: %s",number,PaperInfo[i][PaperTitle],PaperInfo[i][PaperMaker]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not at the News Reporter Building !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not a Paper Boy / News Reporter !");
	            return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/publicar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	        {
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAR: /publicar nuevo [Nm Peridodico] o /publicar borrar [Nm Peridodico]");
				    return 1;
				}
			    if(strcmp(x_nr,"nuevo",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_WHITE, "USAR: /publicar nuevo [Nm Peridodico]");
					    return 1;
					}
					new paper = strval(tmp);
					if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Numero de Periodico Invalido, tienen que ser del 1 al 10!"); return 1; }
					paper -= 1;
					if(PaperInfo[paper][PaperUsed] == 1)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ese numero de periodico no esta escrito!");
					    return 1;
					}
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Tu has publicado un nuevo Periodico.");
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Todo lo que escriba ahora se añadira al Periodico.Tienes 7 lineas Disponibles.");
					SendClientMessage(playerid, COLOR_LIGHTRED, "* Por Favor Escriba Primero el Nombre del Periodico.");
					WritingPaper[playerid] = 1;
					WritingPaperNumber[playerid] = paper;
					WritingLine[playerid] = 1;
				}
				else if(strcmp(x_nr,"borrar",true) == 0)
				{
				    if(PlayerInfo[playerid][pRank] >= 4)
				    {
				        tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "USAR: /publicar borrar [Nm Peridodico]");
						    return 1;
						}
						new paper = strval(tmp);
						if(paper < 1 || paper > 10) { SendClientMessage(playerid, COLOR_GREY, "   Numero de Periodico Invalido, tienen que ser del 1 al 10!"); return 1; }
						paper -= 1;
						ClearPaper(paper);
						new number = paper; number += 1;
						format(string, sizeof(string), "Tu has borrado el Periodico %d.",number);
						SendClientMessage(playerid, COLOR_YELLOW, string);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "  Necesitas tener nivel de Rango 4 para poder Borrar Periodicos!");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USAR: /publicar nuevo [Nm Peridodico] o /publicar borrar [Nm Peridodico]");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Tu no eres Reportero!");
	            return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/modospawn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pPhousekey] != 255)
	        {
	            if(Spectate[playerid] != 255 && PlayerInfo[playerid][pAdmin] < 1)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No puedes hace eso espectando !");
	                return 1;
	            }
	            if(SpawnChange[playerid])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Ahora apareceras en tu Spawn normal (Barrio, Playa, HQ, Base de banda...) !");
	                SpawnChange[playerid] = 0;
	                /*if(IsAnInstructor(playerid))
		            {
		                if(SchoolSpawn[playerid] == 0)
		                {
		                    SchoolSpawn[playerid] = 1;
		                    SendClientMessage(playerid, COLOR_GREY, "   You will now spawn at the Flying School !");
		                }
		                else if(SchoolSpawn[playerid] == 1)
		                {
		                    SchoolSpawn[playerid] = 0;
		                    SendClientMessage(playerid, COLOR_GREY, "   You will now spawn at the Driving School !");
		                }
		            }*/
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "  Ahora apareceras en tu Casa comprada o de alquiler !");
	                SpawnChange[playerid] = 1;
	            }
	        }
	        else
	        {
	            /*if(IsAnInstructor(playerid))
	            {
	                if(SchoolSpawn[playerid] == 0)
	                {
	                    SchoolSpawn[playerid] = 1;
	                    SendClientMessage(playerid, COLOR_GREY, "   You will now spawn at the Flying School !");
	                }
	                else if(SchoolSpawn[playerid] == 1)
	                {
	                    SchoolSpawn[playerid] = 0;
	                    SendClientMessage(playerid, COLOR_GREY, "   You will now spawn at the Driving School !");
	                }
	            }
	            else
	            {*/
		            SendClientMessage(playerid, COLOR_GREY, "   No tienes nunguna casa comprada o alquilada!");
		            return 1;
	            //}
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/ropa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 0 && PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pJob] != 8 && PlayerInfo[playerid][pJob] != 17 && GetPlayerMoney(playerid) > 99)
	        {
	            if(IsAtClothShop(playerid))
				{
				    if(PlayerInfo[playerid][pMember] == 1) { ChosenSkin[playerid] = 10; SetPlayerSkin(playerid, 10); }
					else if(PlayerInfo[playerid][pMember] == 2) { ChosenSkin[playerid] = 286; SetPlayerSkin(playerid, 286); }
					else if(PlayerInfo[playerid][pMember] == 3) { ChosenSkin[playerid] = 287; SetPlayerSkin(playerid, 287); }
					else if(PlayerInfo[playerid][pMember] == 4) { ChosenSkin[playerid] = 70; SetPlayerSkin(playerid, 70); }
					else if(PlayerInfo[playerid][pMember] == 5) { ChosenSkin[playerid] = 107; SetPlayerSkin(playerid, 107); }
					else if(PlayerInfo[playerid][pMember] == 6) { ChosenSkin[playerid] = 173; SetPlayerSkin(playerid, 173); }
					else if(PlayerInfo[playerid][pMember] == 8) { ChosenSkin[playerid] = 127; SetPlayerSkin(playerid, 127); }
					else if(PlayerInfo[playerid][pMember] == 9) { ChosenSkin[playerid] = 148; SetPlayerSkin(playerid, 148); }
					else if(PlayerInfo[playerid][pMember] == 10) { ChosenSkin[playerid] = 255; SetPlayerSkin(playerid, 255); }
					else if(PlayerInfo[playerid][pMember] == 11) { ChosenSkin[playerid] = 59; SetPlayerSkin(playerid, 59); }
					else if(PlayerInfo[playerid][pMember] == 0) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else { return 1; }
				    new precio;
		            precio = 100;
		            SafeGivePlayerMoney(playerid, -precio);
					TogglePlayerControllable(playerid, 0);
					SelectChar[playerid] = 255;
					SelectCharID[playerid] = PlayerInfo[playerid][pMember];
					SelectCharPlace[playerid] = 1;
					PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
			    	PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Usa 'otro' para ir viendo lo que esta disponible.");
				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Cuando encuentres el que te gusta escribe 'estaropa'.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Tu no estas en una tienda de ropa!");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid,COLOR_GREY, "   No puedes cambiarte por que eres de una faccion/trabajo(uniforme) o no tienes dinero suficiente!");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/comprarinformal", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerMoney(playerid) > 99)
	        {
	            if(IsAtClothShop(playerid))
				{
				    if(PlayerInfo[playerid][pMember] == 1) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 2) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 3) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 4) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 5) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 6) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 8) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 9) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 10) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 11) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 12) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 13) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 14) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 15) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 16) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else if(PlayerInfo[playerid][pMember] == 0) { ChosenSkin[playerid] = 7; SetPlayerSkin(playerid, 7); }
					else { return 1; }
				    new precio;
		            precio = 100;
		            SafeGivePlayerMoney(playerid, -precio);
					TogglePlayerControllable(playerid, 0);
					SelectChar[playerid] = 200;
					SelectCharID[playerid] = 0;
					SelectCharPlace[playerid] = 1;
					PlayerInfo[playerid][pAge] = ChosenSkin[playerid];
				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Usa 'otro' para ir viendo lo que esta disponible.");
				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Cuando encuentres el que te gusta escribe 'estaropa'.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Tu no estas en una tienda de ropa!");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid,COLOR_GREY, "   No puedes cambiarte por que eres de una faccion o no tienes dinero suficiente!");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/loteria", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!PlayerToPoint(2.0,playerid,2309.4746,-8.3682,26.7422))
	        {
	        	SendClientMessage(playerid, COLOR_WHITE, " No estas en el puesto de loterias del banco !");
	        	return 1;
	        }
	        if(PlayerInfo[playerid][pLottoNr] > 0)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "   Ya tienes un numero de loteria !");
	            return 1;
	        }
	        if(GetPlayerMoney(playerid) < 50)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "   El boleto cuesta $50 !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE,"ESCRIBE: /loteria [1-80]");
				return 1;
			}
			new lottonr = strval(tmp);
			if(lottonr < 1 || lottonr > 80) { SendClientMessage(playerid, COLOR_GREY, "   Solo puede tomar entre el 1 y el 80 !"); return 1; }
			format(string, sizeof(string), "* Has comprado el boleto con el numero: %d. Suerte.", lottonr);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			SafeGivePlayerMoney(playerid, - 50);
			PlayerInfo[playerid][pLottoNr] = lottonr;
	    }
	    return 1;
	}

	if(strcmp(cmd, "/confiscar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gTeam[playerid] == 2 || IsACop(playerid))
	        {
	            if(PlayerInfo[playerid][pRank] < 2)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Necesitas ser rango 2 para esto !");
	                return 1;
	            }
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Confiscar __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /confiscar [Nombre de la licencia] [ID del jugador]");
			  		SendClientMessage(playerid, COLOR_GREY, "Nombres disponibles: licenciadeconducir, licenciadevuelo, licenciadebarco, licenciadearmas1, licenciadearmas2, armas, Drogas, Materiales");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"licenciadeconducir",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /confiscar licenciadeconducir [ID del jugador]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "* Has confiscado a %s's Drivers License.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Oficial %s te ha quitado la licencia de conducir.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pCarLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Ese jugador no está cerca de ti !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"licenciadevuelo",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /confiscar licenciadevuelo [ID del jugador]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "* Le has confiscado a %s's su licencia de vuelo.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Oficial %s te ha quitado tu licencia de vuelo.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pFlyLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Ese jugador no esta cerca de ti !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador esta desconectado !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"licenciadearmas1",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /confiscar licenciadearmas1 [ID del jugador]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "* Le has quitado a %s's su licencia de armas Tipo 1.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Oficial %s te ha quitado tu licencia de armas Tipo 1.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pGunLic1] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca de ti !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"licenciadearmas2",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /confiscar licenciadearmas2 [ID del jugador]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "* Le has quitado a %s's su licencia de armas Tipo 2.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Oficial %s te ha quitado tu licencia de armas Tipo 2.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pGunLic2] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca de ti !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"licenciadebarco",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /confiscar licenciadebarco [ID del jugador]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "* Le has quitado a %s's la licencia de barco.", giveplayername);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Oficial %s te ha quitado la licencia de barco.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pBoatLic] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca de ti !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"armas",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /confiscar armas [ID del jugador]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
						        format(string, sizeof(string), "* Le has quitado a %s's todas sus armas.", giveplayer);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Oficial %s te ha quitado todas tus armas.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        SafeResetPlayerWeapons(giveplayerid);
						        PlayerInfo[giveplayerid][pGun1] = 0; PlayerInfo[giveplayerid][pAmmo1] = 0;
						        PlayerInfo[giveplayerid][pGun2] = 0; PlayerInfo[giveplayerid][pAmmo2] = 0;
						        PlayerInfo[giveplayerid][pGun3] = 0; PlayerInfo[giveplayerid][pAmmo3] = 0;
						        PlayerInfo[giveplayerid][pGun4] = 0; PlayerInfo[giveplayerid][pAmmo4] = 0;
						        PlayerInfo[giveplayerid][pInvWeapon] = 0; PlayerInfo[giveplayerid][pInvAmmo] = 0;
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca de ti !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"drogas",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /confiscar drogas [ID del jugador]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
							    format(string, sizeof(string), "* Le has quitado a %s's todas sus drogas.", giveplayer);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Oficial %s te ha quitado todas tus drogas.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pDrugs] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca de ti !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"materiales",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /confiscar materiales [ID del jugador]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new giveplayername[64];
							    GetPlayerName(playerid, sendername, sizeof(sendername));
							    GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
							    format(string, sizeof(string), "* Le has quitado a %s's todos sus materiales.", giveplayer);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Oficial %s te ha quitado todos tus materiales.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pMats] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca de ti !");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado !");
					    return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Nombre no valido !");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No eres un policía !");
	            return 1;
	        }
	    }
	    return 1;
	}
	/*if(strcmp(cmd, "/beber", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAtBar(playerid))
	        {
	            if(PlayerDrunk[playerid] < 10)
	            {
	                new Float:health;
	                new x_nr[256];
					x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
						SendClientMessage(playerid, COLOR_WHITE, "|____________________ Bebidas ______________________|");
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /beber [nombre de la bebida]");
				  		SendClientMessage(playerid, COLOR_GREY, "Refrescos: Agua ($1), Cola ($2)");
				  		SendClientMessage(playerid, COLOR_GREY, "Alcoholicas: Cerveza ($6), Legendario($8), Champan($12)");
				  		SendClientMessage(playerid, COLOR_GREY, "Extra Fuertes: Vodka ($16), Malibu($20)");
				  		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Bebe con moderacion, y no cojas el volante.");
						SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________________|");
						return 1;
					}
				    if(strcmp(x_nr,"cerveza",true) == 0)
					{
						if(PlayerInfo[playerid][pAge] < 16)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Camareco: En tu carnet pone menor de 16 años ¡Largo!.");
						    return 1;
						}
					    SafeGivePlayerMoney(playerid, - 6);
					    PlayerDrunk[playerid] += 1;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Estas demasiado~n~~p~Bebido", 3500, 1); }
						GetPlayerHealth(playerid, health);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 10; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 10.0); }
						}
					}
					else if(strcmp(x_nr,"legendario",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Camareco: En tu carnet pone menor de 16 años ¡Largo!.");
						    return 1;
						}
					    SafeGivePlayerMoney(playerid, - 8);
					    PlayerDrunk[playerid] += 2;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Estas demasiado~n~~p~Bebido", 3500, 1); }
						GetPlayerHealth(playerid, health);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 15.0); }
						}
					}
					else if(strcmp(x_nr,"champan",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Camareco: En tu carnet pone menor de 16 años ¡Largo!.");
						    return 1;
						}
					    SafeGivePlayerMoney(playerid, - 12);
					    PlayerDrunk[playerid] += 2;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Estas demasiado~n~~p~Bebido", 3500, 1); }
						GetPlayerHealth(playerid, health);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 20; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 20.0); }
						}
					}
                    else if(strcmp(x_nr,"vodka",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Camareco: En tu carnet pone menor de 16 años ¡Largo!.");
						    return 1;
						}
					    SafeGivePlayerMoney(playerid, - 16);
					    PlayerDrunk[playerid] += 3;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Estas demasiado~n~~p~Bebido", 3500, 1); }
						GetPlayerHealth(playerid, health);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 27; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 27.0); }
						}
					}
                    else if(strcmp(x_nr,"malibu",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 18)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Camareco: En tu carnet pone menor de 16 años ¡Largo!.");
						    return 1;
						}
					    SafeGivePlayerMoney(playerid, - 20);
					    PlayerDrunk[playerid] += 4;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Estas demasiado~n~~p~Bebido", 3500, 1); }
						GetPlayerHealth(playerid, health);
						if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 40; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 40.0); }
						}
					}
					else if(strcmp(x_nr,"agua",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 1);
						GetPlayerHealth(playerid, health);
					    if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 50.0); }
						}
						else if(health > 100)
						{
						    SetPlayerHealth(playerid, 100);
						}
					}
					else if(strcmp(x_nr,"cola",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 2);
						GetPlayerHealth(playerid, health);
					    if(health < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 50.0); }
						}
						else if(health > 100)
						{
						    SetPlayerHealth(playerid, 100);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "No tengo esas bebidas que dices...");
					    return 1;
					}
					GetPlayerHealth(playerid, health);
					if (health > 100) SetPlayerHealth(playerid, 100);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s toma %s de la barra.", sendername ,x_nr);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No puedes beber tanto animal!");
	                return 1;
	            }
	        }
	        else if(PlayerToPoint(5, playerid, 1255.9084,-791.8105,1085.3828))
	        {
	            if(PlayerDrunk[playerid] < 10)
	            {
	                new Float:health;
	                new x_nr[256];
					x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
						SendClientMessage(playerid, COLOR_WHITE, "|____________________ Bebidas ______________________|");
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /beber [Nombre de la bebida]");
				  		SendClientMessage(playerid, COLOR_GREY, "Caffe: Cappuccino ($4), Latte($5), Macchiato($5)");
				  		SendClientMessage(playerid, COLOR_GREY, "Mixes/liqueur: Limoncello($8), Amaretto($7), Martini($12)");
				  		SendClientMessage(playerid, COLOR_GREY, "Wine: Merlot ($15), Sangiovese($18), Frizzante($16)");
				  		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Warning! Excessive Drinking Causes Liver Damage");
						SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________________|");
						return 1;
					}
					else if(strcmp(x_nr,"cappuccino",true) == 0)
					{
						GetPlayerHealth(playerid, health);
						if(health < 100)
					    {
							SafeGivePlayerMoney(playerid, - 4);
					        SetPlayerHealth(playerid, health + 30);
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* %s takes a sip of Cappuccino from the porcelain cup.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    }
					}
					else if(strcmp(x_nr,"latte",true) == 0)
					{
						SafeGivePlayerMoney(playerid, - 5);
				        SetPlayerHealth(playerid, health + 30);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s drinks from a tall glass of Caffe Latte.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if(strcmp(x_nr,"macchiato",true) == 0)
					{
						SafeGivePlayerMoney(playerid, - 5);
				        SetPlayerHealth(playerid, health + 30);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s drinks from a glass mug of Caffe Macchiato.", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				    else if(strcmp(x_nr,"limoncello",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 8);
					    PlayerDrunk[playerid] += 3;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~You are~n~~p~Drunk", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								format(string, sizeof(string), "* %s drinks from a ceramic glass of Limoncello.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), "* %s drinks from a ceramic glass of Limoncello.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
				    else if(strcmp(x_nr,"amaretto",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 7);
					    PlayerDrunk[playerid] += 2;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~You are~n~~p~Drunk", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								format(string, sizeof(string), "* %s takes a sip of Amaretto from a rocks glass.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), "* %s takes a sip of Amaretto from a rocks glass.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
				    else if(strcmp(x_nr,"martini",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 12);
					    PlayerDrunk[playerid] += 3;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Tu estas~n~~p~Borracho", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								format(string, sizeof(string), "* %s takes a sip of Martini from the cocktail glass.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), "* %s takes a sip of Martini from the cocktail glass.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
				    else if(strcmp(x_nr,"merlot",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 15);
					    PlayerDrunk[playerid] += 2;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~You are~n~~p~Drunk", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								format(string, sizeof(string), "* %s takes a sip of red wine (Merlot) from the wine glass.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), "* %s takes a sip of red wine (Merlot) from the wine glass.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
				    else if(strcmp(x_nr,"sangiovese",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 18);
					    PlayerDrunk[playerid] += 2;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~You are~n~~p~Drunk", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								format(string, sizeof(string), "* %s takes a sip of red wine (Sangiovese) from the wine glass.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), "* %s takes a sip of red wine (Sangiovese) from the wine glass.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
				    else if(strcmp(x_nr,"frizzante",true) == 0)
					{
					    SafeGivePlayerMoney(playerid, - 16);
					    PlayerDrunk[playerid] += 2;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~You are~n~~p~Drunk", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0)
							{
								PlayerDrunk[playerid] += 1;
								new hp = 2 * PlayerInfo[playerid][pAlcoholPerk];
								hp += 30;
								SetPlayerHealth(playerid, health + hp);
								format(string, sizeof(string), "* %s takes a sip of white wine (Frizzante) from the wine glass.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
								SetPlayerHealth(playerid, health + 30.0);
								format(string, sizeof(string), "* %s takes a sip of white wine (Frizzante) from the wine glass.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
						}
					}
					GetPlayerHealth(playerid, health);
					if (health > 100) SetPlayerHealth(playerid, 100);
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas en la barra!");
	            return 1;
	        }
	    }
	    return 1;
	}*/
 	if(strcmp(cmd,"/showmenu",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pJob] != 6)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Your are not a waiter!");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /showmenu [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(4.0, playerid, giveplayerid))
					{
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(playerid, sendername, sizeof(sendername));
			            format(string, sizeof(string), "* %s hands %d a menu from the rack.", sendername, giveplayerid);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						ProxDetector(8.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						LoopingAnim(playerid,"BAR","Barserve_give",4.1,0,1,1,1,1);
					    SendClientMessage(giveplayerid, COLOR_RED, "|____________________ Food Menu _____________________|");
						SendClientMessage(giveplayerid, COLOR_WHITE, "           --- Today's Selections ---               ");
						SendClientMessage(giveplayerid, COLOR_WHITE, "          Naan Bread ($75) Salad ($85)              ");
				  		SendClientMessage(giveplayerid, COLOR_WHITE, "   Chicken Korma ($200) Spaghetti Bolognese ($250)  ");
				  		SendClientMessage(giveplayerid, COLOR_WHITE, "     Rice Pudding ($300) Chocolate Gateau ($425)    ");
				  		SendClientMessage(giveplayerid, COLOR_RED, "                   ESCRIBE: /ordermeal                    ");
				  		SendClientMessage(giveplayerid, COLOR_RED, "|____________________________________________________|");
						SendClientMessage(giveplayerid, COLOR_GREY, string);
				        format(string, sizeof(string), "* %s has shown the menu to you.", sendername);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
         			}
					else
	                {
	                    SendClientMessage(playerid, COLOR_GREY, "   That player is not near you!");
	                    return 1;
	                }
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   That player is Offline!");
	            return 1;
	        }
		}
	    return 1;
 	}
	if(strcmp(cmd, "/cookuniform", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pJob] != 6)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You are not a waiter!");
				return 1;
			}
			{
			    new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /cookuniform list then /cookuniform[skin id]");
					return 1;
				}
				if (PlayerToPoint(3, playerid,-792.9693,500.5572,1367.3672) || PlayerToPoint(3,playerid,-779.3134,497.8989,1371.7490) || PlayerInfo[playerid][pLocal] != 255)
				{
					if(strcmp(x_nr,"list",true) == 0)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "|_________Waiter Uniforms_________|");
						SendClientMessage(playerid, COLOR_GRAD1, "1: Black Cook 2: White Cook");
						SendClientMessage(playerid, COLOR_YELLOW, "|_________Waiter Uniforms_________|");
						return 1;
					}
					else if(strcmp(x_nr,"1",true) == 0)
					{
						SetPlayerSkin(playerid, 168);
						SendClientMessage(playerid, COLOR_GRAD2, "You are now the black chef.");
						return 1;
					}
					else if(strcmp(x_nr,"2",true) == 0)
					{
						SetPlayerSkin(playerid, 209);
						SendClientMessage(playerid, COLOR_GRAD2, "You are now undercover as a Staff member.");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "You are not by the cookers.");
					return 1;
				}
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/ordermeal", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Food Menu  __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /ordermeal [food]");
		  		SendClientMessage(playerid, COLOR_GREY, "Starters: NaanBread, Salad");
		  		SendClientMessage(playerid, COLOR_GREY, "Main Courses: SpagBol, ChickenKorma");
		  		SendClientMessage(playerid, COLOR_GREY, "Desserts: Chocolate Gateau, RicePudding ");
				SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"naanbread",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s has ordered a naan bread.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have ordered a Naan Bread.");
		    	return 1;
			}
			else if(strcmp(x_nr,"salad",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s has ordered a salad.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have ordered a Salad.");
		    	return 1;
			}
			else if(strcmp(x_nr,"spagbol",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s has ordered Spaghetti Bolognese.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have ordered Spaghetti Bolognese.");
		    	return 1;
			}
			else if(strcmp(x_nr,"chickenkorma",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s has ordered a Chicken Korma.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have ordered a Chicken Korma.");
		    	return 1;
			}
			else if(strcmp(x_nr,"chocolategateau",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s has ordered some Chocolate Gateau.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have ordered some Chocolate Gateau.");
		    	return 1;
			}
			else if(strcmp(x_nr,"ricepudding",true) == 0)
			{
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s has ordered some Rice Pudding.", sendername);
		    	SendJobMessage(18, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have ordered some Rice Pudding.");
		    	return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   We don't serve that here, sorry!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setchamp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /setchamp [ID o Nombre]");
					return 1;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
		        if(IsPlayerConnected(giveplayerid))
		        {
		            if(giveplayerid != INVALID_PLAYER_ID)
		            {
		                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		                new nstring[MAX_PLAYER_NAME];
						format(nstring, sizeof(nstring), "%s", giveplayer);
						strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
						Titel[TitelWins] = PlayerInfo[giveplayerid][pWins];
						Titel[TitelLoses] = PlayerInfo[giveplayerid][pLoses];
						SaveBoxer();
						format(string, sizeof(string), "* You have made %s the new Boxing Champion.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
		            return 1;
		        }
	        }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No estas autorizado para usar esto!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/boxstats", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 12)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a Boxer !");
	            return 1;
	        }
	        new ttext[20];//Title
	        new clevel = PlayerInfo[playerid][pBoxSkill];
			if(clevel >= 0 && clevel <= 50) { ttext = "Beginner"; }
			else if(clevel >= 51 && clevel <= 200) { ttext = "Amateur"; }
			else if(clevel >= 201 && clevel <= 400) { ttext = "Professional"; }
	        new ntext[20];//NickName
	        new level = PlayerInfo[playerid][pWins];
	        if(level > 0 && PlayerInfo[playerid][pLoses] == 0)
	        {
	            ntext = "Undefeated";
	        }
	        else
	        {
	            if(level >= 0 && level <= 10) { ntext = "Newcomer"; }
	            else if(level >= 11 && level <= 20) { ntext = "Touchy Fist"; }
	            else if(level >= 21 && level <= 30) { ntext = "Nut Cracker"; }
	            else if(level >= 31 && level <= 40) { ntext = "Tommygun"; }
	            else if(level >= 41 && level <= 50) { ntext = "Skull Breaker"; }
	            else if(level >= 51 && level <= 60) { ntext = "Light Speed"; }
	            else if(level >= 61 && level <= 70) { ntext = "Unbroken Warrior"; }
	            else if(level >= 71) { ntext = "Itallion Stallion"; }
	        }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Boxing Records __________________|");
	        format(string, sizeof(string), "| Current Champion: %s, with [%d] Winnings and [%d] Losses.", Titel[TitelName],Titel[TitelWins],Titel[TitelLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Current Title: %s.", ttext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Current NickName: %s.", ntext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Total Wins: %d.", PlayerInfo[playerid][pWins]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Total Losses: %d.", PlayerInfo[playerid][pLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
	        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________|");
		}
		return 1;
	}
	if(strcmp(cmd, "/fight", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 12)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not a Boxer !");
	            return 1;
	        }
	        if(InRing > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   There is already a Fight going on, wait for it to Finish !");
	            return 1;
	        }
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are already Fighting !");
	            return 1;
	        }
	        if(!PlayerToPoint(20.0,playerid,765.9343,0.2761,1000.7173))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not at the Gantom Gimnasio !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /fight [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot Box with yourself!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* You offerd a Boxing Challenge to %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Boxer %s wants to Fight with you (type /aceptar boxing) to accept.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        BoxOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   That player is not near you !");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
			    return 1;
			}
	    }
	    return 1;
	}
	/*if(strcmp(cmd, "/music", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pCrashed])
	        {
		        new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Music __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /music [name]");
			  		SendClientMessage(playerid, COLOR_GREY, "Available names: On, Off, Next");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"on",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~CD Player On", 5000, 5);
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
	            else if(strcmp(x_nr,"off",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~CD Player Off", 5000, 5);
				    PlayerFixRadio(playerid);
				}
				else if(strcmp(x_nr,"next",true) == 0)
				{
				    if(Music[playerid] == 0) { Music[playerid] = 1; }
				    else if(Music[playerid] == 1) { Music[playerid] = 2; }
				    else if(Music[playerid] == 2) { Music[playerid] = 3; }
				    else if(Music[playerid] == 3) { Music[playerid] = 4; }
				    else if(Music[playerid] == 4) { Music[playerid] = 5; }
				    else if(Music[playerid] == 5) { Music[playerid] = 6; }
				    else if(Music[playerid] == 6) { Music[playerid] = 0; }
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Unknown music command !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You don't have a CD-Player !");
			    return 1;
			}
	    }
	    return 1;
	}*/
	/*if(strcmp(cmd, "/service", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Service Names __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /service [name]");
		  		SendClientMessage(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mechanic, Pizza");
				SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"taxi",true) == 0)
			{
			    if(TaxiDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   There are no Taxi Drivers On Duty at the moment, try again later !");
		            return 1;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   You can't call for a Taxi now !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s is in need of a Taxi Driver. (use /accept taxi to accept the call)", sendername);
		    	SendFamilyMessage(10, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have called for a Taxi Driver, wait for a reply.");
		    	TaxiCall = playerid;
		    	return 1;
			}
			else if(strcmp(x_nr,"Pizza",true) == 0)//added lookagain
   			{
       			if(PizzaBoys < 1)
          		{
              		SendClientMessage(playerid, COLOR_GREY, "   There are no Pizza boys On Duty at the moment, try again later!");
              		return 1;
          		}
       			GetPlayerName(playerid, sendername, sizeof(sendername));
       			format(string, sizeof(string), "** %s is in need of a Pizza. (use /accept Pizza to accept the call)", sendername);
       			SendJobMessage(17, COLOR_LIGHTBLUE, string);
       			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have ordered a Pizza, wait for a reply.");
       			PizzaCall = playerid;
       			return 1;
   			}
			else if(strcmp(x_nr,"bus",true) == 0)
			{
			    new routezonecheck = IsInBusrouteZone(playerid);
				new drivercount = 0;
				if (routezonecheck == 0)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteEast[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "There are currently %d bus drivers on the east route. The route is as follows:", drivercount);
						SendClientMessage(playerid, TEAM_AZTECAS_COLOR, string);
						SendClientMessage(playerid, TEAM_AZTECAS_COLOR, " ");
						SendBusRoute(playerid, 0);
					}
					else SendClientMessage(playerid, COLOR_GREY, "There are no bus drivers on the east route at this time.");
				}
				else if (routezonecheck == 1)
				{
					for (new i=0; i<=MAX_PLAYERS; i++)
					{
						if (IsPlayerConnected(i) && BusrouteWest[i][0] != 0) drivercount++;
					}
					if (drivercount != 0)
					{
						format(string, sizeof(string), "There are currently %d bus drivers on the west route. The route is as follows:", drivercount);
						SendClientMessage(playerid, TEAM_AZTECAS_COLOR, string);
						SendBusRoute(playerid, 1);
					}
					else SendClientMessage(playerid, COLOR_GREY, "There are no bus drivers on the west route at this time.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "No bus services are running in this area at the current time.");
		    	return 1;
			}
			else if(strcmp(x_nr,"medic",true) == 0)
			{
			    if(Medics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   There are no Medics On Duty at the moment, try again later !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s is in need of a Medic. (use /accept medic to accept the call)", sendername);
		    	SendRadioMessage(4, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have called for a Medic, wait for a reply.");
		    	MedicCall = playerid;
		    	return 1;
			}
			else if(strcmp(x_nr,"mechanic",true) == 0)
			{
			    if(Mechanics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   There are no Car Mechanics On Duty at the moment, try again later !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s is in need of a Car Mechanic. (use /accept mechanic to accept the call)", sendername);
		    	SendJobMessage(7, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have called for a Car Mechanic, wait for a reply.");
		    	MechanicCall = playerid;
		    	return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Unknown service name !");
			    return 1;
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/servicio", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREEN, "____________Lista Numeros Servicios____________");
	    	SendClientMessage(playerid, COLOR_WHITE, "111 - Pizzas, 222 - Autobus, 444 - taxi,");
			SendClientMessage(playerid, COLOR_WHITE, "555 - Mecanico, 3900 - CNN estudio, 911 - Emergencias");
			SendClientMessage(playerid, COLOR_GREEN, "____________________________________________");
			return 1;
	    }
	    return 1;
	}
	if(strcmp(cmd, "/servicios", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREEN, "____________Lista Numeros Servicios____________");
	    	SendClientMessage(playerid, COLOR_WHITE, "111 - Pizzas, 222 - Autobus, 444 - taxi,");
			SendClientMessage(playerid, COLOR_WHITE, "555 - Mecanico, 3900 - CNN estudio, 911 - Emergencias");
			SendClientMessage(playerid, COLOR_GREEN, "____________________________________________");
			return 1;
	    }
	    return 1;
	}
	if(strcmp(cmd, "/llamarlist", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREEN, "____________Lista Numeros Servicios____________");
	    	SendClientMessage(playerid, COLOR_WHITE, "111 - Pizzas, 222 - Autobus, 444 - taxi, 103 - Medico");
			SendClientMessage(playerid, COLOR_WHITE, "555 - Mecanico, 3900 - CNN estudio, 911 - Emergencias");
			SendClientMessage(playerid, COLOR_WHITE, "800 - Bomberos");
			SendClientMessage(playerid, COLOR_GREEN, "____________________________________________");
			return 1;
	    }
	    return 1;
	}
	if(strcmp(cmd, "/atar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(Rope[playerid] != 0)
			{
			    if(PlayerInfo[playerid][pLevel] < 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Necesitas nivel 2 ! ");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /atar [ID o Nombre]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    if(PlayerTied[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Ya esta atado !");
					        return 1;
					    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new car = GetPlayerVehicleID(playerid);
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "No te puedes atar a ti mismo!"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
						    {
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Fuiste atado por %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* Ataste a %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s saca una cuerda del bajo del asiento.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								format(string, sizeof(string), "* %s intenta atar con una cuerda a %s y lo consigue.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
								GameTextForPlayer(giveplayerid, "~r~ESTAS ATADO", 2500, 3);
								TogglePlayerControllable(giveplayerid, 0);
								PlayerTied[giveplayerid] = 1;
								Rope[playerid]--;
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   No estas tu o la victima en el coche !");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Jugador muy lejano !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Desconectado !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No tienes una cuerda !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/desatar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /desatar [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "No te puedes desatar a ti mismo!"); return 1; }
						if(PlayerTied[giveplayerid])
						{
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Has sido desatado por %s.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Desataste a %s.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							GameTextForPlayer(giveplayerid, "~g~ESTAS DESATADO", 2500, 3);
							TogglePlayerControllable(giveplayerid, 1);
							PlayerTied[giveplayerid] = 0;
							format(string, sizeof(string), "* %s le quito el nudo a %s, este ya puede moverse.", sendername, giveplayer);
      						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      						Rope[playerid]++;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   No esta atado !");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Esta demasiado lejos !");
					    return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Desconectado !");
			    return 1;
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/desvincular", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsACop(playerid))
			{
			    /*if(PlayerInfo[playerid][pRank] < 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You need Rank 3 or higher to untie people !");
			        return 1;
			    }*/
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /desvincular [Id del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "No puedes desatarte a ti mismo!"); return 1; }
							if(PlayerTied[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Has sido desatado por %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* Esta desatado %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								GameTextForPlayer(giveplayerid, "~g~Desatado", 2500, 3);
								TogglePlayerControllable(giveplayerid, 1);
								PlayerTied[giveplayerid] = 0;
								format(string, sizeof(string), "* %s desata a %s.", sendername, giveplayer);
      							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta atado !");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca tulla !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres un policia !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/vender", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Vender __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /vender [nombre]");
		  		SendClientMessage(playerid, COLOR_GREY, "Nombres disponibles: pescado, Cooked");
				SendClientMessage(playerid, COLOR_WHITE, "|_____________________________________________|");
				return 1;
			}
		    if(strcmp(x_nr,"pescado",true) == 0)
			{
			    if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53))//centerpoint 24-7
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   No estas en un 24-7 !");
					return 1;
				}
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /vender pescado [numero]");
					return 1;
				}
				new price;
				new fishid = strval(tmp);
				if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   En tu mochila solo puede haber de 1 a 5 peces !"); return 1; }
				else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No hay ningun pez en el hueco(1) !"); return 1; }
				else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No hay ningun pez en el hueco(2) !"); return 1; }
				else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No hay ningun pez en el hueco(3) !"); return 1; }
				else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No hay ningun pez en el hueco(4) !"); return 1; }
				else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No hay ningun pez en el hueco(5) !"); return 1; }
				//ConsumingMoney[playerid] = 1;
				switch (fishid)
				{
				    case 1:
				    {
				        if(Fishes[playerid][pWeight1] < 0)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Es posible que este pez pese menos que nada?.");
				            return 1;
				        }
                        price = FishCost(playerid, Fishes[playerid][pFid1]) / 3; //original// price = FishCost(playerid, Fishes[playerid][pFid1]) / 3;
                        price = price * Fishes[playerid][pWeight1] / 5; //original// price = price * Fishes[playerid][pWeight1] / 3;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price; //original// new skill = price / 800;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Pescado~n~~r~Vendido", 3000, 1);
                        format(string, sizeof(string), "* Vendiste tu %s de %d Kg, por $%d .", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 1);
				    }
				    case 2:
				    {
				        if(Fishes[playerid][pWeight2] < 0)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Es posible que este pez pese menos que nada?");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid2]) / 3;
                        price = price * Fishes[playerid][pWeight2] / 5;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Pescado~n~~r~Vendido", 3000, 1);
                        format(string, sizeof(string), "* Vendiste tu %s de %d Kg, por $%d .", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 2);
				    }
				    case 3:
				    {
				        if(Fishes[playerid][pWeight3] < 0)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Es posible que este pez pese menos que nada?");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid3]) / 3;
                        price = price * Fishes[playerid][pWeight3] / 5;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Pescado~n~~r~Vendido", 3000, 1);
                        format(string, sizeof(string), "* Vendiste tu %s de %d Kg, por $%d .", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 3);
				    }
				    case 4:
				    {
				        if(Fishes[playerid][pWeight4] < 0)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Es posible que este pez pese menos que nada?");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid4]) / 3;
                        price = price * Fishes[playerid][pWeight4] / 5;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Pescado~n~~r~Vendido", 3000, 1);
                        format(string, sizeof(string), "* Vendiste tu %s de %d Kg, por $%d .", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 4);
				    }
				    case 5:
				    {
				        if(Fishes[playerid][pWeight5] < 0)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Es posible que este pez pese menos que nada?");
				            return 1;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid5]) / 3;
                        price = price * Fishes[playerid][pWeight5] / 5;
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price;
				            new payout = (skill)*(1);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Pescado~n~~r~Vendido", 3000, 1);
                        format(string, sizeof(string), "* Vendiste tu %s de %d Kg, por $%d .", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, price);
						ClearFishID(playerid, 5);
				    }
				}
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				return 1;
			}
			else if(strcmp(x_nr,"cooked",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /vender cooked [cooknumber] [ID o Nombre]");
					return 1;
				}
				new cookid = strval(tmp);
				if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Cook number cant be below 1 or above 5 !"); return 1; }
				else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(1) !"); return 1; }
				else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(2) !"); return 1; }
				else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(3) !"); return 1; }
				else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(4) !"); return 1; }
				else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(5) !"); return 1; }
				tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /vender cooked [cooknumber] [ID o Nombre]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
				        switch(cookid)
				        {
							case 1:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   That player has no space left in his Cooking List !");
							        return 1;
							    }
							}
							case 2:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   That player has no space left in his Cooking List !");
							        return 1;
							    }
							}
							case 3:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   That player has no space left in his Cooking List !");
							        return 1;
							    }
							}
							case 4:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   That player has no space left in his Cooking List !");
							        return 1;
							    }
							}
							case 5:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "* %s has given you %s weighting %d (use /cooked to see it).",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_WHITE, string);
								    format(string, sizeof(string), "* You gave %s weighting %d to %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_WHITE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   That player has no space left in his Cooking List !");
							        return 1;
							    }
							}
				        }//switch
				        ClearCookingID(playerid, cookid);
				    }//invalid giveplayerid
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Unknown Selling Name !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/precio",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 24)
			{
				if(TransportDuty[playerid] > 0)
				{
				    if(TransportDuty[playerid] == 1)
				    {
				        TaxiDrivers -= 1;
				    }
				    else if(TransportDuty[playerid] == 2)
				    {
				        BusDrivers -= 1;
				    }
				    TransportDuty[playerid] = 0;
					format(string, sizeof(string), "* Ahora no estas de servicio ganas $%d.", TransportMoney[playerid]);
					SendClientMessage(playerid, COLOR_WHITE, string);
					SafeGivePlayerMoney(playerid, TransportMoney[playerid]);
					/*ConsumingMoney[playerid] = 1;*/ TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
					return 1;
				}
				new Veh = GetPlayerVehicleID(playerid);
				if(Veh == 26 || Veh == 27 || Veh == 28 || Veh == 29 || Veh == 30 || Veh == 31)
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "COMANDO: /precio [cantidad]");
							return 1;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 999) { SendClientMessage(playerid, COLOR_GREY, "   El precio debe de ser entre $1 y $999 !"); return 1; }
					    TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "[Informacion] Taxista %s de servicio, /llamar 444 para solicitarlo. Precio: $%d.", sendername, TransportValue[playerid]);
	    				OOCNews(0xEDCA29AA,string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   No eres taxista !");
					    return 1;
					}
				}
				else if(Veh == 32 || Veh == 654)
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "COMANDO: /precio [cantidad]");
							return 1;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 99999) { SendClientMessage(playerid, COLOR_GREY, "   El precio debe de ser entre $1 y $99999 !"); return 1; }
					    BusDrivers += 1; TransportDuty[playerid] = 2; TransportValue[playerid]= moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "[Información] Conductor de Autobus %s de servicio, Precio: $%d.", sendername, TransportValue[playerid]);
	    				OOCNews(TEAM_GROVE_COLOR,string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   No eres el conductor");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Yo estás en un Taxi / Bus");
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GREY,"   No eres un conductor de Taxi / Bus");
			    return 1;
			}
	    }
	    return 1;
 	}
 	if(strcmp(cmd,"/eat",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Cant eat a Fish while you are fighting !");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /eat [cook number]");
				return 1;
			}
			new cookid = strval(tmp);
			if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Cook number cant be below 1 or above 5 !"); return 1; }
			else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(1) !"); return 1; }
			else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(2) !"); return 1; }
			else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(3) !"); return 1; }
			else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(4) !"); return 1; }
			else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even Cook something at that number(5) !"); return 1; }
            GetPlayerName(playerid, sendername, sizeof(sendername));
			new Float:health;
			if(GetPlayerHealth(playerid, health) < 40)
			{
			    new hp = 0;
			    switch (cookid)
			    {
					case 1:
					{
					    if(Cooking[playerid][pCookID1] == 16 || Cooking[playerid][pCookID1] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight1] / 3));
					    hp = Cooking[playerid][pCWeight1];
					    format(string, sizeof(string), "* %s eats %s.", sendername, Cooking[playerid][pCook1]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook1], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 2:
					{
					    if(Cooking[playerid][pCookID2] == 16 || Cooking[playerid][pCookID2] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight2] / 3));
					    hp = Cooking[playerid][pCWeight2];
					    format(string, sizeof(string), "* %s eats %s.", sendername, Cooking[playerid][pCook2]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook2], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 3:
					{
					    if(Cooking[playerid][pCookID3] == 16 || Cooking[playerid][pCookID3] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight3] / 3));
					    hp = Cooking[playerid][pCWeight3];
					    format(string, sizeof(string), "* %s eats %s.", sendername, Cooking[playerid][pCook3]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook3], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 4:
					{
					    if(Cooking[playerid][pCookID4] == 16 || Cooking[playerid][pCookID4] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight4] / 3));
					    hp = Cooking[playerid][pCWeight4];
					    format(string, sizeof(string), "* %s eats %s.", sendername, Cooking[playerid][pCook4]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook4], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					case 5:
					{
					    if(Cooking[playerid][pCookID5] == 16 || Cooking[playerid][pCookID5] == 18)
						{//Dolphin or Turtle
						    WantedPoints[playerid] += 2;
							SetPlayerCriminal(playerid,255, "Consuming endangered Species");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight5] / 3));
					    hp = Cooking[playerid][pCWeight5];
					    format(string, sizeof(string), "* %s eats %s.", sendername, Cooking[playerid][pCook5]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* You ate %s weighting %d, and it was added to your Health.",Cooking[playerid][pCook5], hp);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
			    }
				ClearCookingID(playerid, cookid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Your health is high enough, can only eat at 40 Health !");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmdtext, "/comida",true)==0) //by magec
 	{
		if (PlayerToPoint(3, playerid,1812.7332,-1842.1777,13.5781) || PlayerToPoint(3, playerid,2233.2932,-1741.7515,13.5518) || PlayerToPoint(3, playerid,1706.2594,-1722.2362,13.5533) || PlayerToPoint(3, playerid,1540.0558,-1721.9956,13.5546) || PlayerToPoint(3, playerid,1252.2681,-1413.7200,13.4105) || PlayerToPoint(3, playerid,1589.7230,-1288.4901,17.5130))
     	{
     	   if (GetPlayerMoney(playerid) > 249)
		    {
  		     SetPlayerHealth(playerid, 100);
             SafeGivePlayerMoney(playerid,-350);
             GetPlayerName(playerid, sendername, sizeof(sendername));
  		     format(string, sizeof(string), "* Te comes un perrito/helado/churro y recuperas la salud completa");
             SendClientMessage(playerid, COLOR_WHITE, string);
  		     format(string, sizeof(string), "* %s se come un perrito/helado/churro.", sendername);
  	       	 ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  	       	 ApplyAnimation(playerid,"FOOD","EAT_BURGER",4.1,0,1,1,1,1);
		     return 1;
		     }
		     else
		     {
				SendClientMessage(playerid, COLOR_WHITE, "   No tienes suficiente dinero !");
				return 1;
		      }
		}
        else
        {
         SendClientMessage(playerid, COLOR_GREY, "  No estas en un puesto de perritos/helados/churros!");
         return 1;
        }
	}
	if(strcmp(cmdtext, "/comerpizza",true)==0) //added
 	{
		if (bPizza[playerid] != 1)
     	{
			SendClientMessage(playerid, COLOR_GREY, "   no tienes una pizza, usa: /llamar 111");
         	return 1;
  		}
  		SetPlayerHealth(playerid, 150);
  		GetPlayerName(playerid, sendername, sizeof(sendername));
  		format(string, sizeof(string), "* Te comes una pizza , ahora te sientes mejor");
  		SendClientMessage(playerid, COLOR_WHITE, string);
  		format(string, sizeof(string), "* %s saca una pizza de la caja y se la come.", sendername);
  		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  		bPizza[playerid] = 0;
		return 1;
	}
	if(strcmp(cmd, "/darpizza", true) ==0)
	{
    	if (PlayerInfo[playerid][pJob] == 17)
     	{
   			if (sPizza[playerid] == 1)
      		{
    			tmp = strtok(cmdtext, idx);
    			if(!strlen(tmp))
    			{
     				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /darpizza [ID o Nombre]");
     				return 1;
    			}
    			giveplayerid = ReturnUser(tmp);
    			if(IsPlayerConnected(giveplayerid))
    			{
        			if(giveplayerid != INVALID_PLAYER_ID)
        			{
            			if (ProxDetectorS(8.0, playerid, giveplayerid))
          				{
       						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
       						GetPlayerName(playerid, sendername, sizeof(sendername));
       						format(string, sizeof(string), "* Ofreces una pizza a %s", giveplayer);
       						SendClientMessage(playerid, COLOR_WHITE, string);
       						format(string, sizeof(string), "* El pizzero %s te ha dado una pizza usa: /comerpizza", sendername);
       						SendClientMessage(giveplayerid, COLOR_WHITE, string);
       						format(string, sizeof(string), "* %s saca una pizza del maletero y se la da a %s", sendername ,giveplayer);
       						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
       						bPizza[giveplayerid] = 1;
       						sPizza[playerid] = 0;
      					}
      					else
          				{
              				SendClientMessage(playerid, COLOR_GREY, "   Este jugador esta muy lejos!");
              				return 1;
      					}
     				}
    			}
    			return 1;
			}
   			else
   			{
    			SendClientMessage(playerid, COLOR_GREY, "   Deves tomar primero las pizzas en la pizzeria!");
   			}
  		}
		return 1;
 	}
 	if(strcmp(cmd,"/cook",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(IsAtCookPlace(playerid))
	        {
	            new x_nr[256];
	            x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /cook [name]");
					SendClientMessage(playerid, COLOR_WHITE, "Available names: Lastfish, Fish, Chicken, Hamburger, Pizza.");
					return 1;
				}
				if(strcmp(x_nr,"lastfish",true) == 0)
				{
				    if(Fishes[playerid][pLastFish] > 0)
	        		{
					    new found = 0;
					    if(Cooking[playerid][pCWeight1] == 0)
					    {
						    format(string, sizeof(string), "A Cooked %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight2] == 0)
					    {
						    format(string, sizeof(string), "A Cooked %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight3] == 0)
					    {
						    format(string, sizeof(string), "A Cooked %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight3] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID3] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight4] == 0)
					    {
						    format(string, sizeof(string), "A Cooked %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight4] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID4] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight5] == 0)
					    {
						    format(string, sizeof(string), "A Cooked %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight5] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID5] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						    found = 1;
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   You don't have any space in your Cooking List !");
					        return 1;
					    }
					    if(found)
					    {
					        ClearFishID(playerid, Fishes[playerid][pLastFish]);
				            Fishes[playerid][pLastFish] = 0;
				            Fishes[playerid][pFishID] = 0;
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   You haven't even catched a Fish yet !");
				        return 1;
				    }
				}
				else if(strcmp(x_nr,"fish",true) == 0)
				{
				    new found = 0;
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /cook fish [fishnumber]");
						return 1;
					}
					new fishid = strval(tmp);
					if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Fish number cant be below 1 or above 5 !"); return 1; }
					else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(1) !"); return 1; }
					else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(2) !"); return 1; }
					else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(3) !"); return 1; }
					else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(4) !"); return 1; }
					else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(5) !"); return 1; }
					if(Cooking[playerid][pCWeight1] == 0)
					{
					    if(fishid == 1)
					    {
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish1]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight1];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid1];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
					    	SendClientMessage(playerid,COLOR_WHITE, string);
					    }
						else if(fishid == 2)
					 	{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight2] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID2] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_WHITE, string);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight3] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
    					}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						found = 1;
   					}
					else if(Cooking[playerid][pCWeight4] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_WHITE, string);
    					}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight5] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "A Cooked %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_WHITE, string);
			    		}
						found = 1;
   					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   You don't have any space in your Cooking List !");
					    return 1;
		    		}
					if(found)
					{
					    ClearFishID(playerid, fishid);
						Fishes[playerid][pLastFish] = 0;
			   			Fishes[playerid][pFishID] = 0;
					}
				}
				else if(strcmp(x_nr,"chicken",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
				    {//Cluckin Bell
				        if(Groceries[playerid][pChicken] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "A Cooked Chicken");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "A Cooked Chicken");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "A Cooked Chicken");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "A Cooked Chicken");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "A Cooked Chicken");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   You don't have any space in your Cooking List !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   You don't have any Chickens with you !");
				            return 1;
				        }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   You need to be at Cluckin Bell to Cook this !");
					    return 1;
				    }
				}
				else if(strcmp(x_nr,"hamburger",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
					{//Burgershot
					    if(Groceries[playerid][pHamburger] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "A Baken Hamburger");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "A Baken Hamburger");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "A Baken Hamburger");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "A Baken Hamburger");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "A Baken Hamburger");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   You don't have any space in your Cooking List !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   You don't have any Hamburgers with you !");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   You need to be at Burger Shot to Cook this !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"pizza",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
					{//Well Stacked Pizza
					    if(Groceries[playerid][pPizza] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "A Baken Pizza");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "A Baken Pizza");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "A Baken Pizza");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "A Baken Pizza");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "A Baken Pizza");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* You've made %s, weighting %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_WHITE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   You don't have any space in your Cooking List !");
						        return 1;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   You don't have any Pizzas with you !");
				            return 1;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   You need to be at Well Stacked Pizza to Cook this !");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Invalid Cooking Name !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are not at one of the Cooking Places (Cluckin Bell / Burger Shot / Well Stacked Pizza).");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd,"/cooked",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Cooking __________________|");
	        format(string, sizeof(string), "** (1) Made: %s.   Weight: %d.", Cooking[playerid][pCook1], Cooking[playerid][pCWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (2) Made: %s.   Weight: %d.", Cooking[playerid][pCook2], Cooking[playerid][pCWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (3) Made: %s.   Weight: %d.", Cooking[playerid][pCook3], Cooking[playerid][pCWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (4) Made: %s.   Weight: %d.", Cooking[playerid][pCook4], Cooking[playerid][pCWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (5) Made: %s.   Weight: %d.", Cooking[playerid][pCook5], Cooking[playerid][pCWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		}
	    return 1;
 	}
	if(strcmp(cmd,"/pescar",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFishTool] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No tienes utensilios de pesca !");
			    return 1;
			}
			if(PlayerInfo[playerid][pLevel] < 6)
  	        {
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 6 para poder pescar.");
                    return 1;
            }
			if(sinmoverpesca[playerid] == 1) // by DryilZas
  			{
	            	SendClientMessage(playerid, COLOR_WHITE, "   Estas tomando carrete ! Espera....");
	            	return 1;
  			}
         	/*if(PlayerInfo[playerid][pFishes] > 5)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Caught to many fish, wait till its reduced !");
	            return 1;
	        }*/
	        if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Suelta algun pez antes de seguir, o vendelos.");
	            return 1;
	        }
	        new Veh = GetPlayerVehicleID(playerid);
	        if((IsAtFishPlace(playerid)) || IsABoat(Veh))
	        {
	            new Caught;
	            new rand;
	            new fstring[MAX_PLAYER_NAME];
	            new Level = PlayerInfo[playerid][pFishSkill];
	            if(Level >= 0 && Level <= 50) { Caught = random(20)-7; }
	            else if(Level >= 51 && Level <= 100) { Caught = random(50)-20; }
	            else if(Level >= 101 && Level <= 200) { Caught = random(100)-50; }
	            else if(Level >= 201 && Level <= 400) { Caught = random(160)-60; }
	            else if(Level >= 401) { Caught = random(180)-70; }
	            rand = random(FishNamesNumber);
	            if(Caught <= 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No pican...");
	                return 1;
	            }
	            else if(rand == 0)
	            {
	                SendClientMessage(playerid, COLOR_LIGHTRED, "   Se te engancha un billete de 5 $ y lo tiras al mar.");
	                SafeGivePlayerMoney(playerid, -5);
	                return 1;
	            }
	            else if(rand == 4)
	            {
	                SendClientMessage(playerid, COLOR_LIGHTRED, "   Tiras tan fuerte que partes la caña de pescar !!.");
	                PlayerInfo[playerid][pFishTool] = 0;
	                return 1;
	            }
	            else if(rand == 7)
	            {
	                SendClientMessage(playerid, COLOR_LIGHTGREEN, "   Pescas un billete de 5$, que suerte.");
					SafeGivePlayerMoney(playerid, 5);
	                return 1;
	            }
	            else if(rand == 10)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Pescas un pez demasiado chico y lo devuelves al mar.");
	                return 1;
	            }
	            else if(rand == 11)
	            {
	                TogglePlayerControllable(playerid, 0);
					ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0);
					SetTimerEx("ClearKnock", 30000, false, "i", playerid);
					KnockedDown[playerid] = 1;
					SendClientMessage(playerid, COLOR_LIGHTRED, "   Pescas una medusa, esta te pica, y te deja KO !!.");
	                return 1;
	            }
	            else if(rand == 13)
	            {
	                SendClientMessage(playerid, COLOR_LIGHTGREEN, "   Pescas una revista porno y te la guardas en la cesta.");
	                return 1;
	            }
	            else if(rand == 20)
	            {
	                new mrand = random(50);
	                format(string, sizeof(string), "* Pescas una cartera, con $%d, que suerte.", mrand);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	                SafeGivePlayerMoney(playerid, mrand);
	                return 1;
	            }
		        if(PlayerInfo[playerid][pFishLic] < 1)
		        {
	            	WantedPoints[playerid] += 1;
					SetPlayerCriminal(playerid,255, "Pescar sin Licencia");
				}
		        if(Fishes[playerid][pWeight1] == 0)
		        {
		        	PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight1] = Caught;
					format(string, sizeof(string), "* Pescas un %s, de %d Kg de peso.", Fishes[playerid][pFish1], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 1;
					Fishes[playerid][pFid1] = rand;
					Fishes[playerid][pFishID] = rand;
					sinmoverpesca[playerid] = 1; // by DryilZas
  					SetTimerEx("tiemponopesca", 10000, false, "i", playerid);
  					GameTextForPlayer(playerid, "~w~Recargando hilo...", 9500, 4);
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Superas tu record de %d Kg. Nuevo RECORD: %d Kg.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
     			}
		        else if(Fishes[playerid][pWeight2] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight2] = Caught;
					format(string, sizeof(string), "* Pescas un %s, de %d Kg de peso.", Fishes[playerid][pFish2], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 2;
					Fishes[playerid][pFid2] = rand;
					Fishes[playerid][pFishID] = rand;
					sinmoverpesca[playerid] = 1; // by DryilZas
  					SetTimerEx("tiemponopesca", 10000, false, "i", playerid);
  					GameTextForPlayer(playerid, "~w~Recargando hilo...", 9500, 4);
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Superas tu record de %d Kg. Nuevo RECORD: %d Kg.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight3] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight3] = Caught;
					format(string, sizeof(string), "* Pescas un %s, de %d Kg de peso.", Fishes[playerid][pFish3], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 3;
					Fishes[playerid][pFid3] = rand;
					Fishes[playerid][pFishID] = rand;
					sinmoverpesca[playerid] = 1; // by DryilZas
  					SetTimerEx("tiemponopesca", 10000, false, "i", playerid);
  					GameTextForPlayer(playerid, "~w~Recargando hilo...", 9500, 4);
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Superas tu record de %d Kg. Nuevo RECORD: %d Kg.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight4] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight4] = Caught;
					format(string, sizeof(string), "* Pescas un %s, de %d Kg de peso.", Fishes[playerid][pFish4], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 4;
					Fishes[playerid][pFid4] = rand;
					Fishes[playerid][pFishID] = rand;
					sinmoverpesca[playerid] = 1; // by DryilZas
  					SetTimerEx("tiemponopesca", 10000, false, "i", playerid);
  					GameTextForPlayer(playerid, "~w~Recargando hilo...", 9500, 4);
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Superas tu record de %d Kg. Nuevo RECORD: %d Kg.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight5] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight5] = Caught;
					format(string, sizeof(string), "* Pescas un %s, de %d Kg de peso.", Fishes[playerid][pFish5], Caught);
					SendClientMessage(playerid, COLOR_WHITE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 5;
					Fishes[playerid][pFid5] = rand;
					Fishes[playerid][pFishID] = rand;
					sinmoverpesca[playerid] = 1; // by DryilZas
  					SetTimerEx("tiemponopesca", 10000, false, "i", playerid);
  					GameTextForPlayer(playerid, "~w~Recargando hilo...", 9500, 4);
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Superas tu record de %d Kg. Nuevo RECORD: %d Kg.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   No puedes guardar mas peces !");
		            return 1;
		        }
	            if(PlayerInfo[playerid][pFishSkill] == 51)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu nivel de pesca es ahora 2, podras pescar peces mas pesados."); }
				else if(PlayerInfo[playerid][pFishSkill] == 101)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu nivel de pesca es ahora 3, podras pescar peces mas pesados."); }
				else if(PlayerInfo[playerid][pFishSkill] == 201)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu nivel de pesca es ahora 4, podras pescar peces mas pesados."); }
				else if(PlayerInfo[playerid][pFishSkill] == 401)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu nivel de pesca es ahora 5, podras pescar peces mas pesados."); }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Solo puedes pescar en el puesto de pesca o en barcos !");
	            return 1;
	        }
	    }
	    return 1;
 	}
	if(strcmp(cmd,"/peces",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Peces  __________________|");
	        format(string, sizeof(string), "** (1) Pez: %s.   Peso: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (2) Pez: %s.   Peso: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (3) Pez: %s.   Peso: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (4) Pez: %s.   Peso: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (5) Pez: %s.   Peso: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		}
	    return 1;
 	}
 	if(strcmp(cmd,"/soltarpez",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /soltarpez [numero]");
				return 1;
			}
			new fishid = strval(tmp);
			if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Solo hay de 1 a 5 peces !"); return 1; }
			else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No tienes ningun pez en el hueco(1) !"); return 1; }
			else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No tienes ningun pez en el hueco(2) !"); return 1; }
			else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No tienes ningun pez en el hueco(3) !"); return 1; }
			else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No tienes ningun pez en el hueco(4) !"); return 1; }
			else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   No tienes ningun pez en el hueco(5) !"); return 1; }
			ClearFishID(playerid, fishid);
			SendClientMessage(playerid, COLOR_GREY, "   Has soltado ese pez !");
			Fishes[playerid][pLastFish] = 0;
   			Fishes[playerid][pFishID] = 0;
		}
		return 1;
	}
 	if(strcmp(cmd,"/soltarultimo",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pLastFish] > 0)
	        {
	            ClearFishID(playerid, Fishes[playerid][pLastFish]);
	            Fishes[playerid][pLastFish] = 0;
	            Fishes[playerid][pFishID] = 0;
	            SendClientMessage(playerid, COLOR_GREY, "   Soltaste el ultimo pez pescado!");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No has pescado mas peces !");
	            return 1;
	        }
	    }
	    return 1;
 	}
 	if(strcmp(cmd,"/soltartodos",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0)
	        {
	            ClearFishes(playerid);
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				SendClientMessage(playerid, COLOR_GREY, "   Tiraste todos los peces al agua!");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No tienes peces !");
	            return 1;
	        }
	    }
	    return 1;
 	}
	if(strcmp(cmd,"/licencias",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        new text1[20];
	        new text2[20];
	        new text3[20];
	        new text4[20];
	        new text5[20];
	        new text6[20];
	        if(PlayerInfo[playerid][pCarLic]) { text1 = "Ok"; } else { text1 = "---"; }
            if(PlayerInfo[playerid][pFlyLic]) { text4 = "Ok"; } else { text4 = "---"; }
			if(PlayerInfo[playerid][pBoatLic]) { text2 = "Ok"; } else { text2 = "---"; }
	        if(PlayerInfo[playerid][pFishLic]) { text3 = "Ok"; } else { text3 = "---"; }
	        if(PlayerInfo[playerid][pGunLic1]) { text5 = "Ok"; } else { text5 = "---"; }
	        if(PlayerInfo[playerid][pGunLic2]) { text6 = "Ok"; } else { text6 = "---"; }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Licencias __________________|");
	        format(string, sizeof(string), "** Licencia de conducir: %s.", text1);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Licencia de vuelo: %s.", text4);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Licencia de barco: %s.", text2);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Licencia de Pesca: %s.", text3);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Licencia de armas Tipo 1: %s.", text5);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Licencia de armas Tipo 2: %s.", text6);
			SendClientMessage(playerid, COLOR_GREY, string);
			SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________|");
		}
	    return 1;
 	}
 	/*if(strcmp(cmd,"/members",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new teamnumber;
			if (PlayerInfo[playerid][pLeader] != 0) teamnumber = PlayerInfo[playerid][pLeader];
			else if (PlayerInfo[playerid][pMember] != 0) teamnumber = PlayerInfo[playerid][pMember];
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "You are not a member of a team!");
				return 1;
			}
	    	SendClientMessage(playerid, 0x808000AA, "**Members Online**");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i))
				{
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, sizeof(string), "");
					if (PlayerInfo[i][pLeader] == teamnumber) format(string, sizeof(string), "%s (LEADER)",sendername);
					else if (PlayerInfo[i][pMember] == teamnumber) format(string, sizeof(string), "%s, Rank: %d.",sendername, PlayerInfo[i][pRank]);
					if (strlen(string) > 1) SendClientMessage(playerid, 0xF5DEB3AA, string);
				}
			}
		}
		return 1;
	}*/
 	if(strcmp(cmd,"/mostrarlicencias",true)==0 || strcmp(cmd,"/ml",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /mostrarlicencias [ID del jugador]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "No tienes ninguna licencia, para ver tus licencias disponibles usa /licencias."); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20];
				        new text2[20];
				        new text3[20];
				        new text4[20];
				        new text5[20];
				        new text6[20];
						if(PlayerInfo[playerid][pCarLic]) { text1 = "Ok"; } else { text1 = "---"; }
                        if(PlayerInfo[playerid][pFlyLic]) { text4 = "Ok"; } else { text4 = "---"; }

						if(PlayerInfo[playerid][pBoatLic]) { text2 = "Ok"; } else { text2 = "---"; }
				        if(PlayerInfo[playerid][pFishLic]) { text3 = "Ok"; } else { text3 = "---"; }
				        if(PlayerInfo[playerid][pGunLic1]) { text5 = "Ok"; } else { text5 = "---"; }
				        if(PlayerInfo[playerid][pGunLic2]) { text6 = "Ok"; } else { text6 = "---"; }
				        format(string, sizeof(string), "|__________ Licencias de %s __________|", sendername);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "** Coche: %s.", text1);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Vuelo: %s.", text4);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Barco: %s.", text2);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Pesca: %s.", text3);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Armas T1: %s.", text5);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Armas T2: %s.", text6);
						SendClientMessage(giveplayerid, COLOR_GREY, string)
						format(string, sizeof(string), "* %s ojea tus licencias.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Mostraste tus licencias a %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Jugador demasiado lejano !");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   That player is Offline !");
	            return 1;
	        }
		}
	    return 1;
 	}
	if(strcmp(cmd, "/dumpdrugs", true) == 0 || strcmp(cmd, "/dropdrugs", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
		    if(PlayerInfo[playerid][pLevel] > 0)
		    {
		        {
		            if(PlayerInfo[playerid][pDrugs] >= 0)
					{
         			    PlayerInfo[playerid][pDrugs] = 0;
					    GetPlayerName(playerid, sendername, sizeof(sendername));
			            format(string, sizeof(string), "* %s throws the drugs away.", sendername);
			            ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else if(PlayerInfo[playerid][pDrugs] == 0)
					{
					SendClientMessage(playerid, COLOR_GREY, " You dont have any drugs on you!");
					}
				 }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You aren't high enough to get rid of your drugs!");
			}
		}//not connected
		return 1;
	}
 	if(strcmp(cmd,"/cachear",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /cachear [ID del jugador]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "No puedes usar esto contra ti mismo!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20], text2[20], text3[20], text4[20], text5[20], text6[20];
					    if(PlayerInfo[giveplayerid][pDrugs] > 0) { text1 = "| Drogas."; } else { text1 = "| ---."; }
					    if(PlayerInfo[giveplayerid][pMats] > 0) { text2 = "| Materiales."; } else { text2 = "| ---."; }
					    if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0) { text3 = "| Pescados."; } else { text3 = "| ---."; }
					    if(PlayerInfo[giveplayerid][pPhoneBook] > 0) { text4 = "| Guia telefonica."; } else { text4 = "| ---."; }
					    if(PlayerInfo[giveplayerid][pWatch] > 0) { text5 = "| Reloj."; } else { text5 = "| ---."; }
					    new sweapon, sammo;
					    text6 = "| ---.";
					    for (new i=0; i<9; i++)
					    {
					        GetPlayerWeaponData(giveplayerid, i, sweapon, sammo);
					        if(sweapon != 0 && sammo != 0)
					        {
					            text6 = "| Armas.";
					        }
					    }
					    format(string, sizeof(string), "|__________ %s __________|", giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "%s.", text1);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text2);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text3);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text4);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text5);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text6);
						SendClientMessage(playerid, COLOR_GREY, string);
						if(PlayerInfo[giveplayerid][pSex] == 1) { format(string, sizeof(string), "* %s ha cacheado a %s en busca de articulos ilegales .", sendername ,giveplayer); }
						else { format(string, sizeof(string), "* %s ha cacheado a %s en busca de articulos ilegales.", sendername ,giveplayer); }
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ese jugador no está cerca de ti !");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Este jugador esta desconectado !");
	            return 1;
	        }
		}
	    return 1;
 	}
 	if(strcmp(cmd,"/friskinv",true)==0 || strcmp(cmd,"/friskinventory",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: (/friskinv)entory [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot Frisk yourself!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "|__________ %s inventory __________|", giveplayer);
				        SendClientMessage(playerid, COLOR_WHITE, string);
				        if(PlayerInfo[giveplayerid][pInvWeapon] != 0)
				        {
				            new gunname[100];
				            GetWeaponName(PlayerInfo[giveplayerid][pInvWeapon], gunname, sizeof(gunname));
				        	format(string, sizeof(string), "| Weapon: %s, Ammo: %d", gunname, PlayerInfo[giveplayerid][pInvAmmo]);
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "| Inventory is empty.");
						}
						format(string, sizeof(string), "  %s has frisked your inventory.", sendername);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						return 1;
					}
				}
			}
		}
		return 1;
	}
	/*if(strcmp(cmd,"/vendercar",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 10)
			{
			    SendClientMessage(playerid,COLOR_GREY,"   You are not a Car Dealer !");
			    return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid,COLOR_GREY,"   You are not in a Car !");
			    return 1;
			}
			if(IsAnOwnableCar(idcar))
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Use /v sellto to sell you car to other person !");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /vendercar [ID o Nombre] [price]");
				return 1;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /vendercar [ID o Nombre] [price]");
				return 1;
			}
			new money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Price not below $1 or above $99999 !"); return 1; }
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Cant sell to yourself!");
					        return 1;
					    }
					    if(CarCalls[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   That player has already bought a car, has to use /callcar first !");
					        return 1;
					    }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* You offerd %s to buy your Car for $%d .", giveplayer, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Car Dealer %s wants to sell you his Car for $%d, (type /accept car) to buy.", sendername, money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						CarOffer[giveplayerid] = playerid;
						CarPrice[giveplayerid] = money;
						CarID[giveplayerid] = GetPlayerVehicleID(playerid);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is not near you !");
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid ID/Name !");
			    return 1;
			}
	    }
		return 1;
	}*/
	if(strcmp(cmd,"/limosna",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pJob] != 13)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Tu no eres Mendigo!");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAR: /limosna [ID Jugador] [cantidad]");
				return 1;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAR: /limosna [ID Jugador] [cantidad]");
				return 1;
			}
			new money = strval(tmp);
			if(money < 1 || money > 2000) { SendClientMessage(playerid, COLOR_GREY, "   La limosna no puede ser menor de 1 ni mayor de $2000!"); return 1; }
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			       if (ProxDetectorS(8.0, playerid, giveplayerid))
					   {
					       if(giveplayerid == playerid)
					       {
					            SendClientMessage(playerid, COLOR_GREY, "   No puedes pedirte a ti mismo!");
					            return 1;
					       }
					       GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						   GetPlayerName(playerid, sendername, sizeof(sendername));
					       format(string, sizeof(string), "* Tu pides una limosna a %s para poder comer de $%d.", giveplayer, money);
						   SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						   format(string, sizeof(string), "* %s te esta pidiendo una limosna de $%d para ropa o comida,(usar /aceptar limosna).", sendername, money);
						   SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						   BegOffer[giveplayerid] = playerid;
						   BegPrice[giveplayerid] = money;
					    }
					    else
					    {
					            SendClientMessage(playerid, COLOR_GREY, "   El jugador no esta cerca tuya!");
					    }
				 }
    		}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Invalido ID/Nombre!");
			    return 1;
			}
	    }
		return 1;
	}
	if(strcmp(cmd, "/hacerdepobre", true) == 0) // USE PROPER INDENTATION IDIOT
        {
            if(IsPlayerConnected(playerid))
            {
                    if(PlayerInfo[playerid][pJob] != 13)
		            {
	                  SendClientMessage(playerid, COLOR_GREY, "   Tu no eres Mendigo!");
		              return 1;
		            }
                    new x_nr[256];
                    x_nr = strtok(cmdtext, idx);
                    if(!strlen(x_nr))
                    {
                         SendClientMessage(playerid, COLOR_WHITE, "USAR: /hacerdepobre lista, luego poner /hacerdepobre [skin id]");
                         return 1;
                    }
                    if (PlayerToPoint(9.0, playerid,1805.1024,-1806.2402,3.9844) || PlayerToPoint(9.0,playerid,1795.2714,-1803.6616,3.9844))
                                {
                                if(strcmp(x_nr,"lista",true) == 0)

                                        {
                                                SendClientMessage(playerid, COLOR_YELLOW, "_______________Skin_Lista____________");
                                                SendClientMessage(playerid, COLOR_GRAD1, "1: Rasta pobre 2: Hombre Gordo Negro");
                                                SendClientMessage(playerid, COLOR_GRAD2, "3: Vieja Prostituta 4: Vieja");
                                                SendClientMessage(playerid, COLOR_GRAD3, "5: Barbie 6: Tio Feo");
                                                return 1;
                                        }
                                        else if(strcmp(x_nr,"1",true) == 0)
                                        {
                                                SetPlayerSkin(playerid, 136);
                                                SendClientMessage(playerid, COLOR_GRAD2, "YEAH TIO!");
                                                return 1;
                                        }
                                        else if(strcmp(x_nr,"2",true) == 0)
                                        {
                                                SetPlayerSkin(playerid, 182);
                                                SendClientMessage(playerid, COLOR_GRAD2, "Tienes algun Bocadillo?");
                                                return 1;
                                        }
                                        else if(strcmp(x_nr,"3",true) == 0)
                                        {
                                                SetPlayerSkin(playerid, 75);
                                                SendClientMessage(playerid, COLOR_GRAD2, "Necesito un cigarrillo");
                                                return 1;
                                        }
                                        else if(strcmp(x_nr,"4",true) == 0)
                                        {
                                                SetPlayerSkin(playerid, 197);
                                                SendClientMessage(playerid, COLOR_GRAD2, "Kojuk Kojuk!");
                                                return 1;
                                        }
                                        else if(strcmp(x_nr,"5",true) == 0)
                                        {
                                                SetPlayerSkin(playerid, 199);
                                                SendClientMessage(playerid, COLOR_GRAD2, "Donde esta mi Ken?");
                                                return 1;
                                        }
                                        else if(strcmp(x_nr,"6",true) == 0)
                                        {
                                                SetPlayerSkin(playerid, 162);
                                                SendClientMessage(playerid, COLOR_GRAD2, "Muahaha");
                                                return 1;
                                        }
                                }
                                else
                                {
                                    SendClientMessage(playerid, COLOR_GRAD2, "Necesitas estar debajo de tu puente para cojer la ropa!");
                                    return 1;
                                }
                 }
			return 1;
    }
	if(strcmp(cmd,"/portatil",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		    {
			    if(ConnectedToPC[playerid] == 255)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Has apagado tu portatil.");
			        ConnectedToPC[playerid] = 0;
			        return 1;
			    }
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    SendClientMessage(playerid, COLOR_GREY, "* Enciendes tu portatil, y miras el menu de la agencia.");
			    SendClientMessage(playerid, COLOR_WHITE, "|___ Agencia Hitman ___|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Nots");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Encargosh");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Darenca");
			    //SendClientMessage(playerid, COLOR_YELLOW2, "| - Envio");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Rango");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Apagar");
				SendClientMessage(playerid, COLOR_WHITE, "|_________________|00:00|");
				ConnectedToPC[playerid] = 255;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres un Hitman !");
		        return 1;
		    }
		}
	    return 1;
	}
	if(strcmp(cmd, "/robar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLeader] == 8
			|| PlayerInfo[playerid][pMember] == 8
			|| PlayerInfo[playerid][pMember] == 5
			|| PlayerInfo[playerid][pLeader] == 5
			|| PlayerInfo[playerid][pMember] == 14
			|| PlayerInfo[playerid][pLeader] == 14
			|| PlayerInfo[playerid][pMember] == 15
			|| PlayerInfo[playerid][pLeader] == 15
			|| PlayerInfo[playerid][pMember] == 6
			|| PlayerInfo[playerid][pLeader] == 6
			|| PlayerInfo[playerid][pMember] == 16
			|| PlayerInfo[playerid][pLeader] == 16
			|| PlayerInfo[playerid][pMember] == 17
			|| PlayerInfo[playerid][pLeader] == 17
			|| PlayerInfo[playerid][pMember] == 18
			|| PlayerInfo[playerid][pLeader] == 18
			|| PlayerInfo[playerid][pMember] == 20
			|| PlayerInfo[playerid][pLeader] == 20)
	        {
	            if(PlayerInfo[playerid][pRank] < 4)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Necesitas el nivel 3 de tu faccion");
	                return 1;
	            }
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|______________ Steal Victim's Items _______________|");
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /robar [objeto] [ID o Nombre]");
			  		SendClientMessage(playerid, COLOR_GREY, "Objetos: Tlf, Arma, Tazer");
					SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________________|");
					return 1;
				}
			    if(strcmp(x_nr,"tlf",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /robar tlf [ID del jugador]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if (PlayerInfo[giveplayerid][pTraderPerk] == 1)
					{
			    		SendClientMessage(playerid, COLOR_LIGHTRED, "No puedes robarle a este !");
			    		return 1;
					}
					if(IsPlayerConnected(giveplayerid))
					{
					
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(3.0, playerid, giveplayerid))
							{
							    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "    No puedes robarte tu telefono!"); return 1; }
						        format(string, sizeof(string), "* Le has roto el telefono a %s.", giveplayer);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* %s Te ha roto el telefono.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pPnumber] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Esta demasiado lejos!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Esta desconectado !");
					    return 1;
					}
				}
				if(strcmp(x_nr,"tazer",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /robar tazer [ID del jugador]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if (PlayerInfo[giveplayerid][pTraderPerk] == 1)
					{
			    		SendClientMessage(playerid, COLOR_LIGHTRED, "No puedes robarle a este !");
			    		return 1;
					}
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(3.0, playerid, giveplayerid))
							{
							    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "    No puedes robaste a ti mismo!"); return 1; }
						        format(string, sizeof(string), "* Le has roto el tazer a %s.", giveplayer);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Te han roto el tazer.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        SinTazer[playerid] = 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Esta demasiado lejos!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Esta desconectado !");
					    return 1;
					}
				}
				else if(strcmp(x_nr,"arma",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /robar arma [Id del jugador]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if (PlayerInfo[giveplayerid][pTraderPerk] == 1)
					{
			    		SendClientMessage(playerid, COLOR_LIGHTRED, "No puedes robarle a este !");
			    		return 1;
					}
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(3.0, playerid, giveplayerid))
							{
							    new gunID = GetPlayerWeapon(giveplayerid);
            					new gunAmmo = GetPlayerAmmo(giveplayerid);
							    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "    No puedes robarte a a ti mismo!"); return 1; }
						        format(string, sizeof(string), "* Te has apoderado de las armas de %s.", giveplayer);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "* Te han quitado las armas.", sendername);
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        SafeResetPlayerWeapons(giveplayerid);
						        ResetPlayerWeapons(giveplayerid);
						        SafeGivePlayerWeapon(playerid, gunID, gunAmmo);
						        /*PlayerInfo[giveplayerid][pGun1] = 0; PlayerInfo[giveplayerid][pAmmo1] = 0;
						        PlayerInfo[giveplayerid][pGun2] = 0; PlayerInfo[giveplayerid][pAmmo2] = 0;
						        PlayerInfo[giveplayerid][pGun3] = 0; PlayerInfo[giveplayerid][pAmmo3] = 0;
						        PlayerInfo[giveplayerid][pGun4] = 0; PlayerInfo[giveplayerid][pAmmo4] = 0;*/
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca de ti!");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado!");
					    return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Objeto desconocido!");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas en ninguna organizacion");
	            return 1;
	        }
	    }
	    return 1;
	}
	
	/*if(strcmp(cmd,"/materials",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 22)
			{
			    SendClientMessage(playerid,COLOR_GREY,"   You are not a Materials supplier !");
			    return 1;
			}
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /materials [name]");
				SendClientMessage(playerid, COLOR_WHITE, "Available names: Get, Deliver.");
				return 1;
			}
			if(strcmp(x_nr,"get",true) == 0)
			{
			    if(PlayerToPoint(3.0,playerid,597.1277,-1248.6479,18.2734))
			    {
			        if(MatsHolding[playerid] >= 10)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   You can't hold any more Materials Packages !");
				        return 1;
			        }
			        tmp = strtok(cmdtext, idx);
			        if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /materials get [cantidad]");
						return 1;
					}
					moneys = strval(tmp);
					if(moneys < 1 || moneys > 10) { SendClientMessage(playerid, COLOR_GREY, "   Package Number can't be below 1 or higher then 10 !"); return 1; }
					new price = moneys * 100;
					if(GetPlayerMoney(playerid) > price)
					{
					    format(string, sizeof(string), "* You bought %d Materials Packages for $%d.", moneys, price);
					    SendClientMessage(playerid, COLOR_WHITE, string);
					    SafeGivePlayerMoney(playerid, - price);
					    MatsHolding[playerid] = moneys;
					}
					else
					{
					    format(string, sizeof(string), "   You can't afford the $%d !", price);
					    SendClientMessage(playerid, COLOR_GREY, string);
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You are not at the Materials Package Building in Los Angeles !");
			        return 1;
			    }
			}
   			else if(strcmp(x_nr,"deliver",true) == 0)
			{
			    if(PlayerToPoint(3.0,playerid,2146.3523,-2267.7498,14.2344))
			    {
			        if(MatsHolding[playerid] > 0)
			        {
			            new payout = (50)*(MatsHolding[playerid]);
			            format(string, sizeof(string), "* The Factory Gave You %d Materials from your %d Packages.", payout, MatsHolding[playerid]);
					    SendClientMessage(playerid, COLOR_WHITE, string);
			            PlayerInfo[playerid][pMats] += payout;
			            MatsHolding[playerid] = 0;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   You don't have any Materials Packages!");
				        return 1;
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You are not at the Willowfield Gun Factory.");
			        return 1;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid Materials Name !");
			    return 1;
			}
		}
		return 1;
	}*/
	
	if(strcmp(cmd,"/vendermats",true)==0) // By LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] != 22)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  You're not the materials dealer ! ");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "HINT: /vendermats [ID o Nombre] [cantidad]");
	            return 1;
	        }
	        giveplayerid = ReturnUser(tmp);
	        if(IsPlayerConnected(giveplayerid))
	        {
	            if(giveplayerid != INVALID_PLAYER_ID)
	            {
					if(ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    tmp = strtok(cmdtext, idx);
					    if(!strlen(tmp))
					    {
					        SendClientMessage(playerid, COLOR_WHITE, "HINT: /vendermats [ID o Nombre] [cantidad]");
	            			return 1;
					    }
					    new ammount = strval(tmp);
					    if(ammount < 1) { SendClientMessage(playerid, COLOR_GREY, "  Wrong ammount ! "); return 1; }
					    if(ammount > PlayerInfo[playerid][pMats]) { SendClientMessage(playerid, COLOR_GREY, "  You don't have so many materials to sell !"); return 1; }
					    PlayerInfo[playerid][pMats] -= ammount;
					    PlayerInfo[giveplayerid][pMats] += ammount;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "* %s gives a package of materials to %s", sendername, giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Player is not near you ! ");
					    return 1;
					}
	            }
	        }
	    }
	    return 1;
	}
    /*if(strcmp(cmd,"/vendergun",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pJob] != 23)
			{
			    SendClientMessage(playerid,COLOR_GREY,"   You are not a Arms Dealer !");
			    return 1;
			}
			new x_weapon[256],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /vendergun [ID o Nombre] [weaponname]");
				SendClientMessage(playerid, COLOR_GREY, "Weapons: knife(100) bat(100) flowers(25) sdpistol(100) eagle(150)");
				SendClientMessage(playerid, COLOR_GREY, "Weapons: mp5(200) shotgun(200) ak47(600) m4(600) rifle (600)");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					x_weapon = strtok(cmdtext, idx);
					if(!strlen(x_weapon))
					{
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						SendClientMessage(playerid, COLOR_WHITE, "*** Sell Guns ***");
						SendClientMessage(playerid, COLOR_GREY, "ESCRIBE: /vendergun [ID o Nombre] [weaponname]");
						SendClientMessage(playerid, COLOR_GREY, "Weapons: knife(100) bat(100) flowers(25) sdpistol(100) eagle(200)");
						SendClientMessage(playerid, COLOR_GREY, "Weapons: mp5(200) shotgun(200) ak47(600) m4(600) rifle(600)");
						SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
						return 1;
					}
				}
				if(strcmp(x_weapon,"knife",true) == 0)
				{
					if(PlayerInfo[playerid][pMats] > 99)
					{
						weapon[playerid] = 4;
						price[playerid] = 100;
						ammo[playerid] = 1;
					}
					else
					{
						SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
						return 1;
					}
				}
				else if(strcmp(x_weapon,"bat",true) == 0)
				{
					if(PlayerInfo[playerid][pMats] > 99)
					{
						weapon[playerid] = 5;
						price[playerid] = 100;
						ammo[playerid] = 1;
					}
					else
					{
						SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
						return 1;
					}
				}
				else if(strcmp(x_weapon,"sdpistol",true) == 0)
				{
					if(PlayerInfo[playerid][pMats] > 99)
					{
						weapon[playerid] = 23;
						price[playerid] = 100;
						ammo[playerid] = 50;
					}
					else
					{
						SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
						return 1;
					}
				}
				else if(strcmp(x_weapon,"flowers",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { weapon[playerid] = 14; price[playerid] = 25; ammo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
				else if(strcmp(x_weapon,"eagle",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 24; price[playerid] = 150; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
				else if(strcmp(x_weapon,"mp5",true) == 0) { if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213)) { SendClientMessage(playerid, COLOR_GREY, "   You can sell this gun only at black market !"); return 1; } if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 29; price[playerid] = 200; ammo[playerid] = 200; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
				else if(strcmp(x_weapon,"shotgun",true) == 0) {	if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213)) { SendClientMessage(playerid, COLOR_GREY, "   You can sell this gun only at black market !"); return 1; } if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 25; price[playerid] = 200; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
				//else if(strcmp(x_weapon,"spas12",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 27; price[playerid] = 600; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
				else if(strcmp(x_weapon,"ak47",true) == 0) { if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213)) { SendClientMessage(playerid, COLOR_GREY, "   You can sell this gun only at black market !"); return 1; } if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 30; price[playerid] = 600; ammo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
				else if(strcmp(x_weapon,"m4",true) == 0) { if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213)) { SendClientMessage(playerid, COLOR_GREY, "   You can sell this gun only at black market !"); return 1; } if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 31; price[playerid] = 600; ammo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
				else if(strcmp(x_weapon,"rifle",true) == 0) { if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213)) { SendClientMessage(playerid, COLOR_GREY, "   You can sell this gun only at black market !"); return 1; } if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 33; price[playerid] = 600; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!"); return 1; } }
				else { SendClientMessage(playerid,COLOR_GREY,"   Invalid Weapon name!"); return 1; }
				if (ProxDetectorS(5.0, playerid, giveplayerid))
				{
        			if(giveplayerid == playerid)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   You can not sell Guns to yourself!");
						return 1;
					}
					if(PlayerInfo[playerid][pMiserPerk] > 0)
					{
					    new skill = 2 * PlayerInfo[playerid][pMiserPerk];
					    new mats = price[playerid] / 100;
					    price[playerid] -= (mats)*(skill);
					}
					//ConsumingMoney[playerid] = 1;
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "   You have given %s, a %s with %d ammo, for %d Materials.", giveplayer,x_weapon, ammo[playerid], price[playerid]);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "   You have recieved a %s with %d ammo from %s.", x_weapon, ammo[playerid], sendername);
					SendClientMessage(giveplayerid, COLOR_GRAD1, string);
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					new gunname[100];
					GetWeaponName(weapon[playerid], gunname, sizeof(gunname));
					format(string, sizeof(string), "* %s hands a %s to %s.", sendername, gunname,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SafeGivePlayerWeapon(giveplayerid,weapon[playerid],ammo[playerid]);
					PlayerInfo[playerid][pMats] -= price[playerid];
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Your too far away.");
					return 1;
				}
			}
			else
			{
				format(string, sizeof(string), "   %d [ERROR] ID Incorrecta.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}*/
	if(strcmp(cmd,"/colmar",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);

			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Llenables __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /colmar [nombre]");
		  		SendClientMessage(playerid, COLOR_GREY, "Nombres: drogas, gasolina(Desabilitado)");
				SendClientMessage(playerid, COLOR_GREEN, "|_________________________________________|");
				return 1;
			}

		    if(strcmp(x_job,"drogas",true) == 0)
			{
		        /*if(PlayerInfo[playerid][pDrugs] > 200)
		        {
		            format(string, sizeof(string), "  Tienes %d gramos, vende estos antes !", PlayerInfo[playerid][pDrugs]);
					SendClientMessage(playerid, COLOR_GREY, string);
		            return 1;
		        }*/
		        new tel;
			    new price;
			    new ammount;
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /colmar drogas [cantidad]");
					return 1;
				}
				new level = PlayerInfo[playerid][pDrugsSkill];
				ammount = strval(tmp);
				if(level >= 0 && level <= 50)
				{ tel = 200; if(ammount < 1 || ammount > 50) { SendClientMessage(playerid, COLOR_GREY, "   A tu nivel solo puedes comprar de 50 en 50 como maximo!"); return 1; } }
				else if(level >= 51 && level <= 100)
				{ tel = 150; if(ammount < 1 || ammount > 100) { SendClientMessage(playerid, COLOR_GREY, "   A tu nivel solo puedes comprar de 100 en 100 como maximo!"); return 1; } }
				else if(level >= 101 && level <= 200)
				{ tel = 100; if(ammount < 1 || ammount > 200) { SendClientMessage(playerid, COLOR_GREY, "   A tu nivel solo puedes comprar de 200 en 200 como maximo!"); return 1; } }
				else if(level >= 201 && level <= 400)
				{ tel = 50; if(ammount < 1 || ammount > 400) { SendClientMessage(playerid, COLOR_GREY, "   A tu nivel solo puedes comprar de 400 en 400 como maximo!"); return 1; } }
				else if(level >= 401)
				{ tel = 25; if(ammount < 1 || ammount > 800) { SendClientMessage(playerid, COLOR_GREY, "   A tu nivel solo puedes comprar de 800 en 800 como maximo!"); return 1; } }
			    if (PlayerInfo[playerid][pJob] == 4 && PlayerToPoint(2.0, playerid, 2166.3376,-1671.6565,15.0740)) //|| PlayerToPoint(2.0, playerid, 1424.1729,-1317.9955,13.5547))
				{
				    price = ammount * tel;
				    if(GetPlayerMoney(playerid) > price)
				    {
				        format(string, sizeof(string), "* Compras %d gramos por: $%d.", ammount, price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        SafeGivePlayerMoney(playerid, -price);
						PlayerInfo[playerid][pDrugs] += ammount;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   No tienes dinero !");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No eres vendedor de drogas o, no estas en el paquete !");
				    return 1;
				}
			}
			if(strcmp(x_job,"gasolina",true) == 0)
			{
			    if(IsAtGasStation(playerid))
				{
				    new price = 20 * SBizzInfo[3][sbEntranceCost];
				    format(string, sizeof(string), "* Repostas tu coche con 20 de gasolina por: $%d",price);
				    SendClientMessage(playerid, COLOR_WHITE, string);
				    PlayerInfo[playerid][pFuel] = 20;
					SafeGivePlayerMoney(playerid, - price);
					return 1;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"   No estas en la gasolinera.!");
					return 1;
				}
			}
			else { return 1; }
		}//not connected
		return 1;
	}
/*	if(strcmp(cmd,"/drogas",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerToPoint(2.0,playerid,1959.3073,-1560.7618,13.5966))
	        {
	        	SendClientMessage(playerid, COLOR_GREEN, "[-------------------------MERCADO VERDE---------------------------------]");
				SendClientMessage(playerid, COLOR_WHITE, " *** Lista de ofertas de gramos: /comprargramos (Numero de Oferta)");
    			SendClientMessage(playerid, COLOR_WHITE, "|1| (01gr) = 02000$ |6| (075gr) = 043000$");
    			SendClientMessage(playerid, COLOR_WHITE, "|2| (05gr) = 08000$ |7| (100gr) = 057000$");
    			SendClientMessage(playerid, COLOR_WHITE, "|3| (10gr) = 12000$ |8| (150gr) = 068000$");
    			SendClientMessage(playerid, COLOR_WHITE, "|4| (20gr) = 15000$ |9| (300gr) = 160000$");
    			SendClientMessage(playerid, COLOR_WHITE, "|5| (50gr) = 23000$ |10| (500gr) = 215000$");
    			SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el merdado verde");
	        }
		}//not connected
		return 1;
	}*/
	if(strcmp(cmd,"/delincuencia",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if (PlayerToPoint(2.0,playerid, 1488.6949,-1721.7136,8.2067))
	        {
	        	SendClientMessage(playerid, COLOR_RED, "[-------------------------MERCADO NEGRO---------------------------------]");
				SendClientMessage(playerid, COLOR_WHITE, " Lugares de alta delincuencia: Escribe /busilegales (Numero de Lugar)");
    			SendClientMessage(playerid, COLOR_WHITE, "|1| Encargos PvP");
    			SendClientMessage(playerid, COLOR_WHITE, "|2| Mercado de drogas");
    			SendClientMessage(playerid, COLOR_WHITE, "|3| Mercado de armas");
    			SendClientMessage(playerid, COLOR_RED, "[-----------------------------------------------------------------------]");
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el merdado negro");
	        }
		}//not connected
		return 1;
	}
	/*if(strcmp(cmd,"/matrix",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if (PlayerToPoint(2.0,playerid, 1025.8512,-2195.4097,39.1406))
	        {
	            SendClientMessage(playerid, COLOR_LIGHTGREEN, "--- -- - -- --- -- - -- --- -- - -- --- --  - -- ---");
	        	SendClientMessage(playerid, COLOR_GREEN, "--- -- - -- --- -- - -- --- -- - -- --- --  - -- ---");
	            SendClientMessage(playerid, COLOR_DARKGREEN, "--- - /MatrixOn - --- - /MatrixOff - ---");
	        	SendClientMessage(playerid, COLOR_GREEN, "--- -- - -- --- -- - -- --- -- - -- --- --  - -- ---");
	        	SendClientMessage(playerid, COLOR_LIGHTGREEN, "--- -- - -- --- -- - -- --- -- - -- --- --  - -- ---");
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el portal a Matrix.");
	        }
		}//not connected
		return 1;
	}*/
	if(strcmp(cmd,"/premium",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pDonateRank] >= 1)
	        {
	        	if (PlayerToPoint(2.0,playerid, 1128.5636,-1448.0800,15.7969))
	        	{
	            	SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________|Ventajas de ser Usuario Premium|_______________");
	            	SendClientMessage(playerid, COLOR_WHITE, " |1| - Capacidad para tener 5 vehiculos.");
	            	SendClientMessage(playerid, COLOR_WHITE, " |2| - Ocultar tu telefono movil usando /Ocultarmovil.");
	            	SendClientMessage(playerid, COLOR_WHITE, " |3| - 5000 en mano en el momento que te lo activan");
	            	SendClientMessage(playerid, COLOR_WHITE, " |4| - Una paga de por vida del 10 por ciento de tu paga diaria.");
	            	SendClientMessage(playerid, COLOR_WHITE, " |5| - Arma reglamentaria con cada Spawn");
	            	SendClientMessage(playerid, COLOR_WHITE, " |6| - Vida completa con cada Spawn");
	            	SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________________________________");
	        		return 1;
	        	}
	        	else
	        	{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas en la zona de premiums.");
	        	return 1;
	        	}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "No tienes la cuenta premium Activada.");
	            return 1;
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/lonja",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if (PlayerToPoint(2.0,playerid, 375.9471,-2068.9353,7.8359))
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "_________________| Lonja de Pescados |_________________");
	        	SendClientMessage(playerid, COLOR_WHITE, "** Aqui te compramos toda tu pesca a 10 la pieza.");
	            SendClientMessage(playerid, COLOR_WHITE, "** Escribiendo el comando: /vendertodos. ");
	        	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________________________");
	        	SendClientMessage(playerid, COLOR_WHITE, "** ¡ Recuerda que en cualquier 24/7 te pagaran mas !");
	        	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________________________");
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en la lonja.");
	        }
		}//not connected
		return 1;
	}
/*	if(strcmp(cmd,"/comprarpesca",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if (PlayerToPoint(2.0,playerid, 375.9471,-2068.9353,7.8359))
	        {
	            SafeGivePlayerMoney(playerid, - 550);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GRAD4, "Has comprado utensilios de pesca.");
			    PlayerInfo[playerid][pFishTool] = 1;
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en la lonja.");
	        }
		}//not connected
		return 1;
	}*/
	/*if(strcmp(cmd,"/matrixon",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if (PlayerToPoint(2.0,playerid, 1025.8512,-2195.4097,39.1406))
	        {
	            if(GetPlayerVirtualWorld(playerid) == 200)
	            {
	            	SendClientMessage(playerid, COLOR_WHITE, "Ya estas en Matrix.");
					return 1;
	            }
	            else
	            {
	            	SetPlayerVirtualWorld(playerid,200);
              SetPlayerWeather(playerid, 9);
		    		SendClientMessage(playerid, COLOR_YELLOW,"  ¡¡ TE HAS INTRODUCIDO EN MATRIX  !!");
	            }
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el portal a Matrix.");
	        }
		}//not connected
		return 1;
	}*/
	if(strcmp(cmd,"/vendertodos",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if (PlayerToPoint(2.0,playerid, 375.9471,-2068.9353,7.8359))
	        {
	            if(IsPlayerConnected(playerid))
	    		{
	        		if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0)
        			{
                        if(Fishes[playerid][pWeight1] > 0)
				        {
				            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vendiste tu pescado por: 10. (1)");
				            ClearFishID(playerid, 1);
				            SafeGivePlayerMoney(playerid, 10);
				        }
				        if(Fishes[playerid][pWeight2] > 0)
				        {
				            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vendiste tu pescado por: 10. (2)");
				            ClearFishID(playerid, 2);
				            SafeGivePlayerMoney(playerid, 10);
				        }
				        if(Fishes[playerid][pWeight3] > 0)
				        {
				            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vendiste tu pescado por: 10. (3)");
				            ClearFishID(playerid, 3);
				            SafeGivePlayerMoney(playerid, 10);
				        }
				        if(Fishes[playerid][pWeight4] > 0)
				        {
				            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vendiste tu pescado por: 10. (4)");
				            ClearFishID(playerid, 4);
				            SafeGivePlayerMoney(playerid, 10);
				        }
				        if(Fishes[playerid][pWeight5] > 0)
				        {
				            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Vendiste tu pescado por: 10. (5)");
				            ClearFishID(playerid, 5);
				            SafeGivePlayerMoney(playerid, 10);
				        }
                        GameTextForPlayer(playerid, "~g~Todo el Pescado~n~~r~Vendido", 3000, 1);
						//////////////////////////
						ClearFishes(playerid);
						Fishes[playerid][pLastFish] = 0;
						Fishes[playerid][pFishID] = 0;
	        		}
	        		else
	        		{
       			 		SendClientMessage(playerid, COLOR_GREY, "   No tienes peces !");
   						return 1;
	        		}
	    		}
	    		return 1;
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en la Lonja.");
	        }
		}//not connected
		return 1;
	}
	/*if(strcmp(cmd,"/matrixoff",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if (PlayerToPoint(2.0,playerid, 1025.8512,-2195.4097,39.1406))
	        {
	            if(GetPlayerVirtualWorld(playerid) == 0)
	            {
	            	SendClientMessage(playerid, COLOR_WHITE, "No estas en matrix.");
					return 1;
	            }
	            else
	            {
	            	SetPlayerVirtualWorld(playerid,0);
	            	SetPlayerWeather(playerid, DefaultWeather);
		    		SendClientMessage(playerid, COLOR_YELLOW,"  ¡¡ HAS SALIDO DE MATRIX  !!");
	            }
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el portal a Matrix.");
	        }
		}//not connected
		return 1;
	}*/
	if(strcmp(cmd,"/busilegales",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    if(PlayerToPoint(2.0,playerid,1488.6949,-1721.7136,8.2067))
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /delincuencia (Numero)");
					return 1;
				}
				else
				{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado negro");
	        	}
			}
	        new delin;
	        delin = strval(tmp);
			tmp = strtok(cmdtext, idx);
	        if(PlayerToPoint(2.0,playerid,1488.6949,-1721.7136,8.2067))
	        {
				switch (delin)
				{
	        		case 1:
					{
						SetPlayerCheckpoint(playerid,1927.5400,-1199.7737,20.0234,9.0);
					}

					case 2:
					{
						SetPlayerCheckpoint(playerid,1959.3073,-1560.7618,13.5966,9.0);
					}

					case 3:
					{
						SetPlayerCheckpoint(playerid,2221.4382,-2276.3232,14.7647,9.0);
					}
				}
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado negro");
	        }
		}//not connected
		return 1;
	}
 /*	if(strcmp(cmd,"/comprargramos",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    if(PlayerToPoint(2.0,playerid,1959.3073,-1560.7618,13.5966))
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /comprargramos (Numero de Oferta)");
					return 1;
				}
				else
				{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado verde");
	        	}
			}
	        new gramos;
	        gramos = strval(tmp);
			tmp = strtok(cmdtext, idx);
	        if(PlayerToPoint(2.0,playerid,1959.3073,-1560.7618,13.5966))
	        {
				switch (gramos)
				{
	        		case 1:
					{
						if(GetPlayerMoney(playerid) < 2000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 2000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 1 gramo por 2000$");
                			SafeGivePlayerMoney(playerid, - 2000);
             				PlayerInfo[playerid][pDrugs] += 1;
             				OnPlayerUpdate(playerid);
             			}
					}
					
					case 2:
					{
						if(GetPlayerMoney(playerid) < 8000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 8000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 5 gramos por 8000$");
                			SafeGivePlayerMoney(playerid, - 8000);
             				PlayerInfo[playerid][pDrugs] += 5;
             				OnPlayerUpdate(playerid);
             			}
					}
					
					case 3:
					{
						if(GetPlayerMoney(playerid) < 12000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 12000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 10 gramos por 12000$");
                			SafeGivePlayerMoney(playerid, - 12000);
             				PlayerInfo[playerid][pDrugs] += 10;
             				OnPlayerUpdate(playerid);
             			}
					}
					
					case 4:
					{
						if(GetPlayerMoney(playerid) < 15000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 15000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 20 gramos por 15000$");
                			SafeGivePlayerMoney(playerid, - 15000);
             				PlayerInfo[playerid][pDrugs] += 20;
             				OnPlayerUpdate(playerid);
             			}
					}
					
					case 5:
					{
						if(GetPlayerMoney(playerid) < 23000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 23000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 50 gramos por 23000$");
                			SafeGivePlayerMoney(playerid, - 23000);
             				PlayerInfo[playerid][pDrugs] += 50;
             				OnPlayerUpdate(playerid);
             			}
					}
					
					case 6:
					{
						if(GetPlayerMoney(playerid) < 43000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 43000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 75 gramos por 43000$");
                			SafeGivePlayerMoney(playerid, - 43000);
             				PlayerInfo[playerid][pDrugs] += 75;
             				OnPlayerUpdate(playerid);
             			}
					}
					
					case 7:
					{
						if(GetPlayerMoney(playerid) < 57000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 57000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 100 gramos por 57000$");
                			SafeGivePlayerMoney(playerid, - 57000);
             				PlayerInfo[playerid][pDrugs] += 100;
             				OnPlayerUpdate(playerid);
             			}
					}
					
					case 8:
					{
						if(GetPlayerMoney(playerid) < 68000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 68000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 150 gramos por 68000$");
                			SafeGivePlayerMoney(playerid, - 68000);
             				PlayerInfo[playerid][pDrugs] += 150;
             				OnPlayerUpdate(playerid);
             			}
					}
					
					case 9:
					{
						if(GetPlayerMoney(playerid) < 160000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 160000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 300 gramos por 160000$");
                			SafeGivePlayerMoney(playerid, - 160000);
             				PlayerInfo[playerid][pDrugs] += 300;
             				OnPlayerUpdate(playerid);
             			}
					}
					
					case 10:
					{
						if(GetPlayerMoney(playerid) < 215000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 215000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 500 gramos por 215000$");
                			SafeGivePlayerMoney(playerid, - 215000);
             				PlayerInfo[playerid][pDrugs] += 500;
             				OnPlayerUpdate(playerid);
             			}
					}
				}
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado verde");
	        }
		}//not connected
		return 1;
	} */
	if(strcmp(cmd,"/cambiarspawn",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    if(IsPlayerConnected(playerid))
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /cambiarspawn (1-4)");
					SendClientMessage(playerid, COLOR_GRAD1, "|1| = Extranjero");
					SendClientMessage(playerid, COLOR_GRAD1, "|2| = Playa");
					SendClientMessage(playerid, COLOR_GRAD1, "|3| = Barrio");
					SendClientMessage(playerid, COLOR_GRAD1, "|4| = Centro");
					return 1;
				}
				else
				{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas conectado");
	        	}
			}
	        new espai;
	        espai = strval(tmp);
			tmp = strtok(cmdtext, idx);
	        if(IsPlayerConnected(playerid))
	        {
				switch (espai)
				{
	        		case 1:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has cambiado tu spawn al aeropuerto.");
   						PlayerInfo[playerid][pOrigin] = 1;
     					OnPlayerUpdate(playerid);
					}
					
					case 2:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has cambiado tu spawn a l hotel de playa.");
   						PlayerInfo[playerid][pOrigin] = 2;
     					OnPlayerUpdate(playerid);
					}
					
					case 3:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has cambiado tu spawn al barrio.");
   						PlayerInfo[playerid][pOrigin] = 3;
     					OnPlayerUpdate(playerid);
					}
					
					case 4:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has cambiado tu spawn a la suit del rascacielos.");
   						PlayerInfo[playerid][pOrigin] = 4;
     					OnPlayerUpdate(playerid);
					}
				}
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "Asi no.");
	        }
		}//not connected
		return 1;
	}
	
	/*if(strcmp(cmd,"/nsgskin",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] != 17)
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "No eres de la North Street Gang");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 17)
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "El Lider no puede cambiarse de ropa");
	            return 1;
	        }
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    if(IsPlayerConnected(playerid))
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /nsgskin (1-3)");
					SendClientMessage(playerid, COLOR_GRAD1, "|1| = ID-102");
					SendClientMessage(playerid, COLOR_GRAD1, "|2| = ID-103");
					SendClientMessage(playerid, COLOR_GRAD1, "|3| = ID-104");
					return 1;
				}
				else
				{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas conectado");
	        	}
			}
	        new espai;
	        espai = strval(tmp);
			tmp = strtok(cmdtext, idx);
	        if(IsPlayerConnected(playerid))
	        {
				switch (espai)
				{
	        		case 1:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 102;
   						PlayerInfo[playerid][pChar] = 102;
   						SetPlayerSkin(playerid, 102);
     					OnPlayerUpdate(playerid);
					}

					case 2:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 103;
   						PlayerInfo[playerid][pChar] = 103;
   						SetPlayerSkin(playerid, 103);
     					OnPlayerUpdate(playerid);
					}

					case 3:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 104;
   						PlayerInfo[playerid][pChar] = 104;
   						SetPlayerSkin(playerid, 104);
     					OnPlayerUpdate(playerid);
					}
				}
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "Asi no.");
	        }
		}//not connected
		return 1;
	}*/
	
	if(strcmp(cmd,"/uniforme",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
	        {
                tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /uniforme (1-2)");
					SendClientMessage(playerid, COLOR_GRAD1, "|1| = ID-103");
					SendClientMessage(playerid, COLOR_GRAD1, "|2| = ID-104");
					return 1;
				}
				//if(PlayerInfo[playerid][pLeader] == 17) { return 1;}
				new espai;
	        	espai = strval(tmp);
				tmp = strtok(cmdtext, idx);
				switch (espai)
				{
	        		case 1:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 103;
   						PlayerInfo[playerid][pChar] = 103;
   						SetPlayerSkin(playerid, 103);
     					OnPlayerUpdate(playerid);
					}
					case 2:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 104;
   						PlayerInfo[playerid][pChar] = 104;
   						SetPlayerSkin(playerid, 104);
     					OnPlayerUpdate(playerid);
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 18 || PlayerInfo[playerid][pLeader] == 18)
	        {
                tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /uniforme (1-2)");
					SendClientMessage(playerid, COLOR_GRAD1, "|1| = ID-247");
					SendClientMessage(playerid, COLOR_GRAD1, "|2| = ID-248");
					return 1;
				}
				//if(PlayerInfo[playerid][pLeader] == 18) { return 1;}
				new espai;
	        	espai = strval(tmp);
				tmp = strtok(cmdtext, idx);
				switch (espai)
				{
	        		case 1:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 247;
   						PlayerInfo[playerid][pChar] = 247;
   						SetPlayerSkin(playerid, 247);
     					OnPlayerUpdate(playerid);
					}
					case 2:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 248;
   						PlayerInfo[playerid][pChar] = 248;
   						SetPlayerSkin(playerid, 248);
     					OnPlayerUpdate(playerid);
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 19 || PlayerInfo[playerid][pLeader] == 19)
	        {
                tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /uniforme (1-2)");
					SendClientMessage(playerid, COLOR_GRAD1, "|1| = ID-277");
					SendClientMessage(playerid, COLOR_GRAD1, "|2| = ID-278");
					return 1;
				}
				//if(PlayerInfo[playerid][pLeader] == 19) { return 1;}
				new espai;
	        	espai = strval(tmp);
				tmp = strtok(cmdtext, idx);
				switch (espai)
				{
	        		case 1:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 277;
   						PlayerInfo[playerid][pChar] = 277;
   						SetPlayerSkin(playerid, 277);
     					OnPlayerUpdate(playerid);
					}
					case 2:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 278;
   						PlayerInfo[playerid][pChar] = 278;
   						SetPlayerSkin(playerid, 278);
     					OnPlayerUpdate(playerid);
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
	        {
                tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /uniforme (1-5)");
					SendClientMessage(playerid, COLOR_GRAD1, "|1| = ID-1");
					SendClientMessage(playerid, COLOR_GRAD1, "|2| = ID-78");
					SendClientMessage(playerid, COLOR_GRAD1, "|3| = ID-159");
					SendClientMessage(playerid, COLOR_GRAD1, "|4| = ID-160");
					SendClientMessage(playerid, COLOR_GRAD1, "|5| = ID-162");
					return 1;
				}
				//if(PlayerInfo[playerid][pLeader] == 20) { return 1;}
				new espai;
	        	espai = strval(tmp);
				tmp = strtok(cmdtext, idx);
				switch (espai)
				{
	        		case 1:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 1;
   						PlayerInfo[playerid][pChar] = 1;
   						SetPlayerSkin(playerid, 1);
     					OnPlayerUpdate(playerid);
					}
					case 2:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 78;
   						PlayerInfo[playerid][pChar] = 78;
   						SetPlayerSkin(playerid, 78);
     					OnPlayerUpdate(playerid);
					}
				    case 3:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 159;
   						PlayerInfo[playerid][pChar] = 159;
   						SetPlayerSkin(playerid, 159);
     					OnPlayerUpdate(playerid);
					}
				    case 4:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 160;
   						PlayerInfo[playerid][pChar] = 160;
   						SetPlayerSkin(playerid, 160);
     					OnPlayerUpdate(playerid);
					}
				    case 5:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 162;
   						PlayerInfo[playerid][pChar] = 162;
   						SetPlayerSkin(playerid, 162);
     					OnPlayerUpdate(playerid);
					}
				}
			}
		}
		return 1;
	}
	
	/*if(strcmp(cmd,"/cobrasskin",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] != 18)
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "No eres de la banda de moteros");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 18)
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "El Lider no puede cambiarse de ropa");
	            return 1;
	        }
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    if(IsPlayerConnected(playerid))
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /cobrasskin (1-3)"); // 100,133,181
					return 1;
				}
				else
				{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas conectado");
	        	}
			}
	        new espai;
	        espai = strval(tmp);
			tmp = strtok(cmdtext, idx);
	        if(IsPlayerConnected(playerid))
	        {
				switch (espai)
				{
	        		case 1:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 100;
   						PlayerInfo[playerid][pChar] = 100;
   						SetPlayerSkin(playerid, 100);
     					OnPlayerUpdate(playerid);
					}

					case 2:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 247;
   						PlayerInfo[playerid][pChar] = 247;
   						SetPlayerSkin(playerid, 247);
     					OnPlayerUpdate(playerid);
					}

					case 3:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 248;
   						PlayerInfo[playerid][pChar] = 248;
   						SetPlayerSkin(playerid, 248);
     					OnPlayerUpdate(playerid);
					}
				}
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "Asi no.");
	        }
		}//not connected
		return 1;
	}*/
	
	/*if(strcmp(cmd,"/paccinoskin",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] != 19)
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "No eres un Paccino Norteño");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pLeader] == 19)
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "El Lider no puede cambiarse de ropa");
	            return 1;
	        }
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    if(IsPlayerConnected(playerid))
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /paccinoskin (1-3)"); // 100,133,181
					return 1;
				}
				else
				{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas conectado");
	        	}
			}
	        new espai;
	        espai = strval(tmp);
			tmp = strtok(cmdtext, idx);
	        if(IsPlayerConnected(playerid))
	        {
				switch (espai)
				{
	        		case 1:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 170;
   						PlayerInfo[playerid][pChar] = 170;
   						SetPlayerSkin(playerid, 170);
     					OnPlayerUpdate(playerid);
					}

					case 2:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 19;
   						PlayerInfo[playerid][pChar] = 19;
   						SetPlayerSkin(playerid, 19);
     					OnPlayerUpdate(playerid);
					}

					case 3:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ropa cambiada.");
   						PlayerInfo[playerid][pModel] = 40;
   						PlayerInfo[playerid][pChar] = 40;
   						SetPlayerSkin(playerid, 40);
     					OnPlayerUpdate(playerid);
					}
				}
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "Asi no.");
	        }
		}//not connected
		return 1;
	}*/
	
	if(strcmp(cmd,"/cambiarlucha",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    if(IsPlayerConnected(playerid))
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /cambiarlucha (1-6)");
					SendClientMessage(playerid, COLOR_GRAD1, "|1| = Puños");
					SendClientMessage(playerid, COLOR_GRAD1, "|2| = Kungfu");
					SendClientMessage(playerid, COLOR_GRAD1, "|3| = Boxeo");
					SendClientMessage(playerid, COLOR_GRAD1, "|4| = KickBoxing");
					SendClientMessage(playerid, COLOR_GRAD1, "|5| = Patada");
					SendClientMessage(playerid, COLOR_GRAD1, "|6| = Codazo");
					return 1;
				}
				else
				{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas conectado");
	        	}
			}
	        new espai;
	        espai = strval(tmp);
			tmp = strtok(cmdtext, idx);
	        if(IsPlayerConnected(playerid))
	        {
				switch (espai)
				{
	        		case 1:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has cambiado tu modo de lucha a Puños.");
   						SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
     					OnPlayerUpdate(playerid);
					}

					case 2:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has cambiado tu modo de lucha a kungfu.");
   						SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
     					OnPlayerUpdate(playerid);
					}

					case 3:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has cambiado tu modo de lucha a boxeo.");
   						SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
     					OnPlayerUpdate(playerid);
					}

					case 4:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has cambiado tu modo de lucha a callejero.");
   						SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
     					OnPlayerUpdate(playerid);
					}
					case 5:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has cambiado tu modo de lucha a Patada.");
   						SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
     					OnPlayerUpdate(playerid);
					}
					case 6:
					{
 						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has cambiado tu modo de lucha a Codazos.");
   						SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
     					OnPlayerUpdate(playerid);
					}
				}
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "Asi no.");
	        }
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/armasyakuza",true)==0) // by DryilZas / Nadiusko
    {
    if (PlayerInfo[playerid][pMember] != 14 && PlayerInfo[playerid][pLeader] != 14 && PlayerInfo[playerid][pRank] >= 5) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de la Yakuza");
        {
        if (PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Tienes que ser rango 5 o superior para poder usar este comando");
			return 1;
		}
	        if(PlayerToPoint(2.0,playerid,721.0230,-1256.1627,17.6484))
	        {
	        	SendClientMessage(playerid, COLOR_BLUE, "[-------------------------MERCADO YAKUZA----------------------------------]");
				SendClientMessage(playerid, COLOR_WHITE, " *** Lista de ofertas de armas: /compraryakuza (Número de Oferta)");
    			SendClientMessage(playerid, COLOR_WHITE, "|1| Deagle (50 Balas) = 02000$");
    			SendClientMessage(playerid, COLOR_WHITE, "|2| Escopeta (30 Balas) = 03000$");
    			SendClientMessage(playerid, COLOR_WHITE, "|3| UZI (150 Balas) = 02500$");
    			SendClientMessage(playerid, COLOR_WHITE, "|4| AK-47 (200 Balas)= 05000$");
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado Yakuza");
         }
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/armaslcn",true)==0) // by DryilZas / Nadiusko
    {
    if (PlayerInfo[playerid][pMember] != 6 && PlayerInfo[playerid][pLeader] != 6 && PlayerInfo[playerid][pRank] >= 5) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de la Cosa Nostra");
        {
        if (PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Tienes que ser rango 5 o superior para poder usar este comando");
			return 1;
		}
	        if(PlayerToPoint(2.0,playerid,1259.5947,-812.6199,84.1406))
	        {
	        	SendClientMessage(playerid, COLOR_BLUE, "[-------------------------MERCADO LCN----------------------------------]");
				SendClientMessage(playerid, COLOR_WHITE, " *** Lista de ofertas de armas: /comprarlcn (Número de Oferta)");
    			SendClientMessage(playerid, COLOR_WHITE, "|1| 9mm (50 Balas) = 01500$");
    			SendClientMessage(playerid, COLOR_WHITE, "|2| Escopeta de combate (30 Balas) = 04500$");
    			SendClientMessage(playerid, COLOR_WHITE, "|3| MP5 (150 Balas) = 03500$");
    			SendClientMessage(playerid, COLOR_WHITE, "|4| M4 (200 Balas)= 06000$");
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado LCN");
         }
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/armashitman",true)==0) // by DryilZas / Nadiusko
    {
    if (PlayerInfo[playerid][pMember] != 8 && PlayerInfo[playerid][pLeader] != 8 && PlayerInfo[playerid][pRank] >= 5) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de la Hitman");
        {
        if (PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Tienes que ser rango 5 o superior para poder usar este comando");
			return 1;
		}
	        if(PlayerToPoint(2.0,playerid,1527.1671,-1465.8501,9.5000))
	        {
	        	SendClientMessage(playerid, COLOR_BLUE, "[-------------------------MERCADO HITMAN----------------------------------]");
				SendClientMessage(playerid, COLOR_WHITE, " *** Lista de ofertas de armas: /comprarhitman (Número de Oferta)");
    			SendClientMessage(playerid, COLOR_WHITE, "|1| Cuchillo (1 unidad) = 0500$");
    			SendClientMessage(playerid, COLOR_WHITE, "|2| 9mm SD (50 Balas) = 01800$");
    			SendClientMessage(playerid, COLOR_WHITE, "|3| Francotirador (25 Balas) = 07000$");
    			SendClientMessage(playerid, COLOR_WHITE, "|4| Explosivos (5 unidades)= 10000$");
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado LCN");
         }
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/armaspuretas",true)==0) // by DryilZas / Nadiusko
    {
    if (PlayerInfo[playerid][pMember] != 20 && PlayerInfo[playerid][pLeader] != 20 && PlayerInfo[playerid][pRank] >= 5) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de los puretas");
        {
        if (PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Tienes que ser rango 5 o superior para poder usar este comando");
			return 1;
		}
	        if(PlayerToPoint(2.0,playerid,905.4366,-1555.3862,-67.3664))
	        {
	        	SendClientMessage(playerid, COLOR_BLUE, "[-------------------------MERCADO PURETA----------------------------------]");
				SendClientMessage(playerid, COLOR_WHITE, " *** Lista de ofertas de armas: /comprarpuretas (Número de Oferta)");
    			SendClientMessage(playerid, COLOR_WHITE, "|1| Bastón (1 unidad) = 0100$");
    			SendClientMessage(playerid, COLOR_WHITE, "|2| MAC (150 Balas) = 02200$");
    			SendClientMessage(playerid, COLOR_WHITE, "|3| Escopeta Recortada (25 Balas) = 07000$");
    			SendClientMessage(playerid, COLOR_WHITE, "|4| Rifle de balines (25 unidades)= 05500$");
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado PURETA");
         }
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/misionespvp",true)==0) // by DryilZas
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerToPoint(2.0,playerid,1927.5400,-1199.7737,20.0234))
	        {
	        	SendClientMessage(playerid, COLOR_GREEN, "______________________|MISIONES PvP|__________________________________");
				SendClientMessage(playerid, COLOR_WHITE, " -- Misiones disponibles: Escribe /pvpinfo (Numero de mision)");
    			SendClientMessage(playerid, COLOR_WHITE, "**[1]** = Espía al Ejercito - |EN CONSTRUCCION|");
    			SendClientMessage(playerid, COLOR_GREEN, "______________________________________________________________________");
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el puesto de misiones");
	        }
		}//not connected
		return 1;
	}

	if(strcmp(cmd,"/compraryakuza",true)==0) // by DryilZas
    {
    if (PlayerInfo[playerid][pMember] != 14 && PlayerInfo[playerid][pLeader] != 14 && PlayerInfo[playerid][pRank] >= 5) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de la Yakuza");
        {
        if (PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Tienes que ser rango 5 o superior para poder usar este comando");
			return 1;
		}
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    if(PlayerToPoint(2.0,playerid,721.0230,-1256.1627,17.6484))
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /compraryakuza (Número de Oferta)");
					return 1;
				}
				else
				{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado Yakuza");
	        	}
			}
	        new armasm;
	        armasm = strval(tmp);
			tmp = strtok(cmdtext, idx);
	        if(PlayerToPoint(2.0,playerid,721.0230,-1256.1627,17.6484))
	        {
				switch (armasm)
				{
	        		case 1:
					{
						if(GetPlayerMoney(playerid) < 2000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 2000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras una Deagle por 2000$");
                			SafeGivePlayerMoney(playerid, - 2000);
             				GivePlayerWeapon(playerid, 24, 50);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 2:
					{
						if(GetPlayerMoney(playerid) < 3000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 3000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras una Escopeta por 3000$");
                			SafeGivePlayerMoney(playerid, - 3000);
             				GivePlayerWeapon(playerid, 25, 30);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 3:
					{
						if(GetPlayerMoney(playerid) < 2500)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 2500$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras una UZI por 2500$");
                			SafeGivePlayerMoney(playerid, - 2500);
             				GivePlayerWeapon(playerid, 28, 150);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 4:
					{
						if(GetPlayerMoney(playerid) < 5000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 5000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras una AK por 5000$");
                			SafeGivePlayerMoney(playerid, - 5000);
             				GivePlayerWeapon(playerid, 30, 200);
             				OnPlayerUpdate(playerid);
             			}
					}

/*					case 5:
					{
						if(GetPlayerMoney(playerid) < 23000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 23000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 50 gramos por 23000$");
                			SafeGivePlayerMoney(playerid, - 23000);
             				PlayerInfo[playerid][pDrugs] += 50;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 6:
					{
						if(GetPlayerMoney(playerid) < 43000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 43000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 75 gramos por 43000$");
                			SafeGivePlayerMoney(playerid, - 43000);
             				PlayerInfo[playerid][pDrugs] += 75;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 7:
					{
						if(GetPlayerMoney(playerid) < 57000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 57000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 100 gramos por 57000$");
                			SafeGivePlayerMoney(playerid, - 57000);
             				PlayerInfo[playerid][pDrugs] += 100;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 8:
					{
						if(GetPlayerMoney(playerid) < 68000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 68000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 150 gramos por 68000$");
                			SafeGivePlayerMoney(playerid, - 68000);
             				PlayerInfo[playerid][pDrugs] += 150;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 9:
					{
						if(GetPlayerMoney(playerid) < 160000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 160000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 300 gramos por 160000$");
                			SafeGivePlayerMoney(playerid, - 160000);
             				PlayerInfo[playerid][pDrugs] += 300;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 10:
					{
						if(GetPlayerMoney(playerid) < 215000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 215000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 500 gramos por 215000$");
                			SafeGivePlayerMoney(playerid, - 215000);
             				PlayerInfo[playerid][pDrugs] += 500;
             				OnPlayerUpdate(playerid);
             			}
					} */
				}
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado Yakuza");
	        }
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/comprarlcn",true)==0) // by DryilZas
    {
    if (PlayerInfo[playerid][pMember] != 6 && PlayerInfo[playerid][pLeader] != 6 && PlayerInfo[playerid][pRank] >= 5) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de la Cosa Nostra");
        {
        if (PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Tienes que ser rango 5 o superior para poder usar este comando");
			return 1;
		}
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    if(PlayerToPoint(2.0,playerid,1259.5947,-812.6199,84.1406))
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /comprarlcn (Número de Oferta)");
					return 1;
				}
				else
				{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado LCN");
	        	}
			}
	        new armasm;
	        armasm = strval(tmp);
			tmp = strtok(cmdtext, idx);
	        if(PlayerToPoint(2.0,playerid,1259.5947,-812.6199,84.1406))
	        {
				switch (armasm)
				{
	        		case 1:
					{
						if(GetPlayerMoney(playerid) < 1500)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 1500");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras una 9mm por 1500$");
                			SafeGivePlayerMoney(playerid, - 1500);
             				GivePlayerWeapon(playerid, 22, 50);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 2:
					{
						if(GetPlayerMoney(playerid) < 4500)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 4500$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras una Escopeta de combate por 4500$");
                			SafeGivePlayerMoney(playerid, - 4500);
             				GivePlayerWeapon(playerid, 27, 30);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 3:
					{
						if(GetPlayerMoney(playerid) < 3500)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 3500$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras una MP5 por 3500$");
                			SafeGivePlayerMoney(playerid, - 3500);
             				GivePlayerWeapon(playerid, 29, 150);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 4:
					{
						if(GetPlayerMoney(playerid) < 6000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 6000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras una M4 por 6000$");
                			SafeGivePlayerMoney(playerid, - 6000);
             				GivePlayerWeapon(playerid, 31, 200);
             				OnPlayerUpdate(playerid);
             			}
					}

/*					case 5:
					{
						if(GetPlayerMoney(playerid) < 23000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 23000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 50 gramos por 23000$");
                			SafeGivePlayerMoney(playerid, - 23000);
             				PlayerInfo[playerid][pDrugs] += 50;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 6:
					{
						if(GetPlayerMoney(playerid) < 43000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 43000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 75 gramos por 43000$");
                			SafeGivePlayerMoney(playerid, - 43000);
             				PlayerInfo[playerid][pDrugs] += 75;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 7:
					{
						if(GetPlayerMoney(playerid) < 57000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 57000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 100 gramos por 57000$");
                			SafeGivePlayerMoney(playerid, - 57000);
             				PlayerInfo[playerid][pDrugs] += 100;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 8:
					{
						if(GetPlayerMoney(playerid) < 68000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 68000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 150 gramos por 68000$");
                			SafeGivePlayerMoney(playerid, - 68000);
             				PlayerInfo[playerid][pDrugs] += 150;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 9:
					{
						if(GetPlayerMoney(playerid) < 160000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 160000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 300 gramos por 160000$");
                			SafeGivePlayerMoney(playerid, - 160000);
             				PlayerInfo[playerid][pDrugs] += 300;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 10:
					{
						if(GetPlayerMoney(playerid) < 215000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 215000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 500 gramos por 215000$");
                			SafeGivePlayerMoney(playerid, - 215000);
             				PlayerInfo[playerid][pDrugs] += 500;
             				OnPlayerUpdate(playerid);
             			}
					} */
				}
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado LCN");
	        }
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/comprarhitman",true)==0) // by DryilZas
    {
    if (PlayerInfo[playerid][pMember] != 8 && PlayerInfo[playerid][pLeader] != 8 && PlayerInfo[playerid][pRank] >= 5) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de la Hitman");
        {
        if (PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Tienes que ser rango 5 o superior para poder usar este comando");
			return 1;
		}
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    if(PlayerToPoint(2.0,playerid,1527.1671,-1465.8501,9.5000))
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /comprarhitman (Número de Oferta)");
					return 1;
				}
				else
				{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado Hitman");
	        	}
			}
	        new armasm;
	        armasm = strval(tmp);
			tmp = strtok(cmdtext, idx);
	        if(PlayerToPoint(2.0,playerid,1527.1671,-1465.8501,9.5000))
	        {
				switch (armasm)
				{
	        		case 1:
					{
						if(GetPlayerMoney(playerid) < 500)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 500$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras un Cuchillo por 500$");
                			SafeGivePlayerMoney(playerid, - 500);
             				GivePlayerWeapon(playerid, 4, 1);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 2:
					{
						if(GetPlayerMoney(playerid) < 1800)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 1800$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras una 9mm SD por 1800$");
                			SafeGivePlayerMoney(playerid, - 1800);
             				GivePlayerWeapon(playerid, 23, 50);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 3:
					{
						if(GetPlayerMoney(playerid) < 7000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 7000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras un Francotirador por 7000$");
                			SafeGivePlayerMoney(playerid, - 7000);
             				GivePlayerWeapon(playerid, 34, 25);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 4:
					{
						if(GetPlayerMoney(playerid) < 10000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 10000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras Explosivos por 10000$");
                			SafeGivePlayerMoney(playerid, - 10000);
             				GivePlayerWeapon(playerid, 39, 5);
             				OnPlayerUpdate(playerid);
             			}
					}

/*					case 5:
					{
						if(GetPlayerMoney(playerid) < 23000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 23000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 50 gramos por 23000$");
                			SafeGivePlayerMoney(playerid, - 23000);
             				PlayerInfo[playerid][pDrugs] += 50;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 6:
					{
						if(GetPlayerMoney(playerid) < 43000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 43000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 75 gramos por 43000$");
                			SafeGivePlayerMoney(playerid, - 43000);
             				PlayerInfo[playerid][pDrugs] += 75;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 7:
					{
						if(GetPlayerMoney(playerid) < 57000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 57000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 100 gramos por 57000$");
                			SafeGivePlayerMoney(playerid, - 57000);
             				PlayerInfo[playerid][pDrugs] += 100;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 8:
					{
						if(GetPlayerMoney(playerid) < 68000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 68000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 150 gramos por 68000$");
                			SafeGivePlayerMoney(playerid, - 68000);
             				PlayerInfo[playerid][pDrugs] += 150;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 9:
					{
						if(GetPlayerMoney(playerid) < 160000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 160000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 300 gramos por 160000$");
                			SafeGivePlayerMoney(playerid, - 160000);
             				PlayerInfo[playerid][pDrugs] += 300;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 10:
					{
						if(GetPlayerMoney(playerid) < 215000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 215000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 500 gramos por 215000$");
                			SafeGivePlayerMoney(playerid, - 215000);
             				PlayerInfo[playerid][pDrugs] += 500;
             				OnPlayerUpdate(playerid);
             			}
					} */
				}
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado Hitman");
	        }
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/comprarpuretas",true)==0) // by DryilZas
    {
    if (PlayerInfo[playerid][pMember] != 20 && PlayerInfo[playerid][pLeader] != 20 && PlayerInfo[playerid][pRank] >= 5) return SendClientMessage(playerid, COLOR_GREY, "No eres miembro de los PURETAS");
        {
        if (PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Tienes que ser rango 5 o superior para poder usar este comando");
			return 1;
		}
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    if(PlayerToPoint(2.0,playerid,905.4366,-1555.3862,-67.3664))
			    {
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /comprarpuretas (Número de Oferta)");
					return 1;
				}
				else
				{
	        	SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado PURETA");
	        	}
			}
	        new armasm;
	        armasm = strval(tmp);
			tmp = strtok(cmdtext, idx);
	        if(PlayerToPoint(2.0,playerid,905.4366,-1555.3862,-67.3664))
	        {
				switch (armasm)
				{
	        		case 1:
					{
						if(GetPlayerMoney(playerid) < 100)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 100$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras un Bastón por 100$");
                			SafeGivePlayerMoney(playerid, - 100);
             				GivePlayerWeapon(playerid, 15, 1);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 2:
					{
						if(GetPlayerMoney(playerid) < 2200)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 2200$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras una MAC por 2200$");
                			SafeGivePlayerMoney(playerid, - 2200);
             				GivePlayerWeapon(playerid, 32, 150);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 3:
					{
						if(GetPlayerMoney(playerid) < 7000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 7000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras una Escopeta Recortada por 7000$");
                			SafeGivePlayerMoney(playerid, - 7000);
             				GivePlayerWeapon(playerid, 26, 25);
             				OnPlayerUpdate(playerid);
             			}
					}

					case 4:
					{
						if(GetPlayerMoney(playerid) < 5500)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 5500$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras un Rifle de balines por 5500$");
                			SafeGivePlayerMoney(playerid, - 5500);
             				GivePlayerWeapon(playerid, 33, 25);
             				OnPlayerUpdate(playerid);
             			}
					}

/*					case 5:
					{
						if(GetPlayerMoney(playerid) < 23000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 23000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 50 gramos por 23000$");
                			SafeGivePlayerMoney(playerid, - 23000);
             				PlayerInfo[playerid][pDrugs] += 50;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 6:
					{
						if(GetPlayerMoney(playerid) < 43000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 43000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 75 gramos por 43000$");
                			SafeGivePlayerMoney(playerid, - 43000);
             				PlayerInfo[playerid][pDrugs] += 75;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 7:
					{
						if(GetPlayerMoney(playerid) < 57000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 57000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 100 gramos por 57000$");
                			SafeGivePlayerMoney(playerid, - 57000);
             				PlayerInfo[playerid][pDrugs] += 100;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 8:
					{
						if(GetPlayerMoney(playerid) < 68000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 68000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 150 gramos por 68000$");
                			SafeGivePlayerMoney(playerid, - 68000);
             				PlayerInfo[playerid][pDrugs] += 150;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 9:
					{
						if(GetPlayerMoney(playerid) < 160000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 160000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 300 gramos por 160000$");
                			SafeGivePlayerMoney(playerid, - 160000);
             				PlayerInfo[playerid][pDrugs] += 300;
             				OnPlayerUpdate(playerid);
             			}
					}

					case 10:
					{
						if(GetPlayerMoney(playerid) < 215000)
				    	{
             		    	SendClientMessage(playerid, COLOR_GREY, "No tienes 215000$");
             		    	return 1;
             			}
             			else
             			{
             				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Compras 500 gramos por 215000$");
                			SafeGivePlayerMoney(playerid, - 215000);
             				PlayerInfo[playerid][pDrugs] += 500;
             				OnPlayerUpdate(playerid);
             			}
					} */
				}
	        }
	        else
	        {
	        SendClientMessage(playerid, COLOR_WHITE, "No estas en el mercado PURETAS");
	        }
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/unirse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsPlayerConnected(playerid))
			{
                if(gTeam[playerid] == 20 || gTeam[playerid] == 21 || gTeam[playerid] == 24 || gTeam[playerid] == 25)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You must be a Civilian (Not Wanted) or a Family Member to get a Job !");
			        return 1;
			    }
				/*else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1677.1489,-1634.3535,14.2266))
				{
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Abogado, se te aplicara un contrato de 5 Horas");
				    SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Abogado, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    GettingJob[playerid] = 2;
				}*/
				/*if (PlayerToPoint(4, playerid,2127.8315,-1685.5144,15.0859))
	    		{
	        		if(PlayerInfo[playerid][pMember] > 0
					|| PlayerInfo[playerid][pFMember] < 255
					|| PlayerInfo[playerid][pLeader] > 0)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   Ya estas en una faccion!");
           				return 1;
					}
	    			PlayerInfo[playerid][pMember] = 17;
					PlayerInfo[playerid][pRank] = 1;
   					PlayerInfo[playerid][pModel] = 103;
					PlayerInfo[playerid][pChar] = 103;
   					SetPlayerSkin(playerid, 103);

   					SetSpawnInfo(playerid, 5, 103,0.0,0.0,0.0,0,0,0,0,0,0,0);
   					PlayerInfo[playerid][pTeam] = 5;
   					gTeam[playerid] = 5;

   					SendClientMessage(playerid, COLOR_GREY,"Ahora perteneces a la North Street Gang, una banda de libre entrada.");
   					SendClientMessage(playerid, COLOR_GREY,"Puedes ver tus nuevos comandos en /Ayuda.");
   					return 1;
				}
				else if (PlayerToPoint(4, playerid,731.8565,-1276.1882,17.6484))
	    		{
	        		if(PlayerInfo[playerid][pMember] > 0
					|| PlayerInfo[playerid][pFMember] < 255
					|| PlayerInfo[playerid][pLeader] > 0)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   Ya estas en una faccion!");
           				return 1;
					}
	    			PlayerInfo[playerid][pMember] = 19;
					PlayerInfo[playerid][pRank] = 1;
   					PlayerInfo[playerid][pModel] = 170;
   					PlayerInfo[playerid][pChar] = 170;
   					SetPlayerSkin(playerid, 170);

   					SetSpawnInfo(playerid, 5, 19,0.0,0.0,0.0,0,0,0,0,0,0,0);
   					PlayerInfo[playerid][pTeam] = 5;
   					gTeam[playerid] = 5;

   					SendClientMessage(playerid, COLOR_GREY,"Ahora eres un Paccino Norteño, una banda de libre entrada.");
   					SendClientMessage(playerid, COLOR_GREY,"Puedes ver tus nuevos comandos en /Ayuda.");
   					return 1;
				}
				else if (PlayerToPoint(4, playerid,501.1876,-75.7067,998.7578))
	    		{
	        		if(PlayerInfo[playerid][pMember] > 0
					|| PlayerInfo[playerid][pFMember] < 255
					|| PlayerInfo[playerid][pLeader] > 0)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   Ya estas en una faccion!");
           				return 1;
					}
	    			PlayerInfo[playerid][pMember] = 18;
					PlayerInfo[playerid][pRank] = 1;
   					PlayerInfo[playerid][pModel] = 247; //100,133,181
   					PlayerInfo[playerid][pChar] = 247;
   					SetPlayerSkin(playerid, 247);

   					SetSpawnInfo(playerid, 5, 100,0.0,0.0,0.0,0,0,0,0,0,0,0);
   					PlayerInfo[playerid][pTeam] = 5;
   					gTeam[playerid] = 5;

   					SendClientMessage(playerid, COLOR_GREY,"Ahora perteneces a la banda de moteros Cobras, una banda de libre entrada.");
   					SendClientMessage(playerid, COLOR_GREY,"Puedes ver tus nuevos comandos en /Ayuda.");
   					return 1;
				}
				else if (PlayerToPoint(4, playerid,-1037.1545,-1313.3037,129.2635))
	    		{
	        		if(PlayerInfo[playerid][pMember] > 0
					|| PlayerInfo[playerid][pFMember] < 255
					|| PlayerInfo[playerid][pLeader] > 0)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   Ya estas en una faccion!");
           				return 1;
					}
	    			PlayerInfo[playerid][pMember] = 20;
					PlayerInfo[playerid][pRank] = 1;
   					PlayerInfo[playerid][pModel] = 161; //100,133,181
   					PlayerInfo[playerid][pChar] = 161;
   					SetPlayerSkin(playerid, 161);

   					SetSpawnInfo(playerid, 5, 100,0.0,0.0,0.0,0,0,0,0,0,0,0);
   					PlayerInfo[playerid][pTeam] = 5;
   					gTeam[playerid] = 5;

   					SendClientMessage(playerid, COLOR_GREY,"Ahora perteneces a Los Puretas, una banda de libre entrada.");
   					SendClientMessage(playerid, COLOR_GREY,"Puedes ver tus nuevos comandos en /Ayuda.");
   					return 1;
				}*/
				if(PlayerInfo[playerid][pJob] != 0)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Tu tienes un trabajo ya usa /dejartrabajo para abandonarlo !");
				    return 1;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1474.3314,-1862.4025,13.5469))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 6)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 6 para ser detective.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Detective, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Detective, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    GettingJob[playerid] = 1;
				    return 1;
				}
			    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1087.7284,-923.1658,43.3906))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 1)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 1 para ser prostituta.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Prostituta, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Prostituta, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    GettingJob[playerid] = 3;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2072.5486,-1582.8029,13.4741))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 4)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 4 para ser vendedor de drogas.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Vendedor de Drogas, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Vendedor de Drogas, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    GettingJob[playerid] = 4;
				}
				else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1139.4526,-1760.9469,13.5946))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 1)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 1 para ser taxista.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Taxista, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Taxista, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    GettingJob[playerid] = 24;
				}
			/*	else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1806.6814,-2068.5959,13.5598))
				{
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Mecanico, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Mecanico, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_WHITE, "Esta opcion ha sido desabilitada por el Lider le la Faccion.");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    //GettingJob[playerid] = 7;
				}*/
			/*	else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,965.5573,-1252.2561,16.9734))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 7)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 7 para ser ladrón de vehículos.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Ladron de Vehiculos, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Ladron de Coches, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    GettingJob[playerid] = 5;
				}*/
			    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 616.0538,-1530.2815,15.1988))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 7)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 7 para ser guardaespaldas.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Guardaespaldas, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Guardaespaldas, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    GettingJob[playerid] = 8;
		  		}
	  		    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 2281.6797,-2364.6204,13.5469))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 5)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 5 para ser camionero.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Camionero, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Camionero, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    GettingJob[playerid] = 9;
		  		}
		  	    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 2450.3831,-2620.5769,13.6646))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 7)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 7 para ser mozo de almacén.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Mozo de Almacen, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Mozo de Almacen, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    GettingJob[playerid] = 10;
		  		}
		  		/*else if (GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,766.0804,14.5133,1000.7004))
		  		{
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Boxeador, se te aplicara un contrato de 5 Horas");
				    SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Boxeador, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    GettingJob[playerid] = 12;
		  		}*/
		  		    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 816.4208,856.9929,12.7891))
		  		{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 10)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 10 para ser minero.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Mozo de Almacen, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser minero, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[-----------------------------------------------------------------------]");
				    GettingJob[playerid] = 11;
		  		}
                else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 1815.9800,-1808.7660,3.9844))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 1)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 1 para ser mendigo.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Mendigo, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Mendigo, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
				    GettingJob[playerid] = 13;
		  		}
		        else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 2013.2556,-1434.5009,13.5547))
		  		{	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Repartidor de Periodicos, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Repartidor de Periodicos, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
				    GettingJob[playerid] = 15;
		  		}
		   	    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 1247.9318,-1561.0044,13.5556))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 9)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 9 para ser comercial.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Comercial, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Comercial, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
				    GettingJob[playerid] = 16;
		  		}
		   	    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 2105.4858,-1806.4725,13.5547))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 1)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 1 para ser pizzero.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Rep. de Pizzas, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Rep. de Pizzas, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
				    GettingJob[playerid] = 17;
		  		}
		   	    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, -381.2316,-1438.8787,25.7266))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 4)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 4 para ser granjero.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Granjero, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Granjero, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
				    GettingJob[playerid] = 18;
		  		}
		   	    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 1629.2969,-1903.3669,13.5531))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 1)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 1 para ser barrendero.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Barrendero, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Barrendero, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
				    GettingJob[playerid] = 21;
		  		}
		  		else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 2110.9067,-2078.4744,13.5544))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 2)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 2 para ser Basurero.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Basurero, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Basurero, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
				    GettingJob[playerid] = 25;
		  		}
		   	    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 213.8549,-230.5761,1.7786))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 12)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 12 para ser proveedor de materiales.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Prov. Materiales, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Prov. Materiales, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
				    GettingJob[playerid] = 22;
		  		}
		   	    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 2003.0460,-1071.8668,24.5729))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 12)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 12 para ser proveedor de drogas.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Prov. de Drogas, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Prov. de Drogas, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
				    GettingJob[playerid] = 20;
		  		}
		   	    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, -86.1251,2.6412,3.1172))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 9)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 9 para ser agricultor de drogas.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Agricultor de Drogas, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Agricultor. de Drogas, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
				    GettingJob[playerid] = 19;
		  		}
		   	    else if (GetPlayerState(playerid) == 1 && PlayerToPoint(4.0, playerid, 2137.6624,-2282.3455,20.6719))
				{
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
				}
					 if(PlayerInfo[playerid][pLevel] < 14)
	           	{
	                SendClientMessage(playerid, COLOR_GRAD1, "  Necesitas nivel 14 para ser vendedor de armas.");
                    return 1;
	     	    }
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
					//SendClientMessage(playerid, COLOR_WHITE, "Al aceptar el trabajo de Vendedor de Armas, se te aplicara un contrato de 5 Horas");
				    //SendClientMessage(playerid, COLOR_WHITE, "Si quieres abandonar el trabajo deberas cumplir ese contrato primero");
				    SendClientMessage(playerid, COLOR_WHITE, "Si estas seguro de que deseas ser Vendedor de Armas, Escribe: /aceptar trabajo");
				    SendClientMessage(playerid, COLOR_GREEN, "[---------------------------------------------------------------------------------]");
				    GettingJob[playerid] = 23;
		  		}
		  		else
		  		{
		  		    SendClientMessage(playerid, COLOR_GREY, "  No estas en ninguna zona en la que te puedas unir a algo !");
		  		}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Tu tienes un trabajo ya usa /dejartrabajo para abandonarlo !");
			}
		}//not connected
	    return 1;
	}
	if(strcmp(cmd, "/repostar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsAtGasStation(playerid))
			{
			    if(Gas[idcar] <= 99)
			    {
			    	TogglePlayerControllable(playerid, 0);
			    	GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Repostando su vehiculo, espere un momento",2000,3);
					SetTimer("Fillup",RefuelWait,0);
					Refueling[playerid] = 1;
				}
				else
				{
				    GameTextForPlayer(playerid,"~r~~n~~n~~n~~n~~n~~n~~n~~n~~n~Vehiculo repostado",2000,3);
				}
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   No estas en una gasolinera!");
			}
		}
    	return 1;
	}
	if(strcmp(cmd, "/fillcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pFuel] > 0)
		    {
		        if(Gas[gLastCar[playerid]] < 81)
		        {
			        SendClientMessage(playerid, COLOR_WHITE, "   Los vehiculos del estado tienen rebaja del 20%.");
			        Gas[gLastCar[playerid]] += 20;
			        PlayerInfo[playerid][pFuel] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Aún tiene suficiente gasolina para continuar !");
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No tienes gasolina!");
		    }
		}
		return 1;
	}
	if(strcmp(cmd, "/tazer", true) ==0 || strcmp(cmd, "/ta", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No puedes usar esto dentro de un vehiculo!");
			        return 1;
			    }
			    new suspect = GetClosestPlayer(playerid);
			    if(IsPlayerConnected(suspect))
				{
				    if(KnockedDown[playerid] == 1)
     				{
	            		SendClientMessage(playerid, COLOR_GREY, "Has sufrido un fuerte golpe");
	            		return 1;
	        		}
	        		if(SinTazer[playerid] == 1)
	        		{
	            		SendClientMessage(playerid, COLOR_GREY, "No llevas el Tazer.");
	            		return 1;
	        		}
				    if(PlayerCuffed[suspect] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Este jugador ya esta tazeado!");
				        return 1;
				    }
				    if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
					{
					    if(gTeam[suspect] == 2)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   No eres de la LSPD/FBI!");
					        return 1;
					    }
					    if(IsPlayerInAnyVehicle(suspect))
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   El sospechoso esta en un vehiculo!");
					        return 1;
					    }
					    GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new randt = random(4)+1;
						if(randt == 1)
						{
							format(string, sizeof(string), "* %s saca un tazer de su cinturón.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						    format(string, sizeof(string), "* %s dispara con el tazer a %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							format(string, sizeof(string), "* %s intenta dejar frito a %s pero falla.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
						}
						else
						{
						    format(string, sizeof(string), "* %s saca un tazer de su cinturon.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						    format(string, sizeof(string), "* %s dispara con el tazer a %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            format(string, sizeof(string), "* %s intenta dejar frito a %s y lo consigue.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
							format(string, sizeof(string), "* Has sido tazeado por %s durante 20 segundos.", sendername);
							SendClientMessage(suspect, COLOR_WHITE, string);
							format(string, sizeof(string), "* Has tazeado a %s durante 20 segundos.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							GameTextForPlayer(suspect, "~r~Tazeado", 2500, 3);
							TogglePlayerControllable(suspect, 0);
							ApplyAnimation(suspect, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
							PlayerCuffed[suspect] = 1;
							PlayerCuffedTime[suspect] = 20;
						}
		            }
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   No hay nadie cerca tulla!");
					    return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres de la LSPD/FBI");
			}
		}//not connected
	    return 1;
	}
	if(strcmp(cmd, "/areacurar", true) ==0 || strcmp(cmd, "/avida", true) ==0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    new suspect = GetClosestPlayer(playerid);
			    if(IsPlayerConnected(suspect))
				{
				    if(GetDistanceBetweenPlayers(playerid,suspect) < 20)
					{
					    GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						ApplyAnimation(suspect,"SMOKING", "M_smk_out", 4.0, 1, 0, 0, 0, 0, 1);
						SetTimerEx("BeberBotella", 1000, false, "i", suspect);
						SetPlayerSpecialAction(suspect, SPECIAL_ACTION_DRINK_BEER);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   No hay nadie cerca tulla!");
					    return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres Admin");
			}
		}//not connected
	    return 1;
	}
	if(strcmp(cmd, "/areacurar2", true) ==0 || strcmp(cmd, "/avida2", true) ==0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(GetDistanceBetweenPlayers(playerid,giveplayerid) < 20)
					{
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						ApplyAnimation(giveplayerid,"SMOKING", "M_smk_out", 4.0, 1, 0, 0, 0, 0, 1);
						SetTimerEx("BeberBotella", 1000, false, "i", giveplayerid);
						SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_DRINK_BEER);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   No hay nadie cerca tulla!");
					    return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres Admin");
			}
		}//not connected
	    return 1;
	}
	if(strcmp(cmd, "/agent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
	        {
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
 				if(!strlen(x_nr))
				{
				    SendClientMessage (playerid, COLOR_WHITE, "ESCRIBE: /agent list then /agent [skin id]");
				    return 1;
				}
				if (PlayerToPoint(20, playerid, 246.5625,120.3976,1003.2629))
				{
				    if(strcmp(x_nr,"list",true) == 0)
				    {
						SendClientMessage(playerid, COLOR_YELLOW, "______________Skin_List______________");
						SendClientMessage(playerid, COLOR_GRAD1, "1: Agent A1         2: Agent A2");
      					SendClientMessage(playerid, COLOR_GRAD2, "3: Agent B1         4: Agent B2");
      					SendClientMessage(playerid, COLOR_GRAD3, "5: Public Agent     6: Agency Intern A");
      					SendClientMessage(playerid, COLOR_GRAD4, "7: Agency Intern B  8: Agency Intern C");
           				SendClientMessage(playerid, COLOR_GRAD5, "9: Lab Agent        10: Analyst");
             	  		SendClientMessage(playerid, COLOR_GRAD6, "11: Fem. Agent A    12: Fem. Agent B");
               			return 1;
				    }
                 	else if(strcmp(x_nr,"1",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 163);
                        SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in the Agent A1 suit.");
						return 1;
					}
                 	else if(strcmp(x_nr,"2",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 164);
                        SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in the Agent A2 suit.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"3",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 165);
                        SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in the Agent B1 suit.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"4",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 166);
                        SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in the Agent B2 suit.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"5",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 166);
                        SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in the Public Agent FBI suit.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"6",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 187);
                        SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in the Agency Intern A suit.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"7",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 17);
                        SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in the Agency Intern B suit.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"8",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 186);
                        SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in the Agency Intern C suit.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"9",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 70);
                        SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in a lab coat.");
                        return 1;
					}
                 	else if(strcmp(x_nr,"10",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 57);
                        SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in an analyst suit.");
                        return 1;
					}
					else if(strcmp(x_nr,"11",true) == 0)
					{
					    SetPlayerSkin(playerid, 150);
					    SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in Female Agent A.");
					}
					else if(strcmp(x_nr,"12",true) == 0)				{
					    SetPlayerSkin(playerid, 141);
					    SendClientMessage(playerid, COLOR_GRAD2, "You are now dressed in Female Agent B.");
					}
				}
				else
                {
                   	SendClientMessage(playerid, COLOR_GRAD2, "You are not in the HQ!");
                   	return 1;
                }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You are not an FBI agent!");
                return 1;
 			}
   		}
		return 1;
   	}
   	if(strcmp(cmd, "/encubrir", true) == 0)
    {
    	if(IsPlayerConnected(playerid))
     	{
      		if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1)
        	{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Necesitas ser rango 3!");
     				return 1;
				}
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr))
				{
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /encubrir lista a continuacion /encubrir [ID del skin]");
					return 1;
  				}
    			if (PlayerToPoint(3, playerid,255.3,77.4,1003.6) || PlayerToPoint(3,playerid,-1616.1294,681.1594,7.1875) || PlayerInfo[playerid][pLocal] != 255)
     			{
      				if(strcmp(x_nr,"list",true) == 0)
        			{
						SendClientMessage(playerid, COLOR_YELLOW, "_________Skin_List_________");
						SendClientMessage(playerid, COLOR_GRAD1, "1: Agent 2: Staff");
      					SendClientMessage(playerid, COLOR_GRAD2, "3: Gay man 4: Hustler");
      					SendClientMessage(playerid, COLOR_GRAD3, "5: Random Male 6: Swampy Hippy");
      					SendClientMessage(playerid, COLOR_GRAD4, "7: Hotel Waiter (Girl) 8: Random Female");
           				SendClientMessage(playerid, COLOR_GRAD5, "9: Michelle Cannes 10: Katie Zhan");
             	  		SendClientMessage(playerid, COLOR_GRAD6, "11: Biker uniform 0: Go back to your normal uniform");
               			return 1;
               		}
                 	else if(strcmp(x_nr,"1",true) == 0)
                    {
	                    SetPlayerSkin(playerid, 165);
                        SendClientMessage(playerid, COLOR_GRAD2, "Ahora está encubierto como un agente.");
                        return 1;
					}
		            else if(strcmp(x_nr,"2",true) == 0)
                    {
                      	SetPlayerSkin(playerid, 217);
                        SendClientMessage(playerid, COLOR_GRAD2, "Ahora está encubierto como un miembro del personal.");
                        return 1;
                    }
                    else if(strcmp(x_nr,"3",true) == 0)
					{
						SetPlayerSkin(playerid, 170);
						SendClientMessage(playerid, COLOR_GRAD2, "Ahora está encubierto como un hombre gay.");
						return 1;
					}
                    else if(strcmp(x_nr,"4",true) == 0)
                    {
                       	SetPlayerSkin(playerid, 21);
                        SendClientMessage(playerid, COLOR_GRAD2, "Ahora está encubierto como Hustler.");
                        return 1;
					}
					else if(strcmp(x_nr,"5",true) == 0)
					{
                       	SetPlayerSkin(playerid, 60);
                        SendClientMessage(playerid, COLOR_GRAD2, "Ahora está encubierto como un individuo al azar.");
                        return 1;
					}
                    else if(strcmp(x_nr,"6",true) == 0)
                    {
                       	SetPlayerSkin(playerid, 72);
                        SendClientMessage(playerid, COLOR_GRAD2, "Ahora está encubierto como un hippie.");
                        return 1;
                    }
                    else if(strcmp(x_nr,"7",true) == 0)
                   	{
                        SetPlayerSkin(playerid, 152);
                        SendClientMessage(playerid, COLOR_GRAD2, "Ahora está encubierto como un camarero del hotel.");
                        return 1;
                    }
      				else if(strcmp(x_nr,"8",true) == 0)
				 	{
 						SetPlayerSkin(playerid, 233);
      					SendClientMessage(playerid, COLOR_GRAD2, "Ahora está encubierta como una chica al azar.");
           				return 1;
           			}
          			else if(strcmp(x_nr,"9",true) == 0)
           			{
               			SetPlayerSkin(playerid, 192);
                   		SendClientMessage(playerid, COLOR_GRAD2, "Ahora está encubierto como Michelle Cannes.");
                   		return 1;
                   	}
                    else if(strcmp(x_nr,"10",true) == 0)
                    {
                  		SetPlayerSkin(playerid, 193);
                       	SendClientMessage(playerid, COLOR_GRAD2, "Ahora está encubierto como Katie Zahn.");
                        return 1;
                    }
                    else if(strcmp(x_nr,"11",true) == 0)
                    {
                  		SetPlayerSkin(playerid, 284);
                       	SendClientMessage(playerid, COLOR_GRAD2, "Te has puesto tu uniforme Biker.");
                        return 1;
                    }
                    else if(strcmp(x_nr,"0",true) == 0)
                    {
                   		if(PlayerInfo[playerid][pRank] == 3)
                       	{
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	format(string,sizeof(string), "* %s pone su uniforme de incognito de vuelta en la taquilla.", sendername);
                          	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                           	SafeGivePlayerWeapon(playerid, 3, 1);
                           	SafeGivePlayerWeapon(playerid, 24, 50);
                            SetPlayerSkin(playerid, 280);
                        }
                        else if(PlayerInfo[playerid][pRank] > 3)
                       	{
                        	GetPlayerName(playerid, sendername, sizeof(sendername));
                        	format(string,sizeof(string), "* %s pone su uniforme de incognito de vuelta en la taquilla.", sendername);
                          	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                           	SafeGivePlayerWeapon(playerid, 3, 1);
                           	SafeGivePlayerWeapon(playerid, 24, 50);
                            SetPlayerSkin(playerid, 281);
                        }
                        else if(PlayerInfo[playerid][pRank] == 6)
                        {
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string,sizeof(string), "* %s pone su uniforme de incognito de vuelta en la taquilla.", sendername);
                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            SafeGivePlayerWeapon(playerid, 3, 1);
                            SafeGivePlayerWeapon(playerid, 24, 50);
                            SetPlayerSkin(playerid, 283);
                        }
					}
				}
				else
                {
                   	SendClientMessage(playerid, COLOR_GRAD2, "No estas en las taquillas!");
                   	return 1;
                }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "No eres un policia!");
                return 1;
 			}
   		}
		return 1;
   	}
	if(strcmp(cmd, "/esposar", true) == 0 || strcmp(cmd, "/esp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /esposar [ID del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(gTeam[giveplayerid] == 2 || IsACop(giveplayerid))
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   No puedes esposar a un policía !");
					        return 1;
				        }
					    if(PlayerCuffed[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Este jugador ya esta esposado !");
					        return 1;
					    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Has sido esposado por %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* Has esposado a %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s ha esposado a %s, no irá a ninguna parte.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~Esposado", 2500, 3);
								TogglePlayerControllable(giveplayerid, 0);
								PlayerCuffed[giveplayerid] = 2;
								PlayerCuffedTime[giveplayerid] = 99999999999999;

						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca de ti !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Este jugador esta desconectado !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres un policía!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/desposar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /desposar [ID del jugador]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "No puedes desposarte!"); return 1; }
							if(PlayerCuffed[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Has sido desposado por %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* Has desesposado a %s.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								GameTextForPlayer(giveplayerid, "~g~Desesposado", 2500, 3);
								TogglePlayerControllable(giveplayerid, 1);
								PlayerCuffed[giveplayerid] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta esposado !");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerda de ti !");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado !");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres un policía !");
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/buscar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 1)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   No eres un Detective!");
				return 1;
		    }
		    if(PlayerOnMission[playerid] > 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Estas en una Mision, no puedes usar este Comando ahora!");
			    return 1;
			}
			if(UsedFind[playerid] != 0 && PlayerInfo[playerid][pDetSkill] < 401)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Acabas de buscar a alguien, espera 2 Minutos!");
			    return 1;
			}
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: /buscar [ID Jugador]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "No te puedes buscar a ti mismo!"); return 1; }
			        new points;
			        new level = PlayerInfo[playerid][pDetSkill];
					if(level >= 0 && level <= 50)
					{ points = 4; }
					else if(level >= 51 && level <= 100)
					{ points = 6; }
					else if(level >= 101 && level <= 200)
					{ points = 8; }
					else if(level >= 201 && level <= 400)
					{ points = 10; }
					else if(level >= 401)
					{ points = 12; }
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					FindTime[playerid] = 1;
					FindTimePoints[playerid] = points;
					PlayerInfo[playerid][pDetSkill] ++;
					UsedFind[playerid] = 1;
					if(PlayerInfo[playerid][pDetSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Detective es de Nivel 2, pronto podras buscar a otros miembros de la Faccion."); }
					else if(PlayerInfo[playerid][pDetSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Detective es de Nivel 3, pronto podras buscar a otros miembros de la Faccion."); }
					else if(PlayerInfo[playerid][pDetSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Detective es de Nivel 4, ahora puedes buscar a otros miembros de la Faccion."); }
					else if(PlayerInfo[playerid][pDetSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Detective es de Nivel 5, ahora puedes buscar a otros miembros de la Faccion."); }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   ID no valida!");
			}
		}
	    return 1;
	}
	if(strcmp(cmd,"/removegps",true)==0)
 	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
				DisablePlayerCheckpoint(playerid);
			}
			else if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4)
			{
				DisablePlayerCheckpoint(playerid);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/proteger", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 8)
		    {
				SendClientMessage(playerid, COLOR_GREY, "  Tu no eres un Guardaespaldas!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: /proteger [ID o Nombre] [precio]");
				return 1;
			}
			new money;
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Precio tiene que ser entre 1, o 99999!"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   No te puedes protejer a ti mismo !");
					        return 1;
					    }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Tu ofreces proteccion a %s por $%d.", giveplayer, money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Guardaespaldas %s te ofrece su protecion por $%d, (usar /aceptar guardaespalda) para aceptarlo.", sendername, money);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						GuardOffer[giveplayerid] = playerid;
						GuardPrice[giveplayerid] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Este jugador esta demasiado lejos !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   El jugador esta desconectado!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/liberar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 2)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No eres Abogado!");
		        return 1;
		    }
		    if(PlayerInfo[playerid][pLawSkill] >= 401)
		    {
		        ApprovedLawyer[playerid] = 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "COMANDO: /liberar [ID o Nombre]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID)
                {
                    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "No te puedes liberar a ti mismo!"); return 1; }
					if(PlayerInfo[giveplayerid][pJailed] == 1 && ApprovedLawyer[playerid] == 1)
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Liberas a %s de la prision.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Has sido liberado, por el Abogado %s.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						ApprovedLawyer[playerid] = 0;
						WantLawyer[giveplayerid] = 0;
						CallLawyer[giveplayerid] = 0;
						JailPrice[giveplayerid] = 0;
						PlayerInfo[giveplayerid][pJailTime] = 1;
						PlayerInfo[playerid][pLawSkill] ++;
						if(PlayerInfo[playerid][pLawSkill] == 50)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Abogado es de Nivel 2, ahora ganas mas Dinero y tienes menos tiempo de Recarga."); }
						else if(PlayerInfo[playerid][pLawSkill] == 100)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Abogado es de Nivel 3, ahora ganas mas Dinero y tienes menos tiempo de Recarga."); }
						else if(PlayerInfo[playerid][pLawSkill] == 200)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Abogado es de Nivel 4, ahora ganas mas Dinero y tienes menos tiempo de Recarga."); }
						else if(PlayerInfo[playerid][pLawSkill] == 400)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Tu Habilidad como Abogado es de Nivel 5, ahora ganas mas Dinero y tienes menos tiempo de Recarga."); }
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Este Jugador no necesita un Abogado porque no esta encarcelado!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Este Jugador no esta Conectado!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd,"/cancelar",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|_________________ Cancelar _________________|");
				SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /cancelar [nombre]");
				SendClientMessage(playerid, COLOR_GREY, "  Sex, Drogas, License, reparar, Abogado, Guardaespalda, entrevista, repostage, Car, Boxing,limosna");
				SendClientMessage(playerid, COLOR_GREY, "  Taxi, Bus, Medic, Mechanic, Paper, Ticket, Witness, Marriage, Divorce, comprarcoche");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
			if(strcmp(x_job,"sex",true) == 0) {	SexOffer[playerid] = 999; SexPrice[playerid] = 0; }
			else if(strcmp(x_job,"drogas",true) == 0) { DrugOffer[playerid] = 999; DrugPrice[playerid] = 0; DrugGram[playerid] = 0; }
			else if(strcmp(x_job,"license",true) == 0) { LicenseOffer[playerid] = 999; LicensePrice[playerid] = 0; LicenseType[playerid] = 0; }
			else if(strcmp(x_job,"reparar",true) == 0) {	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
			else if(strcmp(x_job,"Abogado",true) == 0) { WantLawyer[playerid] = 0; CallLawyer[playerid] = 0; }
			else if(strcmp(x_job,"bodyguard",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
			else if(strcmp(x_job,"entrevista",true) == 0) { LiveOffer[playerid] = 999; }
			else if(strcmp(x_job,"repostage",true) == 0) { RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; }
			else if(strcmp(x_job,"car",true) == 0) { CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; }
			else if(strcmp(x_job,"limosna",true) == 0) { BegOffer[playerid] = 999; BegPrice[playerid] = 0; }
			else if(strcmp(x_job,"boxing",true) == 0) { BoxOffer[playerid] = 999; }
			else if(strcmp(x_job,"paper",true) == 0) { PaperOffer[playerid] = 999; }
			else if(strcmp(x_job,"witness",true) == 0) { MarryWitnessOffer[playerid] = 999; }
			else if(strcmp(x_job,"marriage",true) == 0) { ProposeOffer[playerid] = 999; }
			else if(strcmp(x_job,"divorce",true) == 0) { DivorceOffer[playerid] = 999; }
			else if(strcmp(x_job,"comprarcoche",true) == 0) { OwnableCarOffer[playerid] = 9999; OwnableCarID[playerid] = 0; OwnableCarPrice[playerid] = 0; }
			else if(strcmp(x_job,"multa",true) == 0) { TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; }
			else if(strcmp(x_job,"medic",true) == 0) { if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller !"); return 1; } } }
			else if(strcmp(x_job,"mechanic",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller !"); return 1; } } }
			else if(strcmp(x_job,"Pizza",true) == 0) { if(IsPlayerConnected(PizzaCall)) { if(PizzaCall == playerid) { PizzaCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You are not the current Caller!"); return 1; } } }
			else if(strcmp(x_job,"taxi",true) == 0)
			{
			    if(TaxiCall < 999)
			    {
			        if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
			        {
			            TaxiAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
						TaxiCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						TaxiCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(TaxiCall)) { if(TaxiCall == playerid) { TaxiCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(TaxiAccepted[i] < 999)
						        {
							        if(TaxiAccepted[i] == playerid)
							        {
							            TaxiAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Canceled the call", 5000, 1);
							            TaxiCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(BusCall < 999)
			    {
			        if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
			        {
			            BusAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
						BusCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						BusCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(BusCall)) { if(BusCall == playerid) { BusCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(BusAccepted[i] < 999)
						        {
							        if(BusAccepted[i] == playerid)
							        {
							            BusAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Bus Caller~n~~r~Canceled the call", 5000, 1);
							            BusCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
							        }
						        }
						    }
						}
					}
				}
			}
			else { return 1; }
			format(string, sizeof(string), "* You have canceled: %s.", x_job);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}//not connected
		return 1;
	}
//ACCEPT COMMANDS (Cops)
	if(strcmp(cmd,"/aceptar",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Aceptar __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USAR: /aceptar [nombre]");
				SendClientMessage(playerid, COLOR_GREY, "  Sexo, Drogas, reparar, abogado, guardaespalda, trabajo, Live, repostage, comprarcoche");
				SendClientMessage(playerid, COLOR_GREY, "  Taxi, limosna, Bus, Boxing, Medic, Mechanic, Periodico, Ticket, Pizza");
				SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
				return 1;
			}
	        /*if(strcmp(x_job,"car",true) == 0)
			{
			    if(CarOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(CarOffer[playerid]))
			        {
			            if(GetPlayerMoney(playerid) > CarPrice[playerid])
			            {
			                if(IsPlayerInVehicle(CarOffer[playerid], CarID[playerid]))
			                {
				                GetPlayerName(CarOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
				                new points;
				                PlayerInfo[CarOffer[playerid]][pCarSkill] ++;
				                if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 50)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Your Car Dealer Skill is now Level 2, Players that buy Cars from you can call it more often."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 100)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Your Car Dealer Skill is now Level 3, Players that buy Cars from you can call it more often."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 200)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Your Car Dealer Skill is now Level 4, Players that buy Cars from you can call it more often."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 400)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Your Car Dealer Skill is now Level 5, Players that buy Cars from you can call it more often."); }
								new level = PlayerInfo[CarOffer[playerid]][pCarSkill];
								if(level >= 0 && level <= 50) { points = 1; }
								else if(level >= 51 && level <= 100) { points = 2; }
								else if(level >= 101 && level <= 200) { points = 3; }
								else if(level >= 201 && level <= 400) { points = 4; }
								else if(level >= 401) { points = 4; }
				                format(string, sizeof(string), "* You bought a Car for $%d, from Car Dealer %s. (You can use /callcar %d times)",CarPrice[playerid],giveplayer,points);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* You sold your Car to %s for $%d, the player can use /callcar %d times.",sendername,CarPrice[playerid],points);
								SendClientMessage(CarOffer[playerid], COLOR_WHITE, string);
								PlayerInfo[CarOffer[playerid]][pPayCheck] += CarPrice[playerid] * 5;
								SafeGivePlayerMoney(playerid, -CarPrice[playerid]);
								RemovePlayerFromVehicle(CarOffer[playerid]);
								CarCalls[playerid] = points;
						        CarOffer[playerid] = 999;
								CarPrice[playerid] = 0;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   The Car Dealer is not in the offerd Car !");
						    	return 1;
							}
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   You cant afford the Car !");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No-one offered to buy a Car !");
				    return 1;
				}
			}*/
   			if(strcmp(x_job,"limosna",true) == 0)
			{
			    if(BegOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(BegOffer[playerid]))
			        {
			            if(GetPlayerMoney(playerid) > BegPrice[playerid])
			            {
                                GetPlayerName(BegOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
				                format(string, sizeof(string), "* Tu das $%d a %s, Dios le bendiga.",BegPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Tu recibes $%d de %s, baila para el.",BegPrice[playerid],sendername);
								SendClientMessage(BegOffer[playerid], COLOR_LIGHTBLUE, string);
							//	PlayerInfo[BegOffer[playerid]][pPayCheck] += BegPrice[playerid];
								SafeGivePlayerMoney(BegOffer[playerid],BegPrice[playerid])
								SafeGivePlayerMoney(playerid, -BegPrice[playerid]);
        				        BegOffer[playerid] = 999;
								BegPrice[playerid] = 0;
								return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  Usted no puede permitirse el lujo de dar el cambio, ¡qué vergüenza!!");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nadie te ha pedido limosna!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"divorce",true) == 0)
			{
			    if(DivorceOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(DivorceOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid]))
						{
						    GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* You have accepted %s's request to be his Marriage Witness.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s has accepted your request to be your Marriage Witness.", sendername);
							SendClientMessage(DivorceOffer[playerid], COLOR_WHITE, string);
							ClearMarriage(playerid);
							ClearMarriage(DivorceOffer[playerid]);
							PlayerInfo[playerid][pPhousekey] = 255;
							PlayerInfo[playerid][pPbiskey] = 255;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   The player that sent you the Divorce Papers is not near you !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No-one sent you any Divorce Papers !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"witness",true) == 0)
			{
			    if(MarryWitnessOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(MarryWitnessOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid]))
						{
						    GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* You have accepted %s's request to be his Marriage Witness.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s has accepted your request to be your Marriage Witness.", sendername);
							SendClientMessage(MarryWitnessOffer[playerid], COLOR_WHITE, string);
							MarryWitness[MarryWitnessOffer[playerid]] = playerid;
							MarryWitnessOffer[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   The player that requested you to be his Marriage Witness is not near you !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No-one asked you to be his Marriage Witness !");
				    return 1;
				}
			}
	        else if(strcmp(x_job,"marriage",true) == 0)
			{
			    if(ProposeOffer[playerid] < 999)
			    {
			        if(!PlayerToPoint(10.0, playerid, 2232.3047,-1333.1543,23.9815))
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   You are not at the Church in Jefferson !");
			            return 1;
			        }
			        if(IsPlayerConnected(ProposeOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid]))
						{
						    if(MarryWitness[ProposeOffer[playerid]] == 999)
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   The proposer doesn't have a Marriage Witness !");
						        return 1;
						    }
						    if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]]))
						    {
							    if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]]))
								{
								    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
									format(string, sizeof(string), "* You have accepted %s's request to be your Husband.", giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "* %s has accepted your request to be your Wife.", sendername);
									SendClientMessage(ProposeOffer[playerid], COLOR_WHITE, string);
									format(string, sizeof(string), "Priest: %s do you take %s as your lovely Husband? (type 'yes', anything else will reject the Marriage)", sendername, giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									MarriageCeremoney[playerid] = 1;
									ProposedTo[ProposeOffer[playerid]] = playerid;
									GotProposedBy[playerid] = ProposeOffer[playerid];
									MarryWitness[ProposeOffer[playerid]] = 999;
									ProposeOffer[playerid] = 999;
									return 1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "   The Marriage Witness is not near your proposer !");
								    return 1;
								}
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   The player that proposed to you is not near you !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No-one Proposed to you !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"Pizza",true) == 0)
   			{
       			if(PlayerInfo[playerid][pJob] != 17)
       			{
           			SendClientMessage(playerid, COLOR_GREY, "   You are not a Pizza Boy!");
        			return 1;
       			}
        		if(PizzaCallTime[playerid] > 0)
             	{
					SendClientMessage(playerid, COLOR_GREY, "   You have already accepted a Pizza order!");
        			return 1;
             	}
             	if(PlayerOnMission[playerid] > 0)
       			{
           			SendClientMessage(playerid, COLOR_GREY, "   On a mission right now, can't use this command!");
           			return 1;
       			}
             	if(PizzaCall < 999)
             	{
					if(IsPlayerConnected(PizzaCall))
					{
                    	GetPlayerName(playerid, sendername, sizeof(sendername));
                  		GetPlayerName(PizzaCall, giveplayer, sizeof(giveplayer));
                  		format(string, sizeof(string), "* You have accepted the Pizza Order from %s, you have 90 seconds to get there.",giveplayer);
      					SendClientMessage(playerid, COLOR_WHITE, string);
      					SendClientMessage(playerid, COLOR_WHITE, "* After the 90 seconds the Red Marker will dissapear.");
                        format(string, sizeof(string), "* Pizza boy %s has accepted your Pizza Order please wait at your current Position.",sendername);
      					SendClientMessage(PizzaCall, COLOR_WHITE, string);
      					new Float:X,Float:Y,Float:Z;
      					GetPlayerPos(PizzaCall, X, Y, Z);
      					SetPlayerCheckpoint(playerid, X, Y, Z, 5);
      					GameTextForPlayer(playerid, "~w~Pizza Caller~n~~r~Goto redmarker", 5000, 1);
      					PizzaCallTime[playerid] = 1;
      					PizzaCall = 999;
						return 1;
     				}
             	}
             	else
             	{
              		SendClientMessage(playerid, COLOR_GREY, "   No-one ordered a Pizza yet!");
        			return 1;
             	}
   			}
			else if(strcmp(x_job,"multa",true) == 0)
			{
			    if(TicketOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(TicketOffer[playerid]))
			        {
			            if (ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
						{
						if(GetPlayerMoney(playerid) < 20000)
				    {
             			SendClientMessage(playerid, COLOR_GREY, "No tienes suficiente dinero");
             			return 1;
             			}
				           	GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Tu has pagado una multa de $%d del Oficial %s.", TicketMoney[playerid], giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s ha pagado su multa de $%d.", sendername, TicketMoney[playerid]);
							SendClientMessage(TicketOffer[playerid], COLOR_WHITE, string);
							SafeGivePlayerMoney(playerid, - TicketMoney[playerid]);
							SafeGivePlayerMoney(TicketOffer[playerid], TicketMoney[playerid]);
							TicketOffer[playerid] = 999;
							TicketMoney[playerid] = 0;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   El Oficial no esta cerca de ti !");
						    return 1;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No-one offered you a Ticket !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"periodico",true) == 0)
			{
			    if(PaperOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(PaperOffer[playerid]))
			        {
			            if(BringingPaper[PaperOffer[playerid]] > 0)
			            {
			                if (ProxDetectorS(5.0, playerid, PaperOffer[playerid]))
							{
				            	GetPlayerName(PaperOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Has aceptado el Periodico del Repartidor %s (usa /leer Periodico, para leerlo).", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s ha aceptado tu Periodico.", sendername);
								SendClientMessage(PaperOffer[playerid], COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pTitle]);
								strmid(Paper[playerid][pTitle], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pMaker]);
								strmid(Paper[playerid][pMaker], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine1]);
								strmid(Paper[playerid][pLine1], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine2]);
								strmid(Paper[playerid][pLine2], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine3]);
								strmid(Paper[playerid][pLine3], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine4]);
								strmid(Paper[playerid][pLine4], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine5]);
								strmid(Paper[playerid][pLine5], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine6]);
								strmid(Paper[playerid][pLine6], string, 0, strlen(string), 255);
								format(string, sizeof(string), "%s", Paper[PaperOffer[playerid]][pLine7]);
								strmid(Paper[playerid][pLine7], string, 0, strlen(string), 255);
								GotPaper[playerid] = 1;
								PaperOffer[playerid] = 999;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   El Repartidor no esta cerca de ti!");
							    return 1;
							}
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No te han ofrecido ningun Periodico!");
				    return 1;
				}
			}
			else if(strcmp(x_job,"boxing",true) == 0)
			{
			    if(BoxOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(BoxOffer[playerid]))
			        {
			            new points;
			            new mypoints;
			            GetPlayerName(BoxOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
			            new level = PlayerInfo[BoxOffer[playerid]][pBoxSkill];
						if(level >= 0 && level <= 50) { points = 40; }
						else if(level >= 51 && level <= 100) { points = 50; }
						else if(level >= 101 && level <= 200) { points = 60; }
						else if(level >= 201 && level <= 400) { points = 70; }
						else if(level >= 401) { points = 80; }
						if(PlayerInfo[playerid][pJob] == 12)
						{
							new clevel = PlayerInfo[playerid][pBoxSkill];
							if(clevel >= 0 && clevel <= 50) { mypoints = 40; }
							else if(clevel >= 51 && clevel <= 100) { mypoints = 50; }
							else if(clevel >= 101 && clevel <= 200) { mypoints = 60; }
							else if(clevel >= 201 && clevel <= 400) { mypoints = 70; }
							else if(clevel >= 401) { mypoints = 80; }
						}
						else
						{
						    mypoints = 30;
						}
						format(string, sizeof(string), "* You have accepted the Boxing Challenge from %s, and will fight with %d Health.",giveplayer,mypoints);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* %s has accepted your Boxing Challenge Request, you will fight with %d Health.",sendername,points);
						SendClientMessage(BoxOffer[playerid], COLOR_WHITE, string);
						SetPlayerHealth(playerid, mypoints);
						SetPlayerHealth(BoxOffer[playerid], points);
						SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
						SetPlayerPos(playerid, 762.9852,2.4439,1001.5942); SetPlayerFacingAngle(playerid, 131.8632);
						SetPlayerPos(BoxOffer[playerid], 758.7064,-1.8038,1001.5942); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
						TogglePlayerControllable(playerid, 0); TogglePlayerControllable(BoxOffer[playerid], 0);
						GameTextForPlayer(playerid, "~r~Waiting", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Waiting", 3000, 1);
						new name[MAX_PLAYER_NAME];
						new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(playerid, name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Boxing News: Boxing Champion %s will fight VS %s, in 60 seconds (Gantom Ginmasio).",  sendername, giveplayer);
							OOCOff(COLOR_WHITE,string);
							TBoxer = playerid;
							BoxDelay = 60;
						}
						GetPlayerName(BoxOffer[playerid], name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Boxing News: Boxing Champion %s will fight VS %s, in 60 seconds (Gantom Gimnasio).",  giveplayer, sendername);
							OOCOff(COLOR_WHITE,string);
							TBoxer = BoxOffer[playerid];
							BoxDelay = 60;
						}
						BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
						if(BoxDelay < 1) { BoxDelay = 20; }
						InRing = 1;
						Boxer1 = BoxOffer[playerid];
						Boxer2 = playerid;
						PlayerBoxing[playerid] = 1;
						PlayerBoxing[BoxOffer[playerid]] = 1;
						BoxOffer[playerid] = 999;
						return 1;
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No-one offered you a Boxing Challenge !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"taxi",true) == 0)
			{
			    if(TransportDuty[playerid] != 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You are not a Taxi Driver !");
				    return 1;
			    }
	            if(TaxiCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   You have already accepted a Taxi Call !");
				    return 1;
	            }
	            if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   On a mission right now, can't use this command !");
			        return 1;
			    }
	            if(TaxiCall < 999)
	            {
	                if(IsPlayerConnected(TaxiCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(TaxiCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* You have accepted the Taxi Call from %s, you will see the marker untill you have reached it.",giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                        format(string, sizeof(string), "* Taxi Driver %s has accepted your Taxi Call please wait at your current Position.",sendername);
						SendClientMessage(TaxiCall, COLOR_WHITE, string);
						GameTextForPlayer(playerid, "~w~Taxi Caller~n~~r~Goto redmarker", 5000, 1);
						TaxiCallTime[playerid] = 1;
						TaxiAccepted[playerid] = TaxiCall;
						TaxiCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No-one called for a Taxi yet !");
			    	return 1;
	            }
			}
			else if(strcmp(x_job,"bus",true) == 0)
			{
			    if(TransportDuty[playerid] != 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You are not a Bus Driver !");
				    return 1;
			    }
	            if(BusCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   You have already accepted a Bus Call !");
				    return 1;
	            }
	            if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   On a mission right now, can't use this command !");
			        return 1;
			    }
	            if(BusCall < 999)
	            {
	                if(IsPlayerConnected(BusCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* You have accepted the Bus Call from %s, you will see the marker untill you have reached it.",giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
                        format(string, sizeof(string), "* Bus Driver %s has accepted your Bus Call please wait at your current Position.",sendername);
						SendClientMessage(BusCall, COLOR_WHITE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusCall, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						GameTextForPlayer(playerid, "~w~Bus Caller~n~~r~Goto redmarker", 5000, 1);
						BusCallTime[playerid] = 1;
						BusAccepted[playerid] = BusCall;
						BusCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No-one called for a Bus yet !");
			    	return 1;
	            }
			}
			else if(strcmp(x_job,"medic",true) == 0)
			{
			    if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
			    {
		            if(MedicCallTime[playerid] > 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   You have already accepted a Medic Call !");
					    return 1;
		            }
		            if(PlayerOnMission[playerid] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   On a mission right now, can't use this command !");
				        return 1;
				    }
		            if(MedicCall < 999)
		            {
		                if(IsPlayerConnected(MedicCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "* Tu has aceptado la llamada de %s, tienes 30 segundos para llegar al punto.",giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							SendClientMessage(playerid, COLOR_WHITE, "* En 30 segundos la marca roja desaprece ( Recomendamos la marque en el mapa).");
	                        format(string, sizeof(string), "* Medico %s ha aceptado tu llamada y se dirije a tu posicion.",sendername);
							SendClientMessage(MedicCall, COLOR_WHITE, string);
							new Float:X,Float:Y,Float:Z;
							GetPlayerPos(MedicCall, X, Y, Z);
							SetPlayerCheckpoint(playerid, X, Y, Z, 5);
							GameTextForPlayer(playerid, "~w~Medico Solicitado~n~~r~dirijete a la marca", 5000, 1);
							MedicCallTime[playerid] = 1;
							MedicCall = 999;
							return 1;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   No has llamado ningun medico !");
				    	return 1;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Tu no eres Medico !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"mechanic",true) == 0)
			{
			    if(PlayerInfo[playerid][pJob] != 7)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   You are not a Car Mechanic !");
				    return 1;
			    }
	            if(MechanicCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   You have already accepted a Mechanic Call !");
				    return 1;
	            }
	            if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   On a mission right now, can't use this command !");
			        return 1;
			    }
	            if(MechanicCall < 999)
	            {
	                if(IsPlayerConnected(MechanicCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(MechanicCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* You have accepted the Mechanic Call from %s, you have 90 Seconds to get there.",giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SendClientMessage(playerid, COLOR_WHITE, "* After the 90 Seconds the Red Marker will dissapear.");
                        format(string, sizeof(string), "* Car Mechanic %s has accepted your Mechanic Call please wait at your current Position.",sendername);
						SendClientMessage(MechanicCall, COLOR_WHITE, string);
						new Float:X,Float:Y,Float:Z;
						GetPlayerPos(MechanicCall, X, Y, Z);
						SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						GameTextForPlayer(playerid, "~w~Mecanico Solicitado~n~~r~Ve a la marca Roja", 5000, 1);
						MechanicCallTime[playerid] = 1;
						MechanicCall = 999;
						return 1;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No-one called for a Car Mechanic yet !");
			    	return 1;
	            }
			}
		    else if(strcmp(x_job,"trabajo",true) == 0)
			{
			    if(GettingJob[playerid] > 0)
			    {
			    	if(GettingJob[playerid] == 24 || GettingJob[playerid] == 7)
				    {
	        		if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
         			{
         				SendClientMessage(playerid, COLOR_GREY, "   No puedes coger este puesto de trabajo, ya perteneces a una facción remunerada.");
           				return 1;
		            }
			    	}
			    	
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Has aceptado el trabajo, enhorabuena!!.");
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* ¡Felicidades por tu nuevo empleo!,para ver tus nuevos comandos escribe /ayuda.");
			        PlayerInfo[playerid][pJob] = GettingJob[playerid];
			        if(GettingJob[playerid] == 7)
			        {
			            PlayerInfo[playerid][pMember] = 13;
			            PlayerInfo[playerid][pTeam] = 15;
			            gTeam[playerid] = 15;
           			 PlayerInfo[playerid][pChar] = 50;
					 	SetPlayerSkin(playerid, 50);
			        }
			        if(GettingJob[playerid] == 24)
			        {
			        /*  PlayerInfo[playerid][pMember] = 10; */
			        /*  PlayerInfo[playerid][pTeam] = 12; */
					/*	gTeam[playerid] = 12; */
					/* 	PlayerInfo[playerid][pChar] = 61; */
					/* 	SetPlayerSkin(playerid, 61); */
			        }
			        GettingJob[playerid] = 0;
    			    if(PlayerInfo[playerid][pJob] == 8)
			        {
					new rand = random(sizeof(guarda));
		            PlayerInfo[playerid][pModel] = guarda[rand];
		            PlayerInfo[playerid][pChar] = guarda[rand];
		            SetPlayerSkin(playerid, guarda[rand]);
			        }
			        if(PlayerInfo[playerid][pJob] == 17)
			        {
		            PlayerInfo[playerid][pModel] = 155;
		            PlayerInfo[playerid][pChar] = 155;
		            SetPlayerSkin(playerid, 155);
			        }
			        return 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No estas en una zona con empleos!");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"repostage",true) == 0)
			{
			    if(RefillOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(RefillOffer[playerid]))
			        {
			            if(GetPlayerMoney(playerid) > RefillPrice[playerid])
			            {
			                GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
			                new car = gLastCar[playerid];
			                new fuel;
			                PlayerInfo[RefillOffer[playerid]][pMechSkill] ++;
			                if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 50)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Ahora eres Mecanico de nivel 2, podras usar comandos nuevos. usa /ayuda."); }
							else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 100)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Ahora eres Mecanico de nivel 3, podras usar comandos nuevos. usa /ayuda"); }
							else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 200)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Ahora eres Mecanico de nivel 4, podras usar comandos nuevos. usa /ayuda"); }
							else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 400)
							{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Ahora eres Mecanico de nivel 5, y podras usar todos los comandos. usa /ayuda"); }
							new level = PlayerInfo[RefillOffer[playerid]][pMechSkill];
							if(level >= 0 && level <= 50)
							{ fuel = 15; }
							else if(level >= 51 && level <= 100)
							{ fuel = 40; }
							else if(level >= 101 && level <= 200)
							{ fuel = 60; }
							else if(level >= 201 && level <= 400)
							{ fuel = 80; }
							else if(level >= 401)
							{ fuel = 100; }
			                format(string, sizeof(string), "* Reposta el vehiculo %d%, por $%d el Mecanico %s.",fuel,RefillPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Repostas el vehiculo de %s's unos %d%, por $%d .",sendername,fuel,RefillPrice[playerid]);
							SendClientMessage(RefillOffer[playerid], COLOR_WHITE, string);
						//	PlayerInfo[RefillOffer[playerid]][pPayCheck] += RefillPrice[playerid] * 5;
							SafeGivePlayerMoney(RefillOffer[playerid], RefillPrice[playerid]);
							SafeGivePlayerMoney(playerid, -RefillPrice[playerid]);
							if(Gas[car] < 110) { Gas[car] += fuel; }
					        RefillOffer[playerid] = 999;
							RefillPrice[playerid] = 0;
							return 1;
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   No puedes aceptar el repostaje!");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No te ofrecen nada !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"entrevista",true) == 0)
			{
			    if(LiveOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(LiveOffer[playerid]))
			        {
				        if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "* You are frozen till the Live Conversation ends.");
							SendClientMessage(LiveOffer[playerid], COLOR_WHITE, "* You are frozen till the Live Conversation ends (use /entrevista again).");
							TogglePlayerControllable(playerid, 0);
							TogglePlayerControllable(LiveOffer[playerid], 0);
							TalkingLive[playerid] = LiveOffer[playerid];
							TalkingLive[LiveOffer[playerid]] = playerid;
							LiveOffer[playerid] = 999;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   You are to far away from the News Reporter !");
							return 1;
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No-one gave you a Live Conversation offer !");
				    return 1;
				}
			}
			else if(strcmp(x_job,"Abogado",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /aceptar Abogado [ID o Nombre]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if (gTeam[playerid] == 2)
				{
				    if(IsPlayerConnected(giveplayerid))
				    {
				        if(giveplayerid != INVALID_PLAYER_ID)
				        {
				            if(PlayerInfo[giveplayerid][pJob] == 2)
				            {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Permites a %s liberar al criminal.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE,string);
								format(string, sizeof(string), "* %s ha aprobado la liberacion del criminal, usa /liberar", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE,string);
								ApprovedLawyer[giveplayerid] = 1;
							    return 1;
							}
						}
					}
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "No eres Policia.");
				    return 1;
				}
			}
			else if(strcmp(x_job,"guardaespalda",true) == 0)
			{
			    if(GuardOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > GuardPrice[playerid])
				    {
					    if(IsPlayerConnected(GuardOffer[playerid]))
					    {
					        GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Tu aceptas la proteccion por $%d del guardaespalda %s.",GuardPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s acepta tu proteccion, y recibes los $%d.",sendername,GuardPrice[playerid]);
							SendClientMessage(GuardOffer[playerid], COLOR_LIGHTBLUE, string);
							SafeGivePlayerMoney(GuardOffer[playerid],GuardPrice[playerid]);
							SafeGivePlayerMoney(playerid, -GuardPrice[playerid]);
					        GuardOffer[playerid] = 999;
							GuardPrice[playerid] = 0;
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Tu no puedes aceptar Proteccion!");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No te han ofrecido Proteccion!");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"drogas",true) == 0)
			{
			    if(DrugOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > DrugPrice[playerid])
				    {
				        if(PlayerInfo[playerid][pDrugs] < 99999)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Compras %d gramos por: $%d del camello %s.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s ha comprado %d gramos, tomas $%d.",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_WHITE, string);
								//PlayerInfo[DrugOffer[playerid]][pPayCheck] += DrugPrice[playerid] * 5;
								SafeGivePlayerMoney(DrugOffer[playerid], DrugPrice[playerid]);
								PlayerInfo[DrugOffer[playerid]][pDrugsSkill] ++;
								SafeGivePlayerMoney(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return 1;
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   You are fully loaded with Drugs, use them first !");
						    return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   No tienes suficiente dinero !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Nadie te ha ofrecido drogas !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"comprarcoche",true) == 0)
			{
			    if(OwnableCarOffer[playerid] < 9999)
			    {
			        if(OwnableCarID[playerid] == 0) { return 1; }
			        if(OwnableCarPrice[playerid] == 0 || OwnableCarPrice[playerid] > 15000001) { return 1; }
			        
			        if(OwnableCarID[playerid] == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey]) { }
			        else if(OwnableCarID[playerid] == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2]) { }
			        else if(OwnableCarID[playerid] == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3]) { }
			        else if(OwnableCarID[playerid] == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4]) { }
			        else if(OwnableCarID[playerid] == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5]) { }
			        else { SendClientMessage(playerid, COLOR_GREY, "  Oferta no valida"); return 1; }
			        
			        if(GetPlayerMoney(playerid) >= OwnableCarPrice[playerid])
			        {
						if(IsPlayerConnected(OwnableCarOffer[playerid]))
						{
						    GetPlayerName(OwnableCarOffer[playerid], giveplayer, sizeof(giveplayer));
						    GetPlayerName(playerid, sendername, sizeof(sendername));
                            if(PlayerInfo[OwnableCarOffer[playerid]][pPcarkey] >= 599 && PlayerInfo[OwnableCarOffer[playerid]][pPcarkey]<= 604) { PlayerInfo[OwnableCarOffer[playerid]][pbono1] = 0; }
	                        else if(PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2] >= 599 && PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2]<= 604) { PlayerInfo[OwnableCarOffer[playerid]][pbono1] = 0; }
	                        else if(PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3] >= 599 && PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3]<= 604) { PlayerInfo[OwnableCarOffer[playerid]][pbono1] = 0; }
	                        else if(PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4] >= 599 && PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4]<= 604) { PlayerInfo[OwnableCarOffer[playerid]][pbono1] = 0; }
	                        else if(PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5] >= 599 && PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5]<= 604) { PlayerInfo[OwnableCarOffer[playerid]][pbono1] = 0; }
						    if(PlayerInfo[playerid][pPcarkey] == 9999)
							{
								if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey])
								{
									PlayerInfo[playerid][pPcarkey] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2])
								{
									PlayerInfo[playerid][pPcarkey] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3])
								{
									PlayerInfo[playerid][pPcarkey] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4])
								{
									PlayerInfo[playerid][pPcarkey] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5])
								{
									PlayerInfo[playerid][pPcarkey] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5] = 9999;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "  Oferta no validada !");
									return 1;
								}
								format(string, sizeof(string), "* Has comprado un vehiculo por $%d a %s.",OwnableCarPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s Has vendido tu vehiculo por $%d.",sendername,OwnableCarPrice[playerid]);
								SendClientMessage(OwnableCarOffer[playerid], COLOR_WHITE, string);
						    	RemovePlayerFromVehicle(OwnableCarOffer[playerid]);
						    	SafeGivePlayerMoney(playerid, - OwnableCarPrice[playerid]);
						    	SafeGivePlayerMoney(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
						    	strmid(CarInfo[OwnableCarID[playerid]][cOwner], sendername, 0, strlen(sendername), 9999);
							}
						    else if(PlayerInfo[playerid][pPcarkey2] == 9999)
							{
							    if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey])
								{
									PlayerInfo[playerid][pPcarkey2] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2])
								{
									PlayerInfo[playerid][pPcarkey2] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3])
								{
									PlayerInfo[playerid][pPcarkey2] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4])
								{
									PlayerInfo[playerid][pPcarkey2] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5])
								{
									PlayerInfo[playerid][pPcarkey2] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4] = 9999;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "  Oferta no validada. !");
									return 1;
								}
								format(string, sizeof(string), "* Has comprado un vehiculo por $%d a %s.",OwnableCarPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s Has vendido tu vehiculo por $%d.",sendername,OwnableCarPrice[playerid]);
								SendClientMessage(OwnableCarOffer[playerid], COLOR_WHITE, string);
						    	RemovePlayerFromVehicle(OwnableCarOffer[playerid]);
						    	SafeGivePlayerMoney(playerid, - OwnableCarPrice[playerid]);
						    	SafeGivePlayerMoney(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
						    	strmid(CarInfo[OwnableCarID[playerid]][cOwner], sendername, 0, strlen(sendername), 9999);
							}
						    else if(PlayerInfo[playerid][pPcarkey3] == 9999)
							{
							    if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey])
								{
									PlayerInfo[playerid][pPcarkey3] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2])
								{
									PlayerInfo[playerid][pPcarkey3] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3])
								{
									PlayerInfo[playerid][pPcarkey3] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4])
								{
									PlayerInfo[playerid][pPcarkey3] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5])
								{
									PlayerInfo[playerid][pPcarkey3] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5] = 9999;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "  Oferta invalidada !");
									return 1;
								}
								format(string, sizeof(string), "* Has comprado un vehiculo por $%d a %s.",OwnableCarPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s Has vendido tu vehiculo por $%d..",sendername,OwnableCarPrice[playerid]);
								SendClientMessage(OwnableCarOffer[playerid], COLOR_WHITE, string);
						    	RemovePlayerFromVehicle(OwnableCarOffer[playerid]);
						    	SafeGivePlayerMoney(playerid, - OwnableCarPrice[playerid]);
						    	SafeGivePlayerMoney(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
						    	strmid(CarInfo[OwnableCarID[playerid]][cOwner], sendername, 0, strlen(sendername), 9999);
							}
							else if(PlayerInfo[playerid][pPcarkey4] == 9999)
							{
							    if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey])
								{
									PlayerInfo[playerid][pPcarkey4] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2])
								{
									PlayerInfo[playerid][pPcarkey4] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3])
								{
									PlayerInfo[playerid][pPcarkey4] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4])
								{
									PlayerInfo[playerid][pPcarkey4] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5])
								{
									PlayerInfo[playerid][pPcarkey4] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5] = 9999;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "  Oferta invalidada !");
									return 1;
								}
								format(string, sizeof(string), "* Has comprado un vehiculo por $%d a %s.",OwnableCarPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s Has vendido tu vehiculo por $%d..",sendername,OwnableCarPrice[playerid]);
								SendClientMessage(OwnableCarOffer[playerid], COLOR_WHITE, string);
						    	RemovePlayerFromVehicle(OwnableCarOffer[playerid]);
						    	SafeGivePlayerMoney(playerid, - OwnableCarPrice[playerid]);
						    	SafeGivePlayerMoney(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
						    	strmid(CarInfo[OwnableCarID[playerid]][cOwner], sendername, 0, strlen(sendername), 9999);
							}
							else if(PlayerInfo[playerid][pPcarkey5] == 9999)
							{
							    if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey])
								{
									PlayerInfo[playerid][pPcarkey5] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2])
								{
									PlayerInfo[playerid][pPcarkey5] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3])
								{
									PlayerInfo[playerid][pPcarkey5] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4])
								{
									PlayerInfo[playerid][pPcarkey5] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4] = 9999;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5])
								{
									PlayerInfo[playerid][pPcarkey5] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey5] = 9999;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "  Oferta invalidada !");
									return 1;
								}
								format(string, sizeof(string), "* Has comprado un vehiculo por $%d a %s.",OwnableCarPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s Has vendido tu vehiculo por $%d..",sendername,OwnableCarPrice[playerid]);
								SendClientMessage(OwnableCarOffer[playerid], COLOR_WHITE, string);
						    	RemovePlayerFromVehicle(OwnableCarOffer[playerid]);
						    	SafeGivePlayerMoney(playerid, - OwnableCarPrice[playerid]);
						    	SafeGivePlayerMoney(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
						    	strmid(CarInfo[OwnableCarID[playerid]][cOwner], sendername, 0, strlen(sendername), 9999);
							}
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "  Ya posees 5 vehiculos ! ");
						        return 1;
							}
						    DateProp(playerid);
							DateProp(OwnableCarOffer[playerid]);
							OnPropUpdate();
							OnPlayerUpdate(playerid);
							OnPlayerUpdate(OwnableCarOffer[playerid]);
						    OwnableCarOffer[playerid] = 9999;
							OwnableCarID[playerid] = 0;
							OwnableCarPrice[playerid] = 0;
							GameTextForPlayer(playerid, "~w~Felicidades~n~Ahora usa /v aparcar para no perderlo!", 5000, 3);
							SendClientMessage(playerid, COLOR_GRAD2, "Enhorabuena por su adquisición!");
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Vendedor desconectado !");
			        		return 1;
						}
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No puedes !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"license",true) == 0)
			{
			    if(LicenseOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > LicensePrice[playerid])
				    {
				        /*if(PlayerInfo[playerid][pDrugs] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* You bought %d gram for $%d from Drug Dealer %s.",DrugGram[playerid],DrugPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* %s has bought your %d gram, the $%d was added to your PayCheck.",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_WHITE, string);
								PlayerInfo[DrugOffer[playerid]][pPayCheck] += DrugPrice[playerid] * 5;
								PlayerInfo[DrugOffer[playerid]][pDrugsSkill] ++;
								SafeGivePlayerMoney(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrugs] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrugsSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return 1;
							}
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   You are fully loaded with Drugs, use them first !");
						    return 1;
						}*/
						if(LicenseType[playerid] == 0 || LicenseType[playerid] > 5)
						{
						    return 1;
						}
						if(IsPlayerConnected(LicenseOffer[playerid]))
						{
						    GetPlayerName(LicenseOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(LicenseType[playerid] == 1)
							{
							    if(PlayerInfo[playerid][pCarLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   You have drivers license already.");
							    }
							    else
							    {
							    	format(string, sizeof(string), "* You bought Drivers License for $%d from Instructor %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "* %s has bought your Drivers License for $%d and it was added to your PayCheck.",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pCarLic] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							if(LicenseType[playerid] == 2)
							{
							    if(PlayerInfo[playerid][pFlyLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   You have flying license already.");
							    }
							    else
							    {
							    	format(string, sizeof(string), "* You bought Flying License for $%d from Instructor %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "* %s has bought your Flying License for $%d and it was added to your PayCheck.",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pFlyLic] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							if(LicenseType[playerid] == 3)
							{
							    if(PlayerInfo[playerid][pBoatLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   You have Sailing license already.");
							    }
							    else
							    {
							    	format(string, sizeof(string), "* You bought Sailing License for $%d from Instructor %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "* %s has bought your Sailing License for $%d and it was added to your PayCheck.",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pBoatLic] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							if(LicenseType[playerid] == 4)
							{
							    if(PlayerInfo[playerid][pFishLic] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   You have Fishing license already.");
							    }
							    else
							    {
							    	format(string, sizeof(string), "* You bought Fishing License for $%d from Instructor %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "* %s has bought your Fishing License for $%d and it was added to your PayCheck.",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pFishLic] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							if(LicenseType[playerid] == 5)
							{
							    if(PlayerInfo[playerid][pGunLic2] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   You have Weapon license already.");
								}
								else
								{
							    	format(string, sizeof(string), "* Has adquirido la licencia de caza $%d por el oficial %s.",LicensePrice[playerid],giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "* %s has obtenido la licencia por $%d .",sendername,LicensePrice[playerid]);
									SendClientMessage(LicenseOffer[playerid], COLOR_WHITE, string);
									PlayerInfo[playerid][pGunLic1] = 1;
									SafeGivePlayerMoney(playerid, -LicensePrice[playerid]);
									PlayerInfo[LicenseOffer[playerid]][pPayCheck] += LicensePrice[playerid] * 5;
								}
							}
							LicenseOffer[playerid] = 999;
							LicensePrice[playerid] = 0;
							LicenseType[playerid] = 0;
							return 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   You can't afford that License !");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No-one offerd you any License !");
			        return 1;
			    }
			}
			else if(strcmp(x_job,"sexo",true) == 0)
			{
			    if(SexOffer[playerid] < 999)
				{
					if(GetPlayerMoney(playerid) > SexPrice[playerid])
			  		{
						if (IsPlayerConnected(SexOffer[playerid]))
						{
						    new Car = GetPlayerVehicleID(playerid);
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car))
						    {
								GetPlayerName(SexOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Has tenido Sexo con la Prostituta %s, por %d$.", giveplayer, SexPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s ha tenido sexo contigo, cobras los %d$.", sendername, SexPrice[playerid]);
								SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, string);
								//PlayerInfo[SexOffer[playerid]][pPayCheck] += SexPrice[playerid];
								GivePlayerMoney(SexOffer[playerid], SexPrice[playerid]);
								GivePlayerMoney(playerid, -SexPrice[playerid]);
								PlayerInfo[SexOffer[playerid]][pSexSkill] ++;
								if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 50)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Tu Habilidad como Prostituta es de Nivel 2, ahora ofreces mejor sexo y menos posibilidad de contraer una ETS."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 100)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Tu Habilidad como Prostituta es de Nivel 3, ahora ofreces mejor sexo y menos posibilidad de contraer una ETS."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 200)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Tu Habilidad como Prostituta es de Nivel 4, ahora ofreces mejor sexo y menos posibilidad de contraer una ETS."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 400)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Tu Habilidad como Prostituta es de Nivel 5, ahora ofreces mejor sexo y menos posibilidad de contraer una ETS."); }
								if(STDPlayer[playerid] == 0)
								{
								    if(Condom[playerid] < 1)
									{
									    new Float:health;
									    new level = PlayerInfo[SexOffer[playerid]][pSexSkill];
									    if(level >= 0 && level <= 50)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 30.0); }
											new rand = random(sizeof(STD1));
											STDPlayer[playerid] = STD1[rand];
											STDPlayer[SexOffer[playerid]] = STD1[rand];
											if(STD1[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 30 de Salud + ninguna ETS."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, ""); } //noSTD
											else if(STD1[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 30 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado el sida !!"); }
											else if(STD1[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 30 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado la Gonorrea !!"); }
											else if(STD1[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 30 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado el Sifilis !!"); }
										}
										else if(level >= 51 && level <= 100)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 60.0); }
											new rand = random(sizeof(STD2));
											STDPlayer[playerid] = STD2[rand];
											STDPlayer[SexOffer[playerid]] = STD2[rand];
											if(STD2[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 60 de Salud + ninguna ETS."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, ""); }
											else if(STD2[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 60 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado el sida !!"); }
											else if(STD2[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 60 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado la Gonorrea !!"); }
											else if(STD2[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 60 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado el Sifilis !!"); }
										}
										else if(level >= 101 && level <= 200)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 90.0); }
											new rand = random(sizeof(STD3));
											STDPlayer[playerid] = STD3[rand];
											STDPlayer[SexOffer[playerid]] = STD3[rand];
											if(STD3[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 90 de Salud + ninguna ETS."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, ""); }
											else if(STD3[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 90 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado el sida !!"); }
											else if(STD3[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 90 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado la Gonorrea !!"); }
											else if(STD3[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 90 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado el Sifilis !!"); }
										}
										else if(level >= 201 && level <= 400)
									    {
									        if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 120.0); }
											new rand = random(sizeof(STD4));
											STDPlayer[playerid] = STD4[rand];
											STDPlayer[SexOffer[playerid]] = STD4[rand];
											if(STD4[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 120 de Salud + ninguna ETS."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, ""); }
											else if(STD4[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 120 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado el sida !!"); }
											else if(STD4[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 120 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado la Gonorrea !!"); }
											else if(STD4[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Consigues 120 de Salud."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Te han pegado el Sifilis !!"); }
										}
										else if(level >= 401)
										{
										    if(GetPlayerHealth(playerid, health) < 150) {
											SetPlayerHealth(playerid, health + 150.0); }
											SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Tu Habilidad como Prostituta es tan alta que no les has transmitido una ETS.");
											SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* La Habilidad de la Prostituta es tan alta que no te ha transmitido una ETS.");
										}
				      				}
									else
									{
									    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* El Jugador usa un Preservativo.");
									    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Usas un Preservativo.");
									    Condom[playerid] --;
									}
								}
								else
								{
								    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Este Jugador ya tiene una ETS, no puede infectarse de nuevo.");
								    return 1;
								}
								SexOffer[playerid] = 999;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Uno de los dos no esta en el Coche!");
							    return 1;
							}
						}//Connected or not
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   No tienes Dinero Suficiente!");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguna Prostituta te ha ofrecido Sexo");
				    return 1;
				}
			}
			else if(strcmp(x_job,"reparar",true) == 0)
			{
			    if(RepairOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > RepairPrice[playerid])
				    {
					    if(IsPlayerInAnyVehicle(playerid))
					    {
					        if(IsPlayerConnected(RepairOffer[playerid]))
					        {
						        GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        RepairCar[playerid] = GetPlayerVehicleID(playerid);
						        SetVehicleHealth(RepairCar[playerid], 1000.0);
						        RepairVehicle(RepairCar[playerid]);
								format(string, sizeof(string), "* Usted repara su vehiculo por $%d por el mecanico %s.",RepairPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Usted repara el vehiculo de %s's, le pagan $%d por la reparacion.",sendername,RepairPrice[playerid]);
								SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[RepairOffer[playerid]][pMechSkill] ++;
				                if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 50)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Your Car Mechanic Skill is now Level 2, you can add more Fuel to any Players Cars."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 100)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Your Car Mechanic Skill is now Level 3, you can add more Fuel to any Players Cars."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 200)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Your Car Mechanic Skill is now Level 4, you can add more Fuel to any Players Cars."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 400)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Your Car Mechanic Skill is now Level 5, you can add more Fuel to any Players Cars."); }
							    SafeGivePlayerMoney(playerid, -RepairPrice[playerid]);
								SafeGivePlayerMoney(RepairOffer[playerid], RepairPrice[playerid]);
						        RepairOffer[playerid] = 999;
								RepairPrice[playerid] = 0;
								return 1;
							}
							return 1;
						}
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   You can't afford the Repair!");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No-one offerd you to Repair your Car!");
			        return 1;
			    }
			}
			else { return 1; }
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/repos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pAdmin] < 4)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No eres mecanico!");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /repos [ID o Nombre] [PRECIO]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   No puede ser menos de 1 ni mas de 99999!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
					    //if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Can't do that!"); return 1; }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Ofreces repostar a %s su vehiculo por $%d .",giveplayer,money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* %s te ha ofrecido rellenar tu deposito por $%d, (usar /aceptar repostage)",sendername,money);
						SendClientMessage(playa, COLOR_WHITE, string);
						RefillOffer[playa] = playerid;
						RefillPrice[playa] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   No esta en un coche.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Jugador desconectado.");
			}
		}
		return 1;
	}
	
/* NEW */
//--------------------------------[ nos ]----------------------------
	if (strcmp(cmd, "/nitro2x", true) == 0)
	{
	    if (PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pAdmin] < 4)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "Tu no eres Mecanico");
	        return 1;
	    }
		if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "No estas dentro del Vehiculo!");
		    return 1;
		}
		/*if (NosDelay[playerid] > 0 && PlayerInfo[playerid][pAdmin] < 4)
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Debes esperar un poco!");
		    return 1;
		}*/
		new mycar = GetPlayerVehicleID(playerid);
		if(IsPlayerInInvalidNosVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Este vehiculo no admite nitro!");
			GetPlayerName(playerid, playername, sizeof(playername));
		}
		else
		{
			AddVehicleComponent(mycar, 1009);
			GameTextForPlayer(playerid,"~y~2x nitro",6000,1);
            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            //NosDelay[playerid] = 1;
            GetPlayerName(playerid, playername, sizeof(playername));
            format(string, sizeof(string), "* %s modifica el coche y le pone nitro 2x", playername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
/* NEW by magic guardar tuneo*/
//--------------------------------[ nos ]----------------------------
	if (strcmp(cmd, "/guardartu", true) == 0)
	{
	    if (PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pAdmin] < 4)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "Tu no eres Mecanico");
	        return 1;
	    }
		if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "No estas dentro del Vehiculo!");
		    return 1;
		}
		    new vehicleid = GetPlayerVehicleID(playerid);
			GameTextForPlayer(playerid,"~y~Modificaciones fijadas",6000,1);
            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            SaveModsForAll(vehicleid);
            GetPlayerName(playerid, playername, sizeof(playername));
            format(string, sizeof(string), "* %s modifica el coche y ajusta las piezas", playername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    return 1;
	}
	
	if (strcmp(cmd, "/hidraulicos", true) == 0)
	{
	    if (PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pAdmin] < 4)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "Tu no eres Mecanico");
	        return 1;
	    }
	    new level = PlayerInfo[playerid][pMechSkill];
		if(level <= 101) // 50 100 200 400
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mecanico es de Nivel infeior a 3.");
			SendClientMessage(playerid, COLOR_YELLOW, "Necesitas Reparar/Repos mas vehiculos para Subir de Nivel.");
			return 1;
		}
		if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "No estas dentro del Vehiculo!");
		    return 1;
		}
		/*if (NosDelay[playerid] > 0 && PlayerInfo[playerid][pAdmin] < 4)
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Debes esperar un poco!");
		    return 1;
		}*/
		new mycar = GetPlayerVehicleID(playerid);
		if(IsPlayerInInvalidNosVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Este vehiculo no admite hidraulicos!");
			GetPlayerName(playerid, playername, sizeof(playername));
		}
		else
		{
			AddVehicleComponent(mycar, 1087);
			GameTextForPlayer(playerid,"~y~Hidraulicos",6000,1);
            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            //NosDelay[playerid] = 1;
            GetPlayerName(playerid, playername, sizeof(playername));
            format(string, sizeof(string), "* %s modifica el coche y le pones suspension hidraulica", playername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
	
	if (strcmp(cmd, "/nitro10x", true) == 0) // by DryilZas
	{
	    if (PlayerInfo[playerid][pJob] != 7)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "Tu no eres Mecanico");
	        return 1;
	    }
	    new level = PlayerInfo[playerid][pMechSkill];
		if(level <= 51)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mecanico es de Nivel 1.");
			SendClientMessage(playerid, COLOR_YELLOW, "Necesitas Reparar/Repos mas vehiculos para Subir de Nivel.");
			return 1;
		}
		if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "No estas dentro del Vehiculo!");
		    return 1;
		}
		/*if (NosDelay[playerid] > 0)
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Debes esperar un poco!");
		    return 1;
		}*/
		new mycar = GetPlayerVehicleID(playerid);
		if(IsPlayerInInvalidNosVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Este vehiculo no admite nitro!");
			GetPlayerName(playerid, playername, sizeof(playername));
		}
		else
		{
			AddVehicleComponent(mycar, 1010);
			GameTextForPlayer(playerid,"~y~10x nitro",6000,1);
            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            NosDelay[playerid] = 1;
            GetPlayerName(playerid, playername, sizeof(playername));
            format(string, sizeof(string), "* %s modifica el coche y le pone nitro 10x", playername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
	
/* NUEVO BY MAGEC */
//---------------------------[ colorcar ]-------------------------
	if (strcmp(cmd, "/colorcar", true) == 0 || strcmp(cmd, "/repintar", true) == 0)
	{
	    if (PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pAdmin] < 4)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "Tu no eres Mecanico");
	        return 1;
	    }
		if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "You must be in a car!");
		    return 1;
		}
		new mycar = GetPlayerVehicleID(playerid);
		tmp = strtok(cmdtext,idx);
		if (!strlen(tmp))
	    {
		    SendClientMessage(playerid, COLOR_GREY, "ESCRIBE: /colorcar [color1] [color2]");
		    SendClientMessage(playerid, COLOR_GREY, "Colors can be either numbers from 0 to 126 or color names:");
		    SendClientMessage(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue | navy | beige ");
		    SendClientMessage(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | gold | brown | darkbrown | darkred | maroon | pink ");
		    return 1;
	    }
		new color1 = GetColorCode(tmp);
		tmp = strtok(cmdtext,idx);
		new color2;
		if (!strlen(tmp))
	    {
			color2 = 1;
	    }
	    else
	    {
	    	color2 = GetColorCode(tmp);
		}
	    if (color1 < 0 || color1 > 126 || color2 < 0 || color2 > 126)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Both colors must be between 0 and 126");
	        return 1;
	    }
        CarInfo[mycar][cColorOne] = color1;
		CarInfo[mycar][cColorTwo] = color2;
	    ChangeVehicleColor(mycar, color1, color2);
	    format(string, sizeof(string), "Has Cambiado el color a %d %d", color1, color2);
	    SendClientMessage(playerid, COLOR_GRAD2, string);
	    OnPlayerUpdate(playerid);
	    return 1;
	}
	if (strcmp(cmd, "/quitartu", true) == 0)
	{
	    if (PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pAdmin] < 4)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "Tu no eres Mecanico");
	        return 1;
	    }
		if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "No estas dentro de un vehiculo!");
		    return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
        TuneCar[vehicleid][mod1] = 0;
        TuneCar[vehicleid][mod2] = 0;
        TuneCar[vehicleid][mod3] = 0;
        TuneCar[vehicleid][mod4] = 0;
        TuneCar[vehicleid][mod5] = 0;
        TuneCar[vehicleid][mod6] = 0;
        TuneCar[vehicleid][mod7] = 0;
        TuneCar[vehicleid][mod8] = 0;
        TuneCar[vehicleid][mod9] = 0;
        TuneCar[vehicleid][mod10] = 0;
        TuneCar[vehicleid][mod11] = 0;
        TuneCar[vehicleid][mod12] = 0;
        TuneCar[vehicleid][mod13] = 0;
        TuneCar[vehicleid][mod14] = 0;
        TuneCar[vehicleid][mod15] = 0;
        TuneCar[vehicleid][mod16] = 0;
        TuneCar[vehicleid][mod17] = 0;
        TuneCar[vehicleid][paintjob] = 0;
        SaveModsForAll(vehicleid);
 	    LoadModsForAll(vehicleid);
	    TuneThisCar(vehicleid);
	    format(string, sizeof(string), "Has Quitado elementos Tuning");
	    SendClientMessage(playerid, COLOR_GRAD2, string);
	    return 1;
	}
	if (strcmp(cmd, "/cambiarid", true) == 0) //majillo yeaaa!
	{
	    if (PlayerInfo[playerid][pAdmin] != 2000)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "Tu no eres Administrador");
	        return 1;
	    }
		if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "No estas dentro de un vehiculo!");
		    return 1;
		}
		new mycar = GetPlayerVehicleID(playerid);
		tmp = strtok(cmdtext,idx);
		if (!strlen(tmp))
	    {
		    SendClientMessage(playerid, COLOR_GREY, "ESCRIBE: /cambiarid [ID]");
		    return 1;
	    }
		new color1 = strval(tmp);
//		tmp = strtok(cmdtext,idx);
//		new color2 = strlen(tmp);

/*		if (!strlen(tmp))
	    {
			color2 = 1;
	    }
	    else
	    {
	    	color2 = GetColorCode(tmp);
		}
	    if (color1 < 0 || color1 > 126 || color2 < 0 || color2 > 126)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Both colors must be between 0 and 126");
	        return 1;
	    }*/
        CarInfo[mycar][cModel] = color1;
	//	CarInfo[mycar][cDescription] = color2;
	    format(string, sizeof(string), "Has Cambiado la id a %d ", color1);
	    SendClientMessage(playerid, COLOR_GRAD2, string);
   	    OnPlayerUpdate(playerid);
   	    OnPropUpdate();
        DestroyVehicle(mycar);
        CreateVehicle(CarInfo[mycar][cModel],CarInfo[mycar][cLocationx],CarInfo[mycar][cLocationy],CarInfo[mycar][cLocationz]+1.0,CarInfo[mycar][cAngle],CarInfo[mycar][cColorOne],CarInfo[mycar][cColorTwo],60000);
	    return 1;
	}
	if (strcmp(cmd, "/cambiarprecio", true) == 0) //majillo yeaaa!
	{
	    if (PlayerInfo[playerid][pAdmin] != 2000)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "Tu no eres Administrador");
	        return 1;
	    }
		if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "No estas dentro de un vehiculo!");
		    return 1;
		}
		new mycar = GetPlayerVehicleID(playerid);
		tmp = strtok(cmdtext,idx);
		if (!strlen(tmp))
	    {
		    SendClientMessage(playerid, COLOR_GREY, "ESCRIBE: /cambiarprecio [Precio]");
		    return 1;
	    }
		new color1 = strval(tmp);
//		tmp = strtok(cmdtext,idx);
//		new color2 = strlen(tmp);

/*		if (!strlen(tmp))
	    {
			color2 = 1;
	    }
	    else
	    {
	    	color2 = GetColorCode(tmp);
		}
	    if (color1 < 0 || color1 > 126 || color2 < 0 || color2 > 126)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Both colors must be between 0 and 126");
	        return 1;
	    }*/
        CarInfo[mycar][cValue] = color1;
	//	CarInfo[mycar][cDescription] = color2;
	    format(string, sizeof(string), "Has Cambiado el precio a %d ", color1);
	    SendClientMessage(playerid, COLOR_GRAD2, string);
   	    OnPlayerUpdate(playerid);
   	    OnPropUpdate();
        DestroyVehicle(mycar);
        CreateVehicle(CarInfo[mycar][cModel],CarInfo[mycar][cLocationx],CarInfo[mycar][cLocationy],CarInfo[mycar][cLocationz]+1.0,CarInfo[mycar][cAngle],CarInfo[mycar][cColorOne],CarInfo[mycar][cColorTwo],60000);
	    return 1;
	}
    if(strcmp(cmd, "/kart", true) == 0) //by MageC
	{
      new newcar = GetPlayerVehicleID(playerid);
      if(newcar >= 615 && newcar <= 621 || newcar == 632 || newcar == 633 || newcar == 634)
	    {
          SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
          SendClientMessage(playerid, COLOR_GREY, " Kart Reparado.");
          return 1;
        }
	    else
	    {
          SendClientMessage(playerid, COLOR_GREY, " No estas dentro de un Kart Autorizado.");
	    }
	    return 1;
	}
	if(strcmp(cmd, "/reparar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pJob] != 7)
			{
		        if(AdminDuty[playerid] == 0)
		        {
                    SendClientMessage(playerid, COLOR_GREY, "   No estas AdminOn !");
		        	return 1;
		    	}
				//new health;
				//tmp = strtok(cmdtext, idx);
				//health = strval(tmp);
				SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				RepairVehicle(GetPlayerVehicleID(playerid));
       			format(string, 256, "Administración: %s ha reparado su vehiculo.", sendername);
				ABroadCast(COLOR_YELLOW,string);
				return 1;
			}

		    if(PlayerInfo[playerid][pJob] != 7)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No eres un mecanico!");
		        return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /repair [ID o Nombre] [PRECIO]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   No puede ser menor que 1 ni mayor que 99999!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
					    //if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Can't do that!"); return 1; }
				    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Ofreces a %s reparar su coche por $%d .",giveplayer,money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* %s quiere reparar tu coche por $%d, (usa /aceptar reparar).",sendername,money);
						SendClientMessage(playa, COLOR_WHITE, string);
						RepairOffer[playa] = playerid;
						RepairPrice[playa] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta en un coche.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Jugador desconectado.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/estropear", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pJob] != 7)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No eres un mecanico!");
		        return 1;
		    }
	        new level = PlayerInfo[playerid][pMechSkill];
			if(level <= 51)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mecanico es de Nivel 1.");
				SendClientMessage(playerid, COLOR_YELLOW, "Necesitas Reparar/Repos mas vehiculos para Subir de Nivel.");
				return 1;
			}
			else
			{
                SendClientMessage(playerid, COLOR_GREY, "   Has roto el motor del vehiculo!");
			    SetVehicleHealth(GetPlayerVehicleID(playerid), 275);
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/antibalas", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pJob] != 7)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No eres un mecanico!");
		        return 1;
		    }
	        new level = PlayerInfo[playerid][pMechSkill];
			if(level <= 51)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mecanico es de Nivel 1.");
				SendClientMessage(playerid, COLOR_YELLOW, "Necesitas Reparar/Repos mas vehiculos para Subir de Nivel.");
				return 1;
			}
			else
			{
                SendClientMessage(playerid, COLOR_GREY, "   El blindaje del vehiculo ha sido fijado en un 110 porciento!");
			    SetVehicleHealth(GetPlayerVehicleID(playerid), 1100);
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/blindado", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pJob] != 7)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No eres un mecanico!");
		        return 1;
		    }
	        new level = PlayerInfo[playerid][pMechSkill];
			if(level <= 101)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Tu Habilidad como Mecanico es de Nivel inferior a 3.");
				SendClientMessage(playerid, COLOR_YELLOW, "Necesitas Reparar/Repos mas vehiculos para Subir de Nivel.");
				return 1;
			}
			else
			{
                SendClientMessage(playerid, COLOR_GREY, "   El blindaje del vehiculo ha sido fijado en un 150 porciento!");
			    SetVehicleHealth(GetPlayerVehicleID(playerid), 1500);
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/llamarcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(CarCalls[playerid] > 0)
		    {
		        new Float:plocx,Float:plocy,Float:plocz;
	            GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(CarID[playerid],plocx,plocy+4, plocz);
				SendClientMessage(playerid, COLOR_WHITE, "* Bought Car has arrived.");
				CarCalls[playerid] -= 1;
				format(string, sizeof(string), "* You can call your Bought Car for %d times more.", CarCalls[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, string);
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Invalid action !");
		    }
		}
	    return 1;
	}
	if(strcmp(cmd, "/familia", true) == 0 || strcmp(cmd, "/f", true) == 0 || strcmp(cmd, "/faccion", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Estas Muteado");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: (/f)action [Texto]");
				return 1;
			}
			if (PlayerInfo[playerid][pLeader] > 0 || PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pFMember] < 255)
			{
			    new leader = PlayerInfo[playerid][pLeader];
			    new member = PlayerInfo[playerid][pMember];
			    if(member==1)
			    {
			        if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** (( Comisario %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** (( Sub-Jefe %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Capitan %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Inspector Jefe %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Inspector %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Sub-Inspector %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Oficial de policia %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Policia %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Policia %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
			    if(member==2)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Director %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Assistant Director in Charge %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Special Agent in Charge %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Special Agent %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Special Agent Trainee %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Professional Staff %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Professional Staff %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
			    if(member==3)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Coronel %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Comandante %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Teniente %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Sargento %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Cabo %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Soldado %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Soldado %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
			    if(member==4)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Director %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Sub-Director %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Cirujano %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Doctor %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Enfermero %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( ATS %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( ATS %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
			   /* if(member==4)
			    {
					format(string, sizeof(string), "** (( Medico %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }*/
			    if(member==5)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Eazyrider %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Underboss %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Right Hand %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Hardcore %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Miembro %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Asociado %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Guero %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
			    if(member==6)
			    {
			        if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** (( Capo Crimini %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** (( Don %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Don %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( SubJefe %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( consigliere %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Capo %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Soldado %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Asociado %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Asociado %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==7)
				{
				    if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Guardaespaldas %s: %s )) **", sendername, result); }
				    if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Conducror %s: %s )) **", sendername, result); }
				    else { format(string, sizeof(string), "** (( Not-assigned %s: %s )) **", sendername, result); }
				    SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==8)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Director %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Vice-Director %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Agente Especial %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Agente %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Buscador %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Maton %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Maton %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==9)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Productor-CNN %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Co-Productor %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Presentador %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( R.Especializado %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( R.Local %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( R.Aprendiz %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( R.Aprendiz %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==10)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Taxi Company Owner %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Shift Supervisor %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Dispatcher %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Cabbie %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Taxi Rookie %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Taxista %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Taxista %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==11)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Boss %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Under Boss %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Manager %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Senior Instructor %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Instructor %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Trainee %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Trainee %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
                if(member==13)
			    {
					format(string, sizeof(string), "** (( Mecanico %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
			    }
				else if(member==14)
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Riidaa %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Migi te %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Sennin %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Jounin %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Chuunin %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Senshi %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Senshi %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==15)
			    {
			        if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** (( Boss %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Boss %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano derecha %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Sangre Amarilla %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Miembro %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Recluta %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Recluta %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==16)
				{
				    if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** (( Jefe %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** (( Jefe %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** (( Jefe %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Jefe %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Sub-Jefe %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Mano derecha %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Pandillero %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Recluta %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Iniciado %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Iniciado %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==17) //Notrh Street Gang
				{
				    if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** (( Lider %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** (( Lider %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** (( Lider %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Lider %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Pandillero %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Pandillero %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Pandillero %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Pandillero %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Callejero %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Callejero %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==18) //Los Cobras
				{
				    if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** (( Lider %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** (( Lider %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** (( Lider %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Lider %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Motero %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Motero %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Motero %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Motero %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Heavy %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Heavy %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==19) //Bomberos
				{
				    if(PlayerInfo[playerid][pRank] == 9) { format(string, sizeof(string), "** (( Jefe %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 8) { format(string, sizeof(string), "** (( Comandante %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 7) { format(string, sizeof(string), "** (( Capitan %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Sargento %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Oficial %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Agente %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Agente %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Agente %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Recluta %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Recluta %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==20) //Los Puretas
				{
				    if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Patrón %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Hermano %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Licenciado %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Boina ROJA %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Gallo de Batalla %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Campechano %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Campechano %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(leader==1)
				{
				    format(string, sizeof(string), "** (( Comisario %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==2)
				{
				    format(string, sizeof(string), "** (( Director %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==3)
				{
				    format(string, sizeof(string), "** (( Coronel %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==4)
				{
				    format(string, sizeof(string), "** (( Medico %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==5)
				{
				    format(string, sizeof(string), "** (( Original Gangster %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==6)
				{
				    format(string, sizeof(string), "** (( Godfather %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==7)
				{
				    format(string, sizeof(string), "** (( Mayor %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==8)
				{
				    format(string, sizeof(string), "** (( Director %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==9)
				{
				    format(string, sizeof(string), "** (( Productor-CNN %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
			    else if(leader==10)
				{
				    format(string, sizeof(string), "** (( Taxi Company Owner %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==11)
				{
				    format(string, sizeof(string), "** (( Boss %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==13)
				{
				    format(string, sizeof(string), "** (( Mecanico Jefe %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==14)
				{
				    format(string, sizeof(string), "** (( Don %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==15)
				{
				    format(string, sizeof(string), "** (( Boss %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==16)
				{
				    format(string, sizeof(string), "** (( Jefe %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==17)
				{
				    format(string, sizeof(string), "** (( Lider %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==18)
				{
				    format(string, sizeof(string), "** (( Lider %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==19)
				{
				    format(string, sizeof(string), "** (( Lider %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(leader==20)
				{
				    format(string, sizeof(string), "** (( Patrón %s: %s )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLeader], 0x7BDDA5AA, string);
				}
				else if(PlayerInfo[playerid][pFMember] < 255)
			    {
			        if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (( Godfather %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Underboss %s: %s )) **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Capo %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Soldier %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Associate %s: %s ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Outsider %s: %s ))  **", sendername, result); }
					else { format(string, sizeof(string), "** (( Outsider %s: %s )) **", sendername, result); }
					SendNewFamilyMessage(PlayerInfo[playerid][pFMember], 0x7BDDA5AA, string);
				}
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   you are not part of a Family!");
				return 1;
			}
		}//not connected
		return 1;
	}
	if (strcmp(cmd, "/familylist", true) == 0 || strcmp(cmd, "/flist", true) == 0 || strcmp(cmd, "/factionlist", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "PD officers online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 8)
							{
				    	        format(string, 256, "** Comisario ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 7)
							{
				    	        format(string, 256, "** Sub-Jefe ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
                            }
							else if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Capitan ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Inspector Jefe ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Inspector ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Sub-Inspector ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Oficial de policia ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Policia ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Policia ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "FBI online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 2 || PlayerInfo[i][pLeader] == 2)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Director ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Assistant Director in Charge ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Special Agent in Charge ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Special Agent ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Special Agent Trainee ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Professional Staff ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Professional Staff ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "National Guards online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 3 || PlayerInfo[i][pLeader] == 3)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** General ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Inspector Jefe ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Capitan ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Major ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Inspector ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Private ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Private ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Paramedicos online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
    	        			format(string, 256, "** Paramedico ** %s", sendername);
					    	SendClientMessage(playerid, COLOR_GRAD2, string);

						}
					}
				}
			}
	        if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Gang members online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 5 || PlayerInfo[i][pLeader] == 5)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Godfather ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Underboss ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Capo ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Soldier ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Associate ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Outsider ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Outsider ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Family members online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 6 || PlayerInfo[i][pLeader] == 6)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Capo Crimini ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 8)
							{
				    	        format(string, 256, "** Don ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 7)
							{
				    	        format(string, 256, "** Don ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** SubJefe ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** consigliere ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Capo ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Soldado ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Asociado ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Asociado ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Government online:");
			    for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 7 || PlayerInfo[i][pLeader] == 7)
				    	{
				    	    if(PlayerInfo[i][pRank] == 6)
				    	    {
				    	        format(string, 256, "** Mayor ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	    else if(PlayerInfo[i][pRank] == 2)
				    	    {
				    	        format(string, 256, "** Bodyguard ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	    else if(PlayerInfo[i][pRank] == 1)
				    	    {
				    	        format(string, 256, "** Driver ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	    else
				    	    {
				    	        format(string, 256, "** Role not assigned ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
				    	    }
				    	}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Hitmans online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 8 || PlayerInfo[i][pLeader] == 8)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Director ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Vice-Director ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Agente Especial ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Agente ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Buscador ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Maton ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Maton ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "News Reporters online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 9 || PlayerInfo[i][pLeader] == 9)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Productor-CNN ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Co-Productor ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Presentador ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** R.Especializado ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** R.Local ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** R.Aprendiz ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** R.Aprendiz ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			/*else if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Taxi drivers online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 10 || PlayerInfo[i][pLeader] == 10)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Taxi Company Owner ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Shift Supervisor ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Dispatcher ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Cabbie ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Taxi Rookie ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Trainee ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Trainee ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}*/
			/*else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Licensers online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 11 || PlayerInfo[i][pLeader] == 11)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Boss ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Under Boss ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Manager ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Senior Instructor ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Instructor ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Trainee ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Trainee ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}*/
			else if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Gang members online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 14 || PlayerInfo[i][pLeader] == 14)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Riidaa ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Migi te ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Sennin ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Jounin ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Chuunin ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Senshi ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Senshi ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Gang members online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 15 || PlayerInfo[i][pLeader] == 15)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 7)
							{
				    	        format(string, 256, "** Top O.G ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** Senior O.G ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** O.G ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Soulja ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Thug ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Gangsta ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Outsider ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Outsider ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
	        {
				SendClientMessage(playerid, COLOR_GRAD1, "Gang members online:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
				    	if(PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pLeader] == 16)
				    	{
				    	    GetPlayerName(i, sendername, sizeof(sendername));
				    	    if(PlayerInfo[i][pRank] == 9)
							{
				    	        format(string, 256, "** Jefe ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 8)
							{
				    	        format(string, 256, "** Jefe ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 7)
							{
				    	        format(string, 256, "** Jefe ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 6)
							{
				    	        format(string, 256, "** PJefe ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
			                }
							else if(PlayerInfo[i][pRank] == 5)
							{
				    	        format(string, 256, "** Sub-Jefe ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 4)
							{
				    	        format(string, 256, "** Mano Derecha ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 3)
							{
				    	        format(string, 256, "** Pandillero ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 2)
							{
				    	        format(string, 256, "** Recluta ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else if(PlayerInfo[i][pRank] == 1)
							{
				    	        format(string, 256, "** Iniciado ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
							else
							{
				    	        format(string, 256, "** Iniciado ** %s", sendername);
							    SendClientMessage(playerid, COLOR_GRAD2, string);
							}
						}
					}
				}
			}
			else { SendClientMessage(playerid, COLOR_GRAD2, "No estas en una Organizacion"); }
		}
		return 1;
	}
	if(strcmp(cmd, "/not", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
		        if(PlayerInfo[playerid][pMuted] == 1)
				{
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "You cannot speak, you have been silenced");
					return 1;
				}
				new counter = 0;
    			for(new i = 51; i <= 54; i++)
    			{
    			    new dist = CheckPlayerDistanceToVehicle(7, playerid, i);
    			    if(dist)
    			    {
    			        counter++;
    			    }
    			}
    			if(counter == 0)
    			{
					SendClientMessage(playerid, COLOR_GREY, "   You're not near/in your news van/chopper !");
					return 1;
    			}
    			else
    			{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /not [newstext]");
						return 1;
					}
					new rtext[64];
					if(PlayerInfo[playerid][pRank] == 1) { rtext = "R.Aprendiz"; }
					else if(PlayerInfo[playerid][pRank] == 2) { rtext = "R.Local"; }
					else if(PlayerInfo[playerid][pRank] == 3) { rtext = "R.Especializado"; }
					else if(PlayerInfo[playerid][pRank] == 4) { rtext = "Presentador"; }
					else if(PlayerInfo[playerid][pRank] == 5) { rtext = "Co-Productor"; }
		    		else if(PlayerInfo[playerid][pRank] == 6) { rtext = "Productor-CNN"; }
					else { rtext = "R.Aprendiz"; }
					format(string, sizeof(string), "[Reportero/a] %s: %s", sendername, result);
					OOCNews(COLOR_NEWS,string);
					PlayerInfo[playerid][pNewsSkill] ++;
					if(PlayerInfo[playerid][pNewsSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Your News Reporter Skill is now Level 2, soon you are able to Fly the News Chopper and talk Live."); }
					else if(PlayerInfo[playerid][pNewsSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Your News Reporter Skill is now Level 3, soon you are able to Fly the News Chopper and talk Live."); }
					else if(PlayerInfo[playerid][pNewsSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Your News Reporter Skill is now Level 4, you can fly the News Chopper now."); }
					else if(PlayerInfo[playerid][pNewsSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Your News Reporter Skill is now Level 5, you can now talk Live with any person you want."); }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not a News Reporter !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/entrevista", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
			{
			    if(TalkingLive[playerid] != 255)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Conversasion Entrevista Terminada.");
			        SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Conversasion Entrevista Terminada.");
			        TogglePlayerControllable(playerid, 1);
			        TogglePlayerControllable(TalkingLive[playerid], 1);
		            TalkingLive[TalkingLive[playerid]] = 255;
			        TalkingLive[playerid] = 255;
			        return 1;
			    }
/*			    if(PlayerInfo[playerid][pNewsSkill] < 400)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Your News Reporter Skill is to low to talk Live with people!");
				    return 1;
				}*/
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USAR: /entrevista [ID Jugador]");
					return 1;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "No te puedes entrevistar a ti mismo!"); return 1; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Tu ofreces a %s una Conversacion en Directo.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s te ofrece una Conversacion en Directo, Usa (/aceptar entrevista) para aceptarla.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							LiveOffer[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   No estas cerca de este jugador!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nombre/ID invalido!");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No eres un reportero!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/vendrogas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 4)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   No eres vendedor de drogas!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vendrogas [ID o Nombre] [cantidad] [PRECIO]");
				return 1;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Solo puedes vender entre 1, y 99!"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Precio entre 1, o 99999!"); return 1; }
			if(needed > PlayerInfo[playerid][pDrugs]) { SendClientMessage(playerid, COLOR_GREY, "   No tienes tantas drogas!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   No puedes venderte a ti mismo!");
					        return 1;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Has ofrecido a %s, %d gramos de droga por: $%d .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s te ofrece %d gramos de droga por: $%d, (pon /aceptar drogas).", sendername, needed, money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador esta muy lejos!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Jugador desconectado.");
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/vendropro", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 20)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   No eres proveedor de drogas!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /vendropro [ID o Nombre] [cantidad] [PRECIO]");
				return 1;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Solo puedes vender entre 1, y 99!"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Precio entre 1, o 99999!"); return 1; }
			if(needed > PlayerInfo[playerid][pDrugs]) { SendClientMessage(playerid, COLOR_GREY, "   No tienes tantas drogas!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   No puedes venderte a ti mismo!");
					        return 1;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Has ofrecido a %s, %d gramos de droga por: $%d .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s te ofrece %d gramos de droga por: $%d, (pon /aceptar drogas).", sendername, needed, money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador esta muy lejos!");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Jugador desconectado.");
			}
		}
		return 1;
	}*/
    if(strcmp(cmd, "/negociardrogas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 20)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   No eres proveedor de drogas!");
				return 1;
		    }
		    if(!PlayerToPoint(15.0,playerid,1484.3933,-1731.2124,6.7213))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   No estas en el mercado negro!");
				return 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /negociardrogas [ID o Nombre] [cantidad] [precio]");
				return 1;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Solo puedes vender 1, o 99!"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return 1; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   El precio deve estar entre 1, y 99999!"); return 1; }
			if(needed > PlayerInfo[playerid][pDrugs]) { SendClientMessage(playerid, COLOR_GREY, "   No tienes tantas drogas!"); return 1; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   No puedes venderte a ti mismo!");
					        return 1;
					    }
					    if(PlayerInfo[playa][pJob] != 4)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Solo puedes venderle a los camellos!");
					        return 1;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Has ofrecido a %s, %d gramos de droga por: $%d .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Proveedor: %s te ha ofrecido %d gramos por: $%d, (pon /aceptar drugas).", sendername, needed, money);
						SendClientMessage(playa, COLOR_WHITE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jugador esta muy lejos !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Jugador desconectado.");
			}
		}
		return 1;
    }
    /*if(strcmp(cmdtext, "/usedrugs", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	   	    if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Cant use Drugs while you are fighting !");
	            return 1;
	        }
	        if(UsingDrugs[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You are high already !");
	            return 1;
	        }
			if(PlayerInfo[playerid][pDrugs] > 1)
			{
			    PlayerStoned[playerid] += 1;
			    if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~You are~n~~p~Stoned", 4000, 1); }
			    new Float:PlayersArmour;
			    GetPlayerArmour(playerid, PlayersArmour);
			    if(PlayerInfo[playerid][pDrugPerk] > 0)
			    {
			        SetPlayerArmour(playerid, PlayersArmour + 10.0);
			    }
			    SendClientMessage(playerid, COLOR_GREY, "   2 Drug Grams used !");
			    PlayerInfo[playerid][pDrugs] -= 2;
			    SetPlayerArmour(playerid, PlayersArmour + 6.0);
			    SetPlayerWeather(playerid, -68);
			    UsingDrugs[playerid] = 1;
			    //SetTimer("DrugEffectGone", 25000, 0);
			    SetTimerEx("DrugEffectGone", 25000, false, "i", playerid);
			    if(STDPlayer[playerid]==1)
				{
				     STDPlayer[playerid] = 0;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STD anymore because of the Drugs !");
				}
				else if(STDPlayer[playerid]==2)
				{
				     STDPlayer[playerid] = 1;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You lowered the STD to Chlamydia because of the Drugs !");
				}
				else if(STDPlayer[playerid]==3)
				{
				     STDPlayer[playerid] = 2;
				     SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You lowered the STD to Gonorrea because of the Drugs !");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You dont have any Drug Grams left !");
			}
		}//not connected
		return 1;
	}*/
	if(strcmp(cmd, "/usardrogas", true) == 0) // Drug system by LordMan
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No puedes drogarte boxeando.");
	            return 1;
	        }
	        if(UsingDrugs[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "   Estas drogado, espera un poco.");
	            return 1;
	        }
	        new x_nr[256];
	        x_nr = strtok(cmdtext, idx);
	        if(!strlen(x_nr))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /usardrogas [nombre]");
	            SendClientMessage(playerid, COLOR_WHITE, "_________________________________________");
	            SendClientMessage(playerid, COLOR_WHITE, "||Porro|| ((2gr)) Armadura +(5)");
	            SendClientMessage(playerid, COLOR_WHITE, "||Setas|| ((1gr)) Vida +(5)");
	            SendClientMessage(playerid, COLOR_WHITE, "||Dope|| ((12gr)) Sprint");
	            SendClientMessage(playerid, COLOR_WHITE, "_________________________________________");
	            return 1;
	        }
	        if(strcmp(x_nr,"porro",true) == 0)
	        {
	            if(PlayerInfo[playerid][pDrugs] > 1)
	            {
	                PlayerStoned[playerid] += 1;
	                if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~Estas fumando~n~~g~Mariguana", 4000, 1); }
	                new Float:PlayersArmour;
	                GetPlayerArmour(playerid, PlayersArmour);
			    	PlayerInfo[playerid][pDrugs] -= 2;
					if(PlayersArmour>=145)
					{
						SetPlayerArmour(playerid, 150.0);
					}
					else
					{
						SetPlayerArmour(playerid, PlayersArmour+5.0);
					}
			    	SetPlayerWeather(playerid, 9);
			    	UsingDrugs[playerid] = 1;
			    	SetTimerEx("DrugEffectGone", 60000, false, "i", playerid);
			    	GetPlayerName(playerid, sendername, sizeof(sendername));
			    	format(string, sizeof(string), "* %s saca un porro y comienza a alucinar.", sendername);
			    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    	ApplyAnimation(playerid,"SMOKING", "M_smk_out", 4.0, 1, 0, 0, 0, 0, 1);
			    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY)
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No tienes drogas !");
	            }
	        }
	        else if(strcmp(x_nr,"setas",true) == 0)
	        {
	            if(PlayerInfo[playerid][pDrugs] > 0)
	            {
	                PlayerStoned[playerid] += 1;
	                if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~Efecto de las setas~n~~p~Alucinogenas", 4000, 1); }
	                new Float:Playersvida;
	                GetPlayerHealth(playerid, Playersvida);
			    	PlayerInfo[playerid][pDrugs] -= 1;
					if(Playersvida>=145)
					{
						SetPlayerHealth(playerid, 150.0);
					}
					else
					{
						SetPlayerHealth(playerid, Playersvida+5.0);
					}
			    	SetPlayerWeather(playerid, 2006);
			    	UsingDrugs[playerid] = 1;
			    	SetTimerEx("DrugEffectGone", 45000, false, "i", playerid);
			    	GetPlayerName(playerid, sendername, sizeof(sendername));
			    	format(string, sizeof(string), "* %s saca unos polvos, y se los mete en la boca.", sendername);
			    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No tienes Drogas !");
	            }
	        }
	        else if(strcmp(x_nr,"dope",true) == 0)
	        {
	            if(PlayerInfo[playerid][pDrugs] > 11)
	            {
	                PlayerStoned[playerid] += 1;
	                if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid, "~w~Te injectas en vena~n~~y~Super-dope", 4000, 1); }
			    	PlayerInfo[playerid][pDrugs] -= 12;
			    	SetPlayerWeather(playerid, 19);
			    	UsingDrugs[playerid] = 1;
			    	SetTimerEx("DrugEffectGone", 120000, false, "i", playerid);
			    	GetPlayerName(playerid, sendername, sizeof(sendername));
			    	format(string, sizeof(string), "* %s se injecta dopage en vena.", sendername);
			    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    	ApplyAnimation(playerid,"PED","sprint_civi",4.1,1,1,1,1,1,1);
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   No tienes Drogas !");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: /usardrogas [nombre]");
	            SendClientMessage(playerid, COLOR_WHITE, "_________________________________________");
	            SendClientMessage(playerid, COLOR_WHITE, "||Porro|| ((060gr)) Armadura Completa");
	            SendClientMessage(playerid, COLOR_WHITE, "||Setas|| ((025gr)) Vida Completa");
	            SendClientMessage(playerid, COLOR_WHITE, "||Dope|| ((012gr)) Sprint");
	            SendClientMessage(playerid, COLOR_WHITE, "_________________________________________");
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/curarme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if (PlayerToPoint(3, playerid,1191.0593,-1292.2404,5.5532)||PlayerToPoint(3, playerid,1191.0593,-1292.2404,5.5532))
			{
	            if(STDPlayer[playerid] > 0)
	            {
					STDPlayer[playerid] = 0;
					SafeGivePlayerMoney(playerid, -200);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Te te han curado tus enfermedades: -$200!");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No tienes ninguna Enfermedad !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas en el hospital !");
	        }
        }
		return 1;
	}
    if(strcmp(cmd, "/herida", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
             if (GetPlayerMoney(playerid) < 999)
             {
                     SendClientMessage(playerid, COLOR_GRAD2, "  No tienes suficiente Dinero para comprar esto !");
                     return 1;
       	     }
	        if (PlayerToPoint(3, playerid,1195.4518,-1318.9702,5.5610)||PlayerToPoint(3, playerid,1195.4518,-1318.9702,5.5610))
			{
				if(PlayerInfo[playerid][pDeaths] > 0)
	            {
					SafeGivePlayerMoney(playerid, -1000);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Te te han curado 1 herida: -$1000!");
					PlayerInfo[playerid][pDeaths] = PlayerInfo[playerid][pDeaths]-1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No tienes ninguna Herida !");
				    return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   No estas en el hospital !");
	        }
        }
		return 1;
	}
	if(strcmp(cmd, "/echar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        new State;
	        if(IsPlayerInAnyVehicle(playerid))
	        {
         		State=GetPlayerState(playerid);
		        if(State!=PLAYER_STATE_DRIVER)
		        {
		        	SendClientMessage(playerid,COLOR_GREY,"   Solo puedes echar como conductor !");
		            return 1;
		        }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /echar [ID del jugador]");
					return 1;
				}
				new playa;
				playa = ReturnUser(tmp);
				new test;
				test = GetPlayerVehicleID(playerid);
				if(IsPlayerConnected(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
				    {
				        if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot Eject yourself!"); return 1; }
				        if(IsPlayerInVehicle(playa,test))
				        {
							new PName[MAX_PLAYER_NAME];
							GetPlayerName(playerid,PName,sizeof(PName));
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "* Has empujado a %s fuera del coche!", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Has sido empujado fuera del coche por %s !", PName);
							SendClientMessage(playa, COLOR_WHITE, string);
							RemovePlayerFromVehicle(playa);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta en tu coche !");
						    return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, " ID Invalida!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No estas dentro de un vehiculo !");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/entregarmercancia", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 9)
			{
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Estas en una Mision, no puedes usar ese Comando ahora!");
			        return 1;
			    }
                new newcar = GetPlayerVehicleID(playerid);
				if(Esuncamion(newcar))
		        {
		            GameTextForPlayer(playerid, "~w~Camionero ~n~~y~Carga la Mercancia", 5000, 1);
		            CP[playerid] = 150;
		            SetPlayerCheckpoint(playerid,65.0794,-245.0694,1.3052,9.0);
		        }
		        else
		        {
                GameTextForPlayer(playerid, "No estas en un camion", 5000, 1);
		        }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres Camionero!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/hacerpedidos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(CP[playerid] == 110)
	        {
	          SendClientMessage(playerid, COLOR_GREY, "   Usted ya esta Trabajando!");
	          return 1;
	        }
	        if(sinmovermerca[playerid] == 1) // by DryilZas
        	{
	            	SendClientMessage(playerid, COLOR_WHITE, "   Debes esperar un poco para seguir trabajando.");
	            	return 1;
        	}
	        if(PlayerInfo[playerid][pJob] == 16)
			{
                    new rand;
		            GameTextForPlayer(playerid, "~w~Comercial ~n~~y~Realiza Pedidos", 5000, 1);
		            CP[playerid] = 110;
		            rand = random(sizeof(comercialCP));
		            SetPlayerCheckpoint(playerid,comercialCP[rand][0],comercialCP[rand][1],comercialCP[rand][2],5.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres Comercial!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/movermercancia", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 10)
			{
			   /* if(sinmovermerca[playerid] == 1) // by DryilZas
	        	{
	            	SendClientMessage(playerid, COLOR_WHITE, "   Debes esperar un poco para seguir trabajando.");
	            	return 1;
	        	}*/
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Estas en una Mision, no puedes usar ese Comando ahora!");
			        return 1;
			    }
			    if(CP[playerid] == 90)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Usted ya esta Trabajando!");
			        return 1;
			    }
                new newcar = GetPlayerVehicleID(playerid);
                new rand;
				if(newcar == 81 || newcar == 82|| newcar == 83|| newcar == 84)
		        {
		            GameTextForPlayer(playerid, "~w~Mozo ~n~~y~Mueve la Mercancia", 5000, 1);
		            CP[playerid] = 90;
		            rand = random(sizeof(mozoCP));
		            SetPlayerCheckpoint(playerid,mozoCP[rand][0],mozoCP[rand][1],mozoCP[rand][2],9.0);
		        }
		        else
		        {
                GameTextForPlayer(playerid, "No estas en un montacarga", 5000, 1);
		        }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres Mozo de Almacen!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/nomovermercancia", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 10)
			{
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Estas en una Mision, no puedes usar ese Comando ahora!");
			        return 1;
			    }
			    if(CP[playerid] == 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Usted no esta Trabajando!");
			        return 1;
			    }
                new newcar = GetPlayerVehicleID(playerid);
				if(newcar == 81 || newcar == 82|| newcar == 83|| newcar == 84)
		        {
		            GameTextForPlayer(playerid, "~w~Dejas de trabajar", 5000, 1);
		            CP[playerid] = 0;
		            sinmovermerca[playerid] = 1; // by DryilZas
		            DisablePlayerCheckpoint(playerid);
		            RemovePlayerFromVehicle(playerid);
			    	SetTimerEx("tiemponomerca", 120000, false, "i", playerid);
		        }
		        else
		        {
                GameTextForPlayer(playerid, "No estas en un montacarga", 5000, 1);
		        }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres Mozo de Almacen!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/nohacerpedidos", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 16)
			{
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Estas en una Mision, no puedes usar ese Comando ahora!");
			        return 1;
			    }
			    if(CP[playerid] == 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Usted no esta Trabajando!");
			        return 1;
			    }
	            GameTextForPlayer(playerid, "~w~Dejas de trabajar", 5000, 1);
	            CP[playerid] = 0;
	            sinmovermerca[playerid] = 1; // by DryilZas
	            DisablePlayerCheckpoint(playerid);
		    	SetTimerEx("tiemponomerca", 120000, false, "i", playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres Comercial!");
			}
		}//not connected
		return 1;
	}
    if(strcmp(cmd, "/sexo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 3)
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
					SendClientMessage(playerid, COLOR_GREY, "   Solo puedes tener Sexo en un Vehiculo!");
					return 1;
			    }
			    new Car = GetPlayerVehicleID(playerid);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "COMANDO: /sexo [ID Jugador] [Precio]");
					return 1;
				}
				//giveplayerid = strval(tmp);
				giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				new money;
				money = strval(tmp);
				if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   El Precio no puede ser menor que 1, ni mayor que 99999!"); return 1; }
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "No puedes tener Sexo contigo mismo!"); return 1; }
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveplayerid, Car))
						    {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Has ofrecido a %s tener Sexo contigo, por %d$.", giveplayer, money);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s te ofrece tener Sexo, por %d$ (Escribe /aceptar sexo) para aceptarlo.", sendername, money);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					            SexOffer[giveplayerid] = playerid;
					            SexPrice[giveplayerid] = money;
				            }
				            else
				            {
				                SendClientMessage(playerid, COLOR_GREY, "   Uno de los dos no esta en el Coche!");
				                return 1;
				            }
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "   Este Jugador no esta cerca tuya!");
							return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Este no es un Jugador activo!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres una Prostituta!");
			}
		}//not connected
		return 1;
		}
	if(strcmp(cmd, "/wanted", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
				new x;
				SendClientMessage(playerid, COLOR_GREEN, "Current Wanted Suspects:");
			    for(new i=0; i < MAX_PLAYERS; i++) {
					if(IsPlayerConnected(i))
					{
					    if(WantedLevel[i] > 1)
					    {
							GetPlayerName(i, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "%s%s: %d", string,giveplayer,WantedLevel[i]);
							x++;
							if(x > 3) {
							    SendClientMessage(playerid, COLOR_YELLOW, string);
							    x = 0;
								format(string, sizeof(string), "");
							} else {
								format(string, sizeof(string), "%s, ", string);
							}
						}
					}
				}
				if(x <= 3 && x > 0) {
					string[strlen(string)-2] = '.';
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You're not a Cop / FBI / National Guard !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/robarcoche", true) == 0) // Ladronazogay
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pJob] == 5)
			{
			    new Float:health;
             	GetVehicleHealth(GetPlayerVehicleID(playerid),health);
             	new newcar = GetPlayerVehicleID(playerid);
            	if (health <= 500 && !IsABoat(newcar) && !IsABike(newcar) && !IsAPlane(newcar) && !IsAHarvest(newcar) && !IsADrugHarvest(newcar) && !IsASweeper(newcar))
             	{
             	    SendClientMessage(playerid, COLOR_GREY, "   Asi no puedes usar esto !");
			        return 1;
             	}
			    if(PlayerOnMission[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   No puedes robar un coche en una mision !");
			        return 1;
			    }
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
					SendClientMessage(playerid, COLOR_GREY, "   No estas en ningun vehiculo!");
					return 1;
			    }
		        if(PlayerInfo[playerid][pCarTime] == 0)
		        {
					format(string, sizeof(string), "* El ladron le hace un puente a la caja del coche.");
     				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     				new rand;
     				rand = random(LugaresRober);
     				if(rand == 0)
     				{
     				    format(string, sizeof(string), "* El ladron intenta arrancar el coche pero falla.");
     					ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
     					PlayerInfo[playerid][pCarTime] = 360;
     					SendClientMessage(playerid, COLOR_LIGHTRED, "Ahora debes esperar 6 minutos para volver a intentarlo !");
     					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
   						RemovePlayerFromVehicle(playerid);
     				    return 1;
     				}
     				else if(rand == 1)
	            	{
	                	GameTextForPlayer(playerid, "~w~Robaste el Vehiculo ~n~~r~Lleva el vehiculo a la marca~n~~w~Tienes 2 minutos", 10000, 1);
		            	CP[playerid] = 1;
		            	SetPlayerCheckpoint(playerid, 1362.6112,-1651.3959,13.1099,8.0);
		            	TogglePlayerControllable(playerid, 1);
						gEngine[GetPlayerVehicleID(playerid)] = 1;
						format(string, sizeof(string), "* El ladron intenta arrancar el coche y lo consigue.");
     					ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
     					PlayerInfo[playerid][pCarTime] = 360;
     					SetTimerEx("AdiosLadron", 120000, false, "i", playerid);
	                	return 1;
	            	}
	            	else if(rand == 2)
	            	{
	                	GameTextForPlayer(playerid, "~w~Robaste el Vehiculo ~n~~r~Lleva el vehiculo a la marca~n~~w~Tienes 2 minutos", 10000, 1);
		            	CP[playerid] = 1;
		            	SetPlayerCheckpoint(playerid, 972.5565,-1264.5061,15.7673,8.0);
		            	TogglePlayerControllable(playerid, 1);
						gEngine[GetPlayerVehicleID(playerid)] = 1;
						format(string, sizeof(string), "* El ladron intenta arrancar el coche y lo consigue.");
     					ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
     					PlayerInfo[playerid][pCarTime] = 360;
     					SetTimerEx("AdiosLadron", 120000, false, "i", playerid);
	                	return 1;
	            	}
	            	else if(rand == 3)
	            	{
	                	GameTextForPlayer(playerid, "~w~Robaste el Vehiculo ~n~~r~Lleva el vehiculo a la marca~n~~w~Tienes 2 minutos", 10000, 1);
		            	CP[playerid] = 1;
		            	SetPlayerCheckpoint(playerid, 2280.2319,-2042.6251,13.5469,8.0);
		            	TogglePlayerControllable(playerid, 1);
						gEngine[GetPlayerVehicleID(playerid)] = 1;
						format(string, sizeof(string), "* El ladron intenta arrancar el coche y lo consigue.");
     					ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
     					PlayerInfo[playerid][pCarTime] = 360;
     					SetTimerEx("AdiosLadron", 120000, false, "i", playerid);
	                	return 1;
	            	}
	            	else if(rand == 4)
	            	{
	                	GameTextForPlayer(playerid, "~w~Robaste el Vehiculo ~n~~r~Lleva el vehiculo a la marca~n~~w~Tienes 2 minutos", 10000, 1);
		            	CP[playerid] = 1;
		            	SetPlayerCheckpoint(playerid, 2153.8308,-2289.4231,13.3767,8.0);
		            	TogglePlayerControllable(playerid, 1);
						gEngine[GetPlayerVehicleID(playerid)] = 1;
						format(string, sizeof(string), "* El ladron intenta arrancar el coche y lo consigue.");
     					ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
     					PlayerInfo[playerid][pCarTime] = 360;
     					SetTimerEx("AdiosLadron", 120000, false, "i", playerid);
	                	return 1;
	            	}
	            	else if(rand == 5)
	            	{
	                	GameTextForPlayer(playerid, "~w~Robaste el Vehiculo ~n~~r~Lleva el vehiculo a la marca~n~~w~Tienes 2 minutos", 10000, 1);
		            	CP[playerid] = 1;
		            	SetPlayerCheckpoint(playerid, 2912.3257,-805.4589,11.0469,8.0);
		            	TogglePlayerControllable(playerid, 1);
						gEngine[GetPlayerVehicleID(playerid)] = 1;
						format(string, sizeof(string), "* El ladron intenta arrancar el coche y lo consigue.");
     					ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
     					PlayerInfo[playerid][pCarTime] = 360;
     					SetTimerEx("AdiosLadron", 120000, false, "i", playerid);
	                	return 1;
	            	}
		            return 1;
        		}
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Debes esperar un tiempo para volver a robar !");
		            return 1;
		        }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Tu no eres ladron de vehiculos !");
				return 1;
			}
		}//not connected
		return 1;
	}
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	if(strcmp(cmd, "/cinturon", true) == 0) // by MageC
	{
	    if (!IsPlayerInAnyVehicle(playerid))//
	    {
	      SendClientMessage(playerid, COLOR_GRAD2, "   No estas dentro de un vehiculo!");
	      return 1;
	  	}
		cinturon[i] = 1;
		GetPlayerName(playerid, sendername, sizeof(sendername));
	    format(string, sizeof(string), "* %s se pone el Cinturón.", sendername);
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
	}
	if(strcmp(cmd, "/activarint", true) == 0) // by MageC
	{
	    if (!IsPlayerInAnyVehicle(playerid))//
	    {
	      SendClientMessage(playerid, COLOR_GRAD2, "   No estas dentro de un vehiculo!");
	      return 1;
	  	}
	  	intermitente[playerid] = 1;
        SendClientMessage(playerid, COLOR_GRAD2, "   Ahora puedes usar los intermitentes");return 1;
	}
	if(strcmp(cmd, "/quitarint", true) == 0) // by MageC
	{
	    if (!IsPlayerInAnyVehicle(playerid))//
	    {
	      SendClientMessage(playerid, COLOR_GRAD2, "   No estas dentro de un vehiculo!");
	      return 1;
	  	}
	  	intermitente[playerid] = 0;
        SendClientMessage(playerid, COLOR_GRAD2, "    Desactivaste los intermitentes");return 1;
	}
    if(strcmp(cmd, "/casco", true) == 0) // casco
    {
        if(PlayerInfo[playerid][pMaskuse] == 1)
            {
             SendClientMessage(playerid, COLOR_GRAD2, "   ¡ No puedes ponerte el casco, tienes una máscara !");
			 return 1;
            }
            if(IsPlayerInAnyVehicle(playerid))
      		{
             SendClientMessage(playerid, COLOR_GREY, "   No puedes ponerte el casco mientras estás subido en un vehículo.");
			 return 1;
             }
     if(PlayerInfo[playerid][pCasco] == 0) return SendClientMessage(playerid, COLOR_GREY, "No tienes un casco.");
        if(ConCas[playerid] == 0)
        {
		    PlayerInfo[playerid][pMaskuse] = 0;
	    	for(new i = 0; i < MAX_PLAYERS; i++)
   			{
   		    	if(IsPlayerConnected(i))
   		    	{
		   			ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
			}
		    RemovePlayerAttachedObject(playerid, 1);
		    SendClientMessage(playerid, COLOR_GREY, "   El casco te reduce el daño por accidente.");
		    SendClientMessage(playerid, COLOR_GREY, "   Recuerda que no se puede robar con casco.");
		    cinturon[playerid] = 1;
		    GetPlayerName(playerid, sendername, sizeof(sendername));
      		format(string, sizeof(string), "* %s se pone un casco en la cabeza.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            new skin = GetPlayerSkin(playerid);
            ConCas[playerid] = 1;
            if(PlayerInfo[playerid][pCasco] == 1) SetPlayerAttachedObject(playerid, 4, 18645, 2, HelmetPos[skin][0], HelmetPos[skin][1], HelmetPos[skin][2], HelmetPos[skin][3], HelmetPos[skin][4], HelmetPos[skin][5]);
        return 1;
        }
        else
        {
        if(ConCas[playerid] == 1)
        SendClientMessage(playerid, COLOR_RED, "   Ya tienes un casco puesto!");
        return 1;
        }

    }
    if (strcmp(cmd, "/qcasco", true) == 0)
    {
    if(ConCas[playerid] == 0)
    {
        SendClientMessage(playerid, COLOR_RED, "   Tu no tienes un casco puesto!");
    }
    else if(ConCas[playerid] == 1)
    {
        PlayerInfo[playerid][pMaskuse] = 0;
        RemovePlayerAttachedObject(playerid, 4);
        SendClientMessage(playerid, COLOR_WHITE, "   Te has quitado el casco, para volver a ponertelo pon: /casco");
        cinturon[playerid] = 0;
        GetPlayerName(playerid, sendername, sizeof(sendername));
      	format(string, sizeof(string), "* %s se quita el casco de la cabeza.", sendername);
      	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        ConCas[playerid] = 0;
    }
    return 1;
}
/*	if(strcmp(cmd, "/afk", true) == 0) // by DryilZas
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pDonateRank] == 1)
			{
			    if(PlayerInfo[playerid][paaafk] == 1)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        PlayerInfo[playerid][paaafk] = 0;
			        SetPlayerVirtualWorld(playerid,0);
		    		PlayerInfo[playerid][pVirWorld] = 0;
		    		TogglePlayerControllable(playerid, 1);
					GameTextForPlayer(playerid, "~r~YA NO ESTAS AFK", 5000, 3);
					format(string, sizeof(string), "Administración: %s ya no esta AFK",sendername);
					printf("%s",string);
					format(string, sizeof(string), "Administración: %s ya no esta AFK",sendername);
					ABroadCast(COLOR_YELLOW,string);
					return 1;
			    }
                PlayerInfo[playerid][paaafk] = 1;
                SetPlayerVirtualWorld(playerid,335);
		    	PlayerInfo[playerid][pVirWorld] = 335;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, "~r~ESTAS AFK", 5000, 3);
				format(string, sizeof(string), "Administración: %s ha usado el comando /afk",sendername);
				printf("%s",string);
				format(string, sizeof(string), "Administración: %s ha usado el comando /afk",sendername);
				ABroadCast(COLOR_YELLOW,string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   No eres Usuario Premium !");
				return 1;
			}
		}//not connected
		return 1;
	}*/
	if(strcmp(cmd, "/dejartrabajo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
		    if(PlayerInfo[playerid][pJob] > 0)
		    {
		        if(PlayerInfo[playerid][pJob] == 7)
				{
     				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Para abandonar este trabajo tienes que pedirselo a un admin.");
     				return 1;
				}
		        if(PlayerInfo[playerid][pDonateRank] > 0)
		        {
		            if(PlayerInfo[playerid][pContractTime] >= 2)
					{
                        if(PlayerInfo[playerid][pJob] == 8 || PlayerInfo[playerid][pJob] == 17)
			            {
					      new rand = random(sizeof(CIV));
                          PlayerInfo[playerid][pModel] = CIV[rand];
		                  PlayerInfo[playerid][pChar] = CIV[rand];
		                  SetPlayerSkin(playerid, CIV[rand]);
                        }
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Abandonas el Trabajo.");
					    PlayerInfo[playerid][pJob] = 0;
					    PlayerInfo[playerid][pChar] = 0;
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 2 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), "* Te quedan %d Horas para acabar tu Contrato de Trabajo.", chours / 2);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
		        }
 		        else
		        {
					if(PlayerInfo[playerid][pContractTime] >= 10)
					{
                        if(PlayerInfo[playerid][pJob] == 8 || PlayerInfo[playerid][pJob] == 17)
			            {
					      new rand = random(sizeof(CIV));
                          PlayerInfo[playerid][pModel] = CIV[rand];
		                  PlayerInfo[playerid][pChar] = CIV[rand];
		                  SetPlayerSkin(playerid, CIV[rand]);
                        }
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ya has cumplido el Contrato de 5 Horas, abandonas el Trabajo.");
					    PlayerInfo[playerid][pJob] = 0;
					    PlayerInfo[playerid][pChar] = 0;
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 10 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), "* Te quedan %d Horas para acabar tu Contrato de Trabajo.", chours / 2);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No tienes un Trabajo!");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/bail", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(PlayerInfo[playerid][pJailed]==1)
			{
			    if(JailPrice[playerid] > 0)
			    {
			        if(GetPlayerMoney(playerid) > JailPrice[playerid])
			        {
			            format(string, sizeof(string), "You bailed yourself out for: $%d", JailPrice[playerid]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SafeGivePlayerMoney(playerid, -JailPrice[playerid]);
						JailPrice[playerid] = 0;
						WantLawyer[playerid] = 0; CallLawyer[playerid] = 0;
						PlayerInfo[playerid][pJailTime] = 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GRAD1, "   You can't afford the Bail Price !");
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   You don't have a Bail Price !");
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   You are not in Jail !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/clear", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			new member = PlayerInfo[playerid][pMember];
			new leader = PlayerInfo[playerid][pLeader];
			new rank = PlayerInfo[playerid][pRank];
	 		if(gTeam[playerid] == 2)
			{
				if (!PlayerToPoint(3.0, playerid, 253.9280,69.6094,1003.6406))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You are to not inside the Police Station!");
					return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /clear [ID o Nombre]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
                        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot Clear yourself!"); return 1; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* You cleared the Records and Wanted Points of %s.", giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Officer %s has cleared your Records and Wanted Points.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						WantedPoints[giveplayerid] = 0;
						WantedLevel[giveplayerid] = 0;
						ClearCrime(giveplayerid);
						if(gTeam[giveplayerid]==4)
						{
						    gTeam[giveplayerid] = 3;
						    SetPlayerToTeamColor(giveplayerid);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Invalid ID/Name!");
				}
			}
			else if(member == 6||leader == 6)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /clear [ID o Nombre]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot Clear yourself!"); return 1; }
					    if(rank < 4) { SendClientMessage(playerid, COLOR_GREY, "   You need Rank 4 to clear someone's Wanted Points + Records !"); return 1; }
					    if(GetPlayerMoney(playerid) < 5000) { SendClientMessage(playerid, COLOR_GREY, "   You need $5000 to Clear your Family Member !"); return 1; }
		                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    if(member > 0)
					    {
						    if(PlayerInfo[giveplayerid][pMember] != member)
							{
								SendClientMessage(playerid, COLOR_GREY, "   That player is not in your Family !");
								return 1;
							}
							format(string, sizeof(string), "* You cleared the Records and Wanted Points of %s for $5000.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Family Member %s with Rank %d, has cleared your Records and Wanted Points.", sendername, rank);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
						else if(leader > 0)
						{
			                if(PlayerInfo[giveplayerid][pMember] != leader)
							{
								SendClientMessage(playerid, COLOR_GREY, "   That player is not in your Family !");
								return 1;
							}
						    format(string, sizeof(string), "* You cleared the Records and Wanted Points of %s for $5000.", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* Family Leader %s, has cleared your Records and Wanted Points.", sendername);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
						WantedPoints[giveplayerid] = 0;
						WantedLevel[giveplayerid] = 0;
						ClearCrime(giveplayerid);
						SafeGivePlayerMoney(playerid, - 5000);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Invalid ID/Name!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   You are not an Cop / FBI / National Guard / Family Member !");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/multar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gTeam[playerid] != 2)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No eres un policia!");
			    return 1;
			}
	        if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] == 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No estas de servicio!");
			    return 1;
			}
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /multar [ID del jugador] [precio] [razon]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /multar [Id del jugador] [precio] [razon]");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 20001) { SendClientMessage(playerid, COLOR_GREY, "   El dinero no puede ser menor de 1 ni mallor de 20000 !"); return 1; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /multar [ID del jugador] [precio] [razon]");
							return 1;
						}
						format(string, sizeof(string), "* Has dado a %s una multa por valor de  $%d, razon: %s", giveplayer, moneys, (result));
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "* Oficial %s te ha multado con  $%d, razon: %s", sendername, moneys, (result));
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						SendClientMessage(giveplayerid, COLOR_WHITE, "* Escribe /aceptar multa, para aceptarla.");
						TicketOffer[giveplayerid] = playerid;
						TicketMoney[giveplayerid] = moneys;
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta cerca de ti !");
						return 1;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Este jugador no esta conectado !");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/arrestar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(gTeam[playerid] == 2  || IsACop(playerid))
			{
				if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pMember] == 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No estas de servicio!");
				    return 1;
				}
		        /*if(!PlayerToPoint(6.0, playerid, 268.3327,77.8972,1001.0391) || !PlayerToPoint(15.0, playerid,1537.2515,-1674.9572,13.3828))
				{// Jail spot
				    SendClientMessage(playerid, COLOR_GREY, "   You are not near the Jail, can't Arrest!");
				    return 1;
				}*/
				
				if(PlayerToPoint(6.0, playerid, 268.3327,77.8972,1001.0391) || PlayerToPoint(15.0, playerid,1537.2515,-1674.9572,13.3828) || PlayerToPoint(6.0, playerid, 1528.9080,-1678.0759,5.8906))
				{//New arrest system

					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAG: /arrestar [precio] [tiempo] [Fianza (0=no 1=si)] [precio fianza]");
						return 1;
					}
					moneys = strval(tmp);
					if(moneys < 1 || moneys > 99999) { SendClientMessage(playerid, COLOR_GREY, "   El Precio de Cárcel no puede ser debajo de 1 o encima de 99999 !"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /arrestar [precio] [time (tiempo] [fianza (0=no 1=si)] [precio fianza]");
						return 1;
					}
					new time = strval(tmp);
					if(time < 1 || time > 60) { SendClientMessage(playerid, COLOR_GREY, "   Los Minutos de Tiempo de Cárcel no pueden ser debajo 1 o encima de 20 !"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /arrestar [precio] [Tiempo] [fianza (0=no 1=si)] [precio fianza]");
						return 1;
					}
					new bail = strval(tmp);
					if(bail < 0 || bail > 1) { SendClientMessage(playerid, COLOR_GREY, "   ¡El Achicando de Cárcel no puede ser debajo 0 o encima de 1!"); return 1; }
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "ESCRIBE: /arrestar [precio] [tiempo] [fianza (0=no 1=yes)] [precio fianza]");
						return 1;
					}
					new bailprice = strval(tmp);
					if(bailprice < 0 || bailprice > 3000000) { SendClientMessage(playerid, COLOR_GREY, "   Jail Bailing can't be below $0 or above $3000000!"); return 1; }
					new suspect = GetClosestPlayer(playerid);
					if(IsPlayerConnected(suspect))
					{
						if(GetDistanceBetweenPlayers(playerid,suspect) < 5)
						{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedLevel[suspect] < 1)
							{
						    	SendClientMessage(playerid, COLOR_GREY, "   El sospechoso debe tener un nivel de busqueda!");
						    	return 1;
							}
							format(string, sizeof(string), "* Has detenido a %s!", giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							SafeGivePlayerMoney(suspect, -moneys);
							format(string, sizeof(string), "detenido por %s ~n~    for $%d", sendername, moneys);
							GameTextForPlayer(suspect, string, 5000, 5);
							SafeResetPlayerWeapons(suspect);
							if(PlayerInfo[playerid][pMember]==1||PlayerInfo[playerid][pLeader]==1)
							{
							    new currank[64];
		    					if(PlayerInfo[playerid][pRank] == 1) { currank = "Policia"; }
								else if(PlayerInfo[playerid][pRank] == 2) { currank = "Oficial de policia"; }
								else if(PlayerInfo[playerid][pRank] == 3) { currank = "Sub-Inspector"; }
								else if(PlayerInfo[playerid][pRank] == 4) { currank = "Inspector"; }
								else if(PlayerInfo[playerid][pRank] == 5) { currank = "Inspector Jefe"; }
	        					else if(PlayerInfo[playerid][pRank] == 6) { currank = "Capitan"; }
	        					else if(PlayerInfo[playerid][pRank] == 7) { currank = "Sub-Jefe"; }
	        					else if(PlayerInfo[playerid][pRank] == 8) { currank = "Comisario"; }
								else { currank = "Policia"; }
								format(string, sizeof(string), "[Policia] %s %s ha arrestado al sospechoso %s", currank ,sendername, giveplayer);
								OOCNews(COLOR_BLUE, string);
							}
							else if(PlayerInfo[playerid][pMember]==2||PlayerInfo[playerid][pLeader]==2)
							{
								format(string, sizeof(string), "[FBI] Agente %s ha arrestado a el sospechoso %s", sendername, giveplayer);
								OOCNews(COLOR_BLUE, string);
							}
							SetPlayerInterior(suspect, 6);
							SetPlayerPos(suspect,264.6288,77.5742,1001.0391);
							PlayerInfo[suspect][pJailTime] = time * 60;
							//SetTimerEx("salircarcel", time*600, false, "i", playerid);
							if(bail == 1)
							{
								JailPrice[suspect] = bailprice;
								format(string, sizeof(string), "has sido encarcelado durante %d segundos.   Fianza: $%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
								SendClientMessage(suspect, COLOR_WHITE, string);
							}
							else
							{
							    JailPrice[suspect] = 0;
								format(string, sizeof(string), "has sido encarcelado durante %d segundos.   Fianza: NO", PlayerInfo[suspect][pJailTime]);
								SendClientMessage(suspect, COLOR_WHITE, string);
							}
							PlayerInfo[suspect][pJailed] = 1;
				     	   	PlayerInfo[suspect][pArrested] += 1;
							SetPlayerFree(suspect,playerid, "Fue Detenido");
							WantedPoints[suspect] = 0;
							WantedLevel[suspect] = 0;
							WantLawyer[suspect] = 1;
						}//distance
					}//not connected
					else
					{
				    	SendClientMessage(playerid, COLOR_GREY, "   No-one close enough to arrest.");
				    	return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Usted no está en el punto de cárcel.");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   No eres un policia!");
			    return 1;
			}
		}//not connected
		return 1;
	}
	
	if(strcmp(cmd, "/contrato", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /contrato [ID del jugador] [cantidad]");
				SendClientMessage(playerid, COLOR_GRAD1, "Recuerda que si pones un precio muy bajo,");
				SendClientMessage(playerid, COLOR_GRAD1, "puede que nadie se interese por el encargo.");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: /contrato [ID del jugador] [cantidad]");
				SendClientMessage(playerid, COLOR_GRAD1, "Recuerda que si pones un precio muy bajo,");
				SendClientMessage(playerid, COLOR_GRAD1, "puede que nadie se interese por el encargo.");
				return 1;
			}
			moneys = strval(tmp);
			if(moneys < 1000 || moneys > 100000) { SendClientMessage(playerid, COLOR_GREY, "   El contrato deve estar entre $1000, y $100000"); return 1; }
			/*if(PlayerInfo[playerid][pLevel] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Necesitas ser nivel 3!.");
				return 1;
			}*/
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(PlayerInfo[giveplayerid][pMember] == 8 && PlayerInfo[playerid][pMember] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   No puedes ponerle precio a esa cabeza!");
				        return 1;
				    }
				    else if(PlayerInfo[giveplayerid][pLeader] == 8 && PlayerInfo[playerid][pMember] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   No puedes ponerle precio a esa cabeza!");
				        return 1;
				    }
				    else if(PlayerInfo[giveplayerid][pMember] == 8||PlayerInfo[giveplayerid][pLeader] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Tu no puedes contratar a un hitman !");
				        return 1;
				    }
				    if(gTeam[giveplayerid] == 2 && moneys != 20000)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Se requiere $20000 para matar a un policia !");
				        return 1;
				    }
				    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Tan estupido como matarse a si mismo..."); return 1; }
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					playermoney = GetPlayerMoney(playerid);
					if (moneys > 0 && playermoney >= moneys)
					{
						SafeGivePlayerMoney(playerid, (0 - moneys));
						PlayerInfo[giveplayerid][pHeadValue]+=moneys;
						format(string, sizeof(string), "%s ha puesto precio a %s, por $%d.",sendername, giveplayer, moneys);
						SendFamilyMessage(8, COLOR_YELLOW, string);
						format(string, sizeof(string), "* Has puesto precio a la vida de %s, por $%d.",giveplayer, moneys);
						SendClientMessage(playerid, COLOR_WHITE, string);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Error.");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d no esta activo.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	
		if(!strcmp(cmd, "/animairport", true))
		{
			ApplyAnimation(playerid,"AIRPORT","thrw_barl_thrw",4.1,0,1,1,1,1,1);
			return 1;
		}

		if(!strcmp(cmd, "/animattractors", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 3)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animat [1-3]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"Attractors","Stepsit_in",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"Attractors","Stepsit_loop",4.1,0,1,1,1,1,1);
			    	case 3: ApplyAnimation(playerid,"Attractors","Stepsit_out",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbar", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 12)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbar [1-12]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"BAR","Barcustom_get",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"BAR","Barcustom_loop",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"BAR","Barcustom_order",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BAR","Barserve_bottle",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"BAR","Barserve_glass",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"BAR","Barserve_in",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"BAR","Barserve_loop",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"BAR","Barserve_order",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"BAR","dnk_stndF_loop",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"BAR","dnk_stndM_loop",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"BAR","BARman_idle",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbaseball", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 11)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbaseball [1-11]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"BASEBALL","Bat_1",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"BASEBALL","Bat_2",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"BASEBALL","Bat_2",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"BASEBALL","Bat_block",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"BASEBALL","Bat_Hit_1",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"BASEBALL","Bat_Hit_2",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"BASEBALL","Bat_Hit_3",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"BASEBALL","Bat_IDLE",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"BASEBALL","Bat_M",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"BASEBALL","BAT_PART",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbdfire", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 13)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animfire [1-13]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"BD_FIRE","BD_Fire1",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"BD_FIRE","BD_Fire2",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"BD_FIRE","BD_Fire3",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BD_FIRE","BD_GF_Wave",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"BD_FIRE","BD_Panic_01",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"BD_FIRE","BD_Panic_02",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"BD_FIRE","BD_Panic_03",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"BD_FIRE","BD_Panic_04",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"BD_FIRE","BD_Panic_Loop",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"BD_FIRE","M_smklean_loop",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"BD_FIRE","M_smklean_loop",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"BD_FIRE","Playa_Kiss_03",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbeach", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbeach [1-5]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"BEACH","bather",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"BEACH","Lay_Bac_Loop",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"BEACH","BD_Fire3",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BEACH","ParkSit_W_loop",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbenchpress", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 7)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbp [1-7]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"benchpress","gym_bp_down",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"benchpress","gym_bp_getoff",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"benchpress","gym_bp_geton",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"benchpress","gym_bp_up_A",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"benchpress","gym_bp_up_B",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"benchpress","gym_bp_up_smooth",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbf", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbf [1-4]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"BF_injection","BF_getin_LHS",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"BF_injection","BF_getin_RHS",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"BF_injection","BF_getout_LHS",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BF_injection","BF_getout_RHS",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbiked", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 19)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbiked [1-19]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"BIKED","BIKEd_Back",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"BIKED","BIKEd_drivebyFT",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"BIKED","BIKEd_drivebyLHS",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BIKED","BIKEd_drivebyRHS",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"BIKED","BIKEd_Fwd",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"BIKED","BIKEd_getoffBACK",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"BIKED","BIKEd_getoffLHS",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"BIKED","BIKEd_getoffRHS",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"BIKED","BIKEd_hit",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"BIKED","BIKEd_jumponL",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"BIKED","BIKEd_jumponR",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"BIKED","BIKEd_kick",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"BIKED","BIKEd_Left",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"BIKED","BIKEd_passenger",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"BIKED","BIKEd_pushes",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"BIKED","BIKEd_Ride",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"BIKED","BIKEd_Right",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"BIKED","BIKEd_shuffle",4.1,0,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"BIKED","BIKEd_Still",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbikeh", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 18)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbikeh [1-18]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"BIKEH","BIKEh_Back",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyFT",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyLHS",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyRHS",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"BIKEH","BIKEh_Fwd",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"BIKEH","BIKEh_getoffBACK",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"BIKEH","BIKEh_getoffLHS",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"BIKEH","BIKEh_getoffRHS",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"BIKEH","BIKEh_hit",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"BIKEH","BIKEh_jumponL",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"BIKEH","BIKEh_jumponR",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"BIKEH","BIKEh_kick",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"BIKEH","BIKEh_Left",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"BIKEH","BIKEh_passenger",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"BIKEH","BIKEh_pushes",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"BIKEH","BIKEh_Ride",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"BIKEH","BIKEh_Right",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"BIKEH","BIKEh_Still",4.1,0,1,1,1,1,1);
			}
			return 1;
		}

		if(!strcmp(cmd, "/animbikeleap", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 9)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbikelp [1-9]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"BIKELEAP","bk_blnce_in",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"BIKELEAP","bk_blnce_out",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"BIKELEAP","bk_jmp",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BIKELEAP","bk_rdy_in",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"BIKELEAP","bk_rdy_out",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"BIKELEAP","struggle_cesar",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"BIKELEAP","struggle_driver",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"BIKELEAP","truck_driver",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"BIKELEAP","truck_getin",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbikes", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 20)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbikes [1-20]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"BIKES","BIKEs_Back",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"BIKES","BIKEs_drivebyFT",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"BIKES","BIKEs_drivebyLHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"BIKES","BIKEs_drivebyRHS",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"BIKES","BIKEs_Fwd",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"BIKES","BIKEs_getoffBACK",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"BIKES","BIKEs_getoffLHS",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"BIKES","BIKEs_getoffRHS",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"BIKES","BIKEs_hit",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"BIKES","BIKEs_jumponL",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"BIKES","BIKEs_jumponR",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"BIKES","BIKEs_kick",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"BIKES","BIKEs_Left",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"BIKES","BIKEs_passenger",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"BIKES","BIKEs_pushes",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"BIKES","BIKEs_Ride",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"BIKES","BIKEs_Right",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"BIKES","BIKEs_Snatch_L",4.1,0,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"BIKES","BIKEs_Snatch_R",4.1,0,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"BIKES","BIKEs_Still",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbikev", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 18)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbikev [1-18]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"BIKEV","BIKEv_Back",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyFT",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyLHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyRHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"BIKEV","BIKEv_Fwd",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"BIKEV","BIKEv_getoffBACK",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"BIKEV","BIKEv_getoffLHS",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"BIKEV","BIKEv_getoffRHS",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"BIKEV","BIKEv_hit",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"BIKEV","BIKEv_jumponL",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"BIKEV","BIKEv_jumponR",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"BIKEV","BIKEv_kick",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"BIKEV","BIKEv_Left",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"BIKEV","BIKEv_passenger",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"BIKEV","BIKEv_pushes",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"BIKEV","BIKEv_Ride",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"BIKEV","BIKEv_Right",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"BIKEV","BIKEv_Still",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbikedbz", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbikedbz [1-4]");
					return 1;
				}
				switch(animid)
				{
		 		   case 1: ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_BWD",4.1,0,1,1,1,1,1);
		 		   case 2: ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_FWD",4.1,0,1,1,1,1,1);
		 		   case 3: ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_LHS",4.1,0,1,1,1,1,1);
		 		   case 4: ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_RHS",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbmx", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 18)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbmx [1-18]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"BMX","BMX_back",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"BMX","BMX_bunnyhop",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"BMX","BMX_drivebyFT",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"BMX","BMX_driveby_LHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"BMX","BMX_driveby_RHS",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"BMX","BMX_fwd",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"BMX","BMX_getoffBACK",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"BMX","BMX_pushes",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"BMX","BMX_getoffLHS",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"BMX","BMX_getoffRHS",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"BMX","BMX_jumponL",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"BMX","BMX_jumponR",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"BMX","BMX_Left",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"BMX","BMX_pedal",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"BMX","BMX_Ride",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"BMX","BMX_Right",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"BMX","BMX_sprint",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"BMX","BMX_still",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbomber", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 6)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbomber [1-6]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"BOMBER","BOM_Plant_In",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbox", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 10)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbox [1-10]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"BOX","boxhipin",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"BOX","boxhipup",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"BOX","boxshdwn",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BOX","boxshup",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"BOX","bxhipwlk",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"BOX","bxhwlki",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"BOX","bxshwlk",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"BOX","bxshwlki",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"BOX","bxwlko",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"BOX","catch_box",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbsktball", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 41)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbasket [1-41]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"BSKTBALL","BBALL_def_jump_shot",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"BSKTBALL","BBALL_def_stepL",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BSKTBALL","BBALL_def_stepR",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Gli",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Gli_O",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnch",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnch_O",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnd",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_O",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"BSKTBALL","BBALL_idle",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"BSKTBALL","BBALL_idle2",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"BSKTBALL","BBALL_idle2_O",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop_O",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"BSKTBALL","BBALL_idle_O",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Cancel",4.1,0,1,1,1,1,1);
				    case 19: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Cancel_0",4.1,0,1,1,1,1,1);
				    case 20: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_End",4.1,0,1,1,1,1,1);
				    case 21: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.1,0,1,1,1,1,1);
				    case 22: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot_O",4.1,0,1,1,1,1,1);
				    case 23: ApplyAnimation(playerid,"BSKTBALL","BBALL_Net_Dnk_O",4.1,0,1,1,1,1,1);
				    case 24: ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.1,0,1,1,1,1,1);
				    case 25: ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup_O",4.1,0,1,1,1,1,1);
				    case 26: ApplyAnimation(playerid,"BSKTBALL","BBALL_react_miss",4.1,0,1,1,1,1,1);
				    case 27: ApplyAnimation(playerid,"BSKTBALL","BBALL_react_score",4.1,0,1,1,1,1,1);
				    case 28: ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1,0,1,1,1,1,1);
				    case 29: ApplyAnimation(playerid,"BSKTBALL","BBALL_run_O",4.1,0,1,1,1,1,1);
				    case 30: ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_L",4.1,0,1,1,1,1,1);
				    case 31: ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_L_O",4.1,0,1,1,1,1,1);
				    case 32: ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_R",4.1,0,1,1,1,1,1);
				    case 33: ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_R_O",4.1,0,1,1,1,1,1);
				    case 34: ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,0,1,1,1,1,1);
				    case 35: ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_L",4.1,0,1,1,1,1,1);
				    case 36: ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_L_O",4.1,0,1,1,1,1,1);
				    case 37: ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_R",4.1,0,1,1,1,1,1);
				    case 38: ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_R_O",4.1,0,1,1,1,1,1);
				    case 39: ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_O",4.1,0,1,1,1,1,1);
				    case 40: ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_start",4.1,0,1,1,1,1,1);
				    case 41: ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_start_O",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbuddy", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbuddy [1-5]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"BUDDY","buddy_crouchfire",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"BUDDY","buddy_crouchreload",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"BUDDY","buddy_fire",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"BUDDY","buddy_fire_poor",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"BUDDY","buddy_reload",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animbus", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 9)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbus [1-9]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"BUS","BUS_close",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"BUS","BUS_getin_LHS",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"BUS","BUS_getin_RHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"BUS","BUS_getout_LHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"BUS","BUS_getout_RHS",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"BUS","BUS_jacked_LHS",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"BUS","BUS_open",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"BUS","BUS_open_RHS",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"BUS","BUS_pullout_LHS",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animcamera", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 14)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animcamera [1-14]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"CAMERA","camcrch_cmon",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"CAMERA","camcrch_idleloop",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"CAMERA","camcrch_stay",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"CAMERA","camcrch_to_camstnd",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"CAMERA","camstnd_cmon",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"CAMERA","camstnd_idleloop",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"CAMERA","camstnd_lkabt",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"CAMERA","camstnd_to_camcrch",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"CAMERA","piccrch_in",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"CAMERA","piccrch_out",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"CAMERA","piccrch_take",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"CAMERA","picstnd_in",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"CAMERA","picstnd_out",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"CAMERA","picstnd_take",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animcar", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 11)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animcar [1-11]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"CAR","Fixn_Car_Loop",4.1,0,1,1,1,1,1);
		    		case 2: ApplyAnimation(playerid,"CAR","Fixn_Car_Out",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"CAR","flag_drop",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"CAR","Sit_relaxed",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"CAR","Tap_hand",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"CAR","Tyd2car_bump",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"CAR","Tyd2car_high",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"CAR","Tyd2car_low",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"CAR","Tyd2car_med",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"CAR","Tyd2car_TurnL",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"CAR","Tyd2car_TurnR",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animcarry", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 7)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animcarry [1-7]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"CARRY","liftup",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"CARRY","liftup05",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"CARRY","liftup105",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"CARRY","putdwn",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"CARRY","putdwn05",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"CARRY","putdwn105",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animcarchat", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 21)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animcarchat [1-21]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"CAR_CHAT","carfone_in",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"CAR_CHAT","carfone_loopA",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"CAR_CHAT","carfone_loopA_to_B",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"CAR_CHAT","carfone_loopB",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"CAR_CHAT","carfone_loopB_to_A",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"CAR_CHAT","carfone_out",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_BL",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_BR",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_FL",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_FR",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc2_FL",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_BR",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_FL",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_FR",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_BL",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_BR",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_FL",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_FR",4.1,0,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"CAR_CHAT","car_talkm_in",4.1,0,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"CAR_CHAT","car_talkm_loop",4.1,0,1,1,1,1,1);
					case 21: ApplyAnimation(playerid,"CAR_CHAT","car_talkm_out",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animcasino", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 25)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animcasino [1-25]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"CASINO","cards_in",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"CASINO","cards_loop",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"CASINO","cards_lose",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"CASINO","cards_out",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"CASINO","cards_pick_01",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"CASINO","cards_pick_02",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"CASINO","cards_raise",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"CASINO","cards_win",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"CASINO","dealone",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"CASINO","manwinb",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"CASINO","manwind",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"CASINO","Roulette_bet",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"CASINO","Roulette_in",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"CASINO","Roulette_loop",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"CASINO","Roulette_lose",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"CASINO","Roulette_out",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"CASINO","Roulette_win",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"CASINO","Slot_bet_01",4.1,0,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"CASINO","Slot_bet_02",4.1,0,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"CASINO","Slot_in",4.1,0,1,1,1,1,1);
					case 21: ApplyAnimation(playerid,"CASINO","Slot_lose_out",4.1,0,1,1,1,1,1);
					case 22: ApplyAnimation(playerid,"CASINO","Slot_Plyr",4.1,0,1,1,1,1,1);
					case 23: ApplyAnimation(playerid,"CASINO","Slot_wait",4.1,0,1,1,1,1,1);
					case 24: ApplyAnimation(playerid,"CASINO","Slot_win_out",4.1,0,1,1,1,1,1);
					case 25: ApplyAnimation(playerid,"CASINO","wof",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animchainsaw", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 11)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animsaw [1-11]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"CHAINSAW","CSAW_2",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"CHAINSAW","CSAW_3",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"CHAINSAW","CSAW_G",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_1",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_2",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_3",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"CHAINSAW","csaw_part",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"CHAINSAW","IDLE_csaw",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"CHAINSAW","WEAPON_csawlo",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animchoppa", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 18)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animchoppa [1-18]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"CHOPPA","CHOPPA_back",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"CHOPPA","CHOPPA_bunnyhop",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"CHOPPA","CHOPPA_drivebyFT",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"CHOPPA","CHOPPA_driveby_LHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"CHOPPA","CHOPPA_driveby_RHS",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"CHOPPA","CHOPPA_fwd",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffBACK",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffLHS",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffRHS",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"CHOPPA","CHOPPA_jumponL",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"CHOPPA","CHOPPA_jumponR",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"CHOPPA","CHOPPA_Left",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"CHOPPA","CHOPPA_pedal",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"CHOPPA","CHOPPA_Pushes",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"CHOPPA","CHOPPA_ride",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"CHOPPA","CHOPPA_Right",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"CHOPPA","CHOPPA_sprint",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"CHOPPA","CHOPPA_Still",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animclothes", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 13)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animclothes [1-13]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"CLOTHES","CLO_Buy",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"CLOTHES","CLO_In",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"CLOTHES","CLO_Out",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Hat",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_In",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_In_O",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Legs",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Loop",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Out",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Out_O",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Shoes",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Torso",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Watch",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animcoach", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 6)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animcoach [1-6]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"COACH","COACH_inL",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"COACH","COACH_inR",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"COACH","COACH_opnL",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"COACH","COACH_opnR",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"COACH","COACH_outL",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"COACH","COACH_outR",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animcolt", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 7)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animcolt [1-7]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"COLT45","2guns_crouchfire",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"COLT45","colt45_crouchfire",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"COLT45","colt45_crouchreload",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"COLT45","colt45_fire",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"COLT45","colt45_fire_2hands",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"COLT45","colt45_reload",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"COLT45","sawnoff_reload",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animcopambient", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 12)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animcopa [1-12]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_in",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_loop",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_nod",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_out",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_shake",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_in",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_loop",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_nod",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_out",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_shake",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_think",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animcopdvbyz", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animcopdvb [1-4]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_B",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_FT",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_L",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_R",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animcrack", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 10)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animcrack[1-10]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_01",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_02",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"CRACK","crckdeth1",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"CRACK","crckdeth2",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"CRACK","crckdeth3",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"CRACK","crckdeth4",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"CRACK","crckidle1",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"CRACK","crckidle2",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"CRACK","crckidle3",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"CRACK","crckidle4",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animcrib", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animcrib [1-5]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"CRIB","CRIB_Console_Loop",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"CRIB","CRIB_Use_Switch",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"CRIB","PED_Console_Loop",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"CRIB","PED_Console_Loose",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"CRIB","PED_Console_Win",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animdamjump", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animdamjump [1-5]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"DAM_JUMP","DAM_Dive_Loop",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"DAM_JUMP","DAM_Land",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"DAM_JUMP","DAM_Launch",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"DAM_JUMP","Jump_Roll",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"DAM_JUMP","SF_JumpWall",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animdancing", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 13)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animdance [1-13]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"DANCING","bd_clap",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"DANCING","dance_loop",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"DANCING","DAN_Up_A",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"DANCING","dnce_M_e",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animdealer", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 7)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animdealer [1-7]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"DEALER","DEALER_DEAL",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"DEALER","DEALER_IDLE_01",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"DEALER","DEALER_IDLE_02",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"DEALER","DEALER_IDLE_03",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"DEALER","DRUGS_BUY",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"DEALER","shop_pay",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animdildo", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 9)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animdildo [1-9]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"DILDO","DILDO_1",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"DILDO","DILDO_2",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"DILDO","DILDO_3",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"DILDO","DILDO_block",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"DILDO","DILDO_G",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"DILDO","DILDO_Hit_1",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"DILDO","DILDO_Hit_2",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"DILDO","DILDO_Hit_3",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"DILDO","DILDO_IDLE",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animdodge", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animdodge [1-4]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"DODGE","Cover_Dive_01",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"DODGE","Cover_Dive_02",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"DODGE","Crushed",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"DODGE","Crush_Jump",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animdozer", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 10)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animdozer [1-10]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"DOZER","DOZER_Align_LHS",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"DOZER","DOZER_Align_RHS",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"DOZER","DOZER_getin_LHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"DOZER","DOZER_getin_RHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"DOZER","DOZER_getout_LHS",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"DOZER","DOZER_getout_RHS",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"DOZER","DOZER_Jacked_LHS",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"DOZER","DOZER_Jacked_RHS",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"DOZER","DOZER_pullout_LHS",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"DOZER","DOZER_pullout_RHS",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animdrivebys", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 8)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animdrivebys [1-8]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS_Bwd",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS_Fwd",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS_Bwd",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS_Fwd",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyTop_LHS",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyTop_RHS",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animfat", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 18)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animfat [1-18]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"FAT","FatIdle",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"FAT","FatIdle_armed",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"FAT","FatIdle_Csaw",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"FAT","FatIdle_Rocket",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"FAT","FatRun",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"FAT","FatRun_armed",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"FAT","FatRun_Csaw",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"FAT","FatRun_Rocket",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"FAT","FatSprint",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"FAT","FatWalk",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"FAT","FatWalkstart",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"FAT","FatWalkstart_Csaw",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"FAT","FatWalkSt_armed",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"FAT","FatWalkSt_Rocket",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"FAT","FatWalk_armed",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"FAT","FatWalk_Csaw",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"FAT","FatWalk_Rocket",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"FAT","IDLE_tired",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animfightb", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 10)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animfightb [1-10]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"FIGHT_B","FightB_1",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"FIGHT_B","FightB_2",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"FIGHT_B","FightB_3",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"FIGHT_B","FightB_block",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"FIGHT_B","FightB_G",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"FIGHT_B","FightB_IDLE",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"FIGHT_B","FightB_M",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"FIGHT_B","HitB_1",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"FIGHT_B","HitB_2",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"FIGHT_B","HitB_3",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animfightc", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 12)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animfightc [1-12]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"FIGHT_C","FightC_1",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"FIGHT_C","FightC_2",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"FIGHT_C","FightC_3",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"FIGHT_C","FightC_block",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"FIGHT_C","FightC_blocking",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"FIGHT_C","FightC_G",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"FIGHT_C","FightC_IDLE",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"FIGHT_C","FightC_Spar",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"FIGHT_C","HitC_1",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"FIGHT_C","HitC_2",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"FIGHT_C","HitC_3",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animfightd", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 10)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animfightd [1-10]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"FIGHT_D","FightD_1",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"FIGHT_D","FightD_2",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"FIGHT_D","FightD_block",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"FIGHT_D","FightD_G",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"FIGHT_D","FightD_IDLE",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"FIGHT_D","FightD_M",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"FIGHT_D","HitD_1",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"FIGHT_D","HitD_2",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"FIGHT_D","HitD_3",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animfighte", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animfighte [1-4]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"FIGHT_E","FightKick",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"FIGHT_E","Hit_fightkick",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"FIGHT_E","Hit_fightkick_B",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animfinale", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 16)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animfinale [1-16]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"FINALE","FIN_Climb_In",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"FINALE","FIN_Cop1_ClimbOut2",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"FINALE","FIN_Cop1_Loop",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"FINALE","FIN_Cop1_Stomp",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"FINALE","FIN_Hang_L",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"FINALE","FIN_Hang_Loop",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"FINALE","FIN_Hang_R",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"FINALE","FIN_Hang_L",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"FINALE","FIN_Jump_On",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"FINALE","FIN_Land_Car",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"FINALE","FIN_Land_Die",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"FINALE","FIN_LegsUp",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"FINALE","FIN_LegsUp_L",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"FINALE","FIN_LegsUp_Loop",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"FINALE","FIN_LegsUp_R",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"FINALE","FIN_Let_Go",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animfinale2", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 8)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animfinale2 [1-8]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"FINALE2","FIN_Cop1_ClimbOut",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Fall",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Loop",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Shot",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Swing",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"FINALE2","FIN_Cop2_ClimbOut",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"FINALE2","FIN_Switch_P",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"FINALE2","FIN_Switch_S",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animflame", true))
		{
			ApplyAnimation(playerid,"FLAME","FLAME_fire",4.1,0,1,1,1,1);
			return 1;
		}

		if(!strcmp(cmd, "/animflowers", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 3)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animflowers [1-3]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"Flowers","Flower_attack",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"Flowers","Flower_attack_M",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"Flowers","Flower_Hit",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animfood", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 33)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animfood [1-33]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"FOOD","EAT_Vomit_P",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"FOOD","EAT_Vomit_SK",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"FOOD","FF_Dam_Bkw",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"FOOD","FF_Dam_Fwd",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"FOOD","FF_Dam_Left",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"FOOD","FF_Dam_Right",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"FOOD","FF_Die_Bkw",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"FOOD","FF_Die_Fwd",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"FOOD","FF_Die_Left",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"FOOD","FF_Die_Right",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"FOOD","FF_Sit_Eat1",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"FOOD","FF_Sit_Eat2",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"FOOD","FF_Sit_Eat3",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"FOOD","FF_Sit_In",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"FOOD","FF_Sit_In_L",4.1,0,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"FOOD","FF_Sit_In_R",4.1,0,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"FOOD","FF_Sit_Look",4.1,0,1,1,1,1,1);
					case 21: ApplyAnimation(playerid,"FOOD","FF_Sit_Loop",4.1,0,1,1,1,1,1);
					case 22: ApplyAnimation(playerid,"FOOD","FF_Sit_Out_180",4.1,0,1,1,1,1,1);
					case 23: ApplyAnimation(playerid,"FOOD","FF_Sit_Out_L_180",4.1,0,1,1,1,1,1);
					case 24: ApplyAnimation(playerid,"FOOD","FF_Sit_Out_R_180",4.1,0,1,1,1,1,1);
					case 25: ApplyAnimation(playerid,"FOOD","SHP_Thank",4.1,0,1,1,1,1,1);
					case 26: ApplyAnimation(playerid,"FOOD","SHP_Tray_In",4.1,0,1,1,1,1,1);
					case 27: ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift",4.1,0,1,1,1,1,1);
					case 28: ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_In",4.1,0,1,1,1,1,1);
					case 29: ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_Loop",4.1,0,1,1,1,1,1);
					case 30: ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_Out",4.1,0,1,1,1,1,1);
					case 31: ApplyAnimation(playerid,"FOOD","SHP_Tray_Out",4.1,0,1,1,1,1,1);
					case 32: ApplyAnimation(playerid,"FOOD","SHP_Tray_Pose",4.1,0,1,1,1,1,1);
					case 33: ApplyAnimation(playerid,"FOOD","SHP_Tray_Return",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animfreeweights", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 9)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animfw [1-9]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"Freeweights","gym_barbell",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"Freeweights","gym_free_A",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"Freeweights","gym_free_B",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"Freeweights","gym_free_celebrate",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"Freeweights","gym_free_down",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"Freeweights","gym_free_loop",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"Freeweights","gym_free_pickup",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"Freeweights","gym_free_putdown",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"Freeweights","gym_free_up_smooth",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animgangs", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 33)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animgangs [1-33]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"GANGS","DEALER_DEAL",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"GANGS","DEALER_IDLE",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"GANGS","drnkbr_prtl",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"GANGS","drnkbr_prtl_F",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"GANGS","DRUGS_BUY",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"GANGS","hndshkaa",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"GANGS","hndshkba",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"GANGS","hndshkca",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"GANGS","hndshkcb",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"GANGS","hndshkda",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"GANGS","hndshkea",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"GANGS","hndshkfa",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"GANGS","Invite_No",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"GANGS","Invite_Yes",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"GANGS","leanIDLE",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"GANGS","leanIN",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"GANGS","leanOUT",4.1,0,1,1,1,1,1);
				    case 19: ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.1,0,1,1,1,1,1);
				    case 20: ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.1,0,1,1,1,1,1);
				    case 21: ApplyAnimation(playerid,"GANGS","prtial_gngtlkCt",4.1,0,1,1,1,1,1);
				    case 22: ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.1,0,1,1,1,1,1);
				    case 23: ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.1,0,1,1,1,1,1);
				    case 24: ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.1,0,1,1,1,1,1);
				    case 25: ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.1,0,1,1,1,1,1);
				    case 26: ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.1,0,1,1,1,1,1);
				    case 27: ApplyAnimation(playerid,"GANGS","prtial_hndshk_01",4.1,0,1,1,1,1,1);
				    case 28: ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01",4.1,0,1,1,1,1,1);
				    case 29: ApplyAnimation(playerid,"GANGS","shake_cara",4.1,0,1,1,1,1,1);
				    case 30: ApplyAnimation(playerid,"GANGS","shake_carK",4.1,0,1,1,1,1,1);
				    case 31: ApplyAnimation(playerid,"GANGS","shake_carSH",4.1,0,1,1,1,1,1);
				    case 32: ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.1,0,1,1,1,1,1);
					case 33: ApplyAnimation(playerid,"GANGS","smkcig_prtl_F",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animghands", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 20)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animghands [1-20]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"GHANDS","gsign1",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"GHANDS","gsign1LH",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"GHANDS","gsign2",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"GHANDS","gsign3",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"GHANDS","gsign4",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"GHANDS","gsign4LH",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"GHANDS","gsign5",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"GHANDS","gsign5LH",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"GHANDS","LHGsign1",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"GHANDS","LHGsign2",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"GHANDS","LHGsign3",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"GHANDS","LHGsign4",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"GHANDS","LHGsign5",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"GHANDS","RHGsign1",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"GHANDS","RHGsign2",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"GHANDS","RHGsign3",4.1,0,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"GHANDS","RHGsign4",4.1,0,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"GHANDS","RHGsign5",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animghetto", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 7)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animghettodb [1-7]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"GHETTO_DB","GDB_Car2_PLY",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"GHETTO_DB","GDB_Car2_SMO",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"GHETTO_DB","GDB_Car2_SWE",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_PLY",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_RYD",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_SMO",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_SWE",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animgog", true))
		{
			ApplyAnimation(playerid,"goggles","goggles_put_on",4.1,0,1,1,1,1,1);
			return 1;
		}

		if(!strcmp(cmd, "/animgraffity", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 2)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animgraffity [1-2]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"GRAFFITI","graffiti_Chkout",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"GRAFFITI","spraycan_fire",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animgraveyard", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 3)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animgreya [1-3]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"GRAVEYARD","mrnM_loop",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"GRAVEYARD","prst_loopa",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(strcmp(cmd, "/animgrenade", true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 3)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animgren [1-3]");
					return 1;
				}
			switch(animid)
			{
			    case 1: ApplyAnimation(playerid,"GRENADE","WEAPON_start_throw",4.1,0,1,1,1,1,1);
			    case 2: ApplyAnimation(playerid,"GRENADE","WEAPON_throw",4.1,0,1,1,1,1,1);
			    case 3: ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",4.1,0,1,1,1,1,1);
			}
			return 1;
		}

		if(!strcmp(cmd, "/animgym", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 24)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animgym [1-24]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_celebrate",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_fast",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_faster",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_getoff",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_geton",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_pedal",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_slow",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"GYMNASIUM","gym_bike_still",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"GYMNASIUM","gym_jog_falloff",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"GYMNASIUM","gym_shadowbox",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_celebrate",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_falloff",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_getoff",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_geton",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_jog",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_sprint",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_tired",4.1,0,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"GYMNASIUM","gym_tread_walk",4.1,0,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"GYMNASIUM","gym_walk_falloff",4.1,0,1,1,1,1,1);
					case 21: ApplyAnimation(playerid,"GYMNASIUM","Pedals_fast",4.1,0,1,1,1,1,1);
					case 22: ApplyAnimation(playerid,"GYMNASIUM","Pedals_med",4.1,0,1,1,1,1,1);
					case 23: ApplyAnimation(playerid,"GYMNASIUM","Pedals_slow",4.1,0,1,1,1,1,1);
					case 24: ApplyAnimation(playerid,"GYMNASIUM","Pedals_still",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animhaircut", true))
		{
			tmp = strtok(cmdtext, idx);
    		animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 13)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animhaircut [1-13]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"HAIRCUTS","BRB_Beard_01",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"HAIRCUTS","BRB_Buy",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut_In",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut_Out",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"HAIRCUTS","BRB_Hair_01",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"HAIRCUTS","BRB_Hair_02",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"HAIRCUTS","BRB_In",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"HAIRCUTS","BRB_Out",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"HAIRCUTS","BRB_Loop",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_In",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_Loop",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_Out",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animheist", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 10)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animheist [1-10]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"HEIST9","CAS_G2_GasKO",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"HEIST9","swt_wllpk_L",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"HEIST9","swt_wllpk_L_back",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"HEIST9","swt_wllpk_R",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"HEIST9","swt_wllpk_R_back",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"HEIST9","swt_wllshoot_in_L",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"HEIST9","swt_wllshoot_in_R",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"HEIST9","swt_wllshoot_out_L",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"HEIST9","swt_wllshoot_out_R",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"HEIST9","Use_SwipeCard",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animinthouse", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 10)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animinthouse [1-10]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"INT_HOUSE","BED_In_L",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_L",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_R",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"INT_HOUSE","BED_Out_L",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"INT_HOUSE","BED_Out_R",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"INT_HOUSE","LOU_In",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"INT_HOUSE","LOU_Loop",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"INT_HOUSE","LOU_Out",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"INT_HOUSE","wash_up",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animintoffice", true))
		{
			tmp = strtok(cmdtext, idx);
    		animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 10)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animintoffice [1-10]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"INT_OFFICE","FF_Dam_Fwd",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_2Idle_180",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Bored_Loop",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Crash",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Drink",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Idle_Loop",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_In",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Read",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Type_Loop",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Watch",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animintshop", true))
		{
			tmp = strtok(cmdtext, idx);
    		animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 8)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animintshop [1-8]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"INT_SHOP","shop_cashier",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"INT_SHOP","shop_in",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"INT_SHOP","shop_lookA",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"INT_SHOP","shop_lookB",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"INT_SHOP","shop_loop",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"INT_SHOP","shop_out",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"INT_SHOP","shop_pay",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"INT_SHOP","shop_shelf",4.1,0,1,1,1,1,1);
			}
			return 1;
		}

		if(!strcmp(cmd, "/animjst", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animjst [1-4]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"JST_BUISNESS","girl_01",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"JST_BUISNESS","girl_02",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"JST_BUISNESS","player_01",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"JST_BUISNESS","smoke_01",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animkart", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animkart [1-4]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"KART","KART_getin_LHS",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"KART","KART_getin_RHS",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"KART","KART_getout_LHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"KART","KART_getout_RHS",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animkissing", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 15)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animkissing [1-15]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"KISSING","BD_GF_Wave",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"KISSING","gfwave2",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"KISSING","GF_CarArgue_01",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"KISSING","GF_CarArgue_02",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"KISSING","GF_CarSpot",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"KISSING","GF_StreetArgue_01",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"KISSING","GF_StreetArgue_02",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"KISSING","gift_get",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"KISSING","gift_give",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_01",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_02",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_03",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"KISSING","Playa_Kiss_02",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"KISSING","Playa_Kiss_03",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animknife", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 16)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animknife [1-16]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"KNIFE","KILL_Knife_Player",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"KNIFE","KILL_Partial",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"KNIFE","knife_1",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"KNIFE","knife_2",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"KNIFE","knife_3",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"KNIFE","knife_4",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"KNIFE","knife_block",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"KNIFE","Knife_G",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"KNIFE","knife_hit_1",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"KNIFE","knife_hit_2",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"KNIFE","knife_hit_3",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"KNIFE","knife_IDLE",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"KNIFE","knife_part",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"KNIFE","WEAPON_knifeidle",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animlapdan", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 2)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animlapdan [1-2]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"LAPDAN1","LAPDAN_D",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"LAPDAN1","LAPDAN_P",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animlapdan2", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 2)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animlapdan [1-2]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"LAPDAN2","LAPDAN_D",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"LAPDAN2","LAPDAN_P",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animlapdan3", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 2)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animlapdan [1-2]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"LAPDAN3","LAPDAN_D",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"LAPDAN3","LAPDAN_P",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animlowrider", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 39)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animlowrider [1-39]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"LOWRIDER","F_smklean_loop",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"LOWRIDER","lrgirl_bdbnce",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"LOWRIDER","lrgirl_hair",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"LOWRIDER","lrgirl_hurry",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"LOWRIDER","lrgirl_idleloop",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"LOWRIDER","lrgirl_idle_to_l0",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_bnce",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_loop",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_to_l1",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l12_to_l0",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_bnce",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_loop",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_to_l2",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_bnce",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_loop",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_to_l3",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l345_to_l1",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_bnce",4.1,0,1,1,1,1,1);
				    case 19: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_loop",4.1,0,1,1,1,1,1);
				    case 20: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_to_l4",4.1,0,1,1,1,1,1);
				    case 21: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_bnce",4.1,0,1,1,1,1,1);
				    case 22: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_loop",4.1,0,1,1,1,1,1);
				    case 23: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_to_l5",4.1,0,1,1,1,1,1);
				    case 24: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l5_bnce",4.1,0,1,1,1,1,1);
				    case 25: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l5_loop",4.1,0,1,1,1,1,1);
				    case 26: ApplyAnimation(playerid,"LOWRIDER","M_smklean_loop",4.1,0,1,1,1,1,1);
				    case 27: ApplyAnimation(playerid,"LOWRIDER","M_smkstnd_loop",4.1,0,1,1,1,1,1);
				    case 28: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkB",4.1,0,1,1,1,1,1);
				    case 29: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkC",4.1,0,1,1,1,1,1);
				    case 30: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkD",4.1,0,1,1,1,1,1);
				    case 31: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkE",4.1,0,1,1,1,1,1);
				    case 32: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkF",4.1,0,1,1,1,1,1);
				    case 33: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkG",4.1,0,1,1,1,1,1);
				    case 34: ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkH",4.1,0,1,1,1,1,1);
				    case 35: ApplyAnimation(playerid,"LOWRIDER","RAP_A_Loop",4.1,0,1,1,1,1,1);
				    case 36: ApplyAnimation(playerid,"LOWRIDER","RAP_B_Loop",4.1,0,1,1,1,1,1);
				    case 37: ApplyAnimation(playerid,"LOWRIDER","RAP_C_Loop",4.1,0,1,1,1,1,1);
				    case 38: ApplyAnimation(playerid,"LOWRIDER","Sit_relaxed",4.1,0,1,1,1,1,1);
					case 39: ApplyAnimation(playerid,"LOWRIDER","Tap_hand",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animmdchase", true))
		{
			tmp = strtok(cmdtext, idx);
    		animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 25)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animmdchase [1-25]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"MD_CHASE","Carhit_Hangon",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"MD_CHASE","Carhit_Tumble",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"MD_CHASE","donutdrop",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L1",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L2",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L3",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R1",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R2",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R3",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"MD_CHASE","Hangon_Stun_loop",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"MD_CHASE","Hangon_Stun_Turn",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_2_HANG",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Jmp_BL",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Jmp_F",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_BL",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Die_BL",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Die_F",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_F",4.1,0,1,1,1,1,1);
				    case 19: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll",4.1,0,1,1,1,1,1);
				    case 20: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll_F",4.1,0,1,1,1,1,1);
				    case 21: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Punch",4.1,0,1,1,1,1,1);
				    case 22: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Punch_F",4.1,0,1,1,1,1,1);
				    case 23: ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Shot_F",4.1,0,1,1,1,1,1);
				    case 24: ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Lnd_Roll",4.1,0,1,1,1,1,1);
				    case 25: ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Loop",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animmddend", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
			if(!strlen(tmp)||animid < 1 || animid > 8)
			{
				SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animmddend [1-8]");
				return 1;
			}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"MD_END","END_SC1_PLY",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"MD_END","END_SC1_RYD",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"MD_END","END_SC1_SMO",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"MD_END","END_SC1_SWE",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"MD_END","END_SC2_PLY",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"MD_END","END_SC2_RYD",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"MD_END","END_SC2_SMO",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"MD_END","END_SC2_SWE",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animmedic", true))
		{
			ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,1,1,1,1,1);
			return 1;
		}

		if(!strcmp(cmd, "/animmisc", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 41)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animms [1-41]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"MISC","bitchslap",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"MISC","BMX_celebrate",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"MISC","BMX_comeon",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"MISC","bmx_idleloop_01",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"MISC","bmx_idleloop_02",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"MISC","bmx_talkleft_in",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"MISC","bmx_talkleft_loop",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"MISC","bmx_talkleft_out",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"MISC","bmx_talkright_in",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"MISC","bmx_talkright_loop",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"MISC","bmx_talkright_out",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"MISC","bng_wndw",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"MISC","bng_wndw_02",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"MISC","Case_pickup",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"MISC","door_jet",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"MISC","GRAB_L",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"MISC","GRAB_R",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"MISC","Hiker_Pose",4.1,0,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"MISC","Hiker_Pose_L",4.1,0,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"MISC","Idle_Chat_02",4.1,0,1,1,1,1,1);
					case 21: ApplyAnimation(playerid,"MISC","KAT_Throw_K",4.1,0,1,1,1,1,1);
					case 22: ApplyAnimation(playerid,"MISC","KAT_Throw_O",4.1,0,1,1,1,1,1);
					case 23: ApplyAnimation(playerid,"MISC","KAT_Throw_P",4.1,0,1,1,1,1,1);
					case 24: ApplyAnimation(playerid,"MISC","PASS_Rifle_O",4.1,0,1,1,1,1,1);
					case 25: ApplyAnimation(playerid,"MISC","PASS_Rifle_Ped",4.1,0,1,1,1,1,1);
					case 26: ApplyAnimation(playerid,"MISC","PASS_Rifle_Ply",4.1,0,1,1,1,1,1);
					case 27: ApplyAnimation(playerid,"MISC","pickup_box",4.1,0,1,1,1,1,1);
					case 28: ApplyAnimation(playerid,"MISC","Plane_door",4.1,0,1,1,1,1,1);
					case 29: ApplyAnimation(playerid,"MISC","Plane_exit",4.1,0,1,1,1,1,1);
					case 30: ApplyAnimation(playerid,"MISC","Plane_hijack",4.1,0,1,1,1,1,1);
					case 31: ApplyAnimation(playerid,"MISC","Plunger_01",4.1,0,1,1,1,1,1);
					case 32: ApplyAnimation(playerid,"MISC","Plyrlean_loop",4.1,0,1,1,1,1,1);
					case 33: ApplyAnimation(playerid,"MISC","plyr_shkhead",4.1,0,1,1,1,1,1);
					case 34: ApplyAnimation(playerid,"MISC","Run_Dive",4.1,0,1,1,1,1,1);
					case 35: ApplyAnimation(playerid,"MISC","Scratchballs_01",4.1,0,1,1,1,1,1);
					case 36: ApplyAnimation(playerid,"MISC","SEAT_LR",4.1,0,1,1,1,1,1);
					case 37: ApplyAnimation(playerid,"MISC","Seat_talk_01",4.1,0,1,1,1,1,1);
					case 38: ApplyAnimation(playerid,"MISC","Seat_talk_02",4.1,0,1,1,1,1,1);
					case 39: ApplyAnimation(playerid,"MISC","SEAT_watch",4.1,0,1,1,1,1,1);
					case 40: ApplyAnimation(playerid,"MISC","smalplane_door",4.1,0,1,1,1,1,1);
					case 41: ApplyAnimation(playerid,"MISC","smlplane_door",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animmtb", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 18)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animmtb [1-18]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"MTB","MTB_back",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"MTB","MTB_bunnyhop",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"MTB","MTB_drivebyFT",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"MTB","MTB_driveby_LHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"MTB","MTB_driveby_RHS",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"MTB","MTB_fwd",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"MTB","MTB_getoffBACK",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"MTB","MTB_pushes",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"MTB","MTB_getoffLHS",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"MTB","MTB_getoffRHS",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"MTB","MTB_jumponL",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"MTB","MTB_jumponR",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"MTB","MTB_Left",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"MTB","MTB_pedal",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"MTB","MTB_Ride",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"MTB","MTB_Right",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"MTB","MTB_sprint",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"MTB","MTB_still",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animmusculcar", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 17)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animmusculcar [1-17]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"MUSCULAR","MscleWalkst_armed",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"MUSCULAR","MscleWalkst_Csaw",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"MUSCULAR","Mscle_rckt_run",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"MUSCULAR","Mscle_rckt_walkst",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"MUSCULAR","Mscle_run_Csaw",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"MUSCULAR","MuscleIdle",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_armed",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_Csaw",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_rocket",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"MUSCULAR","MuscleRun",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"MUSCULAR","MuscleRun_armed",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"MUSCULAR","MuscleSprint",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"MUSCULAR","MuscleWalk",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"MUSCULAR","MuscleWalkstart",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"MUSCULAR","MuscleWalk_armed",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"MUSCULAR","Musclewalk_Csaw",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"MUSCULAR","Musclewalk_rocket",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animnevada", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 2)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animnevada [1-2]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"NEVADA","NEVADA_getin",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"NEVADA","NEVADA_getout",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animonlookers", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 29)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animlookers [1-29]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"ON_LOOKERS","lkaround_in",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"ON_LOOKERS","lkaround_loop",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"ON_LOOKERS","lkaround_out",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"ON_LOOKERS","lkup_in",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"ON_LOOKERS","lkup_loop",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"ON_LOOKERS","lkup_out",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"ON_LOOKERS","lkup_point",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"ON_LOOKERS","panic_cower",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"ON_LOOKERS","panic_hide",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"ON_LOOKERS","panic_in",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"ON_LOOKERS","panic_loop",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"ON_LOOKERS","panic_out",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"ON_LOOKERS","panic_point",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"ON_LOOKERS","panic_shout",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"ON_LOOKERS","Pointup_in",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"ON_LOOKERS","Pointup_loop",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"ON_LOOKERS","Pointup_out",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"ON_LOOKERS","Pointup_shout",4.1,0,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"ON_LOOKERS","point_in",4.1,0,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"ON_LOOKERS","point_loop",4.1,0,1,1,1,1,1);
					case 21: ApplyAnimation(playerid,"ON_LOOKERS","point_out",4.1,0,1,1,1,1,1);
					case 22: ApplyAnimation(playerid,"ON_LOOKERS","shout_01",4.1,0,1,1,1,1,1);
					case 23: ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,0,1,1,1,1,1);
					case 24: ApplyAnimation(playerid,"ON_LOOKERS","shout_in",4.1,0,1,1,1,1,1);
					case 25: ApplyAnimation(playerid,"ON_LOOKERS","shout_loop",4.1,0,1,1,1,1,1);
					case 26: ApplyAnimation(playerid,"ON_LOOKERS","shout_out",4.1,0,1,1,1,1,1);
					case 27: ApplyAnimation(playerid,"ON_LOOKERS","wave_in",4.1,0,1,1,1,1,1);
					case 28: ApplyAnimation(playerid,"ON_LOOKERS","wave_loop",4.1,0,1,1,1,1,1);
					case 29: ApplyAnimation(playerid,"ON_LOOKERS","wave_out",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animotb", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 11)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animotb [1-11]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"OTB","betslp_in",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"OTB","betslp_lkabt",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"OTB","betslp_loop",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"OTB","betslp_out",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"OTB","betslp_tnk",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"OTB","wtchrace_cmon",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"OTB","wtchrace_in",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"OTB","wtchrace_loop",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"OTB","wtchrace_lose",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"OTB","wtchrace_out",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"OTB","wtchrace_win",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animparachute", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 22)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animpara [1-22]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_Accel",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive_DIE",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_L",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_R",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"PARACHUTE","PARA_decel",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"PARACHUTE","PARA_decel_O",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"PARACHUTE","PARA_float",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"PARACHUTE","PARA_float_O",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"PARACHUTE","PARA_Land",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"PARACHUTE","PARA_Land_O",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"PARACHUTE","PARA_Land_Water",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"PARACHUTE","PARA_Land_Water_O",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"PARACHUTE","PARA_open",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"PARACHUTE","PARA_open_O",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_Land_O",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_Loop_O",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_O",4.1,0,1,1,1,1,1);
				    case 19: ApplyAnimation(playerid,"PARACHUTE","PARA_steerL",4.1,0,1,1,1,1,1);
				    case 20: ApplyAnimation(playerid,"PARACHUTE","PARA_steerL_O",4.1,0,1,1,1,1,1);
				    case 21: ApplyAnimation(playerid,"PARACHUTE","PARA_steerR",4.1,0,1,1,1,1,1);
				    case 22: ApplyAnimation(playerid,"PARACHUTE","PARA_steerR_O",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animpark", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 3)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animpark [1-3]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"PARK","Tai_Chi_in",4.1,0,1,1,1,1,1);
			 	   case 2: ApplyAnimation(playerid,"PARK","Tai_Chi_Loop",4.1,0,1,1,1,1,1);
			 	   case 3: ApplyAnimation(playerid,"PARK","Tai_Chi_Out",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animpaulnmac", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 12)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animpaulnmac [1-12]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"PAULNMAC","Piss_in",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"PAULNMAC","Piss_loop",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"PAULNMAC","Piss_out",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"PAULNMAC","PnM_Argue1_A",4.1,0,1,1,1,1,1);
			    	case 5: ApplyAnimation(playerid,"PAULNMAC","PnM_Argue1_B",4.1,0,1,1,1,1,1);
			    	case 6: ApplyAnimation(playerid,"PAULNMAC","PnM_Argue2_A",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"PAULNMAC","PnM_Argue2_B",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"PAULNMAC","PnM_Loop_A",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"PAULNMAC","PnM_Loop_B",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"PAULNMAC","wank_in",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"PAULNMAC","wank_loop",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"PAULNMAC","wank_out",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animped", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 295)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animped [1-295]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"PED","abseil",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"PED","BIKE_elbowL",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"PED","BIKE_elbowR",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"PED","BIKE_fallR",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"PED","BIKE_fall_off",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"PED","BIKE_pickupL",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"PED","BIKE_pickupR",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"PED","BIKE_pullupL",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"PED","BIKE_pullupR",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"PED","bomber",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"PED","CAR_alignHI_LHS",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"PED","CAR_alignHI_RHS",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"PED","CAR_align_LHS",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"PED","CAR_align_RHS",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"PED","CAR_closedoorL_LHS",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"PED","CAR_closedoorL_RHS",4.1,0,1,1,1,1,1);
				    case 19: ApplyAnimation(playerid,"PED","CAR_closedoor_LHS",4.1,0,1,1,1,1,1);
				    case 20: ApplyAnimation(playerid,"PED","CAR_closedoor_RHS",4.1,0,1,1,1,1,1);
				    case 21: ApplyAnimation(playerid,"PED","CAR_close_LHS",4.1,0,1,1,1,1,1);
				    case 22: ApplyAnimation(playerid,"PED","CAR_close_RHS",4.1,0,1,1,1,1,1);
				    case 23: ApplyAnimation(playerid,"PED","CAR_crawloutRHS",4.1,0,1,1,1,1,1);
					case 24: ApplyAnimation(playerid,"PED","CAR_dead_LHS",4.1,0,1,1,1,1,1);
					case 25: ApplyAnimation(playerid,"PED","CAR_dead_RHS",4.1,0,1,1,1,1,1);
					case 26: ApplyAnimation(playerid,"PED","CAR_doorlocked_LHS",4.1,0,1,1,1,1,1);
					case 27: ApplyAnimation(playerid,"PED","CAR_doorlocked_RHS",4.1,0,1,1,1,1,1);
					case 28: ApplyAnimation(playerid,"PED","CAR_fallout_LHS",4.1,0,1,1,1,1,1);
					case 29: ApplyAnimation(playerid,"PED","CAR_fallout_RHS",4.1,0,1,1,1,1,1);
					case 30: ApplyAnimation(playerid,"PED","CAR_getinL_LHS",4.1,0,1,1,1,1,1);
					case 31: ApplyAnimation(playerid,"PED","CAR_getinL_RHS",4.1,0,1,1,1,1,1);
					case 32: ApplyAnimation(playerid,"PED","CAR_getin_LHS",4.1,0,1,1,1,1,1);
					case 33: ApplyAnimation(playerid,"PED","CAR_getin_RHS",4.1,0,1,1,1,1,1);
					case 34: ApplyAnimation(playerid,"PED","CAR_getoutL_LHS",4.1,0,1,1,1,1,1);
					case 35: ApplyAnimation(playerid,"PED","CAR_getoutL_RHS",4.1,0,1,1,1,1,1);
					case 36: ApplyAnimation(playerid,"PED","CAR_getout_LHS",4.1,0,1,1,1,1,1);
					case 37: ApplyAnimation(playerid,"PED","CAR_getout_RHS",4.1,0,1,1,1,1,1);
					case 38: ApplyAnimation(playerid,"PED","car_hookertalk",4.1,0,1,1,1,1,1);
					case 39: ApplyAnimation(playerid,"PED","CAR_jackedLHS",4.1,0,1,1,1,1,1);
					case 40: ApplyAnimation(playerid,"PED","CAR_jackedRHS",4.1,0,1,1,1,1,1);
					case 41: ApplyAnimation(playerid,"PED","CAR_jumpin_LHS",4.1,0,1,1,1,1,1);
					case 42: ApplyAnimation(playerid,"PED","CAR_LB",4.1,0,1,1,1,1,1);
					case 43: ApplyAnimation(playerid,"PED","CAR_LB_pro",4.1,0,1,1,1,1,1);
					case 44: ApplyAnimation(playerid,"PED","CAR_LB_weak",4.1,0,1,1,1,1,1);
					case 45: ApplyAnimation(playerid,"PED","CAR_LjackedLHS",4.1,0,1,1,1,1,1);
					case 46: ApplyAnimation(playerid,"PED","CAR_LjackedRHS",4.1,0,1,1,1,1,1);
					case 47: ApplyAnimation(playerid,"PED","CAR_Lshuffle_RHS",4.1,0,1,1,1,1,1);
					case 48: ApplyAnimation(playerid,"PED","CAR_Lsit",4.1,0,1,1,1,1,1);
					case 49: ApplyAnimation(playerid,"PED","CAR_open_LHS",4.1,0,1,1,1,1,1);
					case 50: ApplyAnimation(playerid,"PED","CAR_open_RHS",4.1,0,1,1,1,1,1);
					case 51: ApplyAnimation(playerid,"PED","CAR_pulloutL_LHS",4.1,0,1,1,1,1,1);
					case 52: ApplyAnimation(playerid,"PED","CAR_pulloutL_RHS",4.1,0,1,1,1,1,1);
					case 53: ApplyAnimation(playerid,"PED","CAR_pullout_LHS",4.1,0,1,1,1,1,1);
					case 54: ApplyAnimation(playerid,"PED","CAR_pullout_RHS",4.1,0,1,1,1,1,1);
					case 55: ApplyAnimation(playerid,"PED","CAR_Qjacked",4.1,0,1,1,1,1,1);
					case 56: ApplyAnimation(playerid,"PED","CAR_rolldoor",4.1,0,1,1,1,1,1);
					case 57: ApplyAnimation(playerid,"PED","CAR_rolldoorLO",4.1,0,1,1,1,1,1);
					case 58: ApplyAnimation(playerid,"PED","CAR_rollout_LHS",4.1,0,1,1,1,1,1);
					case 59: ApplyAnimation(playerid,"PED","CAR_rollout_RHS",4.1,0,1,1,1,1,1);
					case 60: ApplyAnimation(playerid,"PED","CAR_shuffle_RHS",4.1,0,1,1,1,1,1);
					case 61: ApplyAnimation(playerid,"PED","CAR_sit",4.1,0,1,1,1,1,1);
					case 62: ApplyAnimation(playerid,"PED","CAR_sitp",4.1,0,1,1,1,1,1);
					case 63: ApplyAnimation(playerid,"PED","CAR_sitpLO",4.1,0,1,1,1,1,1);
					case 64: ApplyAnimation(playerid,"PED","CAR_sit_pro",4.1,0,1,1,1,1,1);
					case 65: ApplyAnimation(playerid,"PED","CAR_sit_weak",4.1,0,1,1,1,1,1);
					case 66: ApplyAnimation(playerid,"PED","CAR_tune_radio",4.1,0,1,1,1,1,1);
					case 67: ApplyAnimation(playerid,"PED","CLIMB_idle",4.1,0,1,1,1,1,1);
					case 68: ApplyAnimation(playerid,"PED","CLIMB_jump",4.1,0,1,1,1,1,1);
					case 69: ApplyAnimation(playerid,"PED","CLIMB_jump2fall",4.1,0,1,1,1,1,1);
					case 70: ApplyAnimation(playerid,"PED","CLIMB_jump_B",4.1,0,1,1,1,1,1);
					case 71: ApplyAnimation(playerid,"PED","CLIMB_Pull",4.1,0,1,1,1,1,1);
					case 72: ApplyAnimation(playerid,"PED","CLIMB_Stand",4.1,0,1,1,1,1,1);
					case 73: ApplyAnimation(playerid,"PED","CLIMB_Stand_finish",4.1,0,1,1,1,1,1);
					case 74: ApplyAnimation(playerid,"PED","cower",4.1,0,1,1,1,1,1);
					case 75: ApplyAnimation(playerid,"PED","Crouch_Roll_L",4.1,0,1,1,1,1,1);
					case 76: ApplyAnimation(playerid,"PED","Crouch_Roll_R",4.1,0,1,1,1,1,1);
					case 77: ApplyAnimation(playerid,"PED","DAM_armL_frmBK",4.1,0,1,1,1,1,1);
					case 78: ApplyAnimation(playerid,"PED","DAM_armL_frmFT",4.1,0,1,1,1,1,1);
					case 79: ApplyAnimation(playerid,"PED","DAM_armL_frmLT",4.1,0,1,1,1,1,1);
					case 80: ApplyAnimation(playerid,"PED","DAM_armR_frmBK",4.1,0,1,1,1,1,1);
					case 81: ApplyAnimation(playerid,"PED","DAM_armR_frmFT",4.1,0,1,1,1,1,1);
					case 82: ApplyAnimation(playerid,"PED","DAM_armR_frmRT",4.1,0,1,1,1,1,1);
					case 83: ApplyAnimation(playerid,"PED","DAM_LegL_frmBK",4.1,0,1,1,1,1,1);
					case 84: ApplyAnimation(playerid,"PED","DAM_LegL_frmFT",4.1,0,1,1,1,1,1);
					case 85: ApplyAnimation(playerid,"PED","DAM_LegL_frmLT",4.1,0,1,1,1,1,1);
					case 86: ApplyAnimation(playerid,"PED","DAM_LegR_frmBK",4.1,0,1,1,1,1,1);
					case 87: ApplyAnimation(playerid,"PED","DAM_LegR_frmFT",4.1,0,1,1,1,1,1);
					case 88: ApplyAnimation(playerid,"PED","DAM_LegR_frmRT",4.1,0,1,1,1,1,1);
					case 89: ApplyAnimation(playerid,"PED","DAM_stomach_frmBK",4.1,0,1,1,1,1,1);
					case 90: ApplyAnimation(playerid,"PED","DAM_stomach_frmFT",4.1,0,1,1,1,1,1);
					case 91: ApplyAnimation(playerid,"PED","DAM_stomach_frmLT",4.1,0,1,1,1,1,1);
					case 92: ApplyAnimation(playerid,"PED","DAM_stomach_frmRT",4.1,0,1,1,1,1,1);
					case 93: ApplyAnimation(playerid,"PED","DOOR_LHinge_O",4.1,0,1,1,1,1,1);
					case 94: ApplyAnimation(playerid,"PED","DOOR_RHinge_O",4.1,0,1,1,1,1,1);
					case 95: ApplyAnimation(playerid,"PED","DrivebyL_L",4.1,0,1,1,1,1,1);
					case 96: ApplyAnimation(playerid,"PED","DrivebyL_R",4.1,0,1,1,1,1,1);
					case 97: ApplyAnimation(playerid,"PED","Driveby_L",4.1,0,1,1,1,1,1);
					case 98: ApplyAnimation(playerid,"PED","Driveby_R",4.1,0,1,1,1,1,1);
					case 99: ApplyAnimation(playerid,"PED","DRIVE_BOAT",4.1,0,1,1,1,1,1);
					case 100: ApplyAnimation(playerid,"PED","DRIVE_BOAT_back",4.1,0,1,1,1,1,1);
					case 101: ApplyAnimation(playerid,"PED","DRIVE_BOAT_L",4.1,0,1,1,1,1,1);
					case 102: ApplyAnimation(playerid,"PED","DRIVE_BOAT_R",4.1,0,1,1,1,1,1);
					case 103: ApplyAnimation(playerid,"PED","Drive_L",4.1,0,1,1,1,1,1);
					case 104: ApplyAnimation(playerid,"PED","Drive_LO_l",4.1,0,1,1,1,1,1);
					case 105: ApplyAnimation(playerid,"PED","Drive_LO_R",4.1,0,1,1,1,1,1);
					case 106: ApplyAnimation(playerid,"PED","Drive_L_pro",4.1,0,1,1,1,1,1);
					case 107: ApplyAnimation(playerid,"PED","Drive_L_pro_slow",4.1,0,1,1,1,1,1);
					case 108: ApplyAnimation(playerid,"PED","Drive_L_slow",4.1,0,1,1,1,1,1);
					case 109: ApplyAnimation(playerid,"PED","Drive_L_weak",4.1,0,1,1,1,1,1);
					case 110: ApplyAnimation(playerid,"PED","Drive_L_weak_slow",4.1,0,1,1,1,1,1);
					case 111: ApplyAnimation(playerid,"PED","Drive_R",4.1,0,1,1,1,1,1);
					case 112: ApplyAnimation(playerid,"PED","Drive_R_pro",4.1,0,1,1,1,1,1);
					case 113: ApplyAnimation(playerid,"PED","Drive_R_pro_slow",4.1,0,1,1,1,1,1);
					case 114: ApplyAnimation(playerid,"PED","Drive_R_slow",4.1,0,1,1,1,1,1);
					case 115: ApplyAnimation(playerid,"PED","Drive_R_weak",4.1,0,1,1,1,1,1);
					case 116: ApplyAnimation(playerid,"PED","Drive_R_weak_slow",4.1,0,1,1,1,1,1);
					case 117: ApplyAnimation(playerid,"PED","Drive_truck",4.1,0,1,1,1,1,1);
					case 118: ApplyAnimation(playerid,"PED","DRIVE_truck_back",4.1,0,1,1,1,1,1);
					case 119: ApplyAnimation(playerid,"PED","DRIVE_truck_L",4.1,0,1,1,1,1,1);
					case 120: ApplyAnimation(playerid,"PED","DRIVE_truck_R",4.1,0,1,1,1,1,1);
					case 121: ApplyAnimation(playerid,"PED","Drown",4.1,0,1,1,1,1,1);
					case 122: ApplyAnimation(playerid,"PED","DUCK_cower",4.1,0,1,1,1,1,1);
					case 123: ApplyAnimation(playerid,"PED","endchat_01",4.1,0,1,1,1,1,1);
					case 124: ApplyAnimation(playerid,"PED","endchat_02",4.1,0,1,1,1,1,1);
					case 125: ApplyAnimation(playerid,"PED","endchat_03",4.1,0,1,1,1,1,1);
					case 126: ApplyAnimation(playerid,"PED","EV_dive",4.1,0,1,1,1,1,1);
					case 127: ApplyAnimation(playerid,"PED","EV_step",4.1,0,1,1,1,1,1);
					case 128: ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1,1);
					case 129: ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1,1);
					case 130: ApplyAnimation(playerid,"PED","facgum",4.1,0,1,1,1,1,1);
					case 131: ApplyAnimation(playerid,"PED","facsurp",4.1,0,1,1,1,1,1);
					case 132: ApplyAnimation(playerid,"PED","facsurpm",4.1,0,1,1,1,1,1);
					case 133: ApplyAnimation(playerid,"PED","factalk",4.1,0,1,1,1,1,1);
					case 134: ApplyAnimation(playerid,"PED","facurios",4.1,0,1,1,1,1,1);
					case 135: ApplyAnimation(playerid,"PED","FALL_back",4.1,0,1,1,1,1,1);
					case 136: ApplyAnimation(playerid,"PED","FALL_collapse",4.1,0,1,1,1,1,1);
					case 137: ApplyAnimation(playerid,"PED","FALL_fall",4.1,0,1,1,1,1,1);
					case 138: ApplyAnimation(playerid,"PED","FALL_front",4.1,0,1,1,1,1,1);
					case 139: ApplyAnimation(playerid,"PED","FALL_glide",4.1,0,1,1,1,1,1);
					case 140: ApplyAnimation(playerid,"PED","FALL_land",4.1,0,1,1,1,1,1);
					case 141: ApplyAnimation(playerid,"PED","FALL_skyDive",4.1,0,1,1,1,1,1);
					case 142: ApplyAnimation(playerid,"PED","Fight2Idle",4.1,0,1,1,1,1,1);
					case 143: ApplyAnimation(playerid,"PED","FightA_1",4.1,0,1,1,1,1,1);
					case 144: ApplyAnimation(playerid,"PED","FightA_2",4.1,0,1,1,1,1,1);
					case 145: ApplyAnimation(playerid,"PED","FightA_3",4.1,0,1,1,1,1,1);
					case 146: ApplyAnimation(playerid,"PED","FightA_block",4.1,0,1,1,1,1,1);
					case 147: ApplyAnimation(playerid,"PED","FightA_G",4.1,0,1,1,1,1,1);
					case 148: ApplyAnimation(playerid,"PED","FightA_M",4.1,0,1,1,1,1,1);
					case 149: ApplyAnimation(playerid,"PED","FIGHTIDLE",4.1,0,1,1,1,1,1);
					case 150: ApplyAnimation(playerid,"PED","FightShB",4.1,0,1,1,1,1,1);
					case 151: ApplyAnimation(playerid,"PED","FightShF",4.1,0,1,1,1,1,1);
					case 152: ApplyAnimation(playerid,"PED","FightSh_BWD",4.1,0,1,1,1,1,1);
					case 153: ApplyAnimation(playerid,"PED","FightSh_FWD",4.1,0,1,1,1,1,1);
					case 154: ApplyAnimation(playerid,"PED","FightSh_Left",4.1,0,1,1,1,1,1);
					case 155: ApplyAnimation(playerid,"PED","FightSh_Right",4.1,0,1,1,1,1,1);
					case 156: ApplyAnimation(playerid,"PED","flee_lkaround_01",4.1,0,1,1,1,1,1);
					case 157: ApplyAnimation(playerid,"PED","FLOOR_hit",4.1,0,1,1,1,1,1);
					case 158: ApplyAnimation(playerid,"PED","FLOOR_hit_f",4.1,0,1,1,1,1,1);
					case 159: ApplyAnimation(playerid,"PED","fucku",4.1,0,1,1,1,1,1);
					case 160: ApplyAnimation(playerid,"PED","gang_gunstand",4.1,0,1,1,1,1,1);
					case 161: ApplyAnimation(playerid,"PED","gas_cwr",4.1,0,1,1,1,1,1);
					case 162: ApplyAnimation(playerid,"PED","getup",4.1,0,1,1,1,1,1);
					case 163: ApplyAnimation(playerid,"PED","getup_front",4.1,0,1,1,1,1,1);
					case 164: ApplyAnimation(playerid,"PED","gum_eat",4.1,0,1,1,1,1,1);
					case 165: ApplyAnimation(playerid,"PED","GunCrouchBwd",4.1,0,1,1,1,1,1);
					case 166: ApplyAnimation(playerid,"PED","GunCrouchFwd",4.1,0,1,1,1,1,1);
					case 167: ApplyAnimation(playerid,"PED","GunMove_BWD",4.1,0,1,1,1,1,1);
					case 168: ApplyAnimation(playerid,"PED","GunMove_FWD",4.1,0,1,1,1,1,1);
					case 169: ApplyAnimation(playerid,"PED","GunMove_L",4.1,0,1,1,1,1,1);
					case 170: ApplyAnimation(playerid,"PED","GunMove_R",4.1,0,1,1,1,1,1);
					case 171: ApplyAnimation(playerid,"PED","Gun_2_IDLE",4.1,0,1,1,1,1,1);
					case 172: ApplyAnimation(playerid,"PED","GUN_BUTT",4.1,0,1,1,1,1,1);
					case 173: ApplyAnimation(playerid,"PED","GUN_BUTT_crouch",4.1,0,1,1,1,1,1);
					case 174: ApplyAnimation(playerid,"PED","Gun_stand",4.1,0,1,1,1,1,1);
					case 175: ApplyAnimation(playerid,"PED","handscower",4.1,0,1,1,1,1,1);
					case 176: ApplyAnimation(playerid,"PED","handsup",4.1,0,1,1,1,1,1);
					case 177: ApplyAnimation(playerid,"PED","HitA_1",4.1,0,1,1,1,1,1);
					case 178: ApplyAnimation(playerid,"PED","HitA_2",4.1,0,1,1,1,1,1);
					case 179: ApplyAnimation(playerid,"PED","HitA_3",4.1,0,1,1,1,1,1);
					case 180: ApplyAnimation(playerid,"PED","HIT_back",4.1,0,1,1,1,1,1);
					case 181: ApplyAnimation(playerid,"PED","HIT_behind",4.1,0,1,1,1,1,1);
					case 182: ApplyAnimation(playerid,"PED","HIT_front",4.1,0,1,1,1,1,1);
					case 183: ApplyAnimation(playerid,"PED","HIT_GUN_BUTT",4.1,0,1,1,1,1,1);
					case 184: ApplyAnimation(playerid,"PED","HIT_L",4.1,0,1,1,1,1,1);
					case 185: ApplyAnimation(playerid,"PED","HIT_R",4.1,0,1,1,1,1,1);
					case 186: ApplyAnimation(playerid,"PED","HIT_walk",4.1,0,1,1,1,1,1);
					case 187: ApplyAnimation(playerid,"PED","HIT_wall",4.1,0,1,1,1,1,1);
					case 188: ApplyAnimation(playerid,"PED","Idlestance_fat",4.1,0,1,1,1,1,1);
					case 189: ApplyAnimation(playerid,"PED","idlestance_old",4.1,0,1,1,1,1,1);
					case 190: ApplyAnimation(playerid,"PED","IDLE_armed",4.1,0,1,1,1,1,1);
					case 191: ApplyAnimation(playerid,"PED","IDLE_chat",4.1,0,1,1,1,1,1);
					case 192: ApplyAnimation(playerid,"PED","IDLE_csaw",4.1,0,1,1,1,1,1);
					case 193: ApplyAnimation(playerid,"PED","Idle_Gang1",4.1,0,1,1,1,1,1);
					case 194: ApplyAnimation(playerid,"PED","IDLE_HBHB",4.1,0,1,1,1,1,1);
					case 195: ApplyAnimation(playerid,"PED","IDLE_ROCKET",4.1,0,1,1,1,1,1);
					case 196: ApplyAnimation(playerid,"PED","IDLE_stance",4.1,0,1,1,1,1,1);
					case 197: ApplyAnimation(playerid,"PED","IDLE_taxi",4.1,0,1,1,1,1,1);
					case 198: ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,1,1,1);
					case 199: ApplyAnimation(playerid,"PED","Jetpack_Idle",4.1,0,1,1,1,1,1);
					case 200: ApplyAnimation(playerid,"PED","JOG_femaleA",4.1,0,1,1,1,1,1);
					case 201: ApplyAnimation(playerid,"PED","JOG_maleA",4.1,0,1,1,1,1,1);
					case 202: ApplyAnimation(playerid,"PED","JUMP_glide",4.1,0,1,1,1,1,1);
					case 203: ApplyAnimation(playerid,"PED","JUMP_land",4.1,0,1,1,1,1,1);
					case 204: ApplyAnimation(playerid,"PED","JUMP_launch",4.1,0,1,1,1,1,1);
					case 205: ApplyAnimation(playerid,"PED","JUMP_launch_R",4.1,0,1,1,1,1,1);
					case 206: ApplyAnimation(playerid,"PED","KART_drive",4.1,0,1,1,1,1,1);
					case 207: ApplyAnimation(playerid,"PED","KART_L",4.1,0,1,1,1,1,1);
					case 208: ApplyAnimation(playerid,"PED","KART_LB",4.1,0,1,1,1,1,1);
					case 209: ApplyAnimation(playerid,"PED","KART_R",4.1,0,1,1,1,1,1);
					case 210: ApplyAnimation(playerid,"PED","KD_left",4.1,0,1,1,1,1,1);
					case 211: ApplyAnimation(playerid,"PED","KD_right",4.1,0,1,1,1,1,1);
					case 212: ApplyAnimation(playerid,"PED","KO_shot_face",4.1,0,1,1,1,1,1);
					case 213: ApplyAnimation(playerid,"PED","KO_shot_front",4.1,0,1,1,1,1,1);
					case 214: ApplyAnimation(playerid,"PED","KO_shot_stom",4.1,0,1,1,1,1,1);
					case 215: ApplyAnimation(playerid,"PED","KO_skid_back",4.1,0,1,1,1,1,1);
					case 216: ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,1,1);
					case 217: ApplyAnimation(playerid,"PED","KO_spin_L",4.1,0,1,1,1,1,1);
					case 218: ApplyAnimation(playerid,"PED","KO_spin_R",4.1,0,1,1,1,1,1);
					case 219: ApplyAnimation(playerid,"PED","pass_Smoke_in_car",4.1,0,1,1,1,1,1);
					case 220: ApplyAnimation(playerid,"PED","phone_in",4.1,0,1,1,1,1,1);
					case 221: ApplyAnimation(playerid,"PED","phone_out",4.1,0,1,1,1,1,1);
					case 222: ApplyAnimation(playerid,"PED","phone_talk",4.1,0,1,1,1,1,1);
					case 223: ApplyAnimation(playerid,"PED","Player_Sneak",4.1,0,1,1,1,1,1);
					case 224: ApplyAnimation(playerid,"PED","Player_Sneak_walkstart",4.1,0,1,1,1,1,1);
					case 225: ApplyAnimation(playerid,"PED","roadcross",4.1,0,1,1,1,1,1);
					case 226: ApplyAnimation(playerid,"PED","roadcross_female",4.1,0,1,1,1,1,1);
					case 227: ApplyAnimation(playerid,"PED","roadcross_gang",4.1,0,1,1,1,1,1);
					case 228: ApplyAnimation(playerid,"PED","roadcross_old",4.1,0,1,1,1,1,1);
					case 229: ApplyAnimation(playerid,"PED","run_1armed",4.1,0,1,1,1,1,1);
					case 230: ApplyAnimation(playerid,"PED","run_armed",4.1,0,1,1,1,1,1);
					case 231: ApplyAnimation(playerid,"PED","run_civi",4.1,0,1,1,1,1,1);
					case 232: ApplyAnimation(playerid,"PED","run_csaw",4.1,0,1,1,1,1,1);
					case 233: ApplyAnimation(playerid,"PED","run_fat",4.1,0,1,1,1,1,1);
					case 234: ApplyAnimation(playerid,"PED","run_fatold",4.1,0,1,1,1,1,1);
					case 235: ApplyAnimation(playerid,"PED","run_gang1",4.1,0,1,1,1,1,1);
					case 236: ApplyAnimation(playerid,"PED","run_left",4.1,0,1,1,1,1,1);
					case 237: ApplyAnimation(playerid,"PED","run_old",4.1,0,1,1,1,1,1);
					case 238: ApplyAnimation(playerid,"PED","run_player",4.1,0,1,1,1,1,1);
					case 239: ApplyAnimation(playerid,"PED","run_right",4.1,0,1,1,1,1,1);
					case 240: ApplyAnimation(playerid,"PED","run_rocket",4.1,0,1,1,1,1,1);
					case 241: ApplyAnimation(playerid,"PED","Run_stop",4.1,0,1,1,1,1,1);
					case 242: ApplyAnimation(playerid,"PED","Run_stopR",4.1,0,1,1,1,1,1);
					case 243: ApplyAnimation(playerid,"PED","Run_Wuzi",4.1,0,1,1,1,1,1);
					case 244: ApplyAnimation(playerid,"PED","SEAT_down",4.1,0,1,1,1,1,1);
					case 245: ApplyAnimation(playerid,"PED","SEAT_idle",4.1,0,1,1,1,1,1);
					case 246: ApplyAnimation(playerid,"PED","SEAT_up",4.1,0,1,1,1,1,1);
					case 247: ApplyAnimation(playerid,"PED","SHOT_leftP",4.1,0,1,1,1,1,1);
					case 248: ApplyAnimation(playerid,"PED","SHOT_partial",4.1,0,1,1,1,1,1);
					case 249: ApplyAnimation(playerid,"PED","SHOT_partial_B",4.1,0,1,1,1,1,1);
					case 250: ApplyAnimation(playerid,"PED","SHOT_rightP",4.1,0,1,1,1,1,1);
					case 251: ApplyAnimation(playerid,"PED","Shove_Partial",4.1,0,1,1,1,1,1);
					case 252: ApplyAnimation(playerid,"PED","Smoke_in_car",4.1,0,1,1,1,1,1);
					case 253: ApplyAnimation(playerid,"PED","sprint_civi",4.1,0,1,1,1,1,1);
					case 254: ApplyAnimation(playerid,"PED","sprint_panic",4.1,0,1,1,1,1,1);
					case 255: ApplyAnimation(playerid,"PED","Sprint_Wuzi",4.1,0,1,1,1,1,1);
					case 256: ApplyAnimation(playerid,"PED","swat_run",4.1,0,1,1,1,1,1);
					case 257: ApplyAnimation(playerid,"PED","Swim_Tread",4.1,0,1,1,1,1,1);
					case 258: ApplyAnimation(playerid,"PED","Tap_hand",4.1,0,1,1,1,1,1);
					case 259: ApplyAnimation(playerid,"PED","Tap_handP",4.1,0,1,1,1,1,1);
					case 260: ApplyAnimation(playerid,"PED","turn_180",4.1,0,1,1,1,1,1);
					case 261: ApplyAnimation(playerid,"PED","Turn_L",4.1,0,1,1,1,1,1);
					case 262: ApplyAnimation(playerid,"PED","Turn_R",4.1,0,1,1,1,1,1);
					case 263: ApplyAnimation(playerid,"PED","WALK_armed",4.1,0,1,1,1,1,1);
					case 264: ApplyAnimation(playerid,"PED","WALK_civi",4.1,0,1,1,1,1,1);
					case 265: ApplyAnimation(playerid,"PED","WALK_csaw",4.1,0,1,1,1,1,1);
					case 266: ApplyAnimation(playerid,"PED","Walk_DoorPartial",4.1,0,1,1,1,1,1);
					case 267: ApplyAnimation(playerid,"PED","WALK_drunk",4.1,0,1,1,1,1,1);
					case 268: ApplyAnimation(playerid,"PED","WALK_fat",4.1,0,1,1,1,1,1);
					case 269: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,0,1,1,1,1,1);
					case 270: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,0,1,1,1,1,1);
					case 271: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,0,1,1,1,1,1);
					case 272: ApplyAnimation(playerid,"PED","WALK_old",4.1,0,1,1,1,1,1);
					case 273: ApplyAnimation(playerid,"PED","WALK_player",4.1,0,1,1,1,1,1);
					case 274: ApplyAnimation(playerid,"PED","WALK_rocket",4.1,0,1,1,1,1,1);
					case 275: ApplyAnimation(playerid,"PED","WALK_shuffle",4.1,0,1,1,1,1,1);
					case 276: ApplyAnimation(playerid,"PED","WALK_start",4.1,0,1,1,1,1,1);
					case 277: ApplyAnimation(playerid,"PED","WALK_start_armed",4.1,0,1,1,1,1,1);
					case 278: ApplyAnimation(playerid,"PED","WALK_start_csaw",4.1,0,1,1,1,1,1);
					case 279: ApplyAnimation(playerid,"PED","WALK_start_rocket",4.1,0,1,1,1,1,1);
					case 280: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,0,1,1,1,1,1);
					case 281: ApplyAnimation(playerid,"PED","WEAPON_crouch",4.1,0,1,1,1,1,1);
					case 282: ApplyAnimation(playerid,"PED","woman_idlestance",4.1,0,1,1,1,1,1);
					case 283: ApplyAnimation(playerid,"PED","woman_run",4.1,0,1,1,1,1,1);
					case 284: ApplyAnimation(playerid,"PED","WOMAN_runbusy",4.1,0,1,1,1,1,1);
					case 285: ApplyAnimation(playerid,"PED","WOMAN_runfatold",4.1,0,1,1,1,1,1);
					case 286: ApplyAnimation(playerid,"PED","woman_runpanic",4.1,0,1,1,1,1,1);
					case 287: ApplyAnimation(playerid,"PED","WOMAN_runsexy",4.1,0,1,1,1,1,1);
					case 288: ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,0,1,1,1,1,1);
					case 289: ApplyAnimation(playerid,"PED","WOMAN_walkfatold",4.1,0,1,1,1,1,1);
					case 290: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,0,1,1,1,1,1);
					case 291: ApplyAnimation(playerid,"PED","WOMAN_walkold",4.1,0,1,1,1,1,1);
					case 292: ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,0,1,1,1,1,1);
					case 293: ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,0,1,1,1,1,1);
					case 294: ApplyAnimation(playerid,"PED","WOMAN_walkshop",4.1,0,1,1,1,1,1);
					case 295: ApplyAnimation(playerid,"PED","XPRESSscratch",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animplayerdvbys", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animplayerdvbys [1-4]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyBwd",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyFwd",4.1,0,1,1,1,1,1);
			 	   case 3: ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyLHS",4.1,0,1,1,1,1,1);
			 	   case 4: ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyRHS",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animplayidles", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animplayidles [1-5]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"PLAYIDLES","shift",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"PLAYIDLES","shldr",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"PLAYIDLES","stretch",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"PLAYIDLES","strleg",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"PLAYIDLES","time",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animpolice", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 10)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animpolice [1-10]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"POLICE","CopTraf_Away",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"POLICE","CopTraf_Come",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"POLICE","CopTraf_Left",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"POLICE","CopTraf_Stop",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"POLICE","COP_getoutcar_LHS",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"POLICE","Cop_move_FWD",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"POLICE","crm_drgbst_01",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"POLICE","Door_Kick",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"POLICE","plc_drgbst_01",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"POLICE","plc_drgbst_02",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animpool", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 21)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animpool [1-21]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"POOL","POOL_Idle_Stance",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"POOL","POOL_Long_Shot",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"POOL","POOL_Long_Shot_O",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"POOL","POOL_Long_Start",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"POOL","POOL_Long_Start_O",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"POOL","POOL_Med_Shot",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"POOL","POOL_Med_Shot_O",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"POOL","POOL_Med_Start",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"POOL","POOL_Med_Start_O",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"POOL","POOL_Place_White",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"POOL","POOL_Short_Shot",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"POOL","POOL_Short_Shot_O",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"POOL","POOL_Short_Start",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"POOL","POOL_Short_Start_O",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"POOL","POOL_Walk",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"POOL","POOL_Walk_Start",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"POOL","POOL_XLong_Shot",4.1,0,1,1,1,1,1);
				    case 19: ApplyAnimation(playerid,"POOL","POOL_XLong_Shot_O",4.1,0,1,1,1,1,1);
				    case 20: ApplyAnimation(playerid,"POOL","POOL_XLong_Start",4.1,0,1,1,1,1,1);
				    case 21: ApplyAnimation(playerid,"POOL","POOL_XLong_Start_O",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animpoor", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 2)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animpoor [1-2]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"POOR","WINWASH_Start",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"POOR","WINWASH_Wash2Beg",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animpython", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animpython [1-5]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"PYTHON","python_crouchfire",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"PYTHON","python_crouchreload",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"PYTHON","python_fire",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"PYTHON","python_fire_poor",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"PYTHON","python_reload",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animquad", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 17)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animquad [1-17]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"QUAD","QUAD_back",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"QUAD","QUAD_driveby_FT",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"QUAD","QUAD_driveby_LHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"QUAD","QUAD_driveby_RHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"QUAD","QUAD_FWD",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"QUAD","QUAD_getoff_B",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"QUAD","QUAD_getoff_LHS",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"QUAD","QUAD_getoff_RHS",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"QUAD","QUAD_geton_LHS",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"QUAD","QUAD_geton_RHS",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"QUAD","QUAD_hit",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"QUAD","QUAD_kick",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"QUAD","QUAD_Left",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"QUAD","QUAD_passenger",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"QUAD","QUAD_reverse",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"QUAD","QUAD_ride",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"QUAD","QUAD_Right",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animquadbz", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animquadbz [1-4]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_BWD",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_FWD",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_LHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_RHS",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animrapping", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 8)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animrapping [1-8]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"RAPPING","Laugh_01",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"RAPPING","RAP_A_IN",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"RAPPING","RAP_A_Loop",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"RAPPING","RAP_A_OUT",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"RAPPING","RAP_B_IN",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"RAPPING","RAP_B_OUT",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"RAPPING","RAP_C_Loop",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animrifle", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animrifle [1-5]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"RIFLE","RIFLE_crouchfire",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"RIFLE","RIFLE_crouchload",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"RIFLE","RIFLE_fire",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"RIFLE","RIFLE_fire_poor",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"RIFLE","RIFLE_load",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animriot", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 7)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animriot [1-7]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"RIOT","RIOT_ANGRY",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"RIOT","RIOT_ANGRY_B",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"RIOT","RIOT_challenge",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"RIOT","RIOT_CHANT",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"RIOT","RIOT_FUKU",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"RIOT","RIOT_PUNCHES",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"RIOT","RIOT_shout",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animrobbank", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animrobbank [1-5]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_End",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Open",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Open_O",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"ROB_BANK","SHP_HandsUp_Scr",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animrocket", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animrocket [1-5]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"ROCKET","idle_rocket",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"ROCKET","RocketFire",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"ROCKET","run_rocket",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"ROCKET","walk_rocket",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"ROCKET","WALK_start_rocket",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animrustler", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animrustler [1-5]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"RUSTLER","Plane_align_LHS",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"RUSTLER","Plane_close",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"RUSTLER","Plane_getin",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"RUSTLER","Plane_getout",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"RUSTLER","Plane_open",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animryder", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 16)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animryder [1-16]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"RYDER","RYD_Beckon_01",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"RYDER","RYD_Beckon_02",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"RYDER","RYD_Beckon_03",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"RYDER","RYD_Die_PT1",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"RYDER","RYD_Die_PT2",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"RYDER","Van_Crate_L",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"RYDER","Van_Crate_R",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"RYDER","Van_Fall_L",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"RYDER","Van_Fall_R",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"RYDER","Van_Lean_L",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"RYDER","Van_Lean_R",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"RYDER","VAN_PickUp_E",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"RYDER","VAN_PickUp_S",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"RYDER","Van_Stand",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"RYDER","Van_Stand_Crate",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"RYDER","Van_Throw",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animscratching", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 12)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animscratching [1-12]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"SCRATCHING","scdldlp",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"SCRATCHING","scdlulp",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"SCRATCHING","scdrdlp",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"SCRATCHING","scdrulp",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"SCRATCHING","sclng_l",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"SCRATCHING","sclng_r",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"SCRATCHING","scmid_l",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"SCRATCHING","scmid_r",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"SCRATCHING","scshrtl",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"SCRATCHING","scshrtr",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"SCRATCHING","sc_ltor",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"SCRATCHING","sc_rtol",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animshamal", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animshamal [1-4]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"SHAMAL","SHAMAL_align",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"SHAMAL","SHAMAL_getin_LHS",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"SHAMAL","SHAMAL_getout_LHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"SHAMAL","SHAMAL_open",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animshop", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 25)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animshop [1-25]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"SHOP","ROB_2Idle",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"SHOP","ROB_Loop",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"SHOP","ROB_Loop_Threat",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"SHOP","ROB_Shifty",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"SHOP","ROB_StickUp_In",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"SHOP","SHP_Duck",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"SHOP","SHP_Duck_Aim",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"SHOP","SHP_Duck_Fire",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"SHOP","SHP_Gun_Aim",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"SHOP","SHP_Gun_Duck",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"SHOP","SHP_Gun_Fire",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"SHOP","SHP_Gun_Grab",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"SHOP","SHP_Gun_Threat",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"SHOP","SHP_HandsUp_Scr",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"SHOP","SHP_Jump_Glide",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"SHOP","SHP_Jump_Land",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"SHOP","SHP_Jump_Launch",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"SHOP","SHP_Rob_GiveCash",4.1,0,1,1,1,1,1);
				    case 19: ApplyAnimation(playerid,"SHOP","SHP_Rob_HandsUp",4.1,0,1,1,1,1,1);
				    case 20: ApplyAnimation(playerid,"SHOP","SHP_Rob_React",4.1,0,1,1,1,1,1);
				    case 21: ApplyAnimation(playerid,"SHOP","SHP_Serve_End",4.1,0,1,1,1,1,1);
				    case 22: ApplyAnimation(playerid,"SHOP","SHP_Serve_Idle",4.1,0,1,1,1,1,1);
				    case 23: ApplyAnimation(playerid,"SHOP","SHP_Serve_Loop",4.1,0,1,1,1,1,1);
				    case 24: ApplyAnimation(playerid,"SHOP","SHP_Serve_Start",4.1,0,1,1,1,1,1);
				    case 25: ApplyAnimation(playerid,"SHOP","Smoke_RYD",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animshotgun", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 3)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animshotgun [1-3]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"SHOTGUN","shotgun_crouchfire",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"SHOTGUN","shotgun_fire",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"SHOTGUN","shotgun_fire_poor",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animsilenced", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animsilenced [1-4]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"SILENCED","CrouchReload",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"SILENCED","SilenceCrouchfire",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"SILENCED","Silence_fire",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/patinar", true)) // patinar PlayerInfo[playerid][pbono2] = 0;
		{
		        if(PlayerInfo[playerid][pbono2] == 0)
                {
		         SendClientMessage(playerid,COLOR_SYSTEM," No tienes Patines! Puedes Comprarlos en una Jugueteria");
		         return 1;
                }
			    tmp = strtok(cmdtext, idx);
			    animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 3)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /patinar [1-3]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"SKATE","skate_idle",4.1,1,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"SKATE","skate_run",4.1,1,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"SKATE","skate_sprint",4.1,1,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animsmoking", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 8)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animsmoking [1-8]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"SMOKING","F_smklean_loop",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"SMOKING","M_smklean_loop",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"SMOKING","M_smk_in",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"SMOKING","M_smk_loop",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"SMOKING","M_smk_out",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"SMOKING","M_smk_tap",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animsniper", true))
		{

			ApplyAnimation(playerid,"SNIPER","WEAPON_sniper",4.1,0,1,1,1,1);
			return 1;
		}

		if(!strcmp(cmd, "/animspraycan", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 2)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animspraycan [1-2]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"SPRAYCAN","spraycan_fire",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"SPRAYCAN","spraycan_full",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animstrip", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 20)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animstrip [1-20]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"STRIP","PLY_CASH",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"STRIP","PUN_CASH",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"STRIP","PUN_HOLLER",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"STRIP","PUN_LOOP",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"STRIP","strip_A",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"STRIP","strip_B",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"STRIP","strip_C",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"STRIP","strip_D",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"STRIP","strip_E",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"STRIP","strip_F",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"STRIP","strip_G",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"STRIP","STR_A2B",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"STRIP","STR_B2A",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"STRIP","STR_B2C",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"STRIP","STR_C1",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"STRIP","STR_C2",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"STRIP","STR_C2B",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,0,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"STRIP","STR_Loop_B",4.1,0,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"STRIP","STR_Loop_C",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animsunbathe", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 18)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animbath [1-18]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"SUNBATHE","batherdown",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"SUNBATHE","batherup",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_in",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_out",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleA",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleB",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleC",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_in",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_out",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleA",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleB",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleC",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_in",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_out",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"SUNBATHE","SBATHE_F_LieB2Sit",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"SUNBATHE","SBATHE_F_Out",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"SUNBATHE","SitnWait_in_W",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"SUNBATHE","SitnWait_out_W",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animswat", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 23)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animswat [1-23]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"SWAT","gnstwall_injurd",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"SWAT","JMP_Wall1m_180",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"SWAT","Rail_fall",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"SWAT","Rail_fall_crawl",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"SWAT","swt_breach_01",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"SWAT","swt_breach_02",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"SWAT","swt_breach_03",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"SWAT","swt_go",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"SWAT","swt_lkt",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"SWAT","swt_sty",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"SWAT","swt_vent_01",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"SWAT","swt_vent_02",4.1,0,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"SWAT","swt_vnt_sht_die",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"SWAT","swt_vnt_sht_in",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"SWAT","swt_vnt_sht_loop",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"SWAT","swt_wllpk_L",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"SWAT","swt_wllpk_L_back",4.1,0,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"SWAT","swt_wllpk_R",4.1,0,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"SWAT","swt_wllpk_R_back",4.1,0,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"SWAT","swt_wllshoot_in_L",4.1,0,1,1,1,1,1);
					case 21: ApplyAnimation(playerid,"SWAT","swt_wllshoot_in_R",4.1,0,1,1,1,1,1);
					case 22: ApplyAnimation(playerid,"SWAT","swt_wllshoot_out_L",4.1,0,1,1,1,1,1);
					case 23: ApplyAnimation(playerid,"SWAT","swt_wllshoot_out_R",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animsweet", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 7)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animsweet [1-7]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"SWEET","ho_ass_slapped",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"SWEET","LaFin_Player",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"SWEET","LaFin_Sweet",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"SWEET","plyr_hndshldr_01",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"SWEET","sweet_hndshldr_01",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"SWEET","Sweet_injuredloop",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animswim", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 7)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animswim [1-7]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"SWIM","Swim_Breast",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"SWIM","SWIM_crawl",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"SWIM","Swim_Dive_Under",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"SWIM","Swim_Glide",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"SWIM","Swim_jumpout",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"SWIM","Swim_Tread",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"SWIM","Swim_Under",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animsword", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 10)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animsword [1-10]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"SWORD","sword_1",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"SWORD","sword_2",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"SWORD","sword_3",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"SWORD","sword_4",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"SWORD","sword_block",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"SWORD","Sword_Hit_1",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"SWORD","Sword_Hit_2",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"SWORD","Sword_Hit_3",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"SWORD","sword_IDLE",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"SWORD","sword_part",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animtank", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 6)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animtank [1-6]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"TANK","TANK_align_LHS",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"TANK","TANK_close_LHS",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"TANK","TANK_doorlocked",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"TANK","TANK_getin_LHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"TANK","TANK_getout_LHS",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"TANK","TANK_open_LHS",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animtattoos", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 57)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animtattoos [1-57]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_O",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_P",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_T",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Out_O",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Out_P",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Out_T",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_O",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_P",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_T",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_O",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_P",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_T",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_O",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_P",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_T",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_O",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_P",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_T",4.1,0,1,1,1,1,1);
				    case 19: ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_O",4.1,0,1,1,1,1,1);
				    case 20: ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_P",4.1,0,1,1,1,1,1);
				    case 21: ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_T",4.1,0,1,1,1,1,1);
				    case 22: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_O",4.1,0,1,1,1,1,1);
				    case 23: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_P",4.1,0,1,1,1,1,1);
				    case 24: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_T",4.1,0,1,1,1,1,1);
				    case 25: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_O",4.1,0,1,1,1,1,1);
				    case 26: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_P",4.1,0,1,1,1,1,1);
				    case 27: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_T",4.1,0,1,1,1,1,1);
				    case 28: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_In_P",4.1,0,1,1,1,1,1);
				    case 29: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_Loop_P",4.1,0,1,1,1,1,1);
				    case 30: ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_Out_P",4.1,0,1,1,1,1,1);
				    case 31: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_In_O",4.1,0,1,1,1,1,1);
				    case 32: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_In_T",4.1,0,1,1,1,1,1);
				    case 33: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Out_O",4.1,0,1,1,1,1,1);
				    case 34: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Out_T",4.1,0,1,1,1,1,1);
				    case 35: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Pose_O",4.1,0,1,1,1,1,1);
				    case 36: ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Pose_T",4.1,0,1,1,1,1,1);
				    case 37: ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_O",4.1,0,1,1,1,1,1);
				    case 38: ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_P",4.1,0,1,1,1,1,1);
				    case 39: ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_T",4.1,0,1,1,1,1,1);
				    case 40: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_O",4.1,0,1,1,1,1,1);
				    case 41: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_P",4.1,0,1,1,1,1,1);
				    case 42: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_T",4.1,0,1,1,1,1,1);
				    case 43: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_O",4.1,0,1,1,1,1,1);
				    case 44: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_P",4.1,0,1,1,1,1,1);
				    case 45: ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_T",4.1,0,1,1,1,1,1);
				    case 46: ApplyAnimation(playerid,"TATTOOS","TAT_Drop_O",4.1,0,1,1,1,1,1);
					case 47: ApplyAnimation(playerid,"TATTOOS","TAT_Idle_Loop_O",4.1,0,1,1,1,1,1);
				    case 48: ApplyAnimation(playerid,"TATTOOS","TAT_Idle_Loop_T",4.1,0,1,1,1,1,1);
				    case 49: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_O",4.1,0,1,1,1,1,1);
				    case 50: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_P",4.1,0,1,1,1,1,1);
				    case 51: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_T",4.1,0,1,1,1,1,1);
				    case 52: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_O",4.1,0,1,1,1,1,1);
				    case 53: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_P",4.1,0,1,1,1,1,1);
				    case 54: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_T",4.1,0,1,1,1,1,1);
				    case 55: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_O",4.1,0,1,1,1,1,1);
				    case 56: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_P",4.1,0,1,1,1,1,1);
				    case 57: ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_T",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(strcmp(cmd, "/animtec", true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animtec [1-4]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"TEC","TEC_crouchfire",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"TEC","TEC_crouchreload",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"TEC","TEC_fire",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"TEC","TEC_reload",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animtrain", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animtrain [1-4]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"TRAIN","tran_gtup",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"TRAIN","tran_hng",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"TRAIN","tran_ouch",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"TRAIN","tran_stmb",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animtruck", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 17)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animtruck [1-17]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"TRUCK","TRUCK_ALIGN_LHS",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"TRUCK","TRUCK_ALIGN_RHS",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"TRUCK","TRUCK_closedoor_LHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"TRUCK","TRUCK_closedoor_RHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"TRUCK","TRUCK_close_LHS",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"TRUCK","TRUCK_close_RHS",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"TRUCK","TRUCK_getin_LHS",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"TRUCK","TRUCK_getin_RHS",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"TRUCK","TRUCK_getout_LHS",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"TRUCK","TRUCK_getout_RHS",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"TRUCK","TRUCK_jackedLHS",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"TRUCK","TRUCK_jackedRHS",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"TRUCK","TRUCK_open_LHS",4.1,0,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"TRUCK","TRUCK_open_RHS",4.1,0,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"TRUCK","TRUCK_pullout_LHS",4.1,0,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"TRUCK","TRUCK_pullout_RHS",4.1,0,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"TRUCK","TRUCK_Shuffle",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animuzi", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animuzi [1-5]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"UZI","UZI_crouchfire",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"UZI","UZI_crouchreload",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"UZI","UZI_fire",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"UZI","UZI_fire_poor",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"UZI","UZI_reload",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animvan", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 8)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animvan [1-8]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"VAN","VAN_close_back_LHS",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"VAN","VAN_close_back_RHS",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"VAN","VAN_getin_Back_LHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"VAN","VAN_getin_Back_RHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"VAN","VAN_getout_back_LHS",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"VAN","VAN_getout_back_RHS",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"VAN","VAN_open_back_LHS",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"VAN","VAN_open_back_RHS",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animvending", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 6)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animvending [1-6]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"VENDING","VEND_Drink2_P",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"VENDING","vend_eat1_P",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"VENDING","VEND_Eat_P",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"VENDING","VEND_Use",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"VENDING","VEND_Use_pt2",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animvortex", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animvortex [1-4]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"VORTEX","CAR_jumpin_LHS",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"VORTEX","CAR_jumpin_RHS",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"VORTEX","vortex_getout_LHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"VORTEX","vortex_getout_RHS",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animwayfarer", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 18)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animway [1-18]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"WAYFARER","WF_Back",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"WAYFARER","WF_drivebyFT",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"WAYFARER","WF_drivebyLHS",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"WAYFARER","WF_drivebyRHS",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"WAYFARER","WF_Fwd",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"WAYFARER","WF_getoffBACK",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"WAYFARER","WF_getoffLHS",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"WAYFARER","WF_getoffRHS",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"WAYFARER","WF_hit",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"WAYFARER","WF_jumponL",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"WAYFARER","WF_jumponR",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"WAYFARER","WF_kick",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"WAYFARER","WF_Left",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"WAYFARER","WF_passenger",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"WAYFARER","WF_pushes",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"WAYFARER","WF_Ride",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"WAYFARER","WF_Right",4.1,0,1,1,1,1,1);
				    case 18: ApplyAnimation(playerid,"WAYFARER","WF_Still",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animweap", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 17)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animweap [1-17]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"WEAPONS","SHP_1H_Lift",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"WEAPONS","SHP_1H_Lift_End",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"WEAPONS","SHP_1H_Ret",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"WEAPONS","SHP_1H_Ret_S",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"WEAPONS","SHP_2H_Lift",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"WEAPONS","SHP_2H_Lift_End",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"WEAPONS","SHP_2H_Ret",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"WEAPONS","SHP_2H_Ret_S",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Lift",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Lift_End",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Ret",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Ret_S",4.1,0,1,1,1,1,1);
				    case 13: ApplyAnimation(playerid,"WEAPONS","SHP_G_Lift_In",4.1,0,1,1,1,1,1);
				    case 14: ApplyAnimation(playerid,"WEAPONS","SHP_G_Lift_Out",4.1,0,1,1,1,1,1);
				    case 15: ApplyAnimation(playerid,"WEAPONS","SHP_Tray_In",4.1,0,1,1,1,1,1);
				    case 16: ApplyAnimation(playerid,"WEAPONS","SHP_Tray_Out",4.1,0,1,1,1,1,1);
				    case 17: ApplyAnimation(playerid,"WEAPONS","SHP_Tray_Pose",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animwuzi", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 12)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animwuzi [1-12]");
					return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,0,1,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"WUZI","CS_Plyr_pt1",4.1,0,1,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"WUZI","CS_Plyr_pt2",4.1,0,1,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"WUZI","CS_Wuzi_pt1",4.1,0,1,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"WUZI","CS_Wuzi_pt2",4.1,0,1,1,1,1,1);
				    case 6: ApplyAnimation(playerid,"WUZI","Walkstart_Idle_01",4.1,0,1,1,1,1,1);
				    case 7: ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.1,0,1,1,1,1,1);
				    case 8: ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Plyr",4.1,0,1,1,1,1,1);
				    case 9: ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.1,0,1,1,1,1,1);
				    case 10: ApplyAnimation(playerid,"WUZI","Wuzi_grnd_chk",4.1,0,1,1,1,1,1);
				    case 11: ApplyAnimation(playerid,"WUZI","Wuzi_stand_loop",4.1,0,1,1,1,1,1);
				    case 12: ApplyAnimation(playerid,"WUZI","Wuzi_Walk",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animsnm", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 8)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animsnm [1-8]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animblowjob", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 12)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /animblowjob [1-12]");
					return 1;
				}
				switch(animid)
				{
					case 1: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,0,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,0,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1,1);
				}
			return 1;
		}

		if(!strcmp(cmd, "/handsup", true))
		{
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
			return 1;
		}

		if(!strcmp(cmd, "/dance", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 4)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /dance [1-4]");
					return 1;
				}
				switch(animid)
				{
					case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
					case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
					case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
					case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
				}
			return 1;
		}

		if(!strcmp(cmd, "/phone", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 2)
				{
					SendClientMessage(playerid,COLOR_SYSTEM," ESCRIBE: /phone [1-2]");
					return 1;
				}
				switch(animid)
				{
					case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
					case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				}
			return 1;
		}

		if(!strcmp(cmd, "/animano", true))
		{
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
			return 1;
		}
	#pragma unused GetPointDistanceToPointExMorph
	//----------------------------------------- COMANDO ERRONEO
	GameTextForPlayer(playerid, "~r~Comando DESCONOCIDO", 5000, 4);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}
//------------------------------------------------------------------------------------------------------

public OnVehicleSpawn(vehicleid)
{
	//---------------------------------------------------
	AddVehicleComponent(cocheclic,1113);  //Escape
    AddVehicleComponent(cocheclic,1109);  //Embellecedor
    AddVehicleComponent(cocheclic,1118);  //Tapacubos
	AddVehicleComponent(cocheclic, 1080); //Ruedas
	AddVehicleComponent(cocheclic, 1010); //Nitro 10x
	AddVehicleComponent(cocheclic, 1087); //Hidraulicos
	AddVehicleComponent(cocheclic,1117);  //Frontal
	ChangeVehiclePaintjob(cocheclic, 2);  //Pintura
	//-------------------------------------------------
	AddVehicleComponent(coche13st,1180);  //Trasero
    AddVehicleComponent(coche13st,1179);  //Frontal
    AddVehicleComponent(coche13st,1126);  //Escape
    AddVehicleComponent(coche13st,1122);  //Embellecedor
    AddVehicleComponent(coche13st,1100);  //Calavera
	AddVehicleComponent(coche13st, 1078); //Ruedas
	AddVehicleComponent(coche13st, 1010); //Nitro 10x
	AddVehicleComponent(coche13st, 1087); //Hidraulicos
	ChangeVehiclePaintjob(coche13st, 2);  //Pintura
	//---------------------------------------------------
	AddVehicleComponent(cochegroo,1113);  //Escape//
    AddVehicleComponent(cochegroo,1108);  //Embellecedor
    AddVehicleComponent(cochegroo,1118);  //Tapacubos//
	AddVehicleComponent(cochegroo, 1078); //Ruedas
	AddVehicleComponent(cochegroo, 1010); //Nitro 10x
	AddVehicleComponent(cochegroo, 1087); //Hidraulicos
	AddVehicleComponent(cochegroo,1117);  //Frontal//
	ChangeVehiclePaintjob(cochegroo, 1);  //Pintura
	ChangeVehicleColor(cochegroo, 44, 1)  //Color
	return 1;
}
//------------------------------------------------------------------------------------------------------

public HouseLevel(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new h = PlayerInfo[playerid][pPhousekey];
		if(h == 255) { return 0; }
		if(h <= 4) { return 1; }
		if(h >= 5 && h <= 9)  { return 2; }
		if(h >= 10 && h <= 18) { return 3; }
		if(h >= 19 && h <= 22) { return 4; }
		if(h >= 23 && h <= 25) { return 5; }
		if(h == 26) { return 6; }
		if(h == 27) { return 7; }
		if(h >= 28 && h <= 31) { return 7; }
	}
	return 0;
}

public CHouseLevel(houseid)
{
	if(houseid <= 4) { return 3; }
	if(houseid >= 29 && houseid <= 30) { return 4; }
	if(houseid >= 5 && houseid <= 9) { return 5; }
	if(houseid >= 10 && houseid <= 18 || houseid == 28) { return 7; }
	if(houseid >= 19 && houseid <= 22) { return 8; }
	if(houseid >= 23 && houseid <= 25) { return 9; }
	if(houseid == 26) { return 10; }
	if(houseid == 27) { return 11; }
	if(houseid >= 28 && houseid <= 31) { return 12; }
	return 0;
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}//not connected
	return 1;
}

public CrimInRange(Float:radi, playerid,copid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:tempposx, Float:tempposy, Float:tempposz;
		tempposx = (curx -x);
		tempposy = (cury -y);
		tempposz = (curz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
	}
	return 0;
}

public CustomPickups()
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new string[128];
//	NameTimer();
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerPos(i, oldposx, oldposy, oldposz);
			//new tmpcar = GetPlayerVehicleID(i);
			if(oldposx!=0.0 && oldposy!=0.0 && oldposz!=0.0)
			{
				/*for(new h = 0; h < sizeof(SBizzInfo); h++)
				{
					if(IsATruck(tmpcar) && PlayerToPoint(10.0, i, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]))
					{
						format(string, sizeof(string), "~w~%s~n~~r~Products Required~w~: %d~n~~y~Price per Product: ~w~: $%d~n~~g~Funds: ~w~: $%d",SBizzInfo[h][sbMessage],(SBizzInfo[h][sbMaxProducts]-SBizzInfo[h][sbProducts]),SBizzInfo[h][sbPriceProd],SBizzInfo[h][sbTill]);
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
					if(PlayerToPoint(2.0, i, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]))
					{
						if(SBizzInfo[h][sbOwned] == 1)
						{
							format(string, sizeof(string), "~w~%s~w~~n~Owner : %s~n~Extortion by : %s~n~Entrance Fee : ~g~$%d ~n~~w~to enter type /enter",SBizzInfo[h][sbMessage],SBizzInfo[h][sbOwner],SBizzInfo[h][sbExtortion],SBizzInfo[h][sbEntranceCost]);
						}
						else
						{
							format(string, sizeof(string), "~w~%s~w~~n~This Business is for sale~n~Cost: ~g~$%d ~w~Level : %d ~n~to buy this Business type /comprarbiz",SBizzInfo[h][sbMessage],SBizzInfo[h][sbBuyPrice],SBizzInfo[h][sbLevelNeeded]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
				}*/
				for(new h = 0; h < sizeof(HouseInfo); h++)
				{
					if(PlayerToPoint(2.0, i, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
					{
						if(HouseInfo[h][hOwned] == 1)
						{
							if(HouseInfo[h][hRentabil] == 0)
							{
								format(string, sizeof(string), "~w~Propietario legitimo:~g~~n~~y~[][] ~b~%s~y~[][]~w~~n~~w~Nivel : %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel]);
							}
							else
							{
								format(string, sizeof(string), "~w~Propietario legitimo:~n~~y~[][] ~b~%s~y~[][]~w~~n~Alquiler: $%d Nivel de venta : %d~n~Para alquilar: /alquiler ",HouseInfo[h][hOwner],HouseInfo[h][hRent],HouseInfo[h][hLevel]);
							}
							GameTextForPlayer(i, string, 5000, 3);
							//return 1;
						}
						else
						{
							format(string, sizeof(string), "~w~En venta~n~Precio: ~g~$%d~n~~w~ Nivel Minimo : %d~n~Para comprar /comprarcasa",HouseInfo[h][hValue],HouseInfo[h][hLevel]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						//return 1;
					}
				}
			    for(new h = 0; h < sizeof(BizzInfo); h++)
				{
					/*if(IsATruck(tmpcar) && PlayerToPoint(10.0, i, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]))
					{
						format(string, sizeof(string), "~w~%s~n~~r~Products Required~w~: %d~n~~y~Price per Product: ~w~: $%d~n~~g~Funds: ~w~: $%d",BizzInfo[h][bMessage],(BizzInfo[h][bMaxProducts]-BizzInfo[h][bProducts]),BizzInfo[h][bPriceProd],BizzInfo[h][bTill]);
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}*/
					if(PlayerToPoint(2.0, i, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]))
					{
						if(BizzInfo[h][bOwned] == 1)
						{
							format(string, sizeof(string), "~w~%s~w~~n~Propietario : %s~n~Encargado : %s~n~Precio Entrada : ~g~$%d ~n~~w~usa /entrar para pasar",BizzInfo[h][bMessage],BizzInfo[h][bOwner],BizzInfo[h][bExtortion],BizzInfo[h][bEntranceCost]);
						}
						else
						{
							format(string, sizeof(string), "~w~%s~w~~n~ Negocio en venta~n~Precio: ~g~$%d ~w~Nivel : %d ~n~para comprarlo usa /comprarbiz",BizzInfo[h][bMessage],BizzInfo[h][bBuyPrice],BizzInfo[h][bLevelNeeded]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
				}
			}//custompickups end
		 	if (PlayerToPoint(2.0, i, 1191.0593,-1292.2404,5.5532))
			{// Hospital near speedway
				GameTextForPlayer(i, "~w~ESCRIBE: ~r~/curarme~n~~w~Si tienes una enfermedad~g~ $200", 5000, 5);
			}
            else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1952.8578,-2178.7393,13.5469))
			{
			    GameTextForPlayer(i, "~w~*~g~ Lanzarse en paracaidas ~w~*~n~~r~----------~n~~w~Escribe: /entrar Coste: 500$~n~~r~----------", 5000, 3);
			}
          /*  else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,418.7112,-1429.3812,32.4777))
			{
			    GameTextForPlayer(i, "~w~*~g~ Partidos de PaintBall ~w~*~n~~r~----------~n~~w~Escribe: /entrar Coste: 100$~n~~r~----------", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1474.3314,-1862.4025,13.5469))
			{
                GameTextForPlayer(i, "~w~<~g~ Detective ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2367.6611,-2335.8540,13.5045))
			{
                GameTextForPlayer(i, "~w~<~g~ Para reparar kart ~w~>~n~~r~----------~n~~w~Escribe: /kart como conductor~n~~r~----------", 5000, 3);
			}
		/*	else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1677.1489,-1634.3535,14.2266))
			{
			    GameTextForPlayer(i, "~w~<~g~ Abogado ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1087.7284,-923.1658,43.3906))
			{
			    GameTextForPlayer(i, "~w~<~g~ Prostituta ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2072.5486,-1582.8029,13.4741))
			{
			    GameTextForPlayer(i, "~w~<~g~ Vendedor de Drogas ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1927.5400,-1199.7737,20.0234))
			{
			    GameTextForPlayer(i, "~b~Misiones~n~PvP~w~~n~Escribe: /misionespvp", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1025.8512,-2195.4097,39.1406)) // by DryilZas
			{
			    GameTextForPlayer(i, "~b~Matrix~n~~w~La dimension oculta", 5000, 3);
			}
		/*	else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1128.5636,-1448.0800,15.7969)) // by DryilZas
			{
			    GameTextForPlayer(i, "~b~Zona Premiums~n~~w~ESCRIBE: /PREMIUM", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,816.4208,856.9929,12.7891))
			{
			    GameTextForPlayer(i, "~w~<~g~ Minero ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2110.9067,-2078.4744,13.5544))//basurero
			{
			    GameTextForPlayer(i, "~w~<~g~ Basurero ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1812.7332,-1842.1777,13.5781) || GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2233.2932,-1741.7515,13.5518) || GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1706.2594,-1722.2362,13.5533) || GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1540.0558,-1721.9956,13.5546) || GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1252.2681,-1413.7200,13.4105) || GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1589.7230,-1288.4901,17.5130)) // by magec
			{
			    GameTextForPlayer(i, "~b~PUESTO comida~n~~w~ESCRIBE: /comida para comer algo (Precio 350$)", 5000, 3);
			}
		    else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1195.4518,-1318.9702,5.5610)) // by mAGEc curar heridas
			{
			    GameTextForPlayer(i, "~b~CURAR HERIDAS~n~~w~ESCRIBE: /herida PARA CURARTE 1 HERIDA PRECIO 1000", 5000, 3);
			}
            else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2799.5776,-2006.8701,13.5547)) // by mAGEc baloncesto
			{
			    GameTextForPlayer(i, "~b~Pelota Basket~n~~w~ESCRIBE: /pelotabasket para aparecer la pelota", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2309.4746,-8.3682,26.7422)) // by DryilZas
			{
			    GameTextForPlayer(i, "~y~]]]~w~Loteria nacional~y~]]]~w~~n~/loteria~g~ $50", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,241.6441,-1779.5565,4.1982)) // by DryilZas
			{
			    GameTextForPlayer(i, "~y~Para jugar~n~ESCRIBE: /Futbol", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,375.9471,-2068.9353,7.8359)) // by DryilZas
			{
			    GameTextForPlayer(i, "~y~Lonja~n~~w~Para mayoristas y minoristas~n~Escribe: /lonja", 5000, 3);
			}
		/*	else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,965.5573,-1252.2561,16.9734))
			{
			    GameTextForPlayer(i, "~w~<~g~ Ladron de Vehiculos ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,616.0538,-1530.2815,15.1988))
			{
			    GameTextForPlayer(i, "~w~<~g~ Guardaespaldas ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			/*else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,766.0804,14.5133,1000.7004))
			{
			    GameTextForPlayer(i, "~w~<~g~ Boxeador ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2450.3831,-2620.5769,13.6646))
			{
			    GameTextForPlayer(i, "~w~<~g~ Mozo de Almacen ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
		    else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2013.2556,-1434.5009,13.5547))
			{
			    GameTextForPlayer(i, "~w~<~g~ Repartidor de Periodicos ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
		    else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1247.9318,-1561.0044,13.5556))
			{
			    GameTextForPlayer(i, "~w~<~g~ Comercial ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2281.6797,-2364.6204,13.5469))
			{
			    GameTextForPlayer(i, "~w~<~g~ Camionero ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1612.3240,-2330.1670,13.5469)) //aero info
			{
			    GameTextForPlayer(i, "~b~Bienvenido~n~~w~Para ver una informacion completa~n~del servidor, ESCRIBE:~n~~r~/Ayuda", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2250.5625,-1795.7721,13.5469)) //barrio info
			{
			    GameTextForPlayer(i, "~b~Bienvenido~n~~w~Para ver una informacion completa~n~del servidor, ESCRIBE:~n~~r~/Ayuda", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,893.9490,-1644.0183,13.5469)) //playa info
			{
			    GameTextForPlayer(i, "~b~Bienvenido~n~~w~Para ver una informacion completa~n~del servidor, ESCRIBE:~n~~r~/Ayuda", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1457.0197,-1144.9761,24.3906)) //rico info
			{
			    GameTextForPlayer(i, "~b~Bienvenido~n~~w~Para ver una informacion completa~n~del servidor, ESCRIBE:~n~~r~/Ayuda", 5000, 3);
			}
			/*else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1959.3073,-1560.7618,13.5966))
			{
			    GameTextForPlayer(i, " ~w~MERCADO ~g~VERDE~n~~w~Escribe /Drogas", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,721.0230,-1256.1627,17.6484))
			{
			    GameTextForPlayer(i, " ~w~MERCADO ~b~YAKUZA~n~~w~Escribe /armasyakuza", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1259.5947,-812.6199,84.1406))
			{
			    GameTextForPlayer(i, " ~w~MERCADO ~b~LCN~n~~w~Escribe /armaslcn", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1527.1671,-1465.8501,9.5000))
			{
			    GameTextForPlayer(i, " ~w~MERCADO ~b~HITMAN~n~~w~Escribe /armashitman", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,905.4366,-1555.3862,-67.3664))
			{
			    GameTextForPlayer(i, " ~w~MERCADO ~b~PURETAS~n~~w~Escribe /armaspuretas", 5000, 3);
			}
	        else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1815.9800,-1808.7660,3.9844))
			{
			    GameTextForPlayer(i, "~w~<~g~ Mendigo ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
	        else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2105.4858,-1806.4725,13.5547))
			{
			    GameTextForPlayer(i, "~w~<~g~ Rep. de Pizzas ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
	        else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,-381.2316,-1438.8787,25.7266))
			{
			    GameTextForPlayer(i, "~w~<~g~ Granjero ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
	        else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1629.2969,-1903.3669,13.5531))
			{
			    GameTextForPlayer(i, "~w~<~g~ Barrendero ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1365.9424,-1285.4685,13.5469)) //licencia de armas
			{
			    GameTextForPlayer(i, "~y~[][]~w~Licencia de armas~y~[][]~n~~w~Escribe: /licenciaarmas~n~~g~$20500", 5000, 3);
			}
/*			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2127.8315,-1685.5144,15.0859)) //north street gang inicio
			{
			    GameTextForPlayer(i, "~w~Banda Libre~n~~r~NORTH STREET GANG~n~~w~Usa: /unirse", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,731.8565,-1276.1882,17.6484)) //paccinos inicio
			{
			    GameTextForPlayer(i, "~w~Banda Libre~n~~r~PACCINOS NORTENOS~n~~w~Usa: /unirse", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,501.1876,-75.7067,998.7578)) //los cobras inicio
			{
			    GameTextForPlayer(i, "~w~Banda Libre~n~~r~LOS COBRAS~n~~w~Usa: /unirse", 5000, 3);
			}
			 else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,-1037.1545,-1313.3037,129.2635)) //los puretas inicio
			{
			    GameTextForPlayer(i, "~w~Banda Libre~n~~r~LOS PURETAS~n~~w~Usa: /unirse", 5000, 3);
			}*/
		 	else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2035.8124,-1388.7933,3.5369)) // by DryilZas
			{
			    GameTextForPlayer(i, "~y~[][] ~w~Camara~y~[][]~n~~w~Escribe: /comprarcamara~n~~g~$150", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,359.6649,-2032.0576,7.8359)) //licencia de pesca
			{
			    GameTextForPlayer(i, "~y~[][]~w~Licencia de pesca~y~[][]~n~~w~Escribe: /licenciapesca~n~~g~$10000", 5000, 3);
			}
		/*	else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1858.6758,-1856.8193,13.5816)) //explosivos
			{
			    GameTextForPlayer(i, "~y~[][]~w~Explosivos~y~[][]~n~~w~Escribe: /comprarexp~n~~g~$10000", 5000, 3);
			} */
		/*	else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2412.7363,-1426.2356,23.9848)) //BOMBA
			{
			    GameTextForPlayer(i, "~y~[][]~w~Bomba~y~[][]~n~~w~Escribe: /comprarbomba~n~~g~$25000", 5000, 3);
			} */
	 		else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,508.3292,-85.1550,998.9609)) //palo de billar
			{
			    GameTextForPlayer(i, "~y~[][]~w~Palo de billar~y~[][]~n~~w~Escribe: /comprarpalo~n~~g~$150", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1712.0879,-1667.4148,20.2260)) //habitacion hotel astrium
			{
			    GameTextForPlayer(i, "~y~[][]~w~Habitacion~y~[][]~n~~w~Escribe: /alquilarhabi~n~~g~$100", 5000, 3);
			}
		    else if (PlayerToPoint(2.0, i, 2166.3376,-1671.6565,15.0740)) // || PlayerToPoint(2.0, i, 1424.1729,-1317.9955,13.5547))
			{//Buyable Drugs for Drug Dealers
			    GameTextForPlayer(i, "~w~Comando /colmar drogas, para conseguir ~r~Drogas~y~~n~Precio depende el nivel", 5000, 3);
			}
   		/*	else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,-792.9693,500.5572,1367.3672))
			{
			    if(PlayerInfo[i][pJob] > 18) {}
			    else { GameTextForPlayer(i, "~y~Waiter ~w~Skin Change Location ~r~2 ~n~~y~Type /cookuniform list", 5000, 3); }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,-779.3134,497.8989,1371.7490))
			{
			    if(PlayerInfo[i][pJob] > 18) {}
			    else { GameTextForPlayer(i, "~y~Waiter ~w~Skin Change Location ~r~1 ~n~~y~Type /cookuniform list", 5000, 3); }
			}
		    else if (PlayerToPoint(2.0, i, 1043.4530,-1028.0344,32.1016))
			{//Fernandez tuning start
				GameTextForPlayer(i, "~w~This mod shop belongs to Charles Luciano ~n~~r~ If you want to access it ~n~~y~ /call 961415", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1787.1556,-1027.6527,23.9609)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1729.3479,-1063.2372,23.9408)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1621.6649,-1041.4888,23.8984)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1654.6140,-1074.7848,23.8984)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1810.9708,-1883.0990,13.5839)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1596.2415,-2156.9119,13.5551)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1327.4027,-2605.4287,13.5732)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,352.1752,-1795.9072,5.1390)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,217.5138,-1441.6497,13.2043)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,340.9066,-1365.6089,14.5078)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,561.2496,-1255.0045,17.2422)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2131.8362,-1150.7549,24.1228)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1016.9240,-1358.0116,13.3787)) // by Nadiusko
			{
			    GameTextForPlayer(i, "~y~Para ver el precio,~n~ESCRIBE dentro del vehiculo: /carinfo", 5000, 3);
			}
			else if (PlayerToPoint(2.0, i, 1488.6949,-1721.7136,8.2067))
			{
			    GameTextForPlayer(i, "~w~Mercado ~r~Negro~n~~w~/delincuencia", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2025.2421,-1403.3473,17.2098))
			{
			    if(PlayerInfo[i][pMember] == 9 || PlayerInfo[i][pLeader] == 9) { GameTextForPlayer(i, "~w~Type ~r~/publicar ~w~to create a newspaper",5000,3); }
			    else if(PlayerInfo[i][pJob] == 15) { GameTextForPlayer(i, "~w~Type ~r~/periodicos ~w~to see all the made newspapers",5000, 3); }
			}
            else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,213.8549,-230.5761,1.7786))
			{
			    GameTextForPlayer(i, "~w~<~g~ Prov. Materiales ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1139.4526,-1760.9469,13.5946))
			{
			    GameTextForPlayer(i, "~w~<~g~ Taxista ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
		/*	else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1806.6814,-2068.5959,13.5598))
			{
			    GameTextForPlayer(i, "~w~<~g~ Mecanico ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}*/
			/*else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2146.3523,-2267.7498,14.2344))
			{
			    GameTextForPlayer(i, "~y~You can get ~r~Materials~y~ from your packages here ~n~~w~Type /materials deliver", 5000, 3);
			}*/
            else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,-86.1251,2.6412,3.1172))
			{
			    GameTextForPlayer(i, "~w~<~g~ Agrigultor de Drogas ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
            else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2137.6624,-2282.3455,20.6719))
			{
			    GameTextForPlayer(i, "~w~<~g~ Vendedor de Armas ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			else if (PlayerToPoint(2.0, i,2116.7444,-1788.4021,13.5547))
   			{// Pizza Pickup
        		if (PlayerInfo[i][pJob] != 17)
    			{
    			    SendClientMessage(i, COLOR_GREY, "Tu no eres Repartidor de Pizzas");
     				//return 1;
    			}
    			if (sPizza[i] != 1)
    			{
     				SendClientMessage(i, COLOR_WHITE, "Ahora tienes Pizzas, espera pedidos");
       				sPizza[i] = 1;
      			}
   			}
		/*	else if (PlayerToPoint(2.0, i,1174.9100,-1365.7330,13.9876))
			{
			    if(PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4) { SetTimerEx("elevator1", 1000, false, "i", i); }
			    else { GameTextForPlayer(i, "~r~You can not use an elevator", 5000, 3); }
			}
			else if (PlayerToPoint(2.0, i,1174.9591,-1369.8761,23.9736))
			{
			    if(PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4) { SetTimerEx("elevator2", 1000, false, "i", i); }
			    else { GameTextForPlayer(i, "~r~You can not use an elevator", 5000, 3); }
			}
		 	else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1381.0413,-1088.8511,27.3906))
			{
			    GameTextForPlayer(i, "~g~Welcome,~n~~y~Use /mission to take on a Mission", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1680.1564,-2179.4905,13.5547))
			{
			    GameTextForPlayer(i, "~y~Aqui puedes obtener ayuda~n~Comando ~r~/informacion ~y~para leerla", 5000, 3);
			}
  		/*	else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,362.1231,173.6424,1008.3828))
			{
			    GameTextForPlayer(i, "~w~For Legal Job list~n~ Type: ~r~/Legaljobs", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1490.3195,1305.6976,1093.2964))
			{
			    GameTextForPlayer(i, "~w~Para Comprar licencia~n~ Comando: ~r~/Licenci", 5000, 3);
			}
  		/*	else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,250.0484,66.2467,1003.6406))
			{
			    GameTextForPlayer(i, "~w~Buyable Weapon Licenses~n~ Type: ~r~/comprargunlic ~n~~w~[Costs ~g~20,500$~w~]", 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2041.4005,-1409.8962,17.1641))
			{
			    GameTextForPlayer(i, "~w~INFORMACION ~n~PROPIEDAD: CNN ~n~PON TU ANUNCIO ~g~/an~w~ [TEXTO]", 5000, 3);
			}
			else if (PlayerToPoint(3.0, i,-38.8664,56.3031,3.1172))
			{
			    if(PlayerInfo[i][pJob] == 19)
			    {
			    	format(string, sizeof(string), "~r~Cantidad Drogas: %d", drugsys[DrugAmmount]);
					GameTextForPlayer(i, string, 5000, 3);
				}
				else if(PlayerInfo[i][pJob] == 20)
				{
					format(string, sizeof(string), "~g~Granero~n~Almacen de Drogas~n~Cantidad:~r~ %d~n~~w~ESCRIBE /tomardrogas", drugsys[DrugAmmount]);
					GameTextForPlayer(i, string, 5000, 3);
				}
				else
				{
				    GameTextForPlayer(i, "~r~Solo empleados!", 5000, 3);
				}
			}
            else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,2003.0460,-1071.8668,24.5729))
			{
			    GameTextForPlayer(i, "~w~<~g~ Prov. Drogas ~w~>~n~~r~----------~n~~w~Escribe: /unirse para mas informacion~n~~r~----------", 5000, 3);
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(1.0, i,242.7591,66.4315,1003.6406))
			{
			    if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
			    {
			        GameTextForPlayer(i, "~g~Police Department elevator~n~~w~Type ~r~/pdup ~w~to go up~n~Type ~r~/pddown ~w~to go down", 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Solo empleados!", 5000, 3);
			    }
			}
		/*	else if (GetPlayerState(i) == 2 && PlayerToPoint(3, i,2073.2979,-1831.1228,13.5469) || GetPlayerState(i) == 2 && PlayerToPoint(3, i,1024.9756,-1030.7930,32.0257) || GetPlayerState(i) == 2 && PlayerToPoint(3, i,488.3819,-1733.0563,11.1752) || GetPlayerState(i) == 2 && PlayerToPoint(3, i,719.8940,-464.8272,16.3359))
			{
			    format(string, sizeof(string), "~y~Pay ~r~& ~g~Spray~w~~n~Owner : %s~n~Entrance Fee : ~g~$%d ~w~~n~to enter type /enter",SBizzInfo[5][sbOwner],SBizzInfo[5][sbEntranceCost]);
				GameTextForPlayer(i, string, 5000, 3);
			}*/
			else if (GetPlayerState(i) == 1 && PlayerToPoint(1.5, i, 248.4994,-33.1366,1.5781))
			{
			    if(PlayerInfo[i][pJob] == 22)
			    {
			        GameTextForPlayer(i, "~w~Materials factory~n~You can ~r~/smugglemats ~w~here", 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Solo empleados !", 5000, 3);
			    }
			}
			else if (GetPlayerState(i) == 1 && PlayerToPoint(1.0, i, 2230.3579,-2286.2107,14.3751))
			{
			    if(PlayerInfo[i][pJob] == 22)
			    {
			        format(string, sizeof(string), "~w~Materials Bank~n~Materials ammount: ~r~%d", matssys[MatsAmmount]);
			        GameTextForPlayer(i, string, 5000, 3);
			    }
			    else if(PlayerInfo[i][pJob] == 23)
			    {
			        format(string, sizeof(string), "~w~Materials Bank~n~Materials ammount: ~r~%d ~n~~w~You can ~g~/comprarmats ~w~here", matssys[MatsAmmount]);
			        GameTextForPlayer(i, string, 5000, 3);
			    }
			    else
			    {
			        GameTextForPlayer(i, "~r~Solo empleados !", 5000, 3);
			    }
			}
			else if(PlayerToPoint(2.0, i,1534.1089,-1504.5645,-0.8974))
			{
			    if(OrderReady[i] > 0)
			    {
			        switch (OrderReady[i])
			        {
			            case 1:
			            {
			                SafeGivePlayerWeapon(i, 24, 86); SafeGivePlayerWeapon(i, 4, 1);
			                SafeGivePlayerMoney(i, - 1500);
			                SendClientMessage(i, COLOR_WHITE, "* Recojes el envio de armas");
			            }
			            case 2:
			            {
			                SafeGivePlayerWeapon(i, 25, 60); SafeGivePlayerWeapon(i, 32, 620);
			                SafeGivePlayerMoney(i, - 1600);
			                SendClientMessage(i, COLOR_WHITE, "* Recojes el envio de armas.");
			            }
			            case 3:
			            {
			                SafeGivePlayerWeapon(i, 26, 80); SafeGivePlayerWeapon(i, 28, 820);
			                SafeGivePlayerMoney(i, - 1600);
			                SendClientMessage(i, COLOR_WHITE, "* Recojes el envio de armas.");
			            }
			            case 4:
			            {
			                SafeGivePlayerWeapon(i, 29, 600); SafeGivePlayerWeapon(i, 30, 450);
			                SafeGivePlayerMoney(i, - 2100);
			                SendClientMessage(i, COLOR_WHITE, "* Recojes el envio de armas.");
			            }
			            case 5:
			            {
			                SafeGivePlayerWeapon(i, 29, 600); SafeGivePlayerWeapon(i, 31, 500);
			                SafeGivePlayerMoney(i, - 2300);
			                SendClientMessage(i, COLOR_WHITE, "* Recojes el envio de armas.");
			            }
			            case 6:
			            {
			                SafeGivePlayerWeapon(i, 34, 120);
							SafeGivePlayerMoney(i, - 3200);
							SendClientMessage(i, COLOR_WHITE, "* Recojes el envio de armas.");
			            }
			            case 7:
			            {
			                SafeGivePlayerWeapon(i, 39, 10);
			                SafeGivePlayerMoney(i, - 3900);
			                SendClientMessage(i, COLOR_WHITE, "* Recojes el envio de armas.");
			            }
			        }
			        OrderReady[i] = 0;
			    }
			}//Hitman delivery stuff
			else if(PlayerOnMission[i] > 0 && PlayMission[kToggle] == 0)
			{
			    if(MissionCheckpoint[i] == 1 && PlayerToPoint(10.0, i,PlayMission[kCP1][0],PlayMission[kCP1][1],PlayMission[kCP1][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText1]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText4]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText5]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText6]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 2;
				}
				else if(MissionCheckpoint[i] == 2 && PlayerToPoint(10.0, i,PlayMission[kCP2][0],PlayMission[kCP2][1],PlayMission[kCP2][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText2]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText7]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText8]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText9]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 3;
				}
				else if(MissionCheckpoint[i] == 3 && PlayerToPoint(10.0, i,PlayMission[kCP3][0],PlayMission[kCP3][1],PlayMission[kCP3][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText3]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText10]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText11]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText12]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 4;
				}
				else if(MissionCheckpoint[i] == 4 && PlayerToPoint(10.0, i,PlayMission[kCP4][0],PlayMission[kCP4][1],PlayMission[kCP4][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText4]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText13]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText14]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText15]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 5;
				}
				else if(MissionCheckpoint[i] == 5 && PlayerToPoint(10.0, i,PlayMission[kCP5][0],PlayMission[kCP5][1],PlayMission[kCP5][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText5]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "%s", PlayMission[kText16]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText17]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					format(string, sizeof(string), "%s", PlayMission[kText18]);
					SendClientMessage(i, COLOR_YELLOW2, string);
					MissionCheckpoint[i] = 6;
				}
				else if(MissionCheckpoint[i] == 6 && PlayerToPoint(10.0, i,PlayMission[kCP6][0],PlayMission[kCP6][1],PlayMission[kCP6][2]))
				{
				    RingTone[i] = 20;
				    format(string, sizeof(string), "%s", PlayMission[kGText6]);
					GameTextForPlayer(i, string, 8000, 3);
					format(string, sizeof(string), "..:: Mission Passed : %s | Reward received: $%d ::..", PlayMission[kTitle], PlayMission[kReward]);
					SendClientMessage(i, COLOR_GREEN, string);
					SafeGivePlayerMoney(i, PlayMission[kReward]);
					PlayerInfo[i][pMissionNr] = PlayerOnMission[i];
					MissionCheckpoint[i] = 0;
					PlayerOnMission[i] = 0;
				}
			}
		}
	}
	return 1;
}

public IdleKick() //afkkick
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(IsPlayerNPC(i))
		    {
		        PlayerInfo[i][paaafk] = 1;
		    }
		    if(PlayerInfo[i][paaafk] != 1)
		    {
				GetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1], PlayerPos[i][2]);
				if(PlayerPos[i][0] == PlayerPos[i][3] && PlayerPos[i][1] == PlayerPos[i][4] && PlayerPos[i][2] == PlayerPos[i][5])
				{
					new plname[64];
					new string[128];
					GetPlayerName(i, plname, sizeof(plname));
					format(string, sizeof(string), "Administración: %s ha sido expulsado por  SpG-Bot, razon: AFK", plname);
					SendClientMessageToAll(COLOR_LIGHTRED, string);
					Kick(i);
				}
				PlayerPos[i][3] = PlayerPos[i][0];
				PlayerPos[i][4] = PlayerPos[i][1];
				PlayerPos[i][5] = PlayerPos[i][2];
			}
		}
	}
}

public OnPlayerText(playerid, text[])
{
	new giver[MAX_PLAYER_NAME];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new tmp[256];
	new string[256];
	new giveplayerid;
	// Visor de cmds //  /decir
	GetPlayerName(playerid, sendername, sizeof(sendername));
	format(string, sizeof(string), "%s [%d]: /decir %s",sendername,playerid, text);
	for(new j = 0; j < MAX_PLAYERS; j++)
	{
		if ((IsPlayerAdmin(j) && gSnoop[j]==1) || (PlayerInfo[j][pAdmin]>=2000 && gSnoop[j]==1))
		{
			SendClientMessage(j, 0xFF9900, string);
	  	}
	}
	if(PlayerInfo[playerid][pMuted] == 1)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, "Estas Muteado, contacta con un administrador");
		return 0;
	}
	if(SelectChar[playerid] == 200)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("otro", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("otro")))
		{
		    switch (SelectCharID[playerid])
			{
                case 0: //ropainformal
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 28); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 28; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 29); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 29; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 30); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 30; }
					else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 31); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 31; }
					else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 32); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 32; }
					else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 33); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = 33; }
					else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, 7); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = 7; }
					else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, 9); SelectCharPlace[playerid] = 9; ChosenSkin[playerid] = 9; }
					else if(SelectCharPlace[playerid] == 9) { SetPlayerSkin(playerid, 10); SelectCharPlace[playerid] = 10; ChosenSkin[playerid] = 10; }
					else if(SelectCharPlace[playerid] == 10) { SetPlayerSkin(playerid, 12); SelectCharPlace[playerid] = 11; ChosenSkin[playerid] = 12; }
					else if(SelectCharPlace[playerid] == 11) { SetPlayerSkin(playerid, 14); SelectCharPlace[playerid] = 12; ChosenSkin[playerid] = 14; }
					else if(SelectCharPlace[playerid] == 12) { SetPlayerSkin(playerid, 15); SelectCharPlace[playerid] = 13; ChosenSkin[playerid] = 15; }
					else if(SelectCharPlace[playerid] == 13) { SetPlayerSkin(playerid, 18); SelectCharPlace[playerid] = 14; ChosenSkin[playerid] = 18; }
					else if(SelectCharPlace[playerid] == 14) { SetPlayerSkin(playerid, 19); SelectCharPlace[playerid] = 15; ChosenSkin[playerid] = 19; }
					else if(SelectCharPlace[playerid] == 15) { SetPlayerSkin(playerid, 20); SelectCharPlace[playerid] = 16; ChosenSkin[playerid] = 20; }
					else if(SelectCharPlace[playerid] == 16) { SetPlayerSkin(playerid, 21); SelectCharPlace[playerid] = 17; ChosenSkin[playerid] = 21; }
					else if(SelectCharPlace[playerid] == 17) { SetPlayerSkin(playerid, 22); SelectCharPlace[playerid] = 18; ChosenSkin[playerid] = 22; }
					else if(SelectCharPlace[playerid] == 18) { SetPlayerSkin(playerid, 23); SelectCharPlace[playerid] = 19; ChosenSkin[playerid] = 23; }
					else if(SelectCharPlace[playerid] == 19) { SetPlayerSkin(playerid, 24); SelectCharPlace[playerid] = 20; ChosenSkin[playerid] = 24; }
					else if(SelectCharPlace[playerid] == 20) { SetPlayerSkin(playerid, 25); SelectCharPlace[playerid] = 21; ChosenSkin[playerid] = 25; }
					else if(SelectCharPlace[playerid] == 21) { SetPlayerSkin(playerid, 34); SelectCharPlace[playerid] = 22; ChosenSkin[playerid] = 34; }
					else if(SelectCharPlace[playerid] == 22) { SetPlayerSkin(playerid, 35); SelectCharPlace[playerid] = 23; ChosenSkin[playerid] = 35; }
					else if(SelectCharPlace[playerid] == 23) { SetPlayerSkin(playerid, 36); SelectCharPlace[playerid] = 24; ChosenSkin[playerid] = 36; }
					else if(SelectCharPlace[playerid] == 24) { SetPlayerSkin(playerid, 37); SelectCharPlace[playerid] = 25; ChosenSkin[playerid] = 37; }
					else if(SelectCharPlace[playerid] == 25) { SetPlayerSkin(playerid, 38); SelectCharPlace[playerid] = 26; ChosenSkin[playerid] = 38; }
					else if(SelectCharPlace[playerid] == 26) { SetPlayerSkin(playerid, 39); SelectCharPlace[playerid] = 27; ChosenSkin[playerid] = 39; }
					else if(SelectCharPlace[playerid] == 27) { SetPlayerSkin(playerid, 40); SelectCharPlace[playerid] = 28; ChosenSkin[playerid] = 40; }
					else if(SelectCharPlace[playerid] == 28) { SetPlayerSkin(playerid, 41); SelectCharPlace[playerid] = 29; ChosenSkin[playerid] = 41; }
					else if(SelectCharPlace[playerid] == 29) { SetPlayerSkin(playerid, 42); SelectCharPlace[playerid] = 30; ChosenSkin[playerid] = 42; }
					else if(SelectCharPlace[playerid] == 30) { SetPlayerSkin(playerid, 43); SelectCharPlace[playerid] = 31; ChosenSkin[playerid] = 43; }
					else if(SelectCharPlace[playerid] == 31) { SetPlayerSkin(playerid, 44); SelectCharPlace[playerid] = 32; ChosenSkin[playerid] = 44; }
					else if(SelectCharPlace[playerid] == 32) { SetPlayerSkin(playerid, 45); SelectCharPlace[playerid] = 33; ChosenSkin[playerid] = 45; }
					else if(SelectCharPlace[playerid] == 33) { SetPlayerSkin(playerid, 46); SelectCharPlace[playerid] = 34; ChosenSkin[playerid] = 46; }
					else if(SelectCharPlace[playerid] == 34) { SetPlayerSkin(playerid, 47); SelectCharPlace[playerid] = 35; ChosenSkin[playerid] = 47; }
					else if(SelectCharPlace[playerid] == 35) { SetPlayerSkin(playerid, 48); SelectCharPlace[playerid] = 36; ChosenSkin[playerid] = 48; }
					else if(SelectCharPlace[playerid] == 36) { SetPlayerSkin(playerid, 49); SelectCharPlace[playerid] = 37; ChosenSkin[playerid] = 49; }
					else if(SelectCharPlace[playerid] == 37) { SetPlayerSkin(playerid, 58); SelectCharPlace[playerid] = 38; ChosenSkin[playerid] = 58; }
					else if(SelectCharPlace[playerid] == 38) { SetPlayerSkin(playerid, 62); SelectCharPlace[playerid] = 39; ChosenSkin[playerid] = 62; }
					else if(SelectCharPlace[playerid] == 39) { SetPlayerSkin(playerid, 72); SelectCharPlace[playerid] = 40; ChosenSkin[playerid] = 72; }
					else if(SelectCharPlace[playerid] == 40) { SetPlayerSkin(playerid, 73); SelectCharPlace[playerid] = 41; ChosenSkin[playerid] = 73; }
					else if(SelectCharPlace[playerid] == 41) { SetPlayerSkin(playerid, 82); SelectCharPlace[playerid] = 42; ChosenSkin[playerid] = 82; }
					else if(SelectCharPlace[playerid] == 42) { SetPlayerSkin(playerid, 83); SelectCharPlace[playerid] = 43; ChosenSkin[playerid] = 83; }
					else if(SelectCharPlace[playerid] == 43) { SetPlayerSkin(playerid, 84); SelectCharPlace[playerid] = 44; ChosenSkin[playerid] = 84; }
					else if(SelectCharPlace[playerid] == 44) { SetPlayerSkin(playerid, 85); SelectCharPlace[playerid] = 45; ChosenSkin[playerid] = 85; }
					else if(SelectCharPlace[playerid] == 45) { SetPlayerSkin(playerid, 87); SelectCharPlace[playerid] = 46; ChosenSkin[playerid] = 87; }
					else if(SelectCharPlace[playerid] == 46) { SetPlayerSkin(playerid, 91); SelectCharPlace[playerid] = 47; ChosenSkin[playerid] = 91; }
					else if(SelectCharPlace[playerid] == 47) { SetPlayerSkin(playerid, 95); SelectCharPlace[playerid] = 48; ChosenSkin[playerid] = 95; }
					else if(SelectCharPlace[playerid] == 48) { SetPlayerSkin(playerid, 96); SelectCharPlace[playerid] = 49; ChosenSkin[playerid] = 96; }
					else if(SelectCharPlace[playerid] == 49) { SetPlayerSkin(playerid, 97); SelectCharPlace[playerid] = 50; ChosenSkin[playerid] = 97; }
					else if(SelectCharPlace[playerid] == 50) { SetPlayerSkin(playerid, 98); SelectCharPlace[playerid] = 51; ChosenSkin[playerid] = 98; }
					else if(SelectCharPlace[playerid] == 51) { SetPlayerSkin(playerid, 100); SelectCharPlace[playerid] = 52; ChosenSkin[playerid] = 100; }
					else if(SelectCharPlace[playerid] == 52) { SetPlayerSkin(playerid, 101); SelectCharPlace[playerid] = 53; ChosenSkin[playerid] = 101; }
					else if(SelectCharPlace[playerid] == 53) { SetPlayerSkin(playerid, 101); SelectCharPlace[playerid] = 54; ChosenSkin[playerid] = 101; }
					else if(SelectCharPlace[playerid] == 54) { SetPlayerSkin(playerid, 121); SelectCharPlace[playerid] = 55; ChosenSkin[playerid] = 121; }
					else if(SelectCharPlace[playerid] == 55) { SetPlayerSkin(playerid, 128); SelectCharPlace[playerid] = 56; ChosenSkin[playerid] = 128; }
					else if(SelectCharPlace[playerid] == 56) { SetPlayerSkin(playerid, 129); SelectCharPlace[playerid] = 57; ChosenSkin[playerid] = 129; }
					else if(SelectCharPlace[playerid] == 57) { SetPlayerSkin(playerid, 130); SelectCharPlace[playerid] = 58; ChosenSkin[playerid] = 130; }
					else if(SelectCharPlace[playerid] == 58) { SetPlayerSkin(playerid, 131); SelectCharPlace[playerid] = 59; ChosenSkin[playerid] = 131; }
					else if(SelectCharPlace[playerid] == 59) { SetPlayerSkin(playerid, 132); SelectCharPlace[playerid] = 60; ChosenSkin[playerid] = 132; }
					else if(SelectCharPlace[playerid] == 60) { SetPlayerSkin(playerid, 133); SelectCharPlace[playerid] = 61; ChosenSkin[playerid] = 133; }
					else if(SelectCharPlace[playerid] == 61) { SetPlayerSkin(playerid, 135); SelectCharPlace[playerid] = 62; ChosenSkin[playerid] = 135; }
					else if(SelectCharPlace[playerid] == 62) { SetPlayerSkin(playerid, 137); SelectCharPlace[playerid] = 63; ChosenSkin[playerid] = 137; }
					else if(SelectCharPlace[playerid] == 63) { SetPlayerSkin(playerid, 138); SelectCharPlace[playerid] = 64; ChosenSkin[playerid] = 138; }
					else if(SelectCharPlace[playerid] == 64) { SetPlayerSkin(playerid, 139); SelectCharPlace[playerid] = 65; ChosenSkin[playerid] = 139; }
					else if(SelectCharPlace[playerid] == 65) { SetPlayerSkin(playerid, 140); SelectCharPlace[playerid] = 66; ChosenSkin[playerid] = 140; }
					else if(SelectCharPlace[playerid] == 66) { SetPlayerSkin(playerid, 142); SelectCharPlace[playerid] = 67; ChosenSkin[playerid] = 142; }
					else if(SelectCharPlace[playerid] == 67) { SetPlayerSkin(playerid, 143); SelectCharPlace[playerid] = 68; ChosenSkin[playerid] = 143; }
					else if(SelectCharPlace[playerid] == 68) { SetPlayerSkin(playerid, 144); SelectCharPlace[playerid] = 69; ChosenSkin[playerid] = 144; }
					else if(SelectCharPlace[playerid] == 69) { SetPlayerSkin(playerid, 145); SelectCharPlace[playerid] = 70; ChosenSkin[playerid] = 145; }
					else if(SelectCharPlace[playerid] == 70) { SetPlayerSkin(playerid, 146); SelectCharPlace[playerid] = 71; ChosenSkin[playerid] = 146; }
					else if(SelectCharPlace[playerid] == 71) { SetPlayerSkin(playerid, 151); SelectCharPlace[playerid] = 72; ChosenSkin[playerid] = 151; }
					else if(SelectCharPlace[playerid] == 72) { SetPlayerSkin(playerid, 152); SelectCharPlace[playerid] = 73; ChosenSkin[playerid] = 152; }
					else if(SelectCharPlace[playerid] == 73) { SetPlayerSkin(playerid, 153); SelectCharPlace[playerid] = 74; ChosenSkin[playerid] = 153; }
					else if(SelectCharPlace[playerid] == 74) { SetPlayerSkin(playerid, 154); SelectCharPlace[playerid] = 75; ChosenSkin[playerid] = 154; }
					else if(SelectCharPlace[playerid] == 75) { SetPlayerSkin(playerid, 156); SelectCharPlace[playerid] = 76; ChosenSkin[playerid] = 156; }
					else if(SelectCharPlace[playerid] == 76) { SetPlayerSkin(playerid, 157); SelectCharPlace[playerid] = 77; ChosenSkin[playerid] = 157; }
					else if(SelectCharPlace[playerid] == 77) { SetPlayerSkin(playerid, 158); SelectCharPlace[playerid] = 78; ChosenSkin[playerid] = 159; }
					else if(SelectCharPlace[playerid] == 78) { SetPlayerSkin(playerid, 160); SelectCharPlace[playerid] = 79; ChosenSkin[playerid] = 160; }
					else if(SelectCharPlace[playerid] == 79) { SetPlayerSkin(playerid, 161); SelectCharPlace[playerid] = 80; ChosenSkin[playerid] = 161; }
					else if(SelectCharPlace[playerid] == 80) { SetPlayerSkin(playerid, 168); SelectCharPlace[playerid] = 81; ChosenSkin[playerid] = 168; }
					else if(SelectCharPlace[playerid] == 81) { SetPlayerSkin(playerid, 176); SelectCharPlace[playerid] = 82; ChosenSkin[playerid] = 177; }
					else if(SelectCharPlace[playerid] == 82) { SetPlayerSkin(playerid, 178); SelectCharPlace[playerid] = 83; ChosenSkin[playerid] = 178; }
					else if(SelectCharPlace[playerid] == 83) { SetPlayerSkin(playerid, 180); SelectCharPlace[playerid] = 84; ChosenSkin[playerid] = 180; }
					else if(SelectCharPlace[playerid] == 84) { SetPlayerSkin(playerid, 181); SelectCharPlace[playerid] = 85; ChosenSkin[playerid] = 181; }
					else if(SelectCharPlace[playerid] == 85) { SetPlayerSkin(playerid, 182); SelectCharPlace[playerid] = 86; ChosenSkin[playerid] = 182; }
					else if(SelectCharPlace[playerid] == 86) { SetPlayerSkin(playerid, 183); SelectCharPlace[playerid] = 87; ChosenSkin[playerid] = 183; }
					else if(SelectCharPlace[playerid] == 87) { SetPlayerSkin(playerid, 184); SelectCharPlace[playerid] = 88; ChosenSkin[playerid] = 184; }
					else if(SelectCharPlace[playerid] == 88) { SetPlayerSkin(playerid, 190); SelectCharPlace[playerid] = 89; ChosenSkin[playerid] = 190; }
					else if(SelectCharPlace[playerid] == 89) { SetPlayerSkin(playerid, 192); SelectCharPlace[playerid] = 90; ChosenSkin[playerid] = 192; }
					else if(SelectCharPlace[playerid] == 90) { SetPlayerSkin(playerid, 193); SelectCharPlace[playerid] = 91; ChosenSkin[playerid] = 193; }
					else if(SelectCharPlace[playerid] == 91) { SetPlayerSkin(playerid, 195); SelectCharPlace[playerid] = 92; ChosenSkin[playerid] = 195; }
					else if(SelectCharPlace[playerid] == 92) { SetPlayerSkin(playerid, 196); SelectCharPlace[playerid] = 93; ChosenSkin[playerid] = 196; }
					else if(SelectCharPlace[playerid] == 93) { SetPlayerSkin(playerid, 197); SelectCharPlace[playerid] = 94; ChosenSkin[playerid] = 197; }
					else if(SelectCharPlace[playerid] == 94) { SetPlayerSkin(playerid, 198); SelectCharPlace[playerid] = 95; ChosenSkin[playerid] = 198; }
					else if(SelectCharPlace[playerid] == 95) { SetPlayerSkin(playerid, 199); SelectCharPlace[playerid] = 96; ChosenSkin[playerid] = 199; }
					else if(SelectCharPlace[playerid] == 96) { SetPlayerSkin(playerid, 200); SelectCharPlace[playerid] = 97; ChosenSkin[playerid] = 200; }
					else if(SelectCharPlace[playerid] == 97) { SetPlayerSkin(playerid, 201); SelectCharPlace[playerid] = 98; ChosenSkin[playerid] = 201; }
					else if(SelectCharPlace[playerid] == 98) { SetPlayerSkin(playerid, 202); SelectCharPlace[playerid] = 99; ChosenSkin[playerid] = 202; }
					else if(SelectCharPlace[playerid] == 99) { SetPlayerSkin(playerid, 203); SelectCharPlace[playerid] = 100; ChosenSkin[playerid] = 203; }
					else if(SelectCharPlace[playerid] == 100) { SetPlayerSkin(playerid, 204); SelectCharPlace[playerid] = 101; ChosenSkin[playerid] = 204; }
					else if(SelectCharPlace[playerid] == 101) { SetPlayerSkin(playerid, 206); SelectCharPlace[playerid] = 102; ChosenSkin[playerid] = 206; }
					else if(SelectCharPlace[playerid] == 102) { SetPlayerSkin(playerid, 210); SelectCharPlace[playerid] = 103; ChosenSkin[playerid] = 210; }
					else if(SelectCharPlace[playerid] == 103) { SetPlayerSkin(playerid, 212); SelectCharPlace[playerid] = 104; ChosenSkin[playerid] = 212; }
					else if(SelectCharPlace[playerid] == 104) { SetPlayerSkin(playerid, 213); SelectCharPlace[playerid] = 105; ChosenSkin[playerid] = 213; }
					else if(SelectCharPlace[playerid] == 105) { SetPlayerSkin(playerid, 214); SelectCharPlace[playerid] = 106; ChosenSkin[playerid] = 214; }
					else if(SelectCharPlace[playerid] == 106) { SetPlayerSkin(playerid, 215); SelectCharPlace[playerid] = 107; ChosenSkin[playerid] = 215; }
					else if(SelectCharPlace[playerid] == 107) { SetPlayerSkin(playerid, 216); SelectCharPlace[playerid] = 108; ChosenSkin[playerid] = 216; }
					else if(SelectCharPlace[playerid] == 108) { SetPlayerSkin(playerid, 217); SelectCharPlace[playerid] = 109; ChosenSkin[playerid] = 217; }
					else if(SelectCharPlace[playerid] == 109) { SetPlayerSkin(playerid, 218); SelectCharPlace[playerid] = 110; ChosenSkin[playerid] = 218; }
					else if(SelectCharPlace[playerid] == 110) { SetPlayerSkin(playerid, 219); SelectCharPlace[playerid] = 111; ChosenSkin[playerid] = 219; }
					else if(SelectCharPlace[playerid] == 111) { SetPlayerSkin(playerid, 220); SelectCharPlace[playerid] = 112; ChosenSkin[playerid] = 220; }
					else if(SelectCharPlace[playerid] == 112) { SetPlayerSkin(playerid, 221); SelectCharPlace[playerid] = 113; ChosenSkin[playerid] = 221; }
					else if(SelectCharPlace[playerid] == 113) { SetPlayerSkin(playerid, 222); SelectCharPlace[playerid] = 114; ChosenSkin[playerid] = 222; }
					else if(SelectCharPlace[playerid] == 114) { SetPlayerSkin(playerid, 223); SelectCharPlace[playerid] = 115; ChosenSkin[playerid] = 223; }
					else if(SelectCharPlace[playerid] == 115) { SetPlayerSkin(playerid, 224); SelectCharPlace[playerid] = 116; ChosenSkin[playerid] = 224; }
					else if(SelectCharPlace[playerid] == 116) { SetPlayerSkin(playerid, 225); SelectCharPlace[playerid] = 117; ChosenSkin[playerid] = 225; }
					else if(SelectCharPlace[playerid] == 117) { SetPlayerSkin(playerid, 226); SelectCharPlace[playerid] = 118; ChosenSkin[playerid] = 226; }
					else if(SelectCharPlace[playerid] == 118) { SetPlayerSkin(playerid, 230); SelectCharPlace[playerid] = 119; ChosenSkin[playerid] = 230; }
					else if(SelectCharPlace[playerid] == 119) { SetPlayerSkin(playerid, 231); SelectCharPlace[playerid] = 120; ChosenSkin[playerid] = 231; }
					else if(SelectCharPlace[playerid] == 120) { SetPlayerSkin(playerid, 232); SelectCharPlace[playerid] = 121; ChosenSkin[playerid] = 232; }
					else if(SelectCharPlace[playerid] == 121) { SetPlayerSkin(playerid, 233); SelectCharPlace[playerid] = 122; ChosenSkin[playerid] = 233; }
					else if(SelectCharPlace[playerid] == 122) { SetPlayerSkin(playerid, 235); SelectCharPlace[playerid] = 123; ChosenSkin[playerid] = 235; }
					else if(SelectCharPlace[playerid] == 123) { SetPlayerSkin(playerid, 236); SelectCharPlace[playerid] = 124; ChosenSkin[playerid] = 236; }
					else if(SelectCharPlace[playerid] == 124) { SetPlayerSkin(playerid, 237); SelectCharPlace[playerid] = 125; ChosenSkin[playerid] = 237; }
					else if(SelectCharPlace[playerid] == 125) { SetPlayerSkin(playerid, 238); SelectCharPlace[playerid] = 126; ChosenSkin[playerid] = 238; }
					else if(SelectCharPlace[playerid] == 126) { SetPlayerSkin(playerid, 239); SelectCharPlace[playerid] = 127; ChosenSkin[playerid] = 239; }
					else if(SelectCharPlace[playerid] == 127) { SetPlayerSkin(playerid, 241); SelectCharPlace[playerid] = 128; ChosenSkin[playerid] = 241; }
					else if(SelectCharPlace[playerid] == 128) { SetPlayerSkin(playerid, 242); SelectCharPlace[playerid] = 129; ChosenSkin[playerid] = 242; }
					else if(SelectCharPlace[playerid] == 129) { SetPlayerSkin(playerid, 243); SelectCharPlace[playerid] = 130; ChosenSkin[playerid] = 243; }
					else if(SelectCharPlace[playerid] == 130) { SetPlayerSkin(playerid, 244); SelectCharPlace[playerid] = 131; ChosenSkin[playerid] = 244; }
					else if(SelectCharPlace[playerid] == 131) { SetPlayerSkin(playerid, 245); SelectCharPlace[playerid] = 132; ChosenSkin[playerid] = 245; }
					else if(SelectCharPlace[playerid] == 132) { SetPlayerSkin(playerid, 246); SelectCharPlace[playerid] = 133; ChosenSkin[playerid] = 246; }
					else if(SelectCharPlace[playerid] == 133) { SetPlayerSkin(playerid, 247); SelectCharPlace[playerid] = 134; ChosenSkin[playerid] = 247; }
					else if(SelectCharPlace[playerid] == 134) { SetPlayerSkin(playerid, 248); SelectCharPlace[playerid] = 135; ChosenSkin[playerid] = 248; }
					else if(SelectCharPlace[playerid] == 135) { SetPlayerSkin(playerid, 249); SelectCharPlace[playerid] = 136; ChosenSkin[playerid] = 249; }
					else if(SelectCharPlace[playerid] == 136) { SetPlayerSkin(playerid, 251); SelectCharPlace[playerid] = 137; ChosenSkin[playerid] = 251; }
					else if(SelectCharPlace[playerid] == 137) { SetPlayerSkin(playerid, 252); SelectCharPlace[playerid] = 138; ChosenSkin[playerid] = 252; }
					else if(SelectCharPlace[playerid] == 138) { SetPlayerSkin(playerid, 253); SelectCharPlace[playerid] = 139; ChosenSkin[playerid] = 253; }
					else if(SelectCharPlace[playerid] == 139) { SetPlayerSkin(playerid, 63); SelectCharPlace[playerid] = 140; ChosenSkin[playerid] = 63; }
					else if(SelectCharPlace[playerid] == 140) { SetPlayerSkin(playerid, 64); SelectCharPlace[playerid] = 141; ChosenSkin[playerid] = 64; }
					else if(SelectCharPlace[playerid] == 141) { SetPlayerSkin(playerid, 66); SelectCharPlace[playerid] = 142; ChosenSkin[playerid] = 66; }
					else if(SelectCharPlace[playerid] == 142) { SetPlayerSkin(playerid, 67); SelectCharPlace[playerid] = 143; ChosenSkin[playerid] = 67; }
					else if(SelectCharPlace[playerid] == 143) { SetPlayerSkin(playerid, 68); SelectCharPlace[playerid] = 144; ChosenSkin[playerid] = 68; }
					else if(SelectCharPlace[playerid] == 144) { SetPlayerSkin(playerid, 69); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 69; }
    			}
			}
		    return 0;
		}
		else if ((strcmp("estaropa", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("estaropa")))
		{
		    PlayerInfo[playerid][pAge] = ChosenSkin[playerid];
		    SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
		    gTeam[playerid] = PlayerInfo[playerid][pTeam];
			SetPlayerToTeamColor(playerid);
			MedicBill[playerid] = 0;
		    SelectCharPlace[playerid] = 0;
		    SelectCharID[playerid] = 0;
		    SelectChar[playerid] = 0;
		    TogglePlayerControllable(playerid, 1);
		    SetCameraBehindPlayer(playerid);
		    OnPlayerUpdate(playerid);
		    return 0;
		}
	}
	if(SelectChar[playerid] == 255)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("otro", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("otro")))
		{
		    switch (SelectCharID[playerid])
			{
                case 0: //cIVILIES
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 28); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 28; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 29); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 29; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 30); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 30; }
					else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 31); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 31; }
					else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 32); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 32; }
					else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 33); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = 33; }
					else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, 7); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = 7; }
					else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, 9); SelectCharPlace[playerid] = 9; ChosenSkin[playerid] = 9; }
					else if(SelectCharPlace[playerid] == 9) { SetPlayerSkin(playerid, 10); SelectCharPlace[playerid] = 10; ChosenSkin[playerid] = 10; }
					else if(SelectCharPlace[playerid] == 10) { SetPlayerSkin(playerid, 12); SelectCharPlace[playerid] = 11; ChosenSkin[playerid] = 12; }
					else if(SelectCharPlace[playerid] == 11) { SetPlayerSkin(playerid, 14); SelectCharPlace[playerid] = 12; ChosenSkin[playerid] = 14; }
					else if(SelectCharPlace[playerid] == 12) { SetPlayerSkin(playerid, 15); SelectCharPlace[playerid] = 13; ChosenSkin[playerid] = 15; }
					else if(SelectCharPlace[playerid] == 13) { SetPlayerSkin(playerid, 18); SelectCharPlace[playerid] = 14; ChosenSkin[playerid] = 18; }
					else if(SelectCharPlace[playerid] == 14) { SetPlayerSkin(playerid, 19); SelectCharPlace[playerid] = 15; ChosenSkin[playerid] = 19; }
					else if(SelectCharPlace[playerid] == 15) { SetPlayerSkin(playerid, 20); SelectCharPlace[playerid] = 16; ChosenSkin[playerid] = 20; }
					else if(SelectCharPlace[playerid] == 16) { SetPlayerSkin(playerid, 21); SelectCharPlace[playerid] = 17; ChosenSkin[playerid] = 21; }
					else if(SelectCharPlace[playerid] == 17) { SetPlayerSkin(playerid, 22); SelectCharPlace[playerid] = 18; ChosenSkin[playerid] = 22; }
					else if(SelectCharPlace[playerid] == 18) { SetPlayerSkin(playerid, 23); SelectCharPlace[playerid] = 19; ChosenSkin[playerid] = 23; }
					else if(SelectCharPlace[playerid] == 19) { SetPlayerSkin(playerid, 24); SelectCharPlace[playerid] = 20; ChosenSkin[playerid] = 24; }
					else if(SelectCharPlace[playerid] == 20) { SetPlayerSkin(playerid, 25); SelectCharPlace[playerid] = 21; ChosenSkin[playerid] = 25; }
					else if(SelectCharPlace[playerid] == 21) { SetPlayerSkin(playerid, 34); SelectCharPlace[playerid] = 22; ChosenSkin[playerid] = 34; }
					else if(SelectCharPlace[playerid] == 22) { SetPlayerSkin(playerid, 35); SelectCharPlace[playerid] = 23; ChosenSkin[playerid] = 35; }
					else if(SelectCharPlace[playerid] == 23) { SetPlayerSkin(playerid, 36); SelectCharPlace[playerid] = 24; ChosenSkin[playerid] = 36; }
					else if(SelectCharPlace[playerid] == 24) { SetPlayerSkin(playerid, 37); SelectCharPlace[playerid] = 25; ChosenSkin[playerid] = 37; }
					else if(SelectCharPlace[playerid] == 25) { SetPlayerSkin(playerid, 38); SelectCharPlace[playerid] = 26; ChosenSkin[playerid] = 38; }
					else if(SelectCharPlace[playerid] == 26) { SetPlayerSkin(playerid, 39); SelectCharPlace[playerid] = 27; ChosenSkin[playerid] = 39; }
					else if(SelectCharPlace[playerid] == 27) { SetPlayerSkin(playerid, 40); SelectCharPlace[playerid] = 28; ChosenSkin[playerid] = 40; }
					else if(SelectCharPlace[playerid] == 28) { SetPlayerSkin(playerid, 41); SelectCharPlace[playerid] = 29; ChosenSkin[playerid] = 41; }
					else if(SelectCharPlace[playerid] == 29) { SetPlayerSkin(playerid, 42); SelectCharPlace[playerid] = 30; ChosenSkin[playerid] = 42; }
					else if(SelectCharPlace[playerid] == 30) { SetPlayerSkin(playerid, 43); SelectCharPlace[playerid] = 31; ChosenSkin[playerid] = 43; }
					else if(SelectCharPlace[playerid] == 31) { SetPlayerSkin(playerid, 44); SelectCharPlace[playerid] = 32; ChosenSkin[playerid] = 44; }
					else if(SelectCharPlace[playerid] == 32) { SetPlayerSkin(playerid, 45); SelectCharPlace[playerid] = 33; ChosenSkin[playerid] = 45; }
					else if(SelectCharPlace[playerid] == 33) { SetPlayerSkin(playerid, 46); SelectCharPlace[playerid] = 34; ChosenSkin[playerid] = 46; }
					else if(SelectCharPlace[playerid] == 34) { SetPlayerSkin(playerid, 47); SelectCharPlace[playerid] = 35; ChosenSkin[playerid] = 47; }
					else if(SelectCharPlace[playerid] == 35) { SetPlayerSkin(playerid, 48); SelectCharPlace[playerid] = 36; ChosenSkin[playerid] = 48; }
					else if(SelectCharPlace[playerid] == 36) { SetPlayerSkin(playerid, 49); SelectCharPlace[playerid] = 37; ChosenSkin[playerid] = 49; }
					else if(SelectCharPlace[playerid] == 37) { SetPlayerSkin(playerid, 58); SelectCharPlace[playerid] = 38; ChosenSkin[playerid] = 58; }
					else if(SelectCharPlace[playerid] == 38) { SetPlayerSkin(playerid, 62); SelectCharPlace[playerid] = 39; ChosenSkin[playerid] = 62; }
					else if(SelectCharPlace[playerid] == 39) { SetPlayerSkin(playerid, 72); SelectCharPlace[playerid] = 40; ChosenSkin[playerid] = 72; }
					else if(SelectCharPlace[playerid] == 40) { SetPlayerSkin(playerid, 73); SelectCharPlace[playerid] = 41; ChosenSkin[playerid] = 73; }
					else if(SelectCharPlace[playerid] == 41) { SetPlayerSkin(playerid, 82); SelectCharPlace[playerid] = 42; ChosenSkin[playerid] = 82; }
					else if(SelectCharPlace[playerid] == 42) { SetPlayerSkin(playerid, 83); SelectCharPlace[playerid] = 43; ChosenSkin[playerid] = 83; }
					else if(SelectCharPlace[playerid] == 43) { SetPlayerSkin(playerid, 84); SelectCharPlace[playerid] = 44; ChosenSkin[playerid] = 84; }
					else if(SelectCharPlace[playerid] == 44) { SetPlayerSkin(playerid, 85); SelectCharPlace[playerid] = 45; ChosenSkin[playerid] = 85; }
					else if(SelectCharPlace[playerid] == 45) { SetPlayerSkin(playerid, 87); SelectCharPlace[playerid] = 46; ChosenSkin[playerid] = 87; }
					else if(SelectCharPlace[playerid] == 46) { SetPlayerSkin(playerid, 91); SelectCharPlace[playerid] = 47; ChosenSkin[playerid] = 91; }
					else if(SelectCharPlace[playerid] == 47) { SetPlayerSkin(playerid, 95); SelectCharPlace[playerid] = 48; ChosenSkin[playerid] = 95; }
					else if(SelectCharPlace[playerid] == 48) { SetPlayerSkin(playerid, 96); SelectCharPlace[playerid] = 49; ChosenSkin[playerid] = 96; }
					else if(SelectCharPlace[playerid] == 49) { SetPlayerSkin(playerid, 97); SelectCharPlace[playerid] = 50; ChosenSkin[playerid] = 97; }
					else if(SelectCharPlace[playerid] == 50) { SetPlayerSkin(playerid, 98); SelectCharPlace[playerid] = 51; ChosenSkin[playerid] = 98; }
					else if(SelectCharPlace[playerid] == 51) { SetPlayerSkin(playerid, 100); SelectCharPlace[playerid] = 52; ChosenSkin[playerid] = 100; }
					else if(SelectCharPlace[playerid] == 52) { SetPlayerSkin(playerid, 101); SelectCharPlace[playerid] = 53; ChosenSkin[playerid] = 101; }
					else if(SelectCharPlace[playerid] == 53) { SetPlayerSkin(playerid, 101); SelectCharPlace[playerid] = 54; ChosenSkin[playerid] = 101; }
					else if(SelectCharPlace[playerid] == 54) { SetPlayerSkin(playerid, 121); SelectCharPlace[playerid] = 55; ChosenSkin[playerid] = 121; }
					else if(SelectCharPlace[playerid] == 55) { SetPlayerSkin(playerid, 128); SelectCharPlace[playerid] = 56; ChosenSkin[playerid] = 128; }
					else if(SelectCharPlace[playerid] == 56) { SetPlayerSkin(playerid, 129); SelectCharPlace[playerid] = 57; ChosenSkin[playerid] = 129; }
					else if(SelectCharPlace[playerid] == 57) { SetPlayerSkin(playerid, 130); SelectCharPlace[playerid] = 58; ChosenSkin[playerid] = 130; }
					else if(SelectCharPlace[playerid] == 58) { SetPlayerSkin(playerid, 131); SelectCharPlace[playerid] = 59; ChosenSkin[playerid] = 131; }
					else if(SelectCharPlace[playerid] == 59) { SetPlayerSkin(playerid, 132); SelectCharPlace[playerid] = 60; ChosenSkin[playerid] = 132; }
					else if(SelectCharPlace[playerid] == 60) { SetPlayerSkin(playerid, 133); SelectCharPlace[playerid] = 61; ChosenSkin[playerid] = 133; }
					else if(SelectCharPlace[playerid] == 61) { SetPlayerSkin(playerid, 135); SelectCharPlace[playerid] = 62; ChosenSkin[playerid] = 135; }
					else if(SelectCharPlace[playerid] == 62) { SetPlayerSkin(playerid, 137); SelectCharPlace[playerid] = 63; ChosenSkin[playerid] = 137; }
					else if(SelectCharPlace[playerid] == 63) { SetPlayerSkin(playerid, 138); SelectCharPlace[playerid] = 64; ChosenSkin[playerid] = 138; }
					else if(SelectCharPlace[playerid] == 64) { SetPlayerSkin(playerid, 139); SelectCharPlace[playerid] = 65; ChosenSkin[playerid] = 139; }
					else if(SelectCharPlace[playerid] == 65) { SetPlayerSkin(playerid, 140); SelectCharPlace[playerid] = 66; ChosenSkin[playerid] = 140; }
					else if(SelectCharPlace[playerid] == 66) { SetPlayerSkin(playerid, 142); SelectCharPlace[playerid] = 67; ChosenSkin[playerid] = 142; }
					else if(SelectCharPlace[playerid] == 67) { SetPlayerSkin(playerid, 143); SelectCharPlace[playerid] = 68; ChosenSkin[playerid] = 143; }
					else if(SelectCharPlace[playerid] == 68) { SetPlayerSkin(playerid, 144); SelectCharPlace[playerid] = 69; ChosenSkin[playerid] = 144; }
					else if(SelectCharPlace[playerid] == 69) { SetPlayerSkin(playerid, 145); SelectCharPlace[playerid] = 70; ChosenSkin[playerid] = 145; }
					else if(SelectCharPlace[playerid] == 70) { SetPlayerSkin(playerid, 146); SelectCharPlace[playerid] = 71; ChosenSkin[playerid] = 146; }
					else if(SelectCharPlace[playerid] == 71) { SetPlayerSkin(playerid, 151); SelectCharPlace[playerid] = 72; ChosenSkin[playerid] = 151; }
					else if(SelectCharPlace[playerid] == 72) { SetPlayerSkin(playerid, 152); SelectCharPlace[playerid] = 73; ChosenSkin[playerid] = 152; }
					else if(SelectCharPlace[playerid] == 73) { SetPlayerSkin(playerid, 153); SelectCharPlace[playerid] = 74; ChosenSkin[playerid] = 153; }
					else if(SelectCharPlace[playerid] == 74) { SetPlayerSkin(playerid, 154); SelectCharPlace[playerid] = 75; ChosenSkin[playerid] = 154; }
					else if(SelectCharPlace[playerid] == 75) { SetPlayerSkin(playerid, 156); SelectCharPlace[playerid] = 76; ChosenSkin[playerid] = 156; }
					else if(SelectCharPlace[playerid] == 76) { SetPlayerSkin(playerid, 157); SelectCharPlace[playerid] = 77; ChosenSkin[playerid] = 157; }
					else if(SelectCharPlace[playerid] == 77) { SetPlayerSkin(playerid, 158); SelectCharPlace[playerid] = 78; ChosenSkin[playerid] = 159; }
					else if(SelectCharPlace[playerid] == 78) { SetPlayerSkin(playerid, 160); SelectCharPlace[playerid] = 79; ChosenSkin[playerid] = 160; }
					else if(SelectCharPlace[playerid] == 79) { SetPlayerSkin(playerid, 161); SelectCharPlace[playerid] = 80; ChosenSkin[playerid] = 161; }
					else if(SelectCharPlace[playerid] == 80) { SetPlayerSkin(playerid, 168); SelectCharPlace[playerid] = 81; ChosenSkin[playerid] = 168; }
					else if(SelectCharPlace[playerid] == 81) { SetPlayerSkin(playerid, 176); SelectCharPlace[playerid] = 82; ChosenSkin[playerid] = 177; }
					else if(SelectCharPlace[playerid] == 82) { SetPlayerSkin(playerid, 178); SelectCharPlace[playerid] = 83; ChosenSkin[playerid] = 178; }
					else if(SelectCharPlace[playerid] == 83) { SetPlayerSkin(playerid, 180); SelectCharPlace[playerid] = 84; ChosenSkin[playerid] = 180; }
					else if(SelectCharPlace[playerid] == 84) { SetPlayerSkin(playerid, 181); SelectCharPlace[playerid] = 85; ChosenSkin[playerid] = 181; }
					else if(SelectCharPlace[playerid] == 85) { SetPlayerSkin(playerid, 182); SelectCharPlace[playerid] = 86; ChosenSkin[playerid] = 182; }
					else if(SelectCharPlace[playerid] == 86) { SetPlayerSkin(playerid, 183); SelectCharPlace[playerid] = 87; ChosenSkin[playerid] = 183; }
					else if(SelectCharPlace[playerid] == 87) { SetPlayerSkin(playerid, 184); SelectCharPlace[playerid] = 88; ChosenSkin[playerid] = 184; }
					else if(SelectCharPlace[playerid] == 88) { SetPlayerSkin(playerid, 190); SelectCharPlace[playerid] = 89; ChosenSkin[playerid] = 190; }
					else if(SelectCharPlace[playerid] == 89) { SetPlayerSkin(playerid, 192); SelectCharPlace[playerid] = 90; ChosenSkin[playerid] = 192; }
					else if(SelectCharPlace[playerid] == 90) { SetPlayerSkin(playerid, 193); SelectCharPlace[playerid] = 91; ChosenSkin[playerid] = 193; }
					else if(SelectCharPlace[playerid] == 91) { SetPlayerSkin(playerid, 195); SelectCharPlace[playerid] = 92; ChosenSkin[playerid] = 195; }
					else if(SelectCharPlace[playerid] == 92) { SetPlayerSkin(playerid, 196); SelectCharPlace[playerid] = 93; ChosenSkin[playerid] = 196; }
					else if(SelectCharPlace[playerid] == 93) { SetPlayerSkin(playerid, 197); SelectCharPlace[playerid] = 94; ChosenSkin[playerid] = 197; }
					else if(SelectCharPlace[playerid] == 94) { SetPlayerSkin(playerid, 198); SelectCharPlace[playerid] = 95; ChosenSkin[playerid] = 198; }
					else if(SelectCharPlace[playerid] == 95) { SetPlayerSkin(playerid, 199); SelectCharPlace[playerid] = 96; ChosenSkin[playerid] = 199; }
					else if(SelectCharPlace[playerid] == 96) { SetPlayerSkin(playerid, 200); SelectCharPlace[playerid] = 97; ChosenSkin[playerid] = 200; }
					else if(SelectCharPlace[playerid] == 97) { SetPlayerSkin(playerid, 201); SelectCharPlace[playerid] = 98; ChosenSkin[playerid] = 201; }
					else if(SelectCharPlace[playerid] == 98) { SetPlayerSkin(playerid, 202); SelectCharPlace[playerid] = 99; ChosenSkin[playerid] = 202; }
					else if(SelectCharPlace[playerid] == 99) { SetPlayerSkin(playerid, 203); SelectCharPlace[playerid] = 100; ChosenSkin[playerid] = 203; }
					else if(SelectCharPlace[playerid] == 100) { SetPlayerSkin(playerid, 204); SelectCharPlace[playerid] = 101; ChosenSkin[playerid] = 204; }
					else if(SelectCharPlace[playerid] == 101) { SetPlayerSkin(playerid, 206); SelectCharPlace[playerid] = 102; ChosenSkin[playerid] = 206; }
					else if(SelectCharPlace[playerid] == 102) { SetPlayerSkin(playerid, 210); SelectCharPlace[playerid] = 103; ChosenSkin[playerid] = 210; }
					else if(SelectCharPlace[playerid] == 103) { SetPlayerSkin(playerid, 212); SelectCharPlace[playerid] = 104; ChosenSkin[playerid] = 212; }
					else if(SelectCharPlace[playerid] == 104) { SetPlayerSkin(playerid, 213); SelectCharPlace[playerid] = 105; ChosenSkin[playerid] = 213; }
					else if(SelectCharPlace[playerid] == 105) { SetPlayerSkin(playerid, 214); SelectCharPlace[playerid] = 106; ChosenSkin[playerid] = 214; }
					else if(SelectCharPlace[playerid] == 106) { SetPlayerSkin(playerid, 215); SelectCharPlace[playerid] = 107; ChosenSkin[playerid] = 215; }
					else if(SelectCharPlace[playerid] == 107) { SetPlayerSkin(playerid, 216); SelectCharPlace[playerid] = 108; ChosenSkin[playerid] = 216; }
					else if(SelectCharPlace[playerid] == 108) { SetPlayerSkin(playerid, 217); SelectCharPlace[playerid] = 109; ChosenSkin[playerid] = 217; }
					else if(SelectCharPlace[playerid] == 109) { SetPlayerSkin(playerid, 218); SelectCharPlace[playerid] = 110; ChosenSkin[playerid] = 218; }
					else if(SelectCharPlace[playerid] == 110) { SetPlayerSkin(playerid, 219); SelectCharPlace[playerid] = 111; ChosenSkin[playerid] = 219; }
					else if(SelectCharPlace[playerid] == 111) { SetPlayerSkin(playerid, 220); SelectCharPlace[playerid] = 112; ChosenSkin[playerid] = 220; }
					else if(SelectCharPlace[playerid] == 112) { SetPlayerSkin(playerid, 221); SelectCharPlace[playerid] = 113; ChosenSkin[playerid] = 221; }
					else if(SelectCharPlace[playerid] == 113) { SetPlayerSkin(playerid, 222); SelectCharPlace[playerid] = 114; ChosenSkin[playerid] = 222; }
					else if(SelectCharPlace[playerid] == 114) { SetPlayerSkin(playerid, 223); SelectCharPlace[playerid] = 115; ChosenSkin[playerid] = 223; }
					else if(SelectCharPlace[playerid] == 115) { SetPlayerSkin(playerid, 224); SelectCharPlace[playerid] = 116; ChosenSkin[playerid] = 224; }
					else if(SelectCharPlace[playerid] == 116) { SetPlayerSkin(playerid, 225); SelectCharPlace[playerid] = 117; ChosenSkin[playerid] = 225; }
					else if(SelectCharPlace[playerid] == 117) { SetPlayerSkin(playerid, 226); SelectCharPlace[playerid] = 118; ChosenSkin[playerid] = 226; }
					else if(SelectCharPlace[playerid] == 118) { SetPlayerSkin(playerid, 230); SelectCharPlace[playerid] = 119; ChosenSkin[playerid] = 230; }
					else if(SelectCharPlace[playerid] == 119) { SetPlayerSkin(playerid, 231); SelectCharPlace[playerid] = 120; ChosenSkin[playerid] = 231; }
					else if(SelectCharPlace[playerid] == 120) { SetPlayerSkin(playerid, 232); SelectCharPlace[playerid] = 121; ChosenSkin[playerid] = 232; }
					else if(SelectCharPlace[playerid] == 121) { SetPlayerSkin(playerid, 233); SelectCharPlace[playerid] = 122; ChosenSkin[playerid] = 233; }
					else if(SelectCharPlace[playerid] == 122) { SetPlayerSkin(playerid, 235); SelectCharPlace[playerid] = 123; ChosenSkin[playerid] = 235; }
					else if(SelectCharPlace[playerid] == 123) { SetPlayerSkin(playerid, 236); SelectCharPlace[playerid] = 124; ChosenSkin[playerid] = 236; }
					else if(SelectCharPlace[playerid] == 124) { SetPlayerSkin(playerid, 237); SelectCharPlace[playerid] = 125; ChosenSkin[playerid] = 237; }
					else if(SelectCharPlace[playerid] == 125) { SetPlayerSkin(playerid, 238); SelectCharPlace[playerid] = 126; ChosenSkin[playerid] = 238; }
					else if(SelectCharPlace[playerid] == 126) { SetPlayerSkin(playerid, 239); SelectCharPlace[playerid] = 127; ChosenSkin[playerid] = 239; }
					else if(SelectCharPlace[playerid] == 127) { SetPlayerSkin(playerid, 241); SelectCharPlace[playerid] = 128; ChosenSkin[playerid] = 241; }
					else if(SelectCharPlace[playerid] == 128) { SetPlayerSkin(playerid, 242); SelectCharPlace[playerid] = 129; ChosenSkin[playerid] = 242; }
					else if(SelectCharPlace[playerid] == 129) { SetPlayerSkin(playerid, 243); SelectCharPlace[playerid] = 130; ChosenSkin[playerid] = 243; }
					else if(SelectCharPlace[playerid] == 130) { SetPlayerSkin(playerid, 244); SelectCharPlace[playerid] = 131; ChosenSkin[playerid] = 244; }
					else if(SelectCharPlace[playerid] == 131) { SetPlayerSkin(playerid, 245); SelectCharPlace[playerid] = 132; ChosenSkin[playerid] = 245; }
					else if(SelectCharPlace[playerid] == 132) { SetPlayerSkin(playerid, 246); SelectCharPlace[playerid] = 133; ChosenSkin[playerid] = 246; }
					else if(SelectCharPlace[playerid] == 133) { SetPlayerSkin(playerid, 247); SelectCharPlace[playerid] = 134; ChosenSkin[playerid] = 247; }
					else if(SelectCharPlace[playerid] == 134) { SetPlayerSkin(playerid, 248); SelectCharPlace[playerid] = 135; ChosenSkin[playerid] = 248; }
					else if(SelectCharPlace[playerid] == 135) { SetPlayerSkin(playerid, 249); SelectCharPlace[playerid] = 136; ChosenSkin[playerid] = 249; }
					else if(SelectCharPlace[playerid] == 136) { SetPlayerSkin(playerid, 251); SelectCharPlace[playerid] = 137; ChosenSkin[playerid] = 251; }
					else if(SelectCharPlace[playerid] == 137) { SetPlayerSkin(playerid, 252); SelectCharPlace[playerid] = 138; ChosenSkin[playerid] = 252; }
					else if(SelectCharPlace[playerid] == 138) { SetPlayerSkin(playerid, 253); SelectCharPlace[playerid] = 139; ChosenSkin[playerid] = 253; }
					else if(SelectCharPlace[playerid] == 139) { SetPlayerSkin(playerid, 63); SelectCharPlace[playerid] = 140; ChosenSkin[playerid] = 63; }
					else if(SelectCharPlace[playerid] == 140) { SetPlayerSkin(playerid, 64); SelectCharPlace[playerid] = 141; ChosenSkin[playerid] = 64; }
					else if(SelectCharPlace[playerid] == 141) { SetPlayerSkin(playerid, 66); SelectCharPlace[playerid] = 142; ChosenSkin[playerid] = 66; }
					else if(SelectCharPlace[playerid] == 142) { SetPlayerSkin(playerid, 67); SelectCharPlace[playerid] = 143; ChosenSkin[playerid] = 67; }
					else if(SelectCharPlace[playerid] == 143) { SetPlayerSkin(playerid, 68); SelectCharPlace[playerid] = 144; ChosenSkin[playerid] = 68; }
					else if(SelectCharPlace[playerid] == 144) { SetPlayerSkin(playerid, 69); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 69; }
    			}
    			case 1: //Policias
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 280); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 280; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 281); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 281; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 284); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 284; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 265); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 265; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 71); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 71; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 267); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 267; }
				}
				case 2: //FBI/ATF
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 286); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 286; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 286); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 286; }
    			}
				case 3: //Ejercito Ls
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 287); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 287; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 191); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 191; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 179); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 179; }
				}
				case 4: //Medicos
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 70); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 70; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 274); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 274; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 275); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 275; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 276); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 276; }
				}
				case 5: //Groves Street
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 105); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 105; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 106); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 106; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 107); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 107; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 269); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 269; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 271); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 271; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 293); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 293; }
				}
				case 6: //LCN
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 124); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 124; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 125); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 125; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 126); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 126; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 111); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 111; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 93); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 93; }
				}
				case 8: //Hitman Agencia
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 127); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 127; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 165); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 165; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 166); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 166; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 294); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 294; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 272); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 272; }
				}
				case 9: //CNN
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 60); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 60; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 141); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 141; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 170); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 170; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 188); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 188; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 250); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 250; }
				}
				case 10: //Taxi Cab Company
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, JoinPed[46][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = JoinPed[46][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, JoinPed[47][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = JoinPed[47][0]; }
				}
				case 11: //Driving/Flying School
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 17); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 17; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 59); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 59; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 150); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 150; }
				}
				case 13: //Mecanicos
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 50); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 50; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 8); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 8; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 134); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 134; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 268); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 268; }
				}
				case 14: //Yakuzas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 123); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 123; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 122); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 122; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 117); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 117; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 118); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 118; }
  					else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 169); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 169; }
  					else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 120); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 120; }
  					else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, 186); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = 186; }
				}
				case 15: //LATIN XIV CLICKA
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 237); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 237; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 30); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 30; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 47); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 47; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 110); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 110; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 109); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 109; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 108); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 108; }
				}
				case 16: //18th street
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 173); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 173; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 114); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 114; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 115); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 115; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 175); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 175; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 174); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 174; }
				}
				case 19: //Bomberos
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 277); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 277; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 278); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 278; }
				}
				case 20: //los puretas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 1); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 1; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 78); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 78; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 159); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 159; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 160); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 160; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 162); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 162; }
				}
				/*case 20: //los puretas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 173); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 173; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 114); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 114; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 115); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 115; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 175); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 175; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 174); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 174; }
				}*/
                case 998: //Para quitar el warning femenino
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, CivFemalePeds[1][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = CivFemalePeds[1][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, CivFemalePeds[1][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = CivFemalePeds[1][0]; }
				}
				case 999: //Para quitar el warning masculino
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, CivMalePeds[1][0]); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = CivMalePeds[1][0]; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, CivMalePeds[1][0]); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = CivMalePeds[1][0]; }
				}

			}
		    return 0;
		}
		else if ((strcmp("estaropa", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("estaropa")))
		{
		    PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
		    PlayerInfo[playerid][pChar] = ChosenSkin[playerid];
		    gTeam[playerid] = PlayerInfo[playerid][pTeam];
			SetPlayerToTeamColor(playerid);
			MedicBill[playerid] = 0;
		    SelectCharPlace[playerid] = 0;
		    SelectCharID[playerid] = 0;
		    SelectChar[playerid] = 0;
		    TogglePlayerControllable(playerid, 1);
		    SetCameraBehindPlayer(playerid);
		    OnPlayerUpdate(playerid);
		    return 0;
		}
	}
	if(RegistrationStep[playerid] > 0)
	{
	    if(RegistrationStep[playerid] == 1)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("hombre", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("hombre")))
			{
			    PlayerInfo[playerid][pSex] = 1;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok, es usted un hombre.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Cual es su fecha de nacimiento? (Usa dd/mm/aaaa)");
			    new maleskin;
			    maleskin = 26;
			    SetPlayerSkin(playerid, maleskin);
			    PlayerInfo[playerid][pChar] = maleskin;
			    RegistrationStep[playerid] = 2;
			    return 0;
			}
			else if((strcmp("mujer", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("mujer")))
			{
			    PlayerInfo[playerid][pSex] = 2;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok, es usted una mujer.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Cual es su fecha de nacimiento? (Usa dd/mm/aaaa)");
			    new femaleskin;
			    femaleskin = 56;
			    SetPlayerSkin(playerid, femaleskin);
			    PlayerInfo[playerid][pChar] = femaleskin;
			    RegistrationStep[playerid] = 2;
			    return 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Es usted un hombre o mujer? (escribe la respuesta).");
			}
			return 0;
		}
		else if(RegistrationStep[playerid] == 2)
	    {
	        new year, month,day;
			getdate(year, month, day);
	        new DateInfo[3][20];
			split(text, DateInfo, '/');
			if(year - strvalEx(DateInfo[2]) > 100 || strvalEx(DateInfo[2]) < 1 || strvalEx(DateInfo[2]) >= year)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Cual es su fecha de nacimiento? (Usa dd/mm/aaaa)");
			    return 0;
			}
			new check = year - strvalEx(DateInfo[2]);
			if(check == year)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Cual es su fecha de nacimiento? (Usa dd/mm/aaaa)");
			    return 0;
			}
			if(strvalEx(DateInfo[1]) > month)
			{
			    check -= 1;
			}
			else if(strvalEx(DateInfo[1]) == month && strval(DateInfo[0]) > day)
			{
			    check -= 1;
			}
			PlayerInfo[playerid][pAge] = check;
			format(string, sizeof(string), "Ok, usted tiene %d años.",PlayerInfo[playerid][pAge]);
			SendClientMessage(playerid, COLOR_YELLOW2, string);
			RegistrationStep[playerid] = 3;
			SendClientMessage(playerid, COLOR_LIGHTRED, "De Donde es Usted? (Escribe: Extranjero, Playa, Barrio o Centro)");
			return 0;
	    }
	    else if(RegistrationStep[playerid] == 3)
	    {
	        new idx;
	    	tmp = strtok(text, idx);
		    if((strcmp("extranjero", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("extranjero")))
			{
			    PlayerInfo[playerid][pOrigin] = 2;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok, usted aparecera en el aeropuerto.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Gracias por rellenar la informacion, que disfrute su estancia.");
				RegistrationStep[playerid] = 0;
			//     TutTime[playerid] = 1;
			        ClearChatbox(playerid, 10);
			        SendClientMessage(playerid, COLOR_YELLOW2, "Bienvenido a Los Santos.");
			        //SendClientMessage(playerid, COLOR_YELLOW2, "Se le ha marcado en el mapa en rojo la ubicación del sistema GPS");
					SendClientMessage(playerid, COLOR_GRAD1, " ");
			        TutTime[playerid] = 0; PlayerInfo[playerid][pTut] = 1;
					gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
					TogglePlayerControllable(playerid, 1);
					MedicBill[playerid] = 0;
					AfterTutorial[playerid] = 1;
					SetTimerEx("UnsetAfterTutorial", 2500, false, "i", playerid);
					SetTimerEx("UnsetFirstSpawn", 5000, false, "i", playerid);
					SetPlayerSpawn(playerid);
					//SetPlayerCheckpoint(playerid,1505.2416,-1694.5597,14.0469,5.0);
			    return 0;
			}
			else if((strcmp("playa", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("playa")))
			{
			    PlayerInfo[playerid][pOrigin] = 2;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok, usted aparecera en el aeropuerto.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Gracias por rellenar la informacion, que disfrute su estancia.");
				RegistrationStep[playerid] = 0;
			//     TutTime[playerid] = 1;
			        ClearChatbox(playerid, 10);
			        SendClientMessage(playerid, COLOR_YELLOW2, "Bienvenido a Los Santos.");
			        //SendClientMessage(playerid, COLOR_YELLOW2, "Se le ha marcado en el mapa en rojo la ubicación del sistema GPS");
					SendClientMessage(playerid, COLOR_GRAD1, " ");
			        TutTime[playerid] = 0; PlayerInfo[playerid][pTut] = 1;
					gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
					TogglePlayerControllable(playerid, 1);
					MedicBill[playerid] = 0;
					AfterTutorial[playerid] = 1;
					SetTimerEx("UnsetAfterTutorial", 2500, false, "i", playerid);
					SetTimerEx("UnsetFirstSpawn", 5000, false, "i", playerid);
					SetPlayerSpawn(playerid);
					//SetPlayerCheckpoint(playerid,1505.2416,-1694.5597,14.0469,5.0);
			    return 0;
			}
			else if((strcmp("barrio", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("barrio")))
			{
			    PlayerInfo[playerid][pOrigin] = 3;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok, usted aparecera en el aeropuerto.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Gracias por rellenar la informacion, que disfrute su estancia.");
				RegistrationStep[playerid] = 0;
			  //   TutTime[playerid] = 1;
			        ClearChatbox(playerid, 10);
			        SendClientMessage(playerid, COLOR_YELLOW2, "Bienvenido a Los Santos.");
			        //SendClientMessage(playerid, COLOR_YELLOW2, "Se le ha marcado en el mapa en rojo la ubicación del sistema GPS");
					SendClientMessage(playerid, COLOR_GRAD1, " ");
			        TutTime[playerid] = 0; PlayerInfo[playerid][pTut] = 1;
					gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
					TogglePlayerControllable(playerid, 1);
					MedicBill[playerid] = 0;
					AfterTutorial[playerid] = 1;
					SetTimerEx("UnsetAfterTutorial", 2500, false, "i", playerid);
					SetTimerEx("UnsetFirstSpawn", 5000, false, "i", playerid);
					SetPlayerSpawn(playerid);
					//SetPlayerCheckpoint(playerid,1505.2416,-1694.5597,14.0469,5.0);
			    return 0;
			}
			else if((strcmp("centro", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("centro")))
			{
			    PlayerInfo[playerid][pOrigin] = 4;
			    SendClientMessage(playerid, COLOR_YELLOW2, "Ok, usted aparecera en el aeropuerto.");
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Gracias por rellenar la informacion, que disfrute su estancia.");
				RegistrationStep[playerid] = 0;
			  //  TutTime[playerid] = 1;
			        ClearChatbox(playerid, 10);
			        SendClientMessage(playerid, COLOR_YELLOW2, "Bienvenido a Los Santos.");
			        //SendClientMessage(playerid, COLOR_YELLOW2, "Se le ha marcado en el mapa en rojo la ubicación del sistema GPS");
					SendClientMessage(playerid, COLOR_GRAD1, " ");
			        TutTime[playerid] = 0; PlayerInfo[playerid][pTut] = 1;
					gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
					TogglePlayerControllable(playerid, 1);
					MedicBill[playerid] = 0;
					AfterTutorial[playerid] = 1;
					SetTimerEx("UnsetAfterTutorial", 2500, false, "i", playerid);
					SetTimerEx("UnsetFirstSpawn", 5000, false, "i", playerid);
					SetPlayerSpawn(playerid);
					//SetPlayerCheckpoint(playerid,1505.2416,-1694.5597,14.0469,5.0);
			    return 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "De Donde es Usted? (Escribe: Extranjero, Playa, Barrio o Centro)");
			}
			return 0;
	    }
		return 0;
	}
	if(MarriageCeremoney[playerid] > 0)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("yes", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("yes")))
		{
		    if(GotProposedBy[playerid] < 999)
		    {
			    if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
				    format(string, sizeof(string), "Priest: %s do you take %s as your lovely Wife? (type 'yes', anything else will reject the Marriage).", giveplayer,sendername);
					SendClientMessage(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
			}
			else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Priest: %s and %s i pronounce you now...Husband & Wife, you may kiss the Bride.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Priest: %s and %s i pronounce you now...Husband & Wife, you may kiss the Groom.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Marriage News: We have a new lovely couple, %s & %s have been married.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
					    format(string, sizeof(string), "Priest: %s and %s i pronounce you now...Husband & Husband, you may kiss the Bride.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Priest: %s and %s i pronounce you now...Husband & Husband, you may kiss the Groom.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Marriage News: We have a new Gay couple, %s & %s have been married.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
					    format(string, sizeof(string), "Priest: %s and %s i pronounce you now...Wife & Wife, you may kiss the Bride.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Priest: %s and %s i pronounce you now...Wife & Wife, you may kiss the Groom.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Marriage News: We have a new Lesbian couple, %s & %s have been married.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(string, sizeof(string), "%s", sendername);
					strmid(PlayerInfo[ProposedTo[playerid]][pMarriedTo], string, 0, strlen(string), 255);
					format(string, sizeof(string), "%s", giveplayer);
					strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
					SafeGivePlayerMoney(playerid, - 20000);
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pPhousekey] = PlayerInfo[playerid][pPhousekey];
					PlayerInfo[ProposedTo[playerid]][pPbiskey] = PlayerInfo[playerid][pPbiskey];
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
		else
		{
		    if(GotProposedBy[playerid] < 999)
		    {
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* You didn't want to Marry %s, no 'yes' was said.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s did't want to Marry you, no 'yes' was said.",sendername);
				    SendClientMessage(GotProposedBy[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
		    }
		    else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* You didn't want to Marry %s, no 'yes' was said.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s did't want to Marry you, no 'yes' was said.",sendername);
				    SendClientMessage(ProposedTo[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
	    return 0;
	}
	if(WritingPaper[playerid] > 0)
	{
	    new line;
        new nstring[256];
        new idx;
        new length = strlen(text);
		while ((idx < length) && (text[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = text[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
		    if(WritingLine[playerid] == 1) { SendClientMessage(playerid, COLOR_GRAD2, "* Please type in the Title of your Newspaper."); }
		    else { SendClientMessage(playerid, COLOR_LIGHTRED, "* Please type in a Text Line of your Newspaper."); }
			return 0;
		}
		format(nstring, sizeof(nstring), "%s", text);
		switch(WritingLine[playerid])
		{
		    case 1:
		    {
		        new fstring[MAX_PLAYER_NAME];
		        GetPlayerName(playerid, sendername, sizeof(sendername));
				format(fstring, sizeof(fstring), "%s", sendername);
				strmid(PaperInfo[WritingPaperNumber[playerid]][PaperMaker], fstring, 0, strlen(fstring), 255);
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperTitle], nstring, 0, strlen(nstring), 255);
		        line = 0; WritingLine[playerid] = 2;
		        SendClientMessage(playerid, COLOR_LIGHTRED, "* Now you can write down the News Lines, 7 remaining.");
		    }
		    case 2:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText1], nstring, 0, strlen(nstring), 255);
		        line = 1; WritingLine[playerid] = 3;
		    }
		    case 3:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText2], nstring, 0, strlen(nstring), 255);
		        line = 2; WritingLine[playerid] = 4;
		    }
		    case 4:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText3], nstring, 0, strlen(nstring), 255);
		        line = 3; WritingLine[playerid] = 5;
		    }
		    case 5:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText4], nstring, 0, strlen(nstring), 255);
		        line = 4; WritingLine[playerid] = 6;
		    }
		    case 6:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText5], nstring, 0, strlen(nstring), 255);
		        line = 5; WritingLine[playerid] = 7;
		    }
		    case 7:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText6], nstring, 0, strlen(nstring), 255);
		        line = 6; WritingLine[playerid] = 8;
		    }
		    case 8:
		    {
		        strmid(PaperInfo[WritingPaperNumber[playerid]][PaperText7], nstring, 0, strlen(nstring), 255);
		        PaperInfo[WritingPaperNumber[playerid]][PaperUsed] = 1;
		        SavePapers();
		        line = 7; WritingLine[playerid] = 0; WritingPaper[playerid] = 0; WritingPaperNumber[playerid] = 999;
		    }
		}
		if(line > 0)
		{
			format(string, sizeof(string), "* You wrote Line %d of the Newspaper.", line);
			SendClientMessage(playerid, COLOR_WHITE, string);
			if(line == 7)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "* Your Newspaper has been added to the News List (for Paper Boys).");
			}
		}
	    return 0;
	}
	if(ConnectedToPC[playerid] == 255)
	{
		new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("Encargosh", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("encargosh")))
		{
		    if(PlayerInfo[playerid][pRank] < 4)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Only Hitman with Rank 4 or above can search and assign Contracts !");
		        return 0;
		    }
		    SearchingHit(playerid);
			return 0;
		}
		else if ((strcmp("Nots", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("nots")))
		{
		    	new x_nr[256];
				x_nr = strtok(text, idx);

				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Ultimas (NOTS) Hitmans __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: Nots [numero], Nots delete [numero] o Nots delete all");
					format(string, sizeof(string), "1: %s :: Hitman: %s", News[hAdd1], News[hContact1]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "2: %s :: Hitman: %s", News[hAdd2], News[hContact2]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "3: %s :: Hitman: %s", News[hAdd3], News[hContact3]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "4: %s :: Hitman: %s", News[hAdd4], News[hContact4]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "5: %s :: Hitman: %s", News[hAdd5], News[hContact5]);
					SendClientMessage(playerid, COLOR_GREY, string);
					SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________|");
					return 0;
				}//lets start
				if(strcmp(x_nr,"1",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Already placed a News Message, it must be deleted first !"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   You must be Rank 3 to write messages to the News Channel !"); return 0; }
				    if(News[hTaken1] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text to short !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact1], string, 0, strlen(string), 255);
						News[hTaken1] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "* You placed a News Message on the Hitman Agency's News Channel.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 1 is already Taken !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"2",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Already placed a News Message, it must be deleted first !"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   You must be Rank 3 to write messages to the News Channel !"); return 0; }
				    if(News[hTaken2] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text to short !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact2], string, 0, strlen(string), 255);
						News[hTaken2] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "* You placed a News Message on the Hitman Agency's News Channel.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 2 is already Taken !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"3",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Already placed a News Message, it must be deleted first !"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   You must be Rank 3 to write messages to the News Channel !"); return 0; }
				    if(News[hTaken3] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text to short !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact3], string, 0, strlen(string), 255);
						News[hTaken3] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "* You placed a News Message on the Hitman Agency's News Channel.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 3 is already Taken !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"4",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Already placed a News Message, it must be deleted first !"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   You must be Rank 3 to write messages to the News Channel !"); return 0; }
				    if(News[hTaken4] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text to short !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact4], string, 0, strlen(string), 255);
						News[hTaken4] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "* You placed a News Message on the Hitman Agency's News Channel.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 4 is already Taken !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"5",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Already placed a News Message, it must be deleted first !"); return 0; }
				    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   You must be Rank 3 to write messages to the News Channel !"); return 0; }
				    if(News[hTaken5] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   News Text to short !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact5], string, 0, strlen(string), 255);
						News[hTaken5] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "* You placed a News Message on the Hitman Agency's News Channel.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Spot 5 is already Taken !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"delete",true) == 0)
				{
				    if(PlayerInfo[playerid][pRank] < 4)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   You must be Rank 4 to delete messages from the News Channel !");
				        return 0;
				    }
				    new string1[MAX_PLAYER_NAME];
				    new x_tel[256];
					x_tel = strtok(text, idx);
					if(!strlen(x_tel)) {
					    SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: News delete [number] or News delete all.");
					    return 0;
					}
                    if(strcmp(x_tel,"1",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact1], string1, 0, strlen(string1), 255);
						News[hTaken1] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* You deleted News Message (1) from the Hitman Agency's News Channel.");
						return 0;
                    }
                    else if(strcmp(x_tel,"2",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact2], string1, 0, strlen(string1), 255);
						News[hTaken2] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* You deleted News Message (2) from the Hitman Agency's News Channel.");
						return 0;
                    }
                    else if(strcmp(x_tel,"3",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact3], string1, 0, strlen(string1), 255);
						News[hTaken3] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* You deleted News Message (3) from the Hitman Agency's News Channel.");
						return 0;
                    }
                    else if(strcmp(x_tel,"4",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact4], string1, 0, strlen(string1), 255);
						News[hTaken4] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* You deleted News Message (4) from the Hitman Agency's News Channel.");
						return 0;
                    }
                    else if(strcmp(x_tel,"5",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact5], string1, 0, strlen(string1), 255);
						News[hTaken5] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* You deleted News Message (5) from the Hitman Agency's News Channel.");
						return 0;
                    }
                    else if(strcmp(x_tel,"all",true) == 0)
                    {
                        format(string, sizeof(string), "Nothing"); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact1], string1, 0, strlen(string1), 255);
						News[hTaken1] = 0;
						format(string, sizeof(string), "Nothing"); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact2], string1, 0, strlen(string1), 255);
						News[hTaken2] = 0;
						format(string, sizeof(string), "Nothing"); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact3], string1, 0, strlen(string1), 255);
						News[hTaken3] = 0;
						format(string, sizeof(string), "Nothing"); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact4], string1, 0, strlen(string1), 255);
						News[hTaken4] = 0;
						format(string, sizeof(string), "Nothing"); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "No-one");	strmid(News[hContact5], string1, 0, strlen(string1), 255);
						News[hTaken5] = 0;
						SendClientMessage(playerid, COLOR_WHITE, "* You deleted all the News Message from the Hitman Agency's News Channel.");
						return 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "ESCRIBE: News delete [number] or News delete all.");
					    return 0;
                    }
				}
				else { return 0; }
		}
		else if ((strcmp("Darenca", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("darenca")))
		{
		    if(PlayerInfo[playerid][pRank] < 4)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Necesitas nivel 4 Hitman, para dar contratos !");
		        return 0;
		    }
		    if(hitfound == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Mira la lista de contratos primero !");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "ESCRIBE: Darcontrato [ID o Nombre]");
				return 0;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(PlayerInfo[giveplayerid][pMember] == 8 || PlayerInfo[giveplayerid][pLeader] == 8)
				    {
					    if(GoChase[giveplayerid] < 999)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   That Hitman is already busy with a Contract !");
							return 0;
					    }
					    if(IsPlayerConnected(hitid))
				    	{
				        	GetPlayerName(playerid, sendername, sizeof(sendername));
				        	GetPlayerName(giveplayerid, giver, sizeof(giver));
				        	GetPlayerName(hitid, giveplayer, sizeof(giveplayer));
				        	//format(string, sizeof(string), "* You assigned%s to kill: %s(ID:%d), for $%d.", giver, giveplayer, hitid, PlayerInfo[hitid][pValue]);
		    				//SendClientMessage(playerid, COLOR_YELLOW, string);
				        	//format(string, sizeof(string), "* Hitman %s has assigned you to kill: %s(ID:%d), for $%d.", sendername, giveplayer, hitid, PlayerInfo[hitid][pValue]);
		    				//SendClientMessage(giveplayerid, COLOR_YELLOW, string);
		    				format(string, sizeof(string), "* Hitman %s, assigned Hitman %s to kill: %s(ID:%d), for $%d.", sendername, giver, giveplayer, hitid, PlayerInfo[hitid][pHeadValue]);
		    				SendFamilyMessage(8, COLOR_YELLOW, string);
		    				GoChase[giveplayerid] = hitid;
		    				GetChased[hitid] = giveplayerid;
		    				GotHit[hitid] = 1;
		    				hitid = 0;
		    				hitfound = 0;
				        	return 0;
				    	}
				    	else
				    	{
				        	SendClientMessage(playerid, COLOR_GREY, "   The Contracted Person is offline, use Contracts in the Portable again !");
				        	return 0;
				    	}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   That player is not a Hitman !");
						return 0;
					}
				}
				return 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   That Hitman is not Online, or ain't a Hitman !");
			    return 0;
			}
		}
		else if ((strcmp("Rango", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Rango")))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|__________________ Miembros __________________|");
		    for(new i=0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMember] == 8||PlayerInfo[i][pLeader] == 8)
				    {
						GetPlayerName(i, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* %s: Rango %d", giveplayer,PlayerInfo[i][pRank]);
						SendClientMessage(playerid, COLOR_GREY, string);
					}
				}
			}
		}
/*		else if ((strcmp("Envio", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Envio")))
		{
		    if(OrderReady[playerid] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Recoge primero el otro envio en el HQ !");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if ((strcmp("1", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("1")))
			{
			    if(PlayerInfo[playerid][pRank] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Tu rango es demasiado bajo para este envio !"); return 0; }
			    if(GetPlayerMoney(playerid) > 6499)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Pides el encargo 1 ($2500), sera enviado al interior de la HQ.");
			        OrderReady[playerid] = 1;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Tu no puedes pagar este envio !");
			        return 0;
			    }
			}
			else if ((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    if(PlayerInfo[playerid][pRank] < 2) { SendClientMessage(playerid, COLOR_GREY, "   Tu rango es demasiado bajo para este envio !"); return 0; }
			    if(GetPlayerMoney(playerid) > 1599)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Pides el encargo 2 ($1600), sera enviado al interior de la HQ.");
			        OrderReady[playerid] = 2;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Tu no puedes pagar este envio !");
			        return 0;
			    }
			}
			else if ((strcmp("3", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("3")))
			{
			    if(PlayerInfo[playerid][pRank] < 2) { SendClientMessage(playerid, COLOR_GREY, "   Tu rango es demasiado bajo para este envio !"); return 0; }
			    if(GetPlayerMoney(playerid) > 1599)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Pides el encargo 3 ($1600), sera enviado al interior de la HQ.");
			        OrderReady[playerid] = 3;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Tu no puedes pagar este envio !");
			        return 0;
			    }
			}
			else if ((strcmp("4", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("4")))
			{
			    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Tu rango es demasiado bajo para este envio !"); return 0; }
			    if(GetPlayerMoney(playerid) > 2099)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Pides el encargo 4 ($2100), sera enviado al interior de la HQ.");
			        OrderReady[playerid] = 4;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Tu no puedes pagar este envio !");
			        return 0;
			    }
			}
			else if ((strcmp("5", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("5")))
			{
			    if(PlayerInfo[playerid][pRank] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Tu rango es demasiado bajo para este envio !"); return 0; }
			    if(GetPlayerMoney(playerid) > 2299)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Pides el encargo 5 ($2300), sera enviado al interior de la HQ.");
			        OrderReady[playerid] = 5;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Tu no puedes pagar este envio !");
			        return 0;
			    }
			}
			else if ((strcmp("6", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("6")))
			{
			    if(PlayerInfo[playerid][pRank] < 4) { SendClientMessage(playerid, COLOR_GREY, "   Tu rango es demasiado bajo para este envio !"); return 0; }
			    if(GetPlayerMoney(playerid) > 3199)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Pides el encargo 6 ($3200), sera enviado al interior de la HQ.");
			        OrderReady[playerid] = 6;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Tu no puedes pagar este envio !");
			        return 0;
			    }
			}
			else if ((strcmp("7", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("7")))
			{
			    if(PlayerInfo[playerid][pRank] < 4) { SendClientMessage(playerid, COLOR_GREY, "   Tu rango es demasiado bajo para este envio !"); return 0; }
			    if(GetPlayerMoney(playerid) > 3899)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "* Pides el encargo 7 ($3900), sera enviado al interior de la HQ.");
			        OrderReady[playerid] = 7;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Tu no puedes pagar este envio !");
			        return 0;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "|__________________ Envios disponibles __________________|");
			    if(PlayerInfo[playerid][pRank] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(1) ($1500) Rango 1 - 5: Cuchillo, Revolver"); }
			    if(PlayerInfo[playerid][pRank] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(2) ($1600) Rango 2 - 5: Escopeta, Tec-9"); }
			    if(PlayerInfo[playerid][pRank] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(3) ($1600) Rango 2 - 5: Recortada, Mac-10"); }
			    if(PlayerInfo[playerid][pRank] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(4) ($2100) Rango 3 - 5: SMG, Kalashnikov"); }
			    if(PlayerInfo[playerid][pRank] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(5) ($2300) Rango 3 - 5: SMG, M-4"); }
			    if(PlayerInfo[playerid][pRank] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(6) ($3200) Rango 4 - 5: Rifle de Francotirador"); }
			    if(PlayerInfo[playerid][pRank] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(7) ($3900) Rango 4 - 5: Bombas Lapa"); }
			    SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________|");
			    return 0;
			}
		} */
		else if ((strcmp("Apagar", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("apagar")))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "* Has apagado tu portatil.");
      		ConnectedToPC[playerid] = 0;
		    return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "|___ Agencia Hitman ___|");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Nots");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Encargosh");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Darenca");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Inicio");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Envio");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Rango");
		    SendClientMessage(playerid, COLOR_YELLOW2, "| - Apagar");
		    SendClientMessage(playerid, COLOR_YELLOW2, "|");
			SendClientMessage(playerid, COLOR_WHITE, "|_________________|00:00|");
		    return 0;
		}
	    return 0;
	}
	if(CallLawyer[playerid] == 111)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("si", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("yes")))
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "** %s esta en la carcel !! Y ha pedido un abogado.", sendername);
	    	SendJobMessage(2, TEAM_AZTECAS_COLOR, string);
	    	SendJobMessage(2, TEAM_AZTECAS_COLOR, "* Pdele a un policia que acepte la liberacion /aceptar Abogado ID.");
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "Se ha enviado un mensaje a todos los abogados.");
	    	WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
	    	return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "No hay abogados conectados, sentencia comenzada");
		    WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
		    return 0;
		}
	}
	if(TalkingLive[playerid] != 255)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
		{
		    format(string, sizeof(string), "Reportero/a %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		else
		{
		    format(string, sizeof(string), "Invitado %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		return 0;
	}
	if(Mobile[playerid] != 255)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(UnidentifedCall[playerid] == 1)
		{
		    format(string, sizeof(string), "Enmascarado Dice (Tlf): %s", text);
		}
		else
		{
			format(string, sizeof(string), "Desconocido Dice (Tlf): %s", text);
		}
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		//printf("callers line %d called %d caller %d",Mobile[Mobile[playerid]],Mobile[playerid],playerid);
		if(Mobile[playerid] == 914)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: Sorry I don't understand?");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: We have alerted all units in the area.");
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Thank you for reporting this incident");
			format(wanted, sizeof(wanted), "Dispatch: All Units IA: Caller: %s",turner);
			SendTeamBeepMessage(1, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "Dispatch: Incident: %s",text);
			SendTeamMessage(1, TEAM_CYAN_COLOR, wanted);
			new Float:trace_x, Float:trace_y, Float:trace_z;
			GetPlayerPos(playerid, trace_x, trace_y, trace_z);
			emdtrace = 1; emdtrace_x = trace_x; emdtrace_y = trace_y; emdtrace_z = trace_z;
			SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
			Mobile[playerid] = 255;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry i dont understand?");
				return 0;
			}
			if ((strcmp("no", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("no")))
			{
				new turner[MAX_PLAYER_NAME];
				new wanted[128];
				GetPlayerName(playerid, turner, sizeof(turner));
				SendClientMessage(playerid, COLOR_DBLUE, "Despacho policial: Hemos alertado a la policia.");
				SendClientMessage(playerid, COLOR_DBLUE, "Gracias por denunciar el crimen");
				format(wanted, sizeof(wanted), "HQ: A todas las unidades: Denunciante: %s",turner);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				format(wanted, sizeof(wanted), "HQ: Delito: %s, Sospechoso: Sin Reconocer",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				new Float:trace_x, Float:trace_y, Float:trace_z;
				GetPlayerPos(playerid, trace_x, trace_y, trace_z);
				pdtrace = 1; pdtrace_x = trace_x; pdtrace_y = trace_y; pdtrace_z = trace_z;
				SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
				Mobile[playerid] = 255;
				return 0;
			}
			new badguy;
			//badguy = strval(tmp);
			badguy = ReturnUser(tmp);
			if (IsPlayerConnected(badguy))
			{
			    if(badguy != INVALID_PLAYER_ID)
			    {
					if (gTeam[badguy] == 2 || gTeam[badguy] == 1)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police Dispatch: You will have to contact internal affairs. This is an emergency line");
						SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
						Mobile[playerid] = 255;
						return 0;
					}
					if (WantedPoints[badguy] > 0)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police Dispatch: Units are already assigned to that case");
						SendClientMessage(playerid, COLOR_DBLUE, "Thank you for reporting this crime");
						SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
						Mobile[playerid] = 255;
						return 0;
					}
					if (badguy == playerid)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police Dispatch: Dont Fool Around, This is an emergency line.");
						SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
						Mobile[playerid] = 255;
						return 0;
					}
					SendClientMessage(playerid, COLOR_DBLUE, "Police Dispatch: We have alerted all units in the area.");
					SendClientMessage(playerid, COLOR_DBLUE, "Thank you for reporting this crime");
					new Float:trace_x, Float:trace_y, Float:trace_z;
					GetPlayerPos(playerid, trace_x, trace_y, trace_z);
					pdtrace = 1; pdtrace_x = trace_x; pdtrace_y = trace_y; pdtrace_z = trace_z;
					SetPlayerCriminal(badguy,playerid, PlayerCrime[playerid][pAccusing]);
					if(WantedPoints[badguy] > 0) { } else { WantedPoints[badguy] += 2; }
					SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
					Mobile[playerid] = 255;
					return 0;
				}//invalid id
				return 0;
			}//not connected
			else
			{
				format(string, sizeof(string), "Policia: %s no existe, Si no sabe diga No",tmp);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: No entendi?");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Policia: Si sabe el nombre del delincuente digalo, caso contrario, diga NO.");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: No entendi, police o paramedic?");
				return 0;
			}
			else if ((strcmp("police", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("police")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCIAS: Hemos atendidos su llamada.");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "HQ: Haga una breve descripcion de la denuncia.");
				return 0;
			}
			else if ((strcmp("paramedic", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("paramedic")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: I am patching you to  Paramedic HQ, please hold.");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: Please give me a short description of the Incident.");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: No entendi, police o paramedic?");
				return 0;
			}
		}
		if(Mobile[playerid] == 3900)
		{
			SendFamilyMessage(9, COLOR_GREEN, "You have one new message:");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "[ID:%d] %s Dice: %s", playerid, sendername, text);
			SendFamilyMessage(9, COLOR_GREEN, string);
			SendClientMessage(playerid, COLOR_GREEN, "ABC Studio: Thanks for your information !");
			SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
			Mobile[playerid] = 255;
			return 0;
		}
		/*if(Mobile[playerid] == 1180)
		{
		    if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GREEN, "Advertisement business: What would you like to advertise?");
				return 0;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(text);
			while ((idx < length) && (text[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = text[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if ((!adds) && (PlayerInfo[playerid][pAdmin] < 1))
			{
				format(string, sizeof(string), "   Please try again later %d seconds between Advertisements !",  (addtimer/1000));
				SendClientMessage(playerid, COLOR_GRAD2, string);
				return 1;

			}
			new payout = idx * 10;
			if(GetPlayerMoney(playerid) < payout + 200)
	        {
	            format(string, sizeof(string), "* You used %d characters which cost $%d, you don't have enough.", offset, payout);
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	            return 1;
	        }
	        SafeGivePlayerMoney(playerid, - payout);
	        SafeGivePlayerMoney(playerid, - 200);
			SBizzInfo[7][sbTill] += payout + 200;
			ExtortionSBiz(7, payout + 200);
			format(string, sizeof(string), "[Advert] %s, Phone: %d",  result, PlayerInfo[playerid][pPnumber]);
			OOCNews(TEAM_GROVE_COLOR,string);
			format(string, sizeof(string), "~r~Paid $%d~n~~w~Message contained: %d Characters~n~~w~Plus ~g~200$~w~ for ad through phone", payout, idx);
			GameTextForPlayer(playerid, string, 5000, 1);
			if (PlayerInfo[playerid][pAdmin] < 1){SetTimer("AddsOn", addtimer, 0);adds = 0;}
		}*/
		if(IsPlayerConnected(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				if(PlayerInfo[Mobile[playerid]][pSpeaker] == 1)
				{
					ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW,"Theres nobody there");
		}
		return 0;
	}
	if (BusShowLocation[playerid][0] == 1)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("yes", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("yes")))
		{
			SetPlayerCheckpoint(playerid, BusShowLocation[playerid][1], BusShowLocation[playerid][2], BusShowLocation[playerid][3], 3.0);
			SendClientMessage(playerid, COLOR_YELLOW, "There's the location (red checkpoint), you'd better hurry!");
			BusShowLocation[playerid][0] = 0;
			BusShowLocationC[playerid] = 1;
			return 0;
		}
		else
		{
			BusShowLocation[playerid][0] = 0;
			return 0;
		}
	}
	if (realchat)
	{
	    if(gPlayerLogged[playerid] == 0)
	    {
	        return 0;
      	}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "Enmascarado Dice: %s", text);
				ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
			else
			{
		    	format(string, sizeof(string), "%s Dice: %s", sendername, text);
		    	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
		}
		else
		{
		    new carid = GetPlayerVehicleID(playerid);
		    new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
		    if(IsABike(carid) || IsAOBike(carid) || IsAPizzabike(carid) || IsAPlane(carid) || IsABoat(carid) || IsASweeper(carid) || IsAHarvest(carid) || IsADrugHarvest(carid) || IsATank(carid) || pveh == 523 || pveh == 480 || pveh == 567 || pveh == 533 || pveh == 555 || pveh == 539 || pveh == 572 || pveh == 571 || pveh == 530 || pveh == 457 || pveh == 575 || pveh == 536 || pveh == 424)
		    {
		        if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(string, sizeof(string), "Enmascarado Dice: %s", text);
					ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
		    		format(string, sizeof(string), "%s Dice: %s", sendername, text);
		    		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
		    }
		    else
		    {
		    	if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
		    	{
		    		if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(string, sizeof(string), "(Ventanilla Subida) Desconocido Dice: %s", text);
						ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
					else
					{
		    			format(string, sizeof(string), "(Ventanilla Subida) %s Dice: %s", sendername, text);
		    			ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
				}
				else
				{
			    	if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(string, sizeof(string), "(Ventanilla Abierta) Desconocido Dice: %s", text);
						ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
					else
					{
		    			format(string, sizeof(string), "(Ventanilla Abierta) %s Dice: %s", sendername, text);
		    			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					}
				}
			}
		}
		return 0;
	}
	return 1;
}

/*public OnPlayerPrivmsg(playerid, recieverid, text[])
{
	return 0;
}*/

public SetCamBack(playerid)
{
    if(IsPlayerConnected(playerid))
    {
		new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetPlayerPos(playerid, -1863.15, -21.6598, 1060.15); // Warp the player
		SetPlayerInterior(playerid,14);
	}
}

public FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

public AddsOn()
{
	adds=1;
	return 1;
}

public BackupClear(playerid, calledbytimer)
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
		{
			if (PlayerInfo[playerid][pRequestingBackup] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1)
						{
							SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
						}
					}
				}
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Su petición de copia de seguridad se ha borrado.");
				}
				else
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Su petición de copia de seguridad se ha borrado de forma automática.");
				}
				PlayerInfo[playerid][pRequestingBackup] = 0;
			}
			else
			{
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, COLOR_DARKNICERED, "No has pedido refuerzos!");
				}
			}
		}
		else
		{
			if (calledbytimer != 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "No eres un policia!");
			}
		}
	}
	return 1;
}

/*public ResetRoadblockTimer()
{
	roadblocktimer = 0;
	return 1;
}*/

public RemoveRoadblock(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1)
			{
				DisablePlayerCheckpoint(i);
			}
		}
	}
	DestroyObject(PlayerInfo[playerid][pRoadblock]);
	PlayerInfo[playerid][pRoadblock] = 0;
	return 1;
}

public IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (x > minx && x < maxx && y > miny && y < maxy) return 1;
    return 0;
}

public AdvertiseToPlayersAtBusStop(Float:stopX, Float:stopY, Float:stopZ, eastorwest)
{
	for (new i; i<=MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && BusrouteWest[i][0] == 0 && BusrouteEast[i][0] == 0)
		{
			if (PlayerToPoint(100, i, stopX, stopY, stopZ))
			{
				SendClientMessage(i, TEAM_AZTECAS_COLOR, "A bus is enroute to a nearby stop. The route is as follows:");
				if (eastorwest == 0) SendBusRoute(i, 0);
				else SendBusRoute(i, 1);
				SendClientMessage(i, TEAM_AZTECAS_COLOR, "Would you like to be shown the location of this stop? (yes/no)");
				BusShowLocation[i][0] = 1;
				BusShowLocation[i][1] = stopX;
				BusShowLocation[i][2] = stopY;
				BusShowLocation[i][3] = stopZ;
			}
		}
	}
	return 1;
}

public SendBusRoute(playerid, eastorwest)
{
	if (eastorwest == 0)
	{
		// East
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Bus Station >> Airport >> Willowfield Factory >> Loco >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "6 Street Plaza >> 10 Green Bottles >> Pigpen >> Golden Palm >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Jefferson Motel >> Glen Park >> Back to Bus stop <<");
	}
	else
	{
		// West
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Bus Station >> Alhambra >> Glen Park >> Vinewood Burger >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Vice Theater >> Bank >> Rodeo >> Sana Maria Beach >> Verona Beach >>");
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Pershing Square >> Back to Bus stop <<");
	}
	return 1;
}

public IsInBusrouteZone(playerid)
{
	if (IsPlayerInArea(playerid, 1722.3599, 2901.8652, -2694.5417, -904.3515)) return 0; // east
	else if (IsPlayerInArea(playerid, 127.4722, 1722.3599, -2694.5417, -904.3515)) return 1; // west
	return 1;
}

public BusrouteEnd(playerid, vehicleid)
{
	if (BusrouteEast[playerid][0] != 0 || BusrouteWest[playerid][0] != 0)
	{
		SendClientMessage(playerid, COLOR_BLUE, "Bus route ended.");
		GameTextForPlayer(playerid, "~r~Bus Route Ended", 5000, 3);
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
	}
	DisablePlayerCheckpoint(playerid);
	if (vehicleid != 0) SetVehicleToRespawn(vehicleid);
	BusrouteEast[playerid][0] = 0;
	BusrouteEast[playerid][1] = 0;
	//BusrouteEast[playerid][2] = 0;
	BusrouteWest[playerid][0] = 0;
	BusrouteWest[playerid][1] = 0;
	//BusrouteWest[playerid][2] = 0;
	return 1;
}

public CheckForWalkingTeleport(playerid) // only put teleports ON FOOT here, use another function for vehicle ones - LordMan
{
	/*
	 *  HOW TO USE THIS FUNCTION:  GetPlayerVirtualWorld
	 *
	 *  Just use your normal PlayerToPoint functions but make them use PlayerToPointStripped instead.
	 *  Use the arguments cx,cy,cz at the end of each call (look at the others for an example).
	 *
	 */ //REVISANDO
	new Float:cx, Float:cy, Float:cz;
	GetPlayerPos(playerid, cx, cy, cz);

	if(PlayerToPointStripped(1, playerid,1554.9537,-1675.6584,16.1953, cx,cy,cz))
	{//LSPD Entrance
		GameTextForPlayer(playerid, "~w~Comisaria", 5000, 1);
		SetPlayerInterior(playerid, 6);
		SetPlayerPos(playerid,246.7079,66.2239,1003.6406);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if(PlayerToPointStripped(1, playerid,246.5325,62.4251,1003.6406, cx,cy,cz))
	{//LSPD Exit
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,1552.3231,-1674.6780,16.1953);
		PlayerInfo[playerid][pInt] = 0;
	}
	if(PlayerToPointStripped(1, playerid,953.7375,-1336.2754,13.5391, cx,cy,cz))
	{//Sex shop entrada
		GameTextForPlayer(playerid, "~w~Sex Shop", 5000, 1);
		SetPlayerInterior(playerid, 3);
		SetPlayerPos(playerid,-100.2361,-21.9346,1000.7188);
		PlayerInfo[playerid][pInt] = 3;
		new listitems[] = "1\t: Dildo Morado $300\n2\t: Dildo Mini $300\n3\t: Dildo XXL $300\n4\t: Dildo Metalico $300";
 		ShowPlayerDialog(playerid,4,DIALOG_STYLE_LIST,"Sex Shop (Mayores d 18) |Productos en Venta|",listitems,"Comprar","Salir");
	}
	else if(PlayerToPointStripped(1, playerid,-100.4211,-24.2871,1000.7188, cx,cy,cz))
	{//sex shop salida
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,954.2957,-1333.4840,13.5307);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(2.0, playerid,726.0664,-1276.1962,13.6484, cx,cy,cz)) // Entrada Paccinos
	{
		SetPlayerPos(playerid,723.5029,-1276.5929,17.6484);
		SetPlayerFacingAngle(playerid, 269.3717)
	}
	else if (PlayerToPointStripped(2.0, playerid,718.8346,-1276.3334,17.6484, cx,cy,cz)) // Salida Paccinos
	{
		SetPlayerPos(playerid,730.9106,-1276.5741,13.5668);
		SetPlayerFacingAngle(playerid, 272.8185)
	}
	else if (PlayerToPointStripped(2.0, playerid,2695.5750,-1704.5773,11.8438, cx,cy,cz))
	{
		GameTextForPlayer(playerid, "~w~Estadios Precio Entrada: ~g~$500~n~~w~Para pagar y entrar (/entrarestadio)", 5000, 1);
		//ENTRADA ESTADIO
	}
	else if(PlayerToPointStripped(1, playerid,2758.9653,-2563.7271,13.6328, cx,cy,cz))
	{//Embarcacion entrando
	    if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
	        GameTextForPlayer(playerid, "~w~Embarcaciones", 5000, 1);
	        SetPlayerPos(playerid,2749.9741,-2568.8997,13.3324);
	    }
	    else
	    {
	        GameTextForPlayer(playerid, "~w~No puedes pasar", 5000, 1);
	        SetPlayerPos(playerid,2759.1587,-2557.7073,13.6409);
	    }
	}
	else if(PlayerToPointStripped(1, playerid,2758.9653,-2567.2271,13.3336, cx,cy,cz))
	{//Embarcacion saliendo
	    if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	    {
	        GameTextForPlayer(playerid, "~w~Base", 5000, 1);
	        SetPlayerPos(playerid,2759.1587,-2557.7073,13.6409);
	    }
	    else
	    {
	        GameTextForPlayer(playerid, "~w~No puedes pasar", 5000, 1);
	        SetPlayerPos(playerid,2749.9741,-2568.8997,13.3324);
	    }
	}
	else if(PlayerToPointStripped(1, playerid,975.8063,-1544.9241,-61.1991, cx,cy,cz))
	{//azotea pureta entrando
	    if (PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
	    {
	        GameTextForPlayer(playerid, "~w~Zotea", 5000, 1);
	        SetPlayerPos(playerid,941.1304,-1550.8906,34.1719);
	    }
	    else
	    {
	        GameTextForPlayer(playerid, "~w~No puedes pasar", 5000, 1);
	        SetPlayerPos(playerid,975.9499,-1543.0985,-61.1991);
	    }
	}
	else if(PlayerToPointStripped(1, playerid,941.3912,-1553.4934,34.1719, cx,cy,cz))
	{//azotea pureta saliendo
	    if (PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
	    {
	        GameTextForPlayer(playerid, "~w~HQ Puretas", 5000, 1);
	        SetPlayerPos(playerid,975.9499,-1543.0985,-61.1991);
	    }
	    else
	    {
	        GameTextForPlayer(playerid, "~w~No puedes pasar", 5000, 1);
	        SetPlayerPos(playerid,941.1304,-1550.8906,34.1719);
	    }
	}
	else if(PlayerToPointStripped(1, playerid,910.9579,-1562.2719,-67.3062, cx,cy,cz))
	{//lola pureta entrando
 		GameTextForPlayer(playerid, "~w~Cuarto oscuro", 5000, 1);
   		SetPlayerPos(playerid,1015.4576,-1530.3453,-66.8067);
		SetPlayerFacingAngle(playerid, 0.0);
	}
	else if(PlayerToPointStripped(1, playerid,1015.4990,-1532.5725,-66.8067, cx,cy,cz))
	{//lola pureta saliendo
 		GameTextForPlayer(playerid, "~w~HQ Puretas", 5000, 1);
 		SetPlayerPos(playerid,910.8348,-1560.6128,-67.3726);
	}
	else if(PlayerToPointStripped(1, playerid,1183.6421,-1288.8228,5.5610, cx,cy,cz))
	{//azotea hospital entrando
	        GameTextForPlayer(playerid, "~w~Zotea", 5000, 1);
	        SetPlayerPos(playerid,1161.3541,-1313.3854,31.4945);
	        PlayerInfo[playerid][pInt] = 0;
	        SetPlayerInterior(playerid, 0);
    }
	else if(PlayerToPointStripped(1, playerid,1161.1058,-1316.3004,31.4950, cx,cy,cz))
	{//azotea hospital saliendo
	        GameTextForPlayer(playerid, "~w~Hospital", 5000, 1);
	        SetPlayerPos(playerid,1182.0660,-1289.1361,5.5610);
    }
/*	else if(PlayerToPointStripped(1, playerid,2310.0183,-1643.4669,14.8270, cx,cy,cz))
	{//10 green
		GameTextForPlayer(playerid, "~w~Bareto", 5000, 1);
		SetPlayerInterior(playerid, 11);
		SetPlayerPos(playerid,502.0531,-70.2137,998.7578);
		PlayerInfo[playerid][pInt] = 11;
	}
	else if(PlayerToPointStripped(1, playerid,501.8708,-67.5820,998.7578, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2307.0027,-1645.2213,14.6882);
	//	OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}*/
	else if(PlayerToPointStripped(1, playerid,2244.3423,-1665.5542,15.4766, cx,cy,cz))
	{//Binco next to 10 green
		GameTextForPlayer(playerid, "~w~Binco", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "SERVIDOR: Usa /ropa o /comprarinformal para comprar o almacenar ropa");
		SetPlayerInterior(playerid, 15);
		SetPlayerPos(playerid,207.7336,-108.6231,1005.1328);
		PlayerInfo[playerid][pInt] = 15;
	}
	else if(PlayerToPointStripped(1, playerid,207.7662,-111.2663,1005.1328, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2245.2778,-1661.1738,15.4690);
	//	OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,461.4502,-1500.7125,31.0608, cx,cy,cz))
	{//victim
		GameTextForPlayer(playerid, "~w~Victim", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "SERVIDOR: Usa /ropa o /comprarinformal para comprar o almacenar ropa");
		SetPlayerInterior(playerid, 5);
		SetPlayerPos(playerid,225.7025,-8.1229,1002.2109);
		PlayerInfo[playerid][pInt] = 5;
	}
	else if(PlayerToPointStripped(1, playerid,2112.8623,-1211.4917,23.9629, cx,cy,cz))
	{//SUBURBAN
		GameTextForPlayer(playerid, "~w~suburban", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "SERVIDOR: Usa /ropa o /comprarinformal para comprar o almacenar ropa");
		SetPlayerInterior(playerid, 1);
		SetPlayerPos(playerid,203.7114,-48.6424,1001.8047);
		PlayerInfo[playerid][pInt] = 1;
	}
	else if(PlayerToPointStripped(1, playerid,203.5924,-50.4920,1001.8047, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2112.7795,-1213.6371,23.9661);
	//	OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
	else if(PlayerToPointStripped(1, playerid,2229.9011,-1721.2582,13.5613, cx,cy,cz))
	{//Ganton Gimnasio
		GameTextForPlayer(playerid, "~w~Gimnasio", 5000, 1);
		SetPlayerInterior(playerid, 5);
		SetPlayerPos(playerid,771.9399,-2.2574,1000.7292);
		PlayerInfo[playerid][pInt] = 5;
	}
	else if(PlayerToPointStripped(1, playerid,772.3594,-5.5157,1000.7286, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2225.6699,-1725.3134,13.5586);
	//	OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}
/*	else if(PlayerToPointStripped(1, playerid,2421.4998,-1219.2438,25.5617, cx,cy,cz))
	{//Pigpen
		GameTextForPlayer(playerid, "~w~The Pig Pen", 5000, 1);
		SetPlayerInterior(playerid, 2);
		SetPlayerPos(playerid,1205.0803,-9.9519,1000.9219);
		PlayerInfo[playerid][pInt] = 2;
	}
	else if(PlayerToPointStripped(1, playerid,1204.8462,-13.8521,1000.9219, cx,cy,cz))
	{//Some teleports are fucked up but they are working
		GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,2419.5559,-1226.5612,24.9379);
	//	OnPlayerExitFood(playerid); // ?
		PlayerInfo[playerid][pInt] = 0;
	}*/
	else if (PlayerToPointStripped(1, playerid,1654.0651,-1655.6801,22.5156, cx,cy,cz))
	{
		//FBI Enter
		SetPlayerPos(playerid, 288.8567,170.6509,1007.1794);
		GameTextForPlayer(playerid, "~w~FBI Departamento",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,288.7287,167.0377,1007.1719, cx,cy,cz))
	{
		//FBI Exit
		SetPlayerPos(playerid, 1654.0856,-1658.1287,22.5156);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 180);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1658.7308,-1691.6150,15.6094, cx,cy,cz))
	{
		//FBI Enter
		SetPlayerPos(playerid, 238.4527,141.6362,1003.0234);
		GameTextForPlayer(playerid, "~w~FBI Departamento",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,238.3001,138.9406,1003.0234, cx,cy,cz))
	{
		//FBI Exit
		SetPlayerPos(playerid, 1658.7887,-1694.3134,15.6094);
		GameTextForPlayer(playerid, "~w~Aparcamientos FBI",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 180);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1463.7582,-1009.9468,26.8438, cx,cy,cz))
	{
		//BANCO enter
		SetPlayerPos(playerid, 2306.8162,-15.9612,26.7496);
		GameTextForPlayer(playerid, "~w~BANCO",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 0;
		PlayerInfo[playerid][pLocal] = 103;
	}
	else if (PlayerToPointStripped(1, playerid,2304.8457,-15.8326,26.7422, cx,cy,cz))
	{
		//BANCO exit
		SetPlayerPos(playerid, 1463.3198,-1013.1506,26.8438);
		GameTextForPlayer(playerid, "~w~Los SANTOS",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 185);
		PlayerInfo[playerid][pInt] = 0;
		PlayerInfo[playerid][pLocal] = 255;
	}
	else if (PlayerToPointStripped(1, playerid,1173.2563,-1323.3102,15.3943, cx,cy,cz))
	{
		//Hospital enter
		SetPlayerPos(playerid, 1173.4220,-1304.6926,5.5610);
		GameTextForPlayer(playerid, "~w~Hospital General",5000,1);
		//SetPlayerInterior(playerid,6);
		SetPlayerFacingAngle(playerid, 308);
		//PlayerInfo[playerid][pInt] = 6;
	}
	else if (PlayerToPointStripped(1, playerid,1172.2844,-1306.4656,5.5610, cx,cy,cz))
	{
		//Hospital exit
		SetPlayerPos(playerid, 1174.2563,-1323.3102,15.3943);
		GameTextForPlayer(playerid, "~w~Los SANTOS",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2256.0876,-1027.9374,45.5716, cx,cy,cz))
	{
		//puerta interior latin entrada
		SetPlayerPos(playerid, 2260.3987,-1035.7269,38.5247);
		GameTextForPlayer(playerid, "~w~planta baja latin",5000,1);
		//SetPlayerInterior(playerid,6);
		SetPlayerFacingAngle(playerid, 0);
		//PlayerInfo[playerid][pInt] = 6;
	}
	else if (PlayerToPointStripped(1, playerid,2260.0796,-1037.5641,38.5331, cx,cy,cz))
	{
		//puerta interior latin salida
		SetPlayerPos(playerid, 2254.9695,-1028.1000,45.5716);
		GameTextForPlayer(playerid, "~w~Latin XIV Clicka' HQ",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 90);
		PlayerInfo[playerid][pInt] = 0;
	}
 	else if (PlayerToPointStripped(1, playerid,1298.7075,-798.5981,84.1406, cx,cy,cz))  // LCN HQ
	{
		//La Famiglia Sinatra  gang hq
		if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
		{
			SetPlayerPos(playerid, 1298.8452,-794.8370,1084.0078);
			GameTextForPlayer(playerid, "~w~La Cosa Nostra HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 356);
			PlayerInfo[playerid][pInt] = 5;
		}
		else if(hqlock[luclock] == 0)
		{
		    SetPlayerPos(playerid, 1298.8452,-794.8370,1084.0078);
			GameTextForPlayer(playerid, "~w~La Cosa Nostra HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 356);
			PlayerInfo[playerid][pInt] = 5;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,1298.7285,-796.7244,1084.0078, cx,cy,cz))
	{
		//La Famiglia Sinatra gang hq
		SetPlayerPos(playerid, 1298.6263,-801.5491,84.1406);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1259.4446,-785.4531,92.0313, cx,cy,cz))  // LCN HQ AZOTEA
	{
		//La Famiglia Sinatra  gang hq
		if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
		{
			SetPlayerPos(playerid, 1262.4824,-785.5159,1091.9063);
			GameTextForPlayer(playerid, "~w~La Cosa Nostra HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 356);
			PlayerInfo[playerid][pInt] = 5;
		}
		else if(hqlock[luclock] == 0)
		{
		    SetPlayerPos(playerid, 1262.4824,-785.5159,1091.9063);
			GameTextForPlayer(playerid, "~w~La Cosa Nostra HQ",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 356);
			PlayerInfo[playerid][pInt] = 5;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,1260.8397,-785.3323,1091.9063, cx,cy,cz))
	{
		//La Famiglia Sinatra gang hq
		SetPlayerPos(playerid, 1257.2795,-785.4451,92.0302);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2650.7041,-2021.8408,14.1766, cx,cy,cz))  // Latin XIV Clicka' HQ
	{
		//Latin XIV Clicka' hq
		if(PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
		{
		    SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
			SetPlayerPos(playerid, 2254.2393,-1029.9094,45.5716);
			GameTextForPlayer(playerid, "~w~Latin XIV Clicka' HQ",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid, 69);
			SetPlayerFacingAngle(playerid, 0);
			PlayerInfo[playerid][pInt] = 0;
			TogglePlayerControllable(playerid, 0);
		    SetTimerEx("tiempocargaobjetos",1000,false,"i",playerid);
		}
		else if(hqlock[stlock] == 0)
		{
		    SetPlayerVirtualWorld(playerid, 0);
		    PlayerInfo[playerid][pInt] = 0;
		    SetPlayerPos(playerid, 2254.2393,-1029.9094,45.5716);
			GameTextForPlayer(playerid, "~w~Latin XIV Clicka' HQ",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid, 69);
			SetPlayerFacingAngle(playerid, 0);
			PlayerInfo[playerid][pInt] = 0;
			TogglePlayerControllable(playerid, 0);
		    SetTimerEx("tiempocargaobjetos",1000,false,"i",playerid);
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,2254.1714,-1031.6138,45.5716, cx,cy,cz))
	{
		//Latin XIV Clicka' hq
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerPos(playerid, 2648.3376,-2021.8663,13.5469);
		GameTextForPlayer(playerid, "~w~barrio chicano",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 90);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1530.8474,-1481.0750,9.5000, cx,cy,cz))  // hitman HQ
	{
		//hitman hq
		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
			SetPlayerPos(playerid, 2543.4417,-1305.7085,1025.0703);
			GameTextForPlayer(playerid, "~w~Hitman HQ",5000,1);
			SetPlayerInterior(playerid,2);
			SetPlayerFacingAngle(playerid, 180);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(hqlock[iolock] == 0)
		{
		    SetPlayerPos(playerid, 2543.4417,-1305.7085,1025.0703);
			GameTextForPlayer(playerid, "~w~Hitman HQ",5000,1);
			SetPlayerInterior(playerid,2);
			SetPlayerFacingAngle(playerid, 180);
			PlayerInfo[playerid][pInt] = 0;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,2541.5452,-1304.0573,1025.0703, cx,cy,cz))
	{
		//hitman hq
		SetPlayerPos(playerid, 1531.0541,-1478.6890,9.5000);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 359);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1535.9235,-1462.8531,63.8594, cx,cy,cz))  // hitman HQ azotea
	{
		//hitman hq azotea
		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
			SetPlayerPos(playerid, 2551.3257,-1294.5045,1060.9844);
			GameTextForPlayer(playerid, "~w~Hitman HQ",5000,1);
			SetPlayerInterior(playerid,2);
			SetPlayerFacingAngle(playerid, 270);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(hqlock[iolock] == 0)
		{
		    SetPlayerPos(playerid, 2551.3257,-1294.5045,1060.9844);
			GameTextForPlayer(playerid, "~w~Hitman HQ",5000,1);
			SetPlayerInterior(playerid,2);
			SetPlayerFacingAngle(playerid, 270);
			PlayerInfo[playerid][pInt] = 0;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
		}
	}
	else if (PlayerToPointStripped(2, playerid,2548.7986,-1294.6848,1060.9844, cx,cy,cz))
	{
		//hitman hq azotea
		SetPlayerPos(playerid, 1533.6857,-1462.9740,63.8594);
		GameTextForPlayer(playerid, "~w~Azotea Hitman",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 86);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,691.5795,-1275.9194,13.5607, cx,cy,cz))
	{
		//YaKuza  gang hq
		if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
		{
			SetPlayerPos(playerid, 2324.4272,-1146.0415,1050.7101);
			GameTextForPlayer(playerid, "~w~YaKuza HQ",5000,1);
			SetPlayerInterior(playerid,12);
		    SetPlayerVirtualWorld(playerid,68);
			SetPlayerFacingAngle(playerid, 0);
			PlayerInfo[playerid][pInt] = 1;
		}
		else if(hqlock[guclock] == 0)
		{
		    SetPlayerPos(playerid, 2324.4272,-1146.0415,1050.7101);
			GameTextForPlayer(playerid, "~w~YaKuza HQ",5000,1);
			SetPlayerInterior(playerid,12);
			SetPlayerVirtualWorld(playerid, 68);
			SetPlayerFacingAngle(playerid, 0);
			PlayerInfo[playerid][pInt] = 1;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,2324.4106,-1149.5480,1050.7101, cx,cy,cz))
	{
		//YaKuza  gang hq
		SetPlayerPos(playerid, 687.3242,-1275.8073,13.5565);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 90);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1030.4288,-1104.8416,23.8281, cx,cy,cz))
	{
		//YaKuza  gang hq aparcamientos
		if(PlayerInfo[playerid][pMember] == 14 || PlayerInfo[playerid][pLeader] == 14)
		{
			SetPlayerPos(playerid, -2170.4055,637.5215,1052.3750);
			GameTextForPlayer(playerid, "~w~YaKuza HQ",5000,1);
			SetPlayerInterior(playerid,1);
			SetPlayerFacingAngle(playerid, 352);
			PlayerInfo[playerid][pInt] = 1;
		}
		else if(hqlock[guclock] == 0)
		{
		    SetPlayerPos(playerid, -2170.4055,637.5215,1052.3750);
			GameTextForPlayer(playerid, "~w~YaKuza HQ",5000,1);
			SetPlayerInterior(playerid,1);
			SetPlayerFacingAngle(playerid, 352);
			PlayerInfo[playerid][pInt] = 1;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,-2171.0530,635.3906,1052.3750, cx,cy,cz))
	{
		//YaKuza  gang hq aparcamientos
		SetPlayerPos(playerid, 1030.2101,-1102.1639,23.8281);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
 	else if (PlayerToPointStripped(1, playerid,2495.5093,-1691.1316,14.7656, cx,cy,cz))
	{
		//18th street gang hq
		if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
		{
		    SetPlayerVirtualWorld(playerid, 16);
			PlayerInfo[playerid][pInt] = 16;
			SetPlayerPos(playerid, 2496.049804,-1695.238159,1014.742187);
			GameTextForPlayer(playerid, "~w~Casa Groove",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 180);
			PlayerInfo[playerid][pInt] = 2;
		}
		else if(hqlock[srlock] == 0)
		{
		    SetPlayerVirtualWorld(playerid, 16);
			PlayerInfo[playerid][pInt] = 16;
		    SetPlayerPos(playerid, 2496.049804,-1695.238159,1014.742187);
			GameTextForPlayer(playerid, "~w~Casa Groove",5000,1);
			SetPlayerInterior(playerid,3);
			SetPlayerFacingAngle(playerid, 180);
			PlayerInfo[playerid][pInt] = 2;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~CERRADO",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid, 2496.0039,-1692.0835,1014.7422, cx,cy,cz) || PlayerInfo[playerid][pInt] == 16)
	{
		//18th street gang hq
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerPos(playerid, 2495.2839,-1687.6996,13.5159);
		GameTextForPlayer(playerid, "~w~Groove",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid, 2522.7424,-2019.0098,14.0744, cx,cy,cz)) //
	{
		//18th street entrada
		if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
		{
			SetPlayerPos(playerid, 318.6039,1116.8116,1083.8828);
			GameTextForPlayer(playerid, "~w~Sótano Secreto",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 7);
			PlayerInfo[playerid][pInt] = 2;
		}
		else if(hqlock[surlock] == 0)
		{
		    SetPlayerPos(playerid, 318.6039,1116.8116,1083.8828);
			GameTextForPlayer(playerid, "~w~Sótano Secreto",5000,1);
			SetPlayerInterior(playerid,5);
			SetPlayerFacingAngle(playerid, 7);
			PlayerInfo[playerid][pInt] = 2;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~Cerrado",5000,1);
		}
	}
	// desde aqui hq puretas
	else if (PlayerToPointStripped(1, playerid,954.5181,-1548.3329,13.5909, cx,cy,cz))
	{
		//hq puretas
		if(PlayerInfo[playerid][pMember] == 20 || PlayerInfo[playerid][pLeader] == 20)
		{
		    SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerPos(playerid, 966.3329,-1539.7839,-67.3805);
			GameTextForPlayer(playerid, "~w~Base puretas",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 180);
			PlayerInfo[playerid][pInt] = 0;
		}
		else if(hqlock[pulock] == 0)
		{
		    SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerPos(playerid, 966.3329,-1539.7839,-67.3805);
			GameTextForPlayer(playerid, "~w~Base puretas",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 180);
			PlayerInfo[playerid][pInt] = 0;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~CERRADO",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,966.3313,-1537.5129,-67.3842, cx,cy,cz))
	{
		//hq puretas salida
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerPos(playerid, 956.4348,-1548.4497,13.5978);
		GameTextForPlayer(playerid, "~w~Aparcamientos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 179);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1699.3700,-1667.8440,20.4189, cx,cy,cz))
	{
		//ACADEMIA FBI
		if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
		{
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerPos(playerid, 1664.5499,-1604.5490,-90.0727);
			GameTextForPlayer(playerid, "~w~ACADEMIA FBI",5000,1);
			SetPlayerInterior(playerid,0);
			SetPlayerFacingAngle(playerid, 5);
			PlayerInfo[playerid][pInt] = 0;
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~SOLO MIEMBROS",5000,1);
		}
	}
	else if (PlayerToPointStripped(1, playerid,1664.5518,-1606.3823,-90.0727, cx,cy,cz))
	{
		//salida ACADEMIA FBI
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerPos(playerid, 1697.2767,-1667.7930,20.2189);
		GameTextForPlayer(playerid, "~w~LOS SANTOS",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 86);
		PlayerInfo[playerid][pInt] = 0;
	}
 	else if (PlayerToPointStripped(1, playerid,1654.7113,-1602.8359,-85.6195, cx,cy,cz))
	{
		//PUERTA 1 ACADEMIA FBI
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerPos(playerid, 1651.3580,-1600.5627,-85.6118);
		GameTextForPlayer(playerid, "~w~SALA DE TIROS",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 33);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1653.4587,-1602.6855,-85.6118, cx,cy,cz))
	{
		//PUERTA 2 SALIDA ACADEMIA FBI
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerPos(playerid, 1656.3433,-1602.2761,-85.6118);
		GameTextForPlayer(playerid, "~w~ACADEMIA FBI",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 287);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,318.5982,1114.4796,1083.8828, cx,cy,cz))
	{
		//sureños HQ Salida
		SetPlayerPos(playerid, 2521.2261,-2017.0919,13.5469);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 48);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1481.0206,-1771.1138,18.7958, cx,cy,cz))
	{
		//City hall
		SetPlayerPos(playerid, 386.2978,173.8582,1008.3828);
		GameTextForPlayer(playerid, "~w~AYUNTAMIENTO",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,390.0630,173.5741,1008.3828, cx,cy,cz))
	{
		//City hall
		SetPlayerPos(playerid, 1481.0206,-1769.5138,18.7958);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1412.2323,-1699.8379,13.5395, cx,cy,cz))
	{
		//bolsa entrada
		SetPlayerPos(playerid, 832.3768,7.4058,1004.1797);
		GameTextForPlayer(playerid, "~w~La Bolsa",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,834.3164,7.2916,1004.1870, cx,cy,cz))
	{
		//bolsa salida
		SetPlayerPos(playerid, 1414.5222,-1701.5885,13.5395);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2233.03271, -1159.80457, 25.89060, cx,cy,cz))
	{
		//Jefferson
		SetPlayerPos(playerid, 2216.9817,-1150.4293,1025.7969);
		GameTextForPlayer(playerid, "~w~Jefferson motel",5000,1);
		SetPlayerInterior(playerid,15);
		SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 15;
	}
	else if (PlayerToPointStripped(1, playerid,2215.00220, -1150.62622, 1025.79688, cx,cy,cz))
	{
		//Jefferson
		SetPlayerPos(playerid, 2231.0215,-1159.9059,25.8268);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 92);
		PlayerInfo[playerid][pInt] = 0;
	}
/*	else if (PlayerToPointStripped(1, playerid,1877.9559,-1737.0626,13.3295, cx,cy,cz))
	{
		//lizzy
		SetPlayerPos(playerid, -2637.8071,1404.4377,906.4609);
		GameTextForPlayer(playerid, "~w~Jizzy'S",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 41);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,-2636.6135,1402.4647,906.4609, cx,cy,cz))
	{
		//lizzy salida
		SetPlayerPos(playerid, 1877.6985,-1739.9366,13.4489);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 164);
		PlayerInfo[playerid][pInt] = 0;
	}*/
	else if (PlayerToPointStripped(1, playerid,2139.6777,-1191.9951,23.9922, cx,cy,cz))
	{
		//lavanderia
		SetPlayerPos(playerid, -24.4761,-85.3112,1014.5950);
		GameTextForPlayer(playerid, "~w~lavanderia la mancha",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 260);
		PlayerInfo[playerid][pInt] = 0;
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("tiempocargaobjetos",1000,false,"i",playerid);
	}
	else if (PlayerToPointStripped(1, playerid,-27.5354,-85.8097,1014.4950, cx,cy,cz))
	{
		//lavanderia salida
		SetPlayerPos(playerid, 2142.2268,-1191.9865,23.9922);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 164);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1726.9886,-1636.6057,20.2172, cx,cy,cz))
	{
		//Hotel Astrium
		SetPlayerPos(playerid, 1726.8079,-1641.4302,20.2247);
		GameTextForPlayer(playerid, "~w~Hotel Astrium",5000,1);
		SetPlayerInterior(playerid,18);
		SetPlayerFacingAngle(playerid, 160);
		PlayerInfo[playerid][pInt] = 18;
	}
	else if (PlayerToPointStripped(1, playerid,1726.8711,-1638.1792,20.2231, cx,cy,cz))
	{
		//Hotel Astrium salida
		SetPlayerPos(playerid, 1727.0990,-1634.2180,20.2160);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 164);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2233.4695,-1333.2074,23.9815, cx,cy,cz))
	{
		//iglesia
		SetPlayerPos(playerid, -2024.6587,1138.1849,18.1761);
		GameTextForPlayer(playerid, "~w~iglesia",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 183);
		PlayerInfo[playerid][pInt] = 0;
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("tiempocargaobjetos",1000,false,"i",playerid);
	}
	else if (PlayerToPointStripped(1, playerid,-2024.8579,1143.0919,18.0688, cx,cy,cz))
	{
		//iglesia salida
		SetPlayerPos(playerid, 2230.9387,-1333.1591,23.9815);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 88);
		PlayerInfo[playerid][pInt] = 0;
	}
/*	else if (PlayerToPointStripped(1, playerid,681.5640,-473.6147,16.5363, cx,cy,cz))
	{
		//BAR PUEBLO
		SetPlayerPos(playerid, 684.0606,-465.8766,5.0647);
		GameTextForPlayer(playerid, "~w~bareto",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 230);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,683.1545,-463.4606,5.0647, cx,cy,cz))
	{
		//BAR salida
		SetPlayerPos(playerid, 681.4762,-476.3360,16.3359);
		GameTextForPlayer(playerid, "~w~calle",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 300);
		PlayerInfo[playerid][pInt] = 0;
	}*/
	else if (PlayerToPointStripped(1, playerid,710.8823,-569.3636,16.3359, cx,cy,cz))
	{
		//GIM PUEBLO
		SetPlayerPos(playerid, 774.0745,-75.9533,1000.6541);
		GameTextForPlayer(playerid, "~w~GYM",5000,1);
		SetPlayerInterior(playerid,7);
		SetPlayerFacingAngle(playerid, 356);
		PlayerInfo[playerid][pInt] = 7;
	}
	else if (PlayerToPointStripped(1, playerid,773.9102,-78.3273,1000.6620, cx,cy,cz))
	{
		//GIM PUEBLO salida
		SetPlayerPos(playerid, 713.3518,-569.5872,16.3359);
		GameTextForPlayer(playerid, "~w~calle",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 300);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2034.2386,-1401.6766,17.2954, cx,cy,cz))
	{
		//CNN studio
		SetPlayerPos(playerid, 2028.4021,-1411.1359,3.5369);
		GameTextForPlayer(playerid, "~w~CNN Estudio",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 179);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2028.4396,-1408.7374,3.5369, cx,cy,cz))
	{
		//CNN studio
		SetPlayerPos(playerid, 2034.0291,-1404.7869,17.2505);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 180);
		PlayerInfo[playerid][pInt] = 0;
	}
 	else if (PlayerToPointStripped(1, playerid,2040.8451,-1375.6740,48.7250, cx,cy,cz))
	{
		//CNN studio azotea  moverse
		SetPlayerPos(playerid, 2018.3311,-1415.2318,3.5437);
		GameTextForPlayer(playerid, "~w~CNN Estudio",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 1);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2018.3873,-1417.4784,3.5437, cx,cy,cz))
	{
		//CNN studio azotea
		SetPlayerPos(playerid, 2040.2970,-1377.9581,48.3359);
		GameTextForPlayer(playerid, "~w~Azotea CNN",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 113);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,2045.3928,-1908.0372,13.5469, cx,cy,cz))
	{
		//DMW
		SetPlayerPos(playerid, 1494.6207,1305.2336,1093.2891);
		GameTextForPlayer(playerid, "~w~centro licencias",5000,1);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
		PlayerInfo[playerid][pInt] = 3;
	}
	else if (PlayerToPointStripped(1, playerid,1494.2778,1303.7288,1093.2891, cx,cy,cz))
	{
		//DMW Exit
		SetPlayerPos(playerid, 2046.8928,-1908.0372,13.5469);
		GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 280);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1, playerid,1524.5724,-1677.8043,6.2188, cx,cy,cz))
	{
	    //PD Elevator
	    SetPlayerPos(playerid, 244.0099,66.4152,1003.6406);
	    GameTextForPlayer(playerid, "~w~Police Department",5000,1);
	    SetPlayerInterior(playerid,6);
	    SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if (PlayerToPointStripped(1, playerid,1557.7257,-1675.2711,28.3955, cx,cy,cz))
	{
	    //PD Elevator
	    SetPlayerPos(playerid, 244.0099,66.4152,1003.6406);
	    GameTextForPlayer(playerid, "~w~Police Department",5000,1);
	    SetPlayerInterior(playerid,6);
	    SetPlayerFacingAngle(playerid, 270);
		PlayerInfo[playerid][pInt] = 6;
	}
	else if (PlayerToPointStripped(1.5, playerid,1570.3828,-1333.8882,16.4844, cx,cy,cz))
	{
	    //Next to PD building
	    SetPlayerPos(playerid, 1545.0068,-1366.5094,327.2868);
	    GameTextForPlayer(playerid, "~w~azotea",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	else if (PlayerToPointStripped(1.5, playerid,1548.8167,-1366.2247,326.2109, cx,cy,cz))
	{
	    //Next to PD building
	    SetPlayerPos(playerid, 1572.1115,-1332.5288,16.4844);
	    GameTextForPlayer(playerid, "~w~los santos",5000,1);
	    SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
	}
	return 1;
}

public CreateFoodMenus() // by LordMan (Donut part by LordMan)
{
	// Interior Menu
	Interior = CreateMenu("~y~Interiors", 1,20,120,150,40);
  	AddMenuItem(Interior, 0, "24/7's");
   	AddMenuItem(Interior, 0, "Airports");
   	AddMenuItem(Interior, 0, "Ammunations");
    AddMenuItem(Interior, 0, "Houses");
    AddMenuItem(Interior, 0, "Missions");
    AddMenuItem(Interior, 0, "Missions 2");
    AddMenuItem(Interior, 0, "Unused Interiors");
    AddMenuItem(Interior, 0, "Casino's and Shops");
    AddMenuItem(Interior, 0, "Garages");

   	TwentyFourSeven = CreateMenu("~y~24/7's", 1,20,120,150,40);
  	AddMenuItem(TwentyFourSeven, 0, "24/7 (1)");
   	AddMenuItem(TwentyFourSeven, 0, "24/7 (2)");
  	AddMenuItem(TwentyFourSeven, 0, "24/7 (3)");
    AddMenuItem(TwentyFourSeven, 0, "24/7 (4)");
    AddMenuItem(TwentyFourSeven, 0, "24/7 (5)");
    AddMenuItem(TwentyFourSeven, 0, "24/7 (6)");
    AddMenuItem(TwentyFourSeven, 0, "~r~Back");

   	Airports = CreateMenu("~y~Airports", 1,20,120,150,40);
  	AddMenuItem(Airports, 0, "Francis Ticket Sales Airport");
   	AddMenuItem(Airports, 0, "Francis Baggage Claim Airport");
   	AddMenuItem(Airports, 0, "Andromada Cargo Hold");
  	AddMenuItem(Airports, 0, "Shamal Cabin");
    AddMenuItem(Airports, 0, "~r~Back");

   	Ammunations = CreateMenu("~y~Ammunations", 1,20,120,150,40);
  	AddMenuItem(Ammunations, 0, "Ammunation (1)");
   	AddMenuItem(Ammunations, 0, "Ammunation (2)");
   	AddMenuItem(Ammunations, 0, "Ammunation (3)");
  	AddMenuItem(Ammunations, 0, "Ammunation (4)");
   	AddMenuItem(Ammunations, 0, "Ammunation (5)");
  	AddMenuItem(Ammunations, 0, "Booth Ammunation");
  	AddMenuItem(Ammunations, 0, "Range Ammunation");
    AddMenuItem(Ammunations, 0, "~r~Back");

   	House = CreateMenu("~y~Houses", 1,20,120,150,40);
  	AddMenuItem(House, 0, "House (1)");
  	AddMenuItem(House, 0, "House (2)");
  	AddMenuItem(House, 0, "House (3)");
  	AddMenuItem(House, 0, "House (4)");
  	AddMenuItem(House, 0, "House (5)");
  	AddMenuItem(House, 0, "House (6)");
  	AddMenuItem(House, 0, "House (7)");
    AddMenuItem(House, 0, "~r~Back");

	Missions = CreateMenu("~y~Missions", 1,20,120,150,40);
  	AddMenuItem(Missions, 0, "Atrium");
  	AddMenuItem(Missions, 0, "BS's Crack Place");
  	AddMenuItem(Missions, 0, "Bloodbowl Stadium");
  	AddMenuItem(Missions, 0, "Burning Desire");
  	AddMenuItem(Missions, 0, "Colonel Furhberger");
  	AddMenuItem(Missions, 0, "Dillimore Gas Station");
  	AddMenuItem(Missions, 0, "Interernational Airport");
  	AddMenuItem(Missions, 0, "Jefferson Motel");
  	AddMenuItem(Missions, 0, "Kickstart Stadium");
  	AddMenuItem(Missions, 0, "Liberty City");
  	AddMenuItem(Missions, 0, "LS Airport Baggage Claim");
  	AddMenuItem(Missions, 0, "~r~Back");

	Missions1 = CreateMenu("~y~Missions2", 1,20,120,150,40);
  	AddMenuItem(Missions1, 0, "Jizzy");
  	AddMenuItem(Missions1, 0, "RC Battlefield");
  	AddMenuItem(Missions1, 0, "RyDeR's House");
  	AddMenuItem(Missions1, 0, "SF Garage");
  	AddMenuItem(Missions1, 0, "Sweets House");
  	AddMenuItem(Missions1, 0, "Pump");
  	AddMenuItem(Missions1, 0, "Woozies Apartement");
  	AddMenuItem(Missions1, 0, "8 Track Stadium");
  	AddMenuItem(Missions1, 0, "Dirt Bike Stadium");
  	AddMenuItem(Missions1, 0, "~r~Back");

	Unus = CreateMenu("~y~Unused", 1,20,120,150,40);
  	AddMenuItem(Unus, 0, "SF Police Department");
  	AddMenuItem(Unus, 0, "Safe House");
  	AddMenuItem(Unus, 0, "~r~Back");

	CenShop = CreateMenu("~y~Shops&Casino's", 1,20,120,150,40);
  	AddMenuItem(CenShop, 0, "Tattoos");
  	AddMenuItem(CenShop, 0, "Burger Shot");
  	AddMenuItem(CenShop, 0, "Well Stacked Pizza");
  	AddMenuItem(CenShop, 0, "Cluckin' Bell");
  	AddMenuItem(CenShop, 0, "Caligulas Casino");
  	AddMenuItem(CenShop, 0, "4 Dragons Casino");
  	AddMenuItem(CenShop, 0, "Rusty Donut's");
  	AddMenuItem(CenShop, 0, "~r~Back");

	Garages = CreateMenu("~y~Garages", 1,20,120,150,40);
  	AddMenuItem(Garages, 0, "Loco Low");
  	AddMenuItem(Garages, 0, "Wheel Arch Angels");
  	AddMenuItem(Garages, 0, "Transfender");
  	AddMenuItem(Garages, 0, "~r~Back");
  	
	// Burger Shot
	burgermenu = CreateMenu("Hamburgueseria", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(burgermenu,0,"Carnes");
	AddMenuItem(burgermenu,0,"Hamburguesa");
	AddMenuItem(burgermenu,0,"Montaito");
	AddMenuItem(burgermenu,0,"Bocata Extra");
	AddMenuItem(burgermenu,0,"Ensalada");
	AddMenuItem(burgermenu,0," ");
	AddMenuItem(burgermenu,0,"Bebidas");
	AddMenuItem(burgermenu,0,"AGua");
	AddMenuItem(burgermenu,0,"Cola");
	AddMenuItem(burgermenu,0," ");
	AddMenuItem(burgermenu,0,"Salir");
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1,"$2"); // Sharp Shooter
	AddMenuItem(burgermenu,1,"$4"); // Cheeseburger
	AddMenuItem(burgermenu,1,"$5"); // DP Sandwich
	AddMenuItem(burgermenu,1,"$3"); // Beefy Salad
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1,"$1"); // Water
	AddMenuItem(burgermenu,1,"$1"); // Sprunk
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1," ");
	DisableMenuRow(burgermenu, 0);
	DisableMenuRow(burgermenu, 5);
	DisableMenuRow(burgermenu, 6);
	DisableMenuRow(burgermenu, 9);

	// Cluckin Bell
	chickenmenu = CreateMenu("Freiduria", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(chickenmenu,0,"Encargos");
	AddMenuItem(chickenmenu,0,"Pollo Asado");
	AddMenuItem(chickenmenu,0,"Pollo Frito");
	AddMenuItem(chickenmenu,0,"Alitas");
	AddMenuItem(chickenmenu,0,"Ensalada");
	AddMenuItem(chickenmenu,0," ");
	AddMenuItem(chickenmenu,0,"Bebidas");
	AddMenuItem(chickenmenu,0,"Agua");
	AddMenuItem(chickenmenu,0,"Cola");
	AddMenuItem(chickenmenu,0," ");
	AddMenuItem(chickenmenu,0,"Salir");
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1,"$2"); // Little Clucker
	AddMenuItem(chickenmenu,1,"$4"); // Nuggets
	AddMenuItem(chickenmenu,1,"$5"); // C Sandwich
	AddMenuItem(chickenmenu,1,"$3"); // Salad
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1,"$1"); // Water
	AddMenuItem(chickenmenu,1,"$1"); // Sprunk
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1," ");
	DisableMenuRow(chickenmenu, 0);
	DisableMenuRow(chickenmenu, 5);
	DisableMenuRow(chickenmenu, 6);
	DisableMenuRow(chickenmenu, 9);

	// Pizza Stack
	pizzamenu = CreateMenu("Pizzeria", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(pizzamenu,0,"Pizzas");
	AddMenuItem(pizzamenu,0,"Siciliana");
	AddMenuItem(pizzamenu,0,"Margarita");
	AddMenuItem(pizzamenu,0,"Atun");
	AddMenuItem(pizzamenu,0,"Peperonni");
	AddMenuItem(pizzamenu,0," ");
	AddMenuItem(pizzamenu,0,"Bebidas");
	AddMenuItem(pizzamenu,0,"Agua");
	AddMenuItem(pizzamenu,0,"Cola");
	AddMenuItem(pizzamenu,0," ");
	AddMenuItem(pizzamenu,0,"Salir");
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1,"$2"); // Sicilian
	AddMenuItem(pizzamenu,1,"$4"); // Personal Pan
	AddMenuItem(pizzamenu,1,"$5"); // Sheet
	AddMenuItem(pizzamenu,1,"$3"); // Salad
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1,"$1"); // Water
	AddMenuItem(pizzamenu,1,"$1"); // Sprunk
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1," ");
	DisableMenuRow(pizzamenu, 0);
	DisableMenuRow(pizzamenu, 5);
	DisableMenuRow(pizzamenu, 6);
	DisableMenuRow(pizzamenu, 9);
	
	// Jim's sticky ring
	donutshop = CreateMenu("Doneteria", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(donutshop,0,"Donetes");
	AddMenuItem(donutshop,0,"Sin Agujero");
	AddMenuItem(donutshop,0,"Mediana");
	AddMenuItem(donutshop,0,"Grande");
	AddMenuItem(donutshop,0,"Choco extra");
	AddMenuItem(donutshop,0," ");
	AddMenuItem(donutshop,0,"Bebidas");
	AddMenuItem(donutshop,0,"Agua");
	AddMenuItem(donutshop,0,"Cola");
	AddMenuItem(donutshop,0," ");
	AddMenuItem(donutshop,0,"Salir");
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1,"$2"); // Little Donut
	AddMenuItem(donutshop,1,"$4"); // Regular Donut
	AddMenuItem(donutshop,1,"$5"); // Chief Donut
	AddMenuItem(donutshop,1,"$4"); // Extra large Donut
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1,"$1"); // Water
	AddMenuItem(donutshop,1,"$1"); // Sprunk
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1," ");
	DisableMenuRow(donutshop, 0);
	DisableMenuRow(donutshop, 5);
	DisableMenuRow(donutshop, 6);
	DisableMenuRow(donutshop, 9);
}

public OnPlayerUseVending(playerid, health, money)
{
    health = 1;
    money = 10000;
	return 1;
}

/*public OnPlayerEnterFood(playerid, foodid)
{
	switch (foodid)
	{
		case 1: // chicken
		{
			SetPlayerInterior(playerid, 9);
			PlayerInfo[playerid][pInt] = 9;
			SetPlayerPos(playerid,365.7793,-9.1699,1001.8516);
			SetPlayerCheckpoint(playerid, 368.9714,-6.2486,1001.8516, 1.5);
			GameTextForPlayer(playerid, "~w~Freiduria", 5000, 1);
			InAFoodPlace[playerid] = 1;
		}
		case 2: // burger
		{
			SetPlayerInterior(playerid, 10);
			PlayerInfo[playerid][pInt] = 10;
			SetPlayerPos(playerid,366.0324,-72.6400,1001.5078);
			SetPlayerCheckpoint(playerid, 376.8571,-67.6620,1001.5151, 1.5);
			GameTextForPlayer(playerid, "~w~Hamburqueseria", 5000, 1);
			InAFoodPlace[playerid] = 2;
		}
		case 3: // pizza
		{
			SetPlayerInterior(playerid, 5);
			PlayerInfo[playerid][pInt] = 5;
			SetPlayerPos(playerid,372.4117,-130.4577,1001.4922);
			SetPlayerCheckpoint(playerid, 375.6895,-118.9683,1001.4995, 1.5);
			GameTextForPlayer(playerid, "~w~Pizzeria", 5000, 1);
			InAFoodPlace[playerid] = 3;
		}
		case 4: // donuts
		{
			SetPlayerInterior(playerid, 17);
			PlayerInfo[playerid][pInt] = 17;
			SetPlayerPos(playerid,377.5237,-191.6597,1000.6328);
			SetPlayerCheckpoint(playerid, 379.0611,-186.6032,1000.6328, 0.8);
			GameTextForPlayer(playerid, "~w~Donuts", 5000, 1);
			InAFoodPlace[playerid] = 4;
		}
	}
	return 1;
}

public OnPlayerExitFood(playerid)
{
	DisablePlayerCheckpoint(playerid);
	InAFoodPlace[playerid] = 0;
	return 1;
}
*/
public ClearChatbox(playerid, lines)
{
	if (IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			SendClientMessage(playerid, COLOR_GREY, " ");
		}
	}
	return 1;
}

public CreateLicensesMenus()
{
	Licenses = CreateMenu("Licenses", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(Licenses, 0, "Licencia Conduccion");
	AddMenuItem(Licenses, 0, "Licencia Vuelo");
	AddMenuItem(Licenses, 0, "Licencia Navegacion");
	AddMenuItem(Licenses, 0, "[Salir]");
	
}

public CreateLegalJobsMenus()
{
	LegalJobs = CreateMenu("Legal Jobs", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(LegalJobs, 0, "Detective");
	AddMenuItem(LegalJobs, 0, "Lawyer");
	AddMenuItem(LegalJobs, 0, "Waiter");
	AddMenuItem(LegalJobs, 0, "Boxer");
	AddMenuItem(LegalJobs, 0, "Trucker");
	AddMenuItem(LegalJobs, 0, "Farmer");
	AddMenuItem(LegalJobs, 0, "Minero");
	AddMenuItem(LegalJobs, 0, "[Next Page]");
	AddMenuItem(LegalJobs, 0, "[Exit]");
	
	LegalJobs2 = CreateMenu("Legal Jobs", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(LegalJobs2, 0, "Taxi Driver");
	AddMenuItem(LegalJobs2, 0, "Bus Driver");
	AddMenuItem(LegalJobs2, 0, "Paper Boy");
	AddMenuItem(LegalJobs2, 0, "Pizza Boy");
	AddMenuItem(LegalJobs2, 0, "Street Sweeper");
	AddMenuItem(LegalJobs2, 0, "Car Mechanic");
	AddMenuItem(LegalJobs2, 0, "Body Guard");
	AddMenuItem(LegalJobs2, 0, "[Previous Page]");
	AddMenuItem(LegalJobs2, 0, "[Exit]");
	
}

public CreateGuideMenus()
{
	Guide = CreateMenu("Guia GPS", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(Guide, 0, "Normas Servidor");
	AddMenuItem(Guide, 0, "Empleos");
	AddMenuItem(Guide, 0, "Centro Licencias");
	AddMenuItem(Guide, 0, "Venta Coches");
	AddMenuItem(Guide, 0, "Tienda Ropa");
	AddMenuItem(Guide, 0, "Futbol Playa");
	AddMenuItem(Guide, 0, "Estadio LS");
	AddMenuItem(Guide, 0, "Lanzarse Paracaidas");
	AddMenuItem(Guide, 0, "Heridas [IMPORTANTE]");
	AddMenuItem(Guide, 0, "[Salir]");

	JobLocations = CreateMenu("JobLocations", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(JobLocations, 0, "Detective (NIVEL 6)");
	AddMenuItem(JobLocations, 0, "Taxista (NIVEL 1)");
	AddMenuItem(JobLocations, 0, "Vendedor Drogas (NIVEL 4)");
	AddMenuItem(JobLocations, 0, "Basurero (NIVEL 2)");
	AddMenuItem(JobLocations, 0, "Camionero (NIVEL 5)");
	AddMenuItem(JobLocations, 0, "Granjero (NIVEL 4)");
	AddMenuItem(JobLocations, 0, "Mozo de almacen (NIVEL 7)");
	AddMenuItem(JobLocations, 0, "Comercial (NIVEL 9)");
	AddMenuItem(JobLocations, 0, "[Siguiente Pagina]");
	AddMenuItem(JobLocations, 0, "[Salir]");

	JobLocations2 = CreateMenu("JobLocations", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(JobLocations2, 0, "Minero (NIVEL 10)");
	AddMenuItem(JobLocations2, 0, "Rep.Pizzas (NIVEL 1)");
	AddMenuItem(JobLocations2, 0, "Barrendero (NIVEL 1)");
	AddMenuItem(JobLocations2, 0, "Ladron Vehiculos (DESACTIVADO)");
	AddMenuItem(JobLocations2, 0, "Guardaespaldas (NIVEL 7)");
	AddMenuItem(JobLocations2, 0, "Mendigo (NIVEL 1)");
	AddMenuItem(JobLocations2, 0, "Prostituta (NIVEL 1)");
	AddMenuItem(JobLocations2, 0, "[Siguiente Pagina]");
	AddMenuItem(JobLocations2, 0, "[Pagina Anterior]");
	AddMenuItem(JobLocations2, 0, "[Salir]");

 	JobLocations3 = CreateMenu("JobLocations", 1, 50.0, 180.0, 200.0, 200.0);
	AddMenuItem(JobLocations3, 0, "Agricultor Drogas (NIVEL 9)");
	AddMenuItem(JobLocations3, 0, "Proveedor Drogas (NIVEL 12)");
	AddMenuItem(JobLocations3, 0, "Prov. Materiales (NIVEL 12)");
	AddMenuItem(JobLocations3, 0, "Vendedor de Armas (NIVEL 14)");
	AddMenuItem(JobLocations3, 0, "[Pagina Anterior]");
	AddMenuItem(JobLocations3, 0, "[Salir]");

}

public Startup(playerid, vehicleid)
{
    new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
    new newcar = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER || engineOn[vehicleid])
	{
		//I do nothing!
	}
	else if(IsPlayerInAnyVehicle(playerid) && !engineOn[vehicleid] && !vehicleEntered[playerid][vehicleid] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && pveh != 510 && pveh != 462 && newcar != 59 && newcar != 60 && !IsAPlane(newcar) && !IsAHarvest(newcar) && !IsADrugHarvest(newcar) && !IsASweeper(newcar) && !IsABike(newcar) && !IsAOBike(newcar))
	{
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Atencion! Escribe /arrancar o pulsa :FRENAR: para arrancar el vehiculo!");
		TogglePlayerControllable(playerid, false);
		vehicleEntered[playerid][vehicleid] = true;
	}
	else if(IsPlayerInAnyVehicle(playerid) && !engineOn[vehicleid] && vehicleEntered[playerid][vehicleid] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && pveh != 510 && pveh != 462 && newcar != 59 && newcar != 60 && !IsAPlane(newcar) && !IsAHarvest(newcar) && !IsADrugHarvest(newcar) && !IsASweeper(newcar) && !IsABike(newcar) && !IsAOBike(newcar))
	{
		SendClientMessage(playerid, COLOR_LIGHT_BLUE, "Atencion! Escribe /arrancar o pulsa :FRENAR: para arrancar el vehiculo!");
		TogglePlayerControllable(playerid, false);
	}
}

public engine2(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    TogglePlayerControllable(playerid, 1);
	}
}

public busroutestoptimer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new newcar = GetPlayerVehicleID(playerid);
	    if(IsABus(newcar))
	    {
	        TogglePlayerControllable(playerid, 1);
	        SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Usted puede ir ahora!");
	    }
	}
}

stock strvalEx( const string[] ) // fix for strval-bug with > 50 letters.
{
	// written by mabako in less than a minute :X
	if( strlen( string ) >= 50 ) return 0; // It will just return 0 if the string is too long
	return strval(string);
}
/*
public NameTimer()
{
	for(new i = 0;i < MAX_PLAYERS;i++)
 	{
	 	if(IsPlayerConnected(i))
 		{
 			for(new q = 0;q < MAX_PLAYERS;q++)
 			{
				if(IsPlayerConnected(q))
				{
 					new Float:p1x;
					new Float:p1y;
					new Float:p1z;
					new Float:p2x;
					new Float:p2y;
					new Float:p2z;
					if(IsPlayerConnected(i) && IsPlayerConnected(q))
					{
						GetPlayerPos(i,p1x,p1y,p1z);
    					GetPlayerPos(q,p2x,p2y,p2z);
						if(GetPointDistanceToPointExMorph(p1x,p1y,p1z,p2x,p2y,p2z) < pdistance)
						{
							if(PlayerInfo[q][pMaskuse] != 1)
	    					{
								ShowPlayerNameTagForPlayer(i,q,1);
							}
	    				}
						else
						{
							ShowPlayerNameTagForPlayer(i,q,0);
						}
                    }
                }
            }
        }
	}
}
*/

public CheckCarHealth()
{
    new string[256];
    new sendername[MAX_PLAYER_NAME];
    for (new i=0; i < MAX_PLAYERS; i++)
    {
        if (IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
        {
             new Float:health;
             GetVehicleHealth(GetPlayerVehicleID(i),health);
             new newcar = GetPlayerVehicleID(i);
             if (health <= 500 && !IsABoat(newcar) && !IsABike(newcar) && !IsAPlane(newcar) && !IsAHarvest(newcar) && !IsADrugHarvest(newcar) && !IsABasura(newcar) && !IsASweeper(newcar))
             {
                 if(engineOn[GetPlayerVehicleID(i)] == 1)
                 {
                    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
                    {
                    	TogglePlayerControllable(i, 0);
                 		SendClientMessage(i, COLOR_LIGHT_BLUE, "Tu vehiculo no arranca, llama a un mecanico! usa /salir");
                 		engineOn[GetPlayerVehicleID(i)] = false;
                 		GetPlayerName(i, sendername, sizeof(sendername));
                 		format(string, sizeof(string), "* El motor del vehiculo se ha detenido (( %s ))", sendername);
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				 }
             }
         }
    }
}
public IsAtCandySprunk(playerid) //maquinas refresco
{
	if(IsPlayerInRangeOfPoint(playerid, 2, -2420.219, 984.578, 44.297)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2420.180, 985.945, 44.297)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2225.203, -1153.422, 1025.906)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2576.703, -1284.430, 1061.094)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2155.906, 1606.773, 1000.055)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2209.906, 1607.195, 1000.055)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2222.203, 1606.773, 1000.055)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 495.969, -24.320, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 501.828, -1.430, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 373.828, -178.141, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 330.680, 178.500, 1020.070)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 331.922, 178.500, 1020.070)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 350.906, 206.086, 1008.477)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 361.563, 158.617, 1008.477)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 371.594, 178.453, 1020.070)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 374.891, 188.977, 1008.477)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2155.844, 1607.875, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2202.453, 1617.008, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2209.242, 1621.211, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2222.367, 1602.641, 1000.063)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 500.563, -1.367, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 379.039, -178.883, 1000.734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2480.86,-1959.27,12.9609)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1634.11,-2237.53,12.8906)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2139.52,-1161.48,23.3594)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2153.23,-1016.15,62.2344)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -1350.12,493.859,10.5859)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2229.19,286.414,34.7031)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1659.46,1722.86,10.2188)) return 1;
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2647.7,1129.66,10.2188)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2845.73,1295.05,10.7891)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1398.84,2222.61,10.4219)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -1455.12,2591.66,55.2344)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -76.0312,1227.99,19.125)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 662.43,-552.164,15.7109)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -253.742,2599.76,62.2422)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2271.73,-76.4609,25.9609)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1789.21,-1369.27,15.1641)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1729.79,-1943.05,12.9453)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2060.12,-1897.64,12.9297)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1928.73,-1772.45,12.9453)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2325.98,-1645.13,14.2109)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2352.18,-1357.16,23.7734)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1154.73,-1460.89,15.1562)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -1350.12,492.289,10.5859)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2118.97,-423.648,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2118.62,-422.414,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2097.27,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2092.09,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2063.27,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2005.65,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2034.46,-490.055,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2068.56,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2039.85,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -2011.14,-398.336,34.7266)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -1980.79,142.664,27.0703)) return 1;
 	else if(IsPlayerInRangeOfPoint(playerid, 2, 2319.99,2532.85,10.2188)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1520.15,1055.27,10.00)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2503.14,1243.7,10.2188)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2085.77,2071.36,10.4531)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -862.828,1536.61,21.9844)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -14.7031,1175.36,18.9531)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -253.742,2597.95,62.2422)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 201.016,-107.617,0.898438)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 1277.84,372.516,18.9531)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -17.0397,-90.9646,1003.5469)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -36.3254,-56.8950,1003.5469)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, -19.2055,-56.8631,1003.5469)) return 1;
	else return 0;
}
public SetHP(playerid)
{
	new Float:Health;
	GetPlayerHealth(playerid, Health);
	if(Health < 80)
	{
		SetPlayerHealth(playerid, (Health -15));
	}
	TookSprunk[playerid] = 0;
	return 1;
}

public Fuck(playerid)
{
			SetPlayerPos(playerid,-1119.63,-1908.58,75.99);
			GameTextForPlayer(playerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 1000, 0);
			GameTextForPlayer(playerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 2000, 1);
			GameTextForPlayer(playerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 3000, 2);
			GameTextForPlayer(playerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 4000, 3);
			GameTextForPlayer(playerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 5000, 4);
			GameTextForPlayer(playerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 6000, 5);
			GameTextForPlayer(playerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 7000, 6);
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new action;
	action = GetPlayerSpecialAction(playerid);
	if(Bebendo[playerid] == 0)
	{
	    Bebendo[playerid] = -1;
	    SetPlayerSpecialAction(playerid,0);
	}
	/*if(newkeys == KEY_FIRE && Bebendo[playerid] != -1 && action != 0)
	{
	    Bebendo[playerid]--;
	    new Float:healthe;
	    GetPlayerHealth(playerid, healthe);
	    SetPlayerHealth(playerid,healthe+5.0);
	}*/
    if(newkeys == KEY_FIRE && Bebendo[playerid] != -1 && action != 0)
    {
        new Float:healthe;
        GetPlayerHealth(playerid, healthe);
        if(PlayerInfo[playerid][pM2] == 2 && PlayerInfo[playerid][pCAM] != 1) // by DryilZas
          {
              if(healthe<= 100)
              {
                Bebendo[playerid]--;
                SetPlayerHealth(playerid,100);
            }
            else
            {
                Bebendo[playerid]--;
            }
        }
        else if(healthe >= 95.0)
        {
            Bebendo[playerid]--;
            SetPlayerHealth(playerid,100);
        }
        else
        {
            Bebendo[playerid]--;
            SetPlayerHealth(playerid,healthe+5.0);
        }
    }
	if(fumando[playerid] == 0)
	{
	    fumando[playerid] = -1;
	    SetPlayerSpecialAction(playerid,0);
	}
	if(newkeys == KEY_FIRE && fumando[playerid] != -1 && action != 0)
	{
	    fumando[playerid]--;
	}
    if ((newkeys == KEY_SECONDARY_ATTACK))
    {
        if(IsAtCandySprunk(playerid))
        {
            if(TookSprunk[playerid] == 0)
            {
	            //SetRealMoney(playerid, (ScriptMoney[playerid] - 25));
	            SafeGivePlayerMoney(playerid, - 175);
	            SendClientMessage(playerid, COLOR_GREY, "* Pagas 175$ por usar la máquina.");
				TookSprunk[playerid] = 1;
	            SetTimerEx("SetHP",3750,false, "i", playerid);
			}
		}
			for(new i = 0; i <  sizeof(BizzInfo); i++)
			{
				//printf("Bizz :%d",i);
				if (PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerPos(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
					PlayerInfo[playerid][pLocal] = 255;
				}
			}
        for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					//printf("Found House :%d",i);
					/*if(!IsACop(playerid) && i == 3)
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Cops only !");
					    return 1;
					}*/
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= BizzInfo[i][bEntranceCost])
					{
                        new string[256];
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(BizzInfo[i][bLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
								return 1;
							}
						/*	if(BizzInfo[i][bProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
								return 1;
							}*/
							SafeGivePlayerMoney(playerid,-BizzInfo[i][bEntranceCost]);
							format(string, sizeof(string), "~r~-$%d~n~~w~teclea /salir~n~ para salir", BizzInfo[i][bEntranceCost]);
							BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
							ExtortionBiz(i, BizzInfo[i][bEntranceCost]);
							//BizzInfo[i][bProducts]--;
							OnPropUpdate();
							GameTextForPlayer(playerid, string, 5000, 3);
			             	if (PlayerToPoint(3, playerid,BizzInfo[0][bEntranceX], BizzInfo[0][bEntranceY], BizzInfo[0][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[0][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Bates de Besibol a $%d (teclea /cbate para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
      	                    if (PlayerToPoint(3, playerid,BizzInfo[1][bEntranceX], BizzInfo[1][bEntranceY], BizzInfo[1][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[0][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Relojes a $%d (teclea /creloj para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[1][bEntranceX], BizzInfo[1][bEntranceY], BizzInfo[1][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[1][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden CD Reproductores a $%d (teclea /ccd para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
                            }
						    if (PlayerToPoint(3, playerid,BizzInfo[2][bEntranceX], BizzInfo[2][bEntranceY], BizzInfo[2][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[2][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Spray a $%d (teclea /cspray para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[3][bEntranceX], BizzInfo[3][bEntranceY], BizzInfo[3][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[3][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Patines a $%d (teclea /cpatines para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(10, playerid,BizzInfo[4][bEntranceX], BizzInfo[4][bEntranceY], BizzInfo[4][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[4][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se vende Platos Combinados a $%d (teclea /ccomida para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[5][bEntranceX], BizzInfo[5][bEntranceY], BizzInfo[5][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[5][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se vende Diccionario de Aleman a $%d (teclea /caleman para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[6][bEntranceX], BizzInfo[6][bEntranceY], BizzInfo[6][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[6][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se vende Ramos de Flores a $%d (teclea /cflores para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[7][bEntranceX], BizzInfo[7][bEntranceY], BizzInfo[7][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[7][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Moviles a $%d (teclea /cmovil para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[8][bEntranceX], BizzInfo[8][bEntranceY], BizzInfo[8][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[8][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Cuerdas a $%d (teclea /ccuerda para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[9][bEntranceX], BizzInfo[9][bEntranceY], BizzInfo[9][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[9][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Pasajes de Avion a $%d (teclea /cpasaje para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[10][bEntranceX], BizzInfo[10][bEntranceY], BizzInfo[10][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[10][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Botellas de Whisky a $%d (teclea /cwhisky para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[11][bEntranceX], BizzInfo[11][bEntranceY], BizzInfo[11][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[11][bPriceProd];
	                         format(string, sizeof(string), "En este Negocio se venden Cañas de Pescar a $%d (teclea /cpesca para comprarlo).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[12][bEntranceX], BizzInfo[12][bEntranceY], BizzInfo[12][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[12][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Refrescos a $%d (teclea /crefresco2).Otros articulos teclea /comprar", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[13][bEntranceX], BizzInfo[13][bEntranceY], BizzInfo[13][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[13][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Refrescos a $%d (teclea /crefresco3).Otros articulos teclea /comprar", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[14][bEntranceX], BizzInfo[14][bEntranceY], BizzInfo[14][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[14][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Refrescos a $%d (teclea /crefresco4).Otros articulos teclea /comprar", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[15][bEntranceX], BizzInfo[15][bEntranceY], BizzInfo[15][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[15][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Refrescos a $%d (teclea /crefresco5).Otros articulos teclea /comprar", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[16][bEntranceX], BizzInfo[16][bEntranceY], BizzInfo[16][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[16][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Dados a $%d (teclea /cdado).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[16][bEntranceX], BizzInfo[16][bEntranceY], BizzInfo[16][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[16][bPriceProd];
	                         format(string, sizeof(string), "Aqui se venden Cartas de Poker a $%d (teclea /ccartas).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[17][bEntranceX], BizzInfo[17][bEntranceY], BizzInfo[17][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[17][bPriceProd];
	                         format(string, sizeof(string), "Aqui se vende Cerveza a $%d la botella (teclea /ccerveza).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[18][bEntranceX], BizzInfo[18][bEntranceY], BizzInfo[18][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[18][bPriceProd];
	                         format(string, sizeof(string), "Aqui se vende Whisky a $%d la botella (teclea /cwhisky2).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[19][bEntranceX], BizzInfo[19][bEntranceY], BizzInfo[19][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[19][bPriceProd];
	                         format(string, sizeof(string), "Aqui se vende Whisky a $%d la botella (teclea /cwhisky3).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						    if (PlayerToPoint(3, playerid,BizzInfo[20][bEntranceX], BizzInfo[20][bEntranceY], BizzInfo[20][bEntranceZ]))
			             	{
                             new precio;
	                         precio = BizzInfo[20][bPriceProd];
	                         format(string, sizeof(string), "Aqui se vende Cerveza a $%d la botella (teclea /ccerveza2).", precio);
                             SendClientMessage(playerid, COLOR_WHITE, string);
							}
						}
						SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
						SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
						PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
					//	PlayerInfo[playerid][pLocal] = i+99;
						new dood[MAX_PLAYER_NAME];
						GetPlayerName(playerid, dood, sizeof(dood));
						format(string, sizeof(string), "%s paga $%d por entrar al negocio %d", dood, BizzInfo[i][bEntranceCost], i);
						printf("%s", string);
						PayLog(string);
						//PlayerInfo[playerid][pLocal] = i;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~No tienes suficiente dinero", 5000, 1);
					}
				}
           }
	}

	if (newkeys == KEY_FIRE && GetPlayerWeapon(playerid) == 41)
	{
		SetTimerEx("pintando",2000,0,"d",playerid);
	}//grafi
    new keys, updown, leftright;
    for(new playeridto = 0; playeridto < MAX_PLAYERS; playeridto++)
    {
        if(IsPlayerConnected(playeridto))
        {
	        GetPlayerKeys(playeridto, keys, updown, leftright);

	      	new Float:ox, Float:oy, Float:oz;
	      	GetObjectPos(football, ox, oy, oz);

	      	new Float:px, Float:py, Float:pz;

	      	new Float:angle;
	      	GetPlayerFacingAngle(playeridto, angle);


			if(keys == KEY_HANDBRAKE && playingfootball[playeridto] == 1)
			{

				if(PlayerToPoint(1.0,playeridto,ox,oy,oz))
				{
				  new pName[MAX_PLAYER_NAME];
		    	  GetPlayerName(playeridto, pName, sizeof(pName));
		    	  format(lastentered, sizeof(lastentered), "%s", pName);

				  GetPlayerPos(playeridto, px, py, pz);
				  GetXYInFrontOfPlayer(playeridto, px, py, 5.0);
				  MoveObject(football,px,py,3.6461,10.0);
				}
			}
  			else if(keys == KEY_HANDBRAKE + KEY_SPRINT && playingfootball[playeridto] == 1)
			{

				if(PlayerToPoint(1.0,playeridto,ox,oy,oz))
				{
				new pName[MAX_PLAYER_NAME];
		    	GetPlayerName(playeridto, pName, sizeof(pName));
		    	format(lastentered, sizeof(lastentered), "%s", pName);

				GetPlayerPos(playeridto, px, py, pz);
				GetXYInFrontOfPlayer(playeridto, px, py, 30.0);
				MoveObject(football,px,py,3.6461,10.0);
				ApplyAnimation(playeridto,"FIGHT_D","FightD_1",4.1,0,1,1,0,0);
				}
			}
		}
	}
    new string[256];
	new sendername[MAX_PLAYER_NAME];
	//new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
	new newcar = GetPlayerVehicleID(playerid);
	
	/*if(!gPlayerUsingLoopingAnim[playerid]) return;

	//SendClientInt(playerid, RED, "ID: %d", newkeys);*/
    if ((newkeys & KEY_SECONDARY_ATTACK) && !(oldkeys & KEY_SECONDARY_ATTACK) && !IsPlayerInAnyVehicle(playerid) && jugarb[playerid] == 1)
	{
		if(HavingBall[playerid])
		{
            ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.1,1,1,1,1,1);
		}
		else
		{
            ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
		}
		Anim[playerid] = 1;
	}
	if (!(newkeys & KEY_SECONDARY_ATTACK) && (oldkeys & KEY_SECONDARY_ATTACK) && !IsPlayerInAnyVehicle(playerid) && jugarb[playerid] == 1)
	{
		ClearAnimations(playerid);
		Anim[playerid] = 0;
	}
	if(newkeys & KEY_FIRE && !IsPlayerInAnyVehicle(playerid) && jugarb[playerid] == 1)
	{
        if(!HavingBall[playerid])
		{
			new Float:x, Float:y, Float:z;
			GetObjectPos(Ball, x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 1.5, x, y, z))
			{
				HavingBall[playerid] = 1;
				ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
				if(Baller != 999)
				{
					HavingBall[Baller] = 0;
					ClearAnimations(Baller);
					ApplyAnimation(Baller, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
				}
				Baller = playerid;
				BallStatus = 1;
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(playerid, x2, y2, 0.8);
				GetPlayerPos(playerid, x, y, z);
				StopObject(Ball);
				MoveObject(Ball, x2, y2, z, 2.5);
				Anim[playerid] = 0;
				BallBounce = 0;
			}
		}
		else
		{
            if(IsPlayerInRangeOfPoint(playerid, 2, 2795.5237,-2019.6152,13.5547))
			{
				MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 7.5);
				SetPlayerPos(playerid, 2795.5237,-2019.6152,13.5547);
				ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
				HavingBall[playerid] = 0;
				SetTimerEx("ClearAnim", 1100, 0, "d", playerid);
				SetTimerEx("BallDown2", 1100, 0, "d", playerid);
				return 1;
			}
            else if(IsPlayerInRangeOfPoint(playerid, 4, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
			{
				new rand = random(1);
				if(rand == 0)
				{
					MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 10.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 2;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss(playerid);
				return 1;
			}
            else if(IsPlayerInRangeOfPoint(playerid, 7, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
			{
				new rand = random(2);
				if(rand == 0)
				{
					MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 11.0+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 2;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
			{
				new rand = random(3);
				if(rand == 0)
				{
					MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 11.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 2;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2, 2768.3669,-2019.6644,13.5547))
			{
				MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 7.5);
				SetPlayerPos(playerid, 2768.3669,-2019.6644,13.5547);
				ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
				HavingBall[playerid] = 0;
				SetTimerEx("ClearAnim", 800, 0, "d", playerid);
				SetTimerEx("BallDown3", 1100, 0, "d", playerid);
				return 1;
			}
            else if(IsPlayerInRangeOfPoint(playerid, 4, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
			{
				new rand = random(1);
				if(rand == 0)
				{
					MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 10.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 3;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss2(playerid);
				return 1;
			}
            else if(IsPlayerInRangeOfPoint(playerid, 7, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
			{
				new rand = random(2);
				if(rand == 0)
				{
					MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 11.0+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 3;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss2(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
			{
				new rand = random(3);
				if(rand == 0)
				{
					MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 11.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 3;
					HavingBall[playerid] = 0;
					return 1;
				}
                ShootMiss2(playerid);
				return 1;
			}
			for(new i; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(IsPlayerFacingPlayer(playerid, i, 15))
					{
						new Float:x, Float:y, Float:z;
						GetPlayerPos(i, x, y, z);
						if(IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
						{
							Baller = i;
							HavingBall[playerid] = 0;
							ClearAnimations(playerid);
							ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
							SetTimerEx("ClearAnim", 700, 0, "d", playerid);
							MoveObject(Ball, x, y, z, 13+random(4));
							Anim[i] = 0;
							ShootingBall = 6;
							ApplyAnimation(i,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
							return 1;
						}
					}
				}
			}
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			HavingBall[playerid] = 0;
			new Float:x2, Float:y2;
			GetXYInFrontOfPlayer(playerid, x2, y2, 6.0);
			SetTimerEx("BallDown", 600, 0, "df", playerid, z);
			MoveObject(Ball, x2, y2, z+random(8)+3, 10.0+random(4));
			ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
			ShootingBall = 0;
		}
	}
	if(IsKeyJustDown(KEY_HANDBRAKE,newkeys,oldkeys)) {
	    StopLoopingAnim(playerid);
        //TextDrawHideForPlayer(playerid,txtAnimHelper);
        animation[playerid] = 0;
    }
    
    if(newkeys == KEY_JUMP)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
			if(IsPlayerConnected(playerid))
			{
				if(!engineOn[GetPlayerVehicleID(playerid)])
				{
					if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
						return 1;
					}
					if(IsAnOwnableCar(newcar))
					{
					    if(PlayerInfo[playerid][pPcarkey] == newcar) { }
						else if(PlayerInfo[playerid][pPcarkey2] == newcar) { }
						else if(PlayerInfo[playerid][pPcarkey3] == newcar) { }
						else if(PlayerInfo[playerid][pPcarkey4] == newcar) { }
						else if(PlayerInfo[playerid][pPcarkey5] == newcar) { }
						else { return 1; }
					}
				/*	if(pveh == 510 || pveh == 462 || pveh == 481 || pveh == 509)
					{
						return 1;
					}
					if(newcar == 59 || newcar == 60)
					{
						return 1;
					}
					if(newcar >= 153 && newcar <= 177 ||newcar >= 643 && newcar <= 654)
					{
					    if(HireCar[playerid] != newcar)
					    {
							return 1;
						}
					}*/
					if(IsAHarvest(newcar))
					{
					    return 1;
					}
					if(IsADrugHarvest(newcar))
					{
					    return 1;
					}
					if(IsAPlane(newcar))
					{
						return 1;
					}
					if(IsASweeper(newcar))
					{
						return 1;
					}
					if(IsABike(newcar))
					{
					    return 1;
					}
					if(gEngine[playerid] == 1) { return 1; }

					PutPlayerInVehicle(playerid, newcar, 0);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s intenta arrancar el motor del vehiculo.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetTimerEx("StartingTheVehicle",3500,0,"i",playerid);
					GameTextForPlayer(playerid, "~w~Arrancando vehiculo...",3500,3);
					gEngine[playerid] = 1;
					return 1;
				}
			}
		}
    }
    else if(newkeys == KEY_SECONDARY_ATTACK)
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(gEngine[playerid] == 0 && engineOn[newcar] == 0)
            {
				RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            else if(NoFuel[playerid] == 1)
			{
			    TogglePlayerControllable(playerid, 1);
				RemovePlayerFromVehicle(playerid);
				NoFuel[playerid] = 0;
				return 1;
			}
        }
    }
    else if(newkeys == KEY_LOOK_RIGHT)
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && intermitente[playerid] == 1)
        {
         GetPlayerName(playerid, sendername, sizeof(sendername));
	     format(string, sizeof(string), "* %s Pone Intermitente *DERECHO*", sendername);
         ProxDetector(40.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
    }
    else if(newkeys == KEY_LOOK_LEFT)
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && intermitente[playerid] == 1)
        {
         GetPlayerName(playerid, sendername, sizeof(sendername));
	     format(string, sizeof(string), "* %s Pone Intermitente *IZQUIERDO*", sendername);
         ProxDetector(40.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
    }
    return 1;
}

public StartingTheVehicle(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new RandomStart;
    		new string[256];
    		new sendername[MAX_PLAYER_NAME];
            RandomStart = random(4);
            switch(RandomStart)
            {
                case 0,1,2:
                {
                    engineOn[GetPlayerVehicleID(playerid)] = true;
                    TogglePlayerControllable(playerid, true);
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "* El vehiculo se ha arrancado (( %s )).", sendername);
                    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    gEngine[playerid] = 0;
                }
                case 3:
                {
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "* El vehiculo no se ha arrancado (( %s )).", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					gEngine[playerid] = 0;
                }
            }
        }
		else
		{
		    gEngine[playerid] = 0;
		}
    }
    return 1;
}

public FarmerExit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsAHarvest(vehicleid))
	    {
	        return 1;
	    }
	    if(FarmerVar[playerid] == 0)
	    {
	        return 1;
	    }
	    if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22)
		{
			FarmerPickup[playerid][0]--;
		}
    	DisablePlayerCheckpoint(playerid);
    	FarmerVar[playerid] = 0;
	}
	return 1;
}

public DrugFarmerExit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsADrugHarvest(vehicleid))
	    {
	        return 1;
	    }
	    if(DrugFarmerVar[playerid] == 0)
	    {
	        return 1;
	    }
	    if(DrugFarmerPickup[playerid][0] >= 1 && DrugFarmerPickup[playerid][0] <= 37)
		{
			DrugFarmerPickup[playerid][0]--;
		}
    	DisablePlayerCheckpoint(playerid);
    	DrugFarmerVar[playerid] = 0;
	}
	return 1;
}

public LoadDrugSystem()
{
	new arrCoords[1][64];
	new strFromFile2[256];
	new File: file = fopen("drugs_system.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		drugsys[DrugAmmount] = strval(arrCoords[0]);
		fclose(file);
	}
	return 1;
}

public SaveDrugSystem()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d", drugsys[DrugAmmount]);
	new File: file2 = fopen("drugs_system.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadMatsSystem()
{
	new arrCoords[1][64];
	new strFromFile2[256];
	new File: file = fopen("mats_system.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		matssys[MatsAmmount] = strval(arrCoords[0]);
		fclose(file);
	}
	return 1;
}

public SaveMatsSystem()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d", matssys[MatsAmmount]);
	new File: file2 = fopen("mats_system.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadingDrugsForSmugglers(playerid)
{
    new idcar = GetPlayerVehicleID(playerid);
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pJob] != 20)
     	{
      		SendClientMessage(playerid, COLOR_GREY, "No eres proveedor de drogas.");
        	return 1;
		}
		if(!PlayerToPoint(7.0,playerid,-38.8664,56.3031,3.1172))
		{
		    SendClientMessage(playerid, COLOR_GREY, "No estas en el granero.");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < 299)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Necesitas llevar 300$ para transportar drogas.");
		    return 1;
		}
		if(IsASmuggleCar(idcar))
		{
		    if(drugsys[DrugAmmount] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "No hay drogas en el granero.");
		        TogglePlayerControllable(playerid, true);
		        return 1;
		    }
		    if(drugsys[DrugAmmount] == 1)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Tomas 1 gramo de droga... (por 25$)");
		        SmuggledDrugs[playerid] = 1;
		        drugsys[DrugAmmount]--;
		        SafeGivePlayerMoney(playerid, -25);
		    }
		    if(drugsys[DrugAmmount] == 2)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Tomas 2 gramos de drogas... (por 50$)");
		        SmuggledDrugs[playerid] = 2;
		        drugsys[DrugAmmount] -= 2;
		        SafeGivePlayerMoney(playerid, -50);
		    }
		    if(drugsys[DrugAmmount] == 3)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Tomas 3 gramos de drogas... (por 75$)");
		        SmuggledDrugs[playerid] = 3;
		        drugsys[DrugAmmount] -= 3;
		        SafeGivePlayerMoney(playerid, -75);
		    }
		    if(drugsys[DrugAmmount] == 4)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Tomas 4 gramos de drogas... (por 100$)");
		        SmuggledDrugs[playerid] = 4;
		        drugsys[DrugAmmount] -= 4;
		        SafeGivePlayerMoney(playerid, -100);
		    }
		    if(drugsys[DrugAmmount] == 5)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Tomas 5 gramos de drogas... (por 125$)");
		        SmuggledDrugs[playerid] = 5;
		        drugsys[DrugAmmount] -= 5;
		        SafeGivePlayerMoney(playerid, -125);
		    }
		    if(drugsys[DrugAmmount] == 6)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Tomas 6 gramos de drogas... (por 150$)");
		        SmuggledDrugs[playerid] = 6;
		        drugsys[DrugAmmount] -= 6;
		        SafeGivePlayerMoney(playerid, -150);
		    }
		    if(drugsys[DrugAmmount] == 7)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Tomas 7 gramos de drogas... (por 175$)");
		        SmuggledDrugs[playerid] = 7;
		        drugsys[DrugAmmount] -= 7;
		        SafeGivePlayerMoney(playerid, -175);
		    }
		    if(drugsys[DrugAmmount] == 8)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Tomas 8 gramos de drogas... (por 200$)");
		        SmuggledDrugs[playerid] = 8;
		        drugsys[DrugAmmount] -= 8;
		        SafeGivePlayerMoney(playerid, -200);
		    }
		    if(drugsys[DrugAmmount] == 9)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Tomas 9 gramos de drogas... (por 225$)");
		        SmuggledDrugs[playerid] = 9;
		        drugsys[DrugAmmount] -= 9;
		        SafeGivePlayerMoney(playerid, -225);
		    }
		    if(drugsys[DrugAmmount] >= 10)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Tomas 10 gramos de drogas... (por 250$)");
		        SmuggledDrugs[playerid] = 10;
		        drugsys[DrugAmmount] -= 10;
		        SafeGivePlayerMoney(playerid, -250);
		    }
		    SetPlayerCheckpoint(playerid, 2037.2091,-1034.2131,25.6353, 5.0);  //original: 1135.2180,-1325.2274,13.6277
		    SendClientMessage(playerid, COLOR_YELLOW, "Material cargado.");
		    SendClientMessage(playerid, COLOR_YELLOW, "Llevalo al punto de venta. ((Marca roja))");
		    SendClientMessage(playerid, COLOR_YELLOW, "La policia te ha descubierto, rapido.");
		    SaveDrugSystem();
		    SetPlayerCriminal(playerid,255, "Mover drogas");
		    TogglePlayerControllable(playerid, true);
		}
	}
	return 1;
}

public LoadingDrugsForSmugglersrober(playerid)// by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pJob] != 20)
     	{
      		SendClientMessage(playerid, COLOR_GREY, "No eres proveedor de drogas.");
        	return 1;
		}
		if(!PlayerToPoint(7.0,playerid,-38.8664,56.3031,3.1172))
		{
		    SendClientMessage(playerid, COLOR_GREY, "No estas en el granero.");
		    return 1;
		}
  		if(drugsys[DrugAmmount] == 0)
  		{
    		SendClientMessage(playerid, COLOR_GREY, "No hay drogas en el granero.");
      		TogglePlayerControllable(playerid, true);
      		return 1;
    	}
	    if(drugsys[DrugAmmount] != 0)
	    {
       		SafeGivePlayerMoney(playerid, -25*drugsys[DrugAmmount]);
       		PlayerInfo[playerid][pDrugs] += drugsys[DrugAmmount];
	        drugsys[DrugAmmount] -= drugsys[DrugAmmount];
		    SendClientMessage(playerid, COLOR_YELLOW, "Has robado las drogas.");
		    SendClientMessage(playerid, COLOR_YELLOW, "La policia te ha descubierto, rapido.");
		    SaveDrugSystem();
		    SetPlayerCriminal(playerid,255, "Robar drogas");
		    TogglePlayerControllable(playerid, true);
		}
	}
	return 1;
}

public SmugglerExit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsASmuggleCar(vehicleid))
	    {
	        return 1;
	    }
	    if(SmugglerWork[playerid] == 0)
	    {
	        return 1;
	    }
    	DisablePlayerCheckpoint(playerid);
    	SmugglerWork[playerid] = 0;
	}
	return 1;
}

public SafeGivePlayerMoney(plyid, amounttogive)
{
	new curHour, curMinute, curSecond;
	gettime(curHour, curMinute, curSecond);
	ScriptMoneyUpdated[plyid] = curSecond;
	if (amounttogive < 0)
	{
		GivePlayerMoney(plyid, amounttogive);
		ScriptMoney[plyid] = (ScriptMoney[plyid] + amounttogive);
	}
	else
	{
		ScriptMoney[plyid] = (ScriptMoney[plyid] + amounttogive);
		GivePlayerMoney(plyid, amounttogive);
	}
	return 1;
}

public SafeResetPlayerMoney(plyid)
{
	new curHour, curMinute, curSecond;
	gettime(curHour, curMinute, curSecond);
	ScriptMoneyUpdated[plyid] = curSecond;
	ResetPlayerMoney(plyid);
	ScriptMoney[plyid] = 0;
	return 1;
}

public SafeGivePlayerWeapon(plyid, weaponid, ammo)
{
/*	new curHour, curMinute, curSecond;
	gettime(curHour, curMinute, curSecond);
	ScriptWeaponsUpdated[plyid] = curSecond;*/
	GivePlayerWeapon(plyid, weaponid, ammo);
	//UpdateWeaponSlots(plyid);
	return 1;
}

public SafeResetPlayerWeapons(plyid)
{
/*	new curHour, curMinute, curSecond;
	gettime(curHour, curMinute, curSecond);
	ScriptWeaponsUpdated[plyid] = curSecond;*/
	ResetPlayerWeapons(plyid);
	//UpdateWeaponSlots(plyid);
	return 1;
}

public UpdateWeaponSlots(plyid)
{
	new weaponid, ammo;
	for (new i=0; i<13; i++)
	{
		GetPlayerWeaponData(plyid, i, weaponid, ammo);
		ScriptWeapons[plyid][i] = weaponid;
	}
	return 1;
}

/*public BanAdd(bantype, sqlplayerid, ip[], hackamount)
{
	new query[128];
	format(query, sizeof(query), "INSERT INTO bans (type,player,ip,time,amount) VALUES ('%d',%d,'%s',UNIX_TIMESTAMP(),%d)", bantype,sqlplayerid,ip,hackamount);
	samp_mysql_query(query);
	return 1;
}*/

public UnsetFirstSpawn(playerid)
{
	FirstSpawn[playerid] = 0;
}

public LoadHQLocks()
{
	new arrCoords[7][64];
	new strFromFile2[256];
	new File: file = fopen("hq_locks.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		hqlock[surlock] = strval(arrCoords[0]);
		hqlock[luclock] = strval(arrCoords[1]);
		hqlock[guclock] = strval(arrCoords[2]);
		hqlock[stlock] = strval(arrCoords[3]);
		hqlock[iolock] = strval(arrCoords[4]);
		hqlock[pulock] = strval(arrCoords[5]);
		hqlock[srlock] = strval(arrCoords[6]);
		fclose(file);
	}
	return 1;
}

public SaveHQLocks()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d", hqlock[surlock], hqlock[luclock], hqlock[guclock], hqlock[stlock], hqlock[iolock], hqlock[pulock], hqlock[srlock]);
	new File: file2 = fopen("hq_locks.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public ClearKnock(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
	KnockedDown[playerid] = 0;
	PlayerInfo[playerid][pmuriedote] = 0;
}

public quitarsalva(playerid)
{
    ApplyAnimation(playerid,"ON_LOOKERS","lkup_out",4.1,0,1,1,1,1);
    SetTimerEx("liberarsalva", 2000, false, "i", playerid);
}

public liberarsalva(playerid)
{
	ClearAnimations(playerid);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

public DrugEffectGone(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(UsingDrugs[playerid] == 1)
	    {
	    	SetPlayerWeather(playerid, DefaultWeather);
	    	GameTextForPlayer(playerid, "~w~Se te paso el efecto ~b~Yonki", 3000, 1);
	    	ClearAnimations(playerid);
	    	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	    	SetTimerEx("UsingDrugsUnset", 25000, false, "i", playerid);
	    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE)
		}
	}
	return 1;
}

public Loteria901(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
	    new string[256];
 		format(string, sizeof(string), "______________|Loteria Diaria|______________");
		OOCOff(COLOR_DBLUE, string);
		new rand = random(80);
		if(rand < 77) { rand += 3; }
		Lotto(rand);
	}
	return 1;
}

public BeberBotella(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
	    if(UsingDrugs[playerid] == 0)
	    {
	        SetPlayerHealth(playerid, 10);
	    	SetTimerEx("BeberBotella2", 1000, false, "i", playerid);
		}
	}
	return 1;
}

public BeberBotella2(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
	    if(UsingDrugs[playerid] == 0)
	    {
	        SetPlayerHealth(playerid, 20);
	    	SetTimerEx("BeberBotella3", 1000, false, "i", playerid);
		}
	}
	return 1;
}

public BeberBotella3(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
	    if(UsingDrugs[playerid] == 0)
	    {
	        SetPlayerHealth(playerid, 30);
	    	SetTimerEx("BeberBotella4", 1000, false, "i", playerid);
		}
	}
	return 1;
}

public BeberBotella4(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
     	if(UsingDrugs[playerid] == 0)
	    {
	        SetPlayerHealth(playerid, 40);
	    	SetTimerEx("BeberBotella5", 1000, false, "i", playerid);
		}
	}
	return 1;
}

public BeberBotella5(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
     	if(UsingDrugs[playerid] == 0)
	    {
	        SetPlayerHealth(playerid, 50);
	    	SetTimerEx("BeberBotella6", 1000, false, "i", playerid);
		}
	}
	return 1;
}

public BeberBotella6(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
     	if(UsingDrugs[playerid] == 0)
	    {
	        SetPlayerHealth(playerid, 60);
	    	SetTimerEx("BeberBotella7", 1000, false, "i", playerid);
		}
	}
	return 1;
}

public BeberBotella7(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
     	if(UsingDrugs[playerid] == 0)
	    {
	        SetPlayerHealth(playerid, 70);
	    	SetTimerEx("BeberBotella8", 1000, false, "i", playerid);
		}
	}
	return 1;
}

public BeberBotella8(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
     	if(UsingDrugs[playerid] == 0)
	    {
	        SetPlayerHealth(playerid, 80);
	    	SetTimerEx("BeberBotella9", 1000, false, "i", playerid);
		}
	}
	return 1;
}

public BeberBotella9(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
     	if(UsingDrugs[playerid] == 0)
	    {
	        SetPlayerHealth(playerid, 90);
	    	SetTimerEx("BeberBotella10", 1000, false, "i", playerid);
		}
	}
	return 1;
}

public BeberBotella10(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
     	if(UsingDrugs[playerid] == 0)
	    {
	        SetPlayerHealth(playerid, 100);
	    	GameTextForPlayer(playerid, "~w~Calmaste tu sed", 4000, 1);
	    	ClearAnimations(playerid);
	    	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE)
		}
	}
	return 1;
}

public AdiosLadron(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
        GameTextForPlayer(playerid, "~w~~r~sE TE HAN ACABADO ~n~LOS 2 MINUTOS", 10000, 1);
		PlayerInfo[playerid][pCarTime] = 180;
		SendClientMessage(playerid, COLOR_LIGHTRED, "Ahora debes esperar 3 minutos para volver a intentarlo !");
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		RemovePlayerFromVehicle(playerid);
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

public UsingDrugsUnset(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    UsingDrugs[playerid] = 0;
	}
	return 1;
}

public tiemponomerca(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
	    sinmovermerca[playerid] = 0;
	}
	return 1;
}
public tiemponointentar(playerid) // by MageC
{
	if(IsPlayerConnected(playerid))
	{
        nointentar[playerid] = 0;
	}
	return 1;
}

public cinemaoff(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		TextDrawHideForPlayer(playerid, Text:webspg);
		TextDrawHideForPlayer(playerid, Text:webspg1);
	}
	return 1;
}

/*public logueando(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1276.7112,-2148.8574,42.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando1", 5000, false, "i", playerid);
	}
	return 1;
}

public logueando1(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1280.7112,-2148.8574,44.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando2", 47, false, "i", playerid);
	}
	return 1;
}

public logueando2(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1285.7112,-2148.8574,46.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando3", 47, false, "i", playerid);
	}
	return 1;
}

public logueando3(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1290.7112,-2148.8574,48.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando4", 47, false, "i", playerid);
	}
	return 1;
}

public logueando4(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1295.7112,-2148.8574,50.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando5", 47, false, "i", playerid);
	}
	return 1;
}

public logueando5(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1300.7112,-2148.8574,52.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando6", 47, false, "i", playerid);
	}
	return 1;
}

public logueando6(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1305.7112,-2148.8574,54.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando7", 47, false, "i", playerid);
	}
	return 1;
}

public logueando7(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1310.7112,-2148.8574,56.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando8", 47, false, "i", playerid);
	}
	return 1;
}

public logueando8(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1315.7112,-2148.8574,58.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando9", 47, false, "i", playerid);
	}
	return 1;
}

public logueando9(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1320.7112,-2148.8574,60.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando10", 47, false, "i", playerid);
	}
	return 1;
}

public logueando10(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1325.7112,-2148.8574,62.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando11", 47, false, "i", playerid);
	}
	return 1;
}

public logueando11(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1330.7112,-2148.8574,64.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando12", 47, false, "i", playerid);
	}
	return 1;
}

public logueando12(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1335.7112,-2148.8574,66.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando13", 47, false, "i", playerid);
	}
	return 1;
}

public logueando13(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1340.7112,-2148.8574,68.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando14", 47, false, "i", playerid);
	}
	return 1;
}

public logueando14(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1345.7112,-2148.8574,70.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando15", 47, false, "i", playerid);
	}
	return 1;
}

public logueando15(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1350.7112,-2148.8574,72.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando16", 47, false, "i", playerid);
	}
	return 1;
}

public logueando16(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1355.7112,-2148.8574,74.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando17", 47, false, "i", playerid);
	}
	return 1;
}

public logueando17(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1360.7112,-2148.8574,76.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando18", 47, false, "i", playerid);
	}
	return 1;
}

public logueando18(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1365.7112,-2148.8574,78.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando19", 47, false, "i", playerid);
	}
	return 1;
}

public logueando19(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1370.7112,-2148.8574,80.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando20", 47, false, "i", playerid);
	}
	return 1;
}

public logueando20(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1375.7112,-2148.8574,82.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando21", 47, false, "i", playerid);
	}
	return 1;
}

public logueando21(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1380.7112,-2148.8574,84.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando22", 47, false, "i", playerid);
	}
	return 1;
}

public logueando22(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1385.7112,-2148.8574,86.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando23", 47, false, "i", playerid);
	}
	return 1;
}

public logueando23(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1390.7112,-2148.8574,88.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando24", 47, false, "i", playerid);
	}
	return 1;
}

public logueando24(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1395.7112,-2148.8574,90.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando25", 47, false, "i", playerid);
	}
	return 1;
}

public logueando25(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1400.7112,-2148.8574,92.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando26", 47, false, "i", playerid);
	}
	return 1;
}

public logueando26(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1405.7112,-2148.8574,94.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando27", 47, false, "i", playerid);
	}
	return 1;
}

public logueando27(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1410.7112,-2148.8574,96.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando28", 47, false, "i", playerid);
	}
	return 1;
}

public logueando28(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1415.7112,-2148.8574,98.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando29", 47, false, "i", playerid);
	}
	return 1;
}

public logueando29(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SetPlayerCameraPos(playerid, 1420.7112,-2148.8574,100.5994);
		SetPlayerCameraLookAt(playerid, 1315.6692,-2121.5996,45.2509);
		SetTimerEx("logueando30", 5000, false, "i", playerid);
	}
	return 1;
}

public logueando30(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
		SpawnPlayer(playerid);
		SetCameraBehindPlayer(playerid);
		SetTimerEx("cinemaoff", 5500, false, "i", playerid);
	}
	return 1;
}*/

public tiemponopesca(playerid) // by DryilZas
{
	if(IsPlayerConnected(playerid))
	{
	    sinmoverpesca[playerid] = 0;
	}
	return 1;
}

/*public UpdatePlayerPosition(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(gPlayerLogged[playerid])
	    {
	    	new Float:x, Float:y, Float:z;
     		GetPlayerPos(playerid,x,y,z);
			PlayerInfo[playerid][pPos_x] = x;
			PlayerInfo[playerid][pPos_y] = y;
			PlayerInfo[playerid][pPos_z] = z;
			MySQLCheckConnection();
			new query[MAX_STRING];
			format(query, MAX_STRING, "UPDATE players SET ");
			MySQLUpdatePlayerFlo(query, PlayerInfo[playerid][pSQLID], "Pos_x", PlayerInfo[playerid][pPos_x]);
			MySQLUpdatePlayerFlo(query, PlayerInfo[playerid][pSQLID], "Pos_y", PlayerInfo[playerid][pPos_y]);
			MySQLUpdatePlayerFlo(query, PlayerInfo[playerid][pSQLID], "Pos_z", PlayerInfo[playerid][pPos_z]);
			MySQLUpdatePlayerInt(query, PlayerInfo[playerid][pSQLID], "Inte", PlayerInfo[playerid][pInt]);
			MySQLUpdatePlayerInt(query, PlayerInfo[playerid][pSQLID], "VirWorld", PlayerInfo[playerid][pVirWorld]);
			MySQLUpdatePlayerInt(query, PlayerInfo[playerid][pSQLID], "Crashed", PlayerInfo[playerid][pCrashed]);
			MySQLUpdateFinish(query, PlayerInfo[playerid][pSQLID]);
		}
	}
	return 1;
}*/

public UnsetAfterTutorial(playerid)
{
	if(IsPlayerConnected(playerid))
	{
        AfterTutorial[playerid] = 0;
	}
	return 1;
}

public AfterSpray1(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 2076.5461,-1832.5647,13.5545);
		}
	}
	return 1;
}

public AfterSpray2(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPlayerState(playerid) == 2)
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1025.4225,-1033.1587,31.8380);
		}
	}
	return 1;
}

public AfterSpray3(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPlayerState(playerid) == 2)
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 488.3767,-1731.1235,11.2469);
		}
	}
	return 1;
}

public AfterSpray4(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPlayerState(playerid) == 2)
	    {
    		new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 720.2908,-467.6113,16.3437);
		}
	}
	return 1;
}

public UnsetCrash(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    PlayerInfo[playerid][pCrashed] = 0;
	}
	return 1;
}

public backtoclothes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
 		SetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
   		SetPlayerInterior(playerid,ChangePos2[playerid][0]);
	}
	return 1;
}

public RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0;
	new plyAmmo[12] = 0;
	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid && ammo != 0)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	SafeResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
	    if(plyAmmo[slot] != 0)
	    {
			SafeGivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
		}
	}
	return 1;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, X,Y,Z);
	    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	    if(Distance <= radi*radi)
	    {
	        return 1;
	    }
	}
	return 0;
}

public SaveTrunk()
{
	new idx;
	new File: file2;
	idx = 1;
	while (idx < sizeof(CarInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%i,%i,%i,%i,%i,%i,%i,%i,%i,%f\n",
		vehTrunk[idx][1],
		vehTrunkAmmo[idx][1],
		vehTrunk[idx][2],
		vehTrunkAmmo[idx][2],
		vehTrunk[idx][3],
		vehTrunkAmmo[idx][3],
		vehTrunk[idx][4],
		vehTrunkAmmo[idx][4],
		vehTrunkCounter[idx],
		vehTrunkArmour[idx]);
		if(idx == 1)
		{
			file2 = fopen("trunk.cfg", io_write);
		}
		else
		{
			file2 = fopen("trunk.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public LoadTrunk()
{
	new arrCoords[13][64];
	new strFromFile2[256];
	new File: file = fopen("trunk.cfg", io_read);
	if (file)
	{
		new idx = 1;
		while (idx < sizeof(CarInfo))
		{
		    fread(file, strFromFile2);
		    split(strFromFile2, arrCoords, ',');
		    vehTrunk[idx][1] = strval(arrCoords[0]);
		    vehTrunkAmmo[idx][1] = strval(arrCoords[1]);
		    vehTrunk[idx][2] = strval(arrCoords[2]);
		    vehTrunkAmmo[idx][2] = strval(arrCoords[3]);
		    vehTrunk[idx][3] = strval(arrCoords[4]);
		    vehTrunkAmmo[idx][3] = strval(arrCoords[5]);
		    vehTrunk[idx][4] = strval(arrCoords[6]);
		    vehTrunkAmmo[idx][4] = strval(arrCoords[7]);
		    vehTrunkCounter[idx] = strval(arrCoords[8]);
		    vehTrunkArmour[idx] = floatstr(arrCoords[9]);
		    idx++;
		}
	}
	return 1;
}

/*public UpdateBurgerPositions()
{
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    if(IsMenuShowed[i] == 0)
	    {
			for(new j = 0; j < sizeof(BurgerDriveIn); j ++)
			{
			    new Float:dist;
			    dist = GetDistance(i, BurgerDriveIn[j][0], BurgerDriveIn[j][1]);
			    if(dist < 5)
			    {
			        GameTextForPlayer(i, "~n~~n~~n~~w~Welcome to the ~r~Burger King~w~, please select your meal", 2000, 3);
			        TogglePlayerControllable(i, 0);
			        SetTimerEx("ShowMenuBurger", 2000, 0, "i", i);
			    }
			}
		}
	}
}

public ShowMenuBurger(i)
{
    BurgerShot = CreateMenu("Hamburguerseria", 2, 125, 150, 300);
	AddMenuItem(BurgerShot, 0, "menu 1");
	AddMenuItem(BurgerShot, 1, "$3");
	AddMenuItem(BurgerShot, 0, "Menu 2");
	AddMenuItem(BurgerShot, 1, "$6");
	AddMenuItem(BurgerShot, 0, "Menu 3");
	AddMenuItem(BurgerShot, 1, "$9");
	AddMenuItem(BurgerShot, 0, "- Salir -");
	ShowMenuForPlayer(BurgerShot, i);
	IsMenuShowed[i] = 1;
}

public UpdateChickenPositions()
{
    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    if(IsMenuShowed[i] == 0)
	    {
			for(new j = 0; j < sizeof(ChickenDriveIn); j ++)
			{
			    new Float:dist;
			    dist = GetDistance(i, ChickenDriveIn[j][0], ChickenDriveIn[j][1]);
			    if(dist < 5)
			    {
			        GameTextForPlayer(i, "~n~~n~~n~~w~Welcome to the ~r~Cluckin' Bell~w~, please select your meal", 2000, 3);
			        TogglePlayerControllable(i, 0);
			        SetTimerEx("ShowMenuChicken", 2000, 0, "i", i);
				}
			}
		}
	}
}

public ShowMenuChicken(i)
{
    CluckinBell = CreateMenu("Cluckin' Bell", 2, 125, 150, 300);
	AddMenuItem(CluckinBell, 0, "Chicken Nuggets");
	AddMenuItem(CluckinBell, 1, "$3");
	AddMenuItem(CluckinBell, 0, "Chicken Wing");
	AddMenuItem(CluckinBell, 1, "$6");
	AddMenuItem(CluckinBell, 0, "Crisp Chicken");
	AddMenuItem(CluckinBell, 1, "$9");
	AddMenuItem(CluckinBell, 0, "- Exit -");
	ShowMenuForPlayer(CluckinBell, i);
	IsMenuShowed[i] = 1;
}

public CanDriveThruAgain(playerid)
{
	IsMenuShowed[playerid] = 0;
}
*/
public Float:GetDistance(playerid, Float:x, Float:y)
{
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x2, y2, z2);
	x = x - x2;
	y = y - y2;
	return floatsqroot(x*x+y*y);
}

public TraceLastCall()
{
	pdtrace = 0;
	pdtrace_x = 0;
	pdtrace_y = 0;
	pdtrace_z = 0;
	emdtrace = 0;
	emdtrace_x = 0;
	emdtrace_y = 0;
	emdtrace_z = 0;
}

public ReportReset(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(JustReported[playerid] == 1)
	    {
			JustReported[playerid] = 0;
	    }
	}
}

public ReduceTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(ReduceTime[playerid] == 1)
	    {
			ReduceTime[playerid] = 0;
	    }
	}
}

public tiempoparaca()
{
      DestroyObject(avion);
      DestroyPickup(paracaidas);
      paracatiempo = 0;
     // GameTextForPlayer(i, "~w~Vamos Vamos Vamos!", 5000, 1);  // sin terminar
      return 1;
}
public tiemposalicoche(playerid)  //por aca n
{
      TogglePlayerControllable(playerid, 1);
     // GameTextForPlayer(i, "~w~Vamos Vamos Vamos!", 5000, 1);  // sin terminar
      return 1;
}
public tiempocargaobjetos(playerid)  //por aca n
{
      TogglePlayerControllable(playerid, 1);
     // GameTextForPlayer(i, "~w~Vamos Vamos Vamos!", 5000, 1);  // sin terminar
      return 1;
}

/*public salircarcel(playerid)
{
	new string[256];
	SetPlayerInterior(playerid, 6);
	PlayerInfo[playerid][pInt] = 6;
	SetPlayerPos(playerid,246.8439,70.0776,1003.6406);
	PlayerInfo[playerid][pJailed] = 0;
	SendClientMessage(playerid, COLOR_GRAD1,"Departamento: Has sido liberado de tu arresto.");
	format(string, sizeof(string), "~g~POLICIA:~n~~w~Intenta ser un buen ciudadano");
	GameTextForPlayer(playerid, string, 5000, 1);
	if(gTeam[playerid] == 4) { gTeam[playerid] = 3; }
	ClearCrime(playerid);
	SetPlayerToTeamColor(playerid);
 	return 1;
}*/

GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

public KeyChanges()
{
    new keys, updown, leftright;
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
    {
        if(IsPlayerConnected(playerid))
        {
	        GetPlayerKeys(playerid, keys, updown, leftright);

	      	new Float:ox, Float:oy, Float:oz;
	      	GetObjectPos(football, ox, oy, oz);

	      	new Float:px, Float:py, Float:pz;

	      	new Float:angle;
	      	GetPlayerFacingAngle(playerid, angle);


			if(keys == KEY_HANDBRAKE && playingfootball[playerid] == 1)
			{

				if(PlayerToPoint(1.0,playerid,ox,oy,oz))
				{
				  new pName[MAX_PLAYER_NAME];
		    	  GetPlayerName(playerid, pName, sizeof(pName));
		    	  format(lastentered, sizeof(lastentered), "%s", pName);

				  GetPlayerPos(playerid, px, py, pz);
				  GetXYInFrontOfPlayer(playerid, px, py, 5.0);
				  MoveObject(football,px,py,3.6461,10.0);
				}
			}
  			else if(keys == KEY_HANDBRAKE + KEY_SPRINT && playingfootball[playerid] == 1)
			{

				if(PlayerToPoint(1.0,playerid,ox,oy,oz))
				{
				new pName[MAX_PLAYER_NAME];
		    	GetPlayerName(playerid, pName, sizeof(pName));
		    	format(lastentered, sizeof(lastentered), "%s", pName);

				GetPlayerPos(playerid, px, py, pz);
				GetXYInFrontOfPlayer(playerid, px, py, 30.0);
				MoveObject(football,px,py,3.6461,10.0);
				ApplyAnimation(playerid,"FIGHT_D","FightD_1",4.1,0,1,1,0,0);
				}
			}
		}
	}
}
public IsPlayerInInvalidNosVehicle(playerid)
{
	new carid = GetPlayerVehicleID(playerid);
	new carmodel = GetVehicleModel(carid);
	for (new i=0; i<sizeof(InvalidNosVehicles); i++)
	{
	    if (carmodel == InvalidNosVehicles[i]) return 1;
	}
	return 0;
}

public ObjectToPoint(Float:radi, objectid, Float:x, Float:y, Float:z)
{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetObjectPos(objectid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	    return 0;
}

public OnPlayerHaveExtraCash(playerid,extraamount)
{
    return 0;
}

public GMExit()
{
    return 0;
}

public GMInit()
{
    return 0;
}
stock IsPlayerFacingPoint(playerid, Float:dOffset, Float:pX, Float:pY, Float:pZ)
{
	#pragma unused pZ
	new
		Float:X,
		Float:Y,
		Float:Z,
		Float:pA,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;

}

stock IsPlayerFacingPlayer(playerid, targetid, Float:dOffset)
{

	new
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:pA,
		Float:X,
		Float:Y,
		Float:Z,
		Float:ang;

	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;

	GetPlayerPos(targetid, pX, pY, pZ);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;

}



forward BallDown(playerid, Float:oldz);
public BallDown(playerid, Float:oldz)
{
    new Float:x, Float:y, Float:z;
	GetObjectPos(Ball, x, y, z);
	new Float:a;
	new Float:x2, Float:y2;
	GetPlayerPos(playerid, x2, y2, a);
	GetPlayerFacingAngle(playerid, a);
	x2 += (16 * floatsin(-a, degrees));
	y2 += (16 * floatcos(-a, degrees));
	MoveObject(Ball, x2, y2, oldz-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	BallBounce = 1;
	return 1;
}

forward BallDown2(playerid);
public BallDown2(playerid)
{
	MoveObject(Ball, 2795.5237,-2019.6152,13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "~g~Canasta!", 3000, 3);
	BallBounce = 1;
	return 1;
}

forward BallDown3(playerid);
public BallDown3(playerid)
{
	MoveObject(Ball, 2768.3669,-2019.6644,13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "~g~Canasta!", 3000, 3);
	BallBounce = 1;
	return 1;
}

forward BallDown4(playerid);
public BallDown4(playerid)
{
	MoveObject(Ball, 2795.5237+random(5),-2019.6152+random(5),13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "~r~Fallaste!", 3000, 3);
	BallBounce = 1;
	return 1;
}

forward BallDown5(playerid);
public BallDown5(playerid)
{
	MoveObject(Ball, 2768.3669+random(5),-2019.6644+random(5),13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "~r~Fallaste!", 3000, 3);
	BallBounce = 1;
	return 1;
}

forward ShootMiss(playerid);
public ShootMiss(playerid)
{
	MoveObject(Ball, 2794.9612+random(2), -2019.5415+random(2), 15.5075+random(2), 12.5+random(4));
	ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	ShootingBall = 4;
	HavingBall[playerid] = 0;
	return 1;
}

forward ShootMiss2(playerid);
public ShootMiss2(playerid)
{
	MoveObject(Ball, 2768.6289+random(2),-2019.7227+random(2),15.6287+random(2), 12.5+random(4));
	ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	ShootingBall = 5;
	HavingBall[playerid] = 0;
	return 1;
}

forward ClearAnim(playerid);
public ClearAnim(playerid)
{
	ClearAnimations(playerid);
	return 1;
}


/*public FiringZOMBIE(playerid){
	new up_dw,lf_rg,o_keys,weapon;
	new Float:x,Float:y,Float:z;

	weapon = GetPlayerWeapon(playerid);
	GetPlayerKeys(playerid,o_keys,up_dw,lf_rg);
	if(o_keys == KEY_FIRE || o_keys == (KEY_FIRE+128) ){
	    if(!FiringZOMBIEClick[playerid] || Automatic(weapon))
	    {
		    FiringZOMBIEClick[playerid] = true;
		    GetPlayerPos(playerid,x,y,z);
		    foreach(Bot,b){
				if(IsPlayerFacingPlayer(playerid,b,5.0)){
			        if(IsPlayerInRangeOfPoint(b,WeaponRanges[weapon],x,y,z)){
			            Zombies[b][LastZombieHealth] -= float(WeaponDamage[weapon]);
			            if(Zombies[b][LastZombieHealth] <= 0.0 && !Zombies[b][Dying]){
			                SendDeathMessage(playerid,b,weapon);
			                Zombies[b][Dying] = true;
			            }
			        }
		        }
		    }
	    }
	}else{
	    FiringZOMBIEClick[playerid] = false;
	}
}
public KickZombie(playerid){
	Kick(playerid);
	Zombies[playerid][Dying]=false;
	KillTimer(Zombies[playerid][HPtimer]); Zombies[playerid][HPtimer] = false;
	KillTimer(Zombies[playerid][Ztimers]); Zombies[playerid][Ztimers] = false;
	if(Zombies[playerid][NPTIMER]){
	    KillTimer(Zombies[playerid][NPTIMER]);
	    Zombies[playerid][NPTIMER] = false;
	}
}
public CheckHPZOMBIE(playerid){ // Check the Zombie HP.
	new Float:x,Float:y,Float:z;
	new cp = GetClosestPlayerZOMBIE(playerid);

	if(IsPlayerInAnyVehicle(cp)){
		new cpc = GetPlayerVehicleID(cp);
		GetVehiclePos(cpc,x,y,z);
		GetXYInFrontOfVehicleZOMBIE(cpc,x,y,1.5);
		if(IsPlayerInRangeOfPoint(playerid,2.0,x,y,z) && GetPlayerSpeedZOMBIE(cp) > 10.0){
			Zombies[playerid][LastZombieHealth] -= (GetPlayerSpeedZOMBIE(cp)*2);
		}
	}
	if(	Zombies[playerid][LastZombieHealth] <= 0.0 && Zombies[playerid][ZombieSpawned]){
        ApplyAnimation(playerid,"Knife","KILL_Knife_Ped_Die",1,0,1,0,0,0);
		SetTimerEx("KickZombie",1500,0,"i",playerid);
		Zombies[playerid][Dying] = true;
	}
}

public NewPosZOMBIE(playerid){ // Make the zombie Run / Sprint
	if(	Zombies[playerid][LastZombieHealth] > 0.0 ){
		new Float:x,Float:y,Float:z;
		new Float:ax,Float:ay,Float:az,Float:dif;
		GetPlayerPos(Zombies[playerid][ZombieTarget],ax,ay,az);
		GetPlayerPos(playerid,x,y,z);
		if( az <= (z+3.0) && az >= (z-3.0)){
			if(Zombies[playerid][ZombieRunning] == 1){
				ApplyAnimation(playerid,"Muscular","MuscleRun",1,1,1,0,0,0);
				GetXYInFrontOfPlayerZOMBIE(playerid,x,y,2.0);
		 	}
			else if(Zombies[playerid][ZombieRunning] == 2){
				ApplyAnimation(playerid,"Muscular","MuscleSprint",1,1,1,0,0,0);
				GetXYInFrontOfPlayerZOMBIE(playerid,x,y,2.8);
		 	}

			dif = az;
	      	SetPlayerPos(playerid,x,y,dif);
	    }else{
			if(Zombies[playerid][ZombieRunning]) Parar(playerid);
			GetPlayerPos(playerid,x,y,z);
	        SetPlayerPosFindZ(playerid,x,y,z);
	    }
    }
}
public CheckCloserPlayersZOMBIE(playerid){ // Detect the closest player and chase him
    if(	Zombies[playerid][LastZombieHealth] > 0.0 ){
		new cp = GetClosestPlayerZOMBIE(playerid);
		new Float:MinDistance = 3.0;
		if(IsPlayerInAnyVehicle(cp)){ MinDistance = 5.0; }
		Zombies[playerid][ZombieTarget] = cp;
		if(GetDistanceToPlayerZOMBIE(playerid,cp) <= 70.0 && GetDistanceToPlayerZOMBIE(playerid,cp) > 15.0){
	        IrParaPlayer(1,playerid,cp);
		}else if(GetDistanceToPlayerZOMBIE(playerid,cp) <= 15.0 && GetDistanceToPlayerZOMBIE(playerid,cp) > MinDistance){
	        IrParaPlayer(0,playerid,cp);
		}else if(GetDistanceToPlayerZOMBIE(playerid,cp) <= MinDistance){
		    Parar(playerid);
		}
		if(GetDistanceToPlayerZOMBIE(playerid,cp) <= MinDistance){
	    	new Float:h;
	    	if(IsPlayerInAnyVehicle(cp)){
				new cpc = GetPlayerVehicleID(cp);
				GetVehicleHealth(cpc,h);
				if(GetDistanceToPlayerZOMBIE(playerid,cp) < MinDistance){
				    SetVehicleHealth(cpc,h-80.0);
				    ApplyAnimation(playerid,"Gangs","shake_carSH",1,1,1,0,0,0);
				}

	    	}else{
		    	if(GetDistanceToPlayerZOMBIE(playerid,cp) > 1.5){
		    		GetPlayerHealth(cp,h);
					SetPlayerHealth(cp,h-5.0);
				}else if(GetDistanceToPlayerZOMBIE(playerid,cp) <= 1.5){
				    if(Zombies[playerid][ZombieKilling] == -1){
				    	if(!IsDying(cp)){
							FinishHim(playerid,cp);
						}
				    }
				}
	    	}
	    }
    }
}
public KilledBy(playerid,killer){ // Apply 'dying' animation and kill the player.
	if(Zombies[killer][ZombieKilling] == playerid){
	    ApplyAnimation(playerid,"Knife","KILL_Knife_Ped_Die",1,0,1,0,0,0);
	    TogglePlayerControllable(playerid,true);
	    SetPlayerHealth(playerid,0.0);
	    ClearAnimations(killer);
	    ZombieKill[playerid] = killer;
    }
}*/
//=======================================[ Functions ]=========================================//
/*stock Automatic(weaponid){
	switch(weaponid){
	    case 9,22,23,24,27,28,29,30,31,32,37,38: return true;
	}
	return false;
}
stock IsDying(playerid){ // Verify if a zombie is killing the player
	foreach(Bot,b){
	    if(Zombies[b][ZombieKilling] == playerid) return true;
	}
	return false;
}
stock SetupZombie(playerid){ // Activate the zombie.
    new Float:px,Float:py,Float:pz;
	Zombies[playerid][HPtimer] = SetTimerEx("CheckHPZOMBIE",100,1,"i",playerid);
    Zombies[playerid][Ztimers] = SetTimerEx("CheckCloserPlayersZOMBIE",1000,1,"i",playerid);
    GetPlayerPos(Caller,px,py,pz);
    SetPlayerPos(playerid,px,py,pz);
    Zombies[playerid][ZombieRunning] = false;
    SendClientMessageToAll(COLOR_RED,"A Zombie Connected!");

    new Zskin=1;
    if(Zombie_Skin == -1){
        new rd = random(sizeof(ZombieSkins));
        if(IsValidSkin(ZombieSkins[rd])){
			Zskin = ZombieSkins[rd];
        }
    }else if(Zombie_Skin == -2){
        new rd = random(299);
        if(IsValidSkin(rd)){
            Zskin = rd;
        }
	}else if(IsValidSkin(Zombie_Skin)){
		Zskin = Zombie_Skin;
    }
    SetPlayerSkin(playerid,Zskin);

    Zombies[playerid][ZombieKilling] = -1;
    Zombies[playerid][ZombieSpawned] = true;
    Zombies[playerid][LastZombieHealth] = 100.0;
}

stock FinishHim(playerid,target){ // Do i need to explain that?
    Zombies[playerid][ZombieKilling] = target;
	TogglePlayerControllable(target,false);
	SetPlayerToFacePlayer(playerid,target);
	SetPlayerToFacePlayer(target,playerid);

	ApplyAnimation(target,"Knife","KILL_Knife_Ped_Damage",1,0,1,0,0,0);
	ApplyAnimation(playerid,"Knife","KILL_Knife_Player",1,0,1,0,0,0);
	SetTimerEx("KilledBy",1500,0,"ii",target,playerid);
}

stock Parar(playerid){ // Makes the zombie stop walking.
	if(Zombies[playerid][ZombieRunning]){
		if(Zombies[playerid][NPTIMER]){
		    KillTimer(Zombies[playerid][NPTIMER]);
		    Zombies[playerid][NPTIMER] = false;
	    }
	    Zombies[playerid][ZombieRunning] = false;
	    ClearAnimations(playerid);
	}
}

stock IrParaPlayer(modo,playerid,paraid){ //Make the zombie chase the targeted player. Mode: 1- Run | 2- Sprint
    SetPlayerToFacePlayer(playerid,paraid);
    if(modo == 0 && Zombies[playerid][ZombieRunning] != 1) Caminhar(playerid);
    else if(modo == 1 && Zombies[playerid][ZombieRunning] != 2) Correr(playerid);
}

stock Caminhar(playerid){ //Run forward.
	Zombies[playerid][ZombieRunning] = 1;
	Zombies[playerid][NPTIMER] = SetTimerEx("NewPosZOMBIE",400,1,"i",playerid);
}

stock Correr(playerid){ //Sprint forward.
	Zombies[playerid][ZombieRunning] = 2;
	Zombies[playerid][NPTIMER] = SetTimerEx("NewPosZOMBIE",300,1,"i",playerid);
}

stock AlvoDeAlguem(alvoid){ // Check if the player is target from any zombie.
	foreach(Bot,b){
	    if(Zombies[b][ZombieTarget] == alvoid) return b;
	}
	return false;
}

stock KickZombies(){ //Kick All Zombies.
	foreach(Bot,b){
		if(!strfind(PlayerName(b),ZOMBIE_NAME,true)){
			SetTimerEx("KickZombie",1,0,"i",b);
		}
	}
}
stock SetPlayerToFacePlayer(playerid, targetid) // From a_angles.inc ( Tannz0rz )
{

	new
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:X,
		Float:Y,
		Float:Z,
		Float:ang;

	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;

	GetPlayerPos(targetid, X, Y, Z);
	GetPlayerPos(playerid, pX, pY, pZ);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);

	SetPlayerFacingAngle(playerid, ang);

 	return 0;

}*/

stock PlayerName(playerid){
	new pname[MAX_PLAYER_NAME];
	GetPlayerName(playerid,pname,MAX_PLAYER_NAME);
	return pname;
}

/*stock Float:GetDistanceToPlayerZOMBIE(playerid,playerid2) {
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if (!IsPlayerConnected(playerid) || !IsPlayerConnected(playerid2)) {
		return -1.00;
	}
	GetPlayerPos(playerid,x1,y1,z1);
	GetPlayerPos(playerid2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock GetClosestPlayerZOMBIE(p1){
	new Float:dis,Float:dis2,playerid;
	playerid = -1;
	dis = 99999.99;
	foreach(Player,x){
		dis2 = GetDistanceToPlayerZOMBIE(p1,x);
		if (dis2 < dis && dis2 != -1.00)
		{
			dis = dis2;
			playerid = x;
		}
	}
	//printf("[%d]%s",playerid,PlayerName(playerid));
	return playerid;
}
stock Float:GetXYInFrontOfPlayerZOMBIE(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	if (IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	else GetPlayerFacingAngle(playerid, a);
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}

stock IsValidSkin(skinid) // Not mine. Do not remmeber who did it.
{
    #define	MAX_BAD_SKINS 22
    new badSkins[MAX_BAD_SKINS] =
    { 3, 4, 5, 6, 8, 42, 65, 74, 86, 119, 149, 208, 268, 273, 289 };
    if (skinid < 0 || skinid > 299) return false;
    for (new i = 0; i < MAX_BAD_SKINS; i++) { if (skinid == badSkins[i]) return false; }
    #undef MAX_BAD_SKINS
    return 1;
}

stock Float:GetPlayerSpeedZOMBIE(playerid) // Not mine. Do not remmember who did it. (It dosn't return the right speed, but works for what I need.)
{
	new Float:vX, Float:vY, Float:vZ;
	if (!IsPlayerInAnyVehicle(playerid))
	{
	    GetPlayerVelocity(playerid, vX, vY, vZ);
	}
	else
	{
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), vX, vY, vZ);
	}
	return floatsqroot(vX*vX + vY*vY + vZ*vZ)*100;
}
stock Float:GetXYInFrontOfVehicleZOMBIE(vehicleid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetVehiclePos(vehicleid, x, y, a);
	GetVehicleZAngle(vehicleid, a);
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}
stock IsPlayerFacingPlayer(playerid, playerid2, Float:dOffset) // From a_angles.inc ( Tannz0rz )
{

	new
		Float:X,
		Float:Y,
		Float:Z,
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:pA,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

    GetPlayerPos(playerid2, pX, pY, pZ);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;
}*/

stock AngleInRangeOfAngle(Float:a1, Float:a2, Float:range) // From a_angles.inc ( Tannz0rz )
{

	a1 -= a2;
	if((a1 < range) && (a1 > -range)) return true;

	return false;

}

public CheckStatus()
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInAnyVehicle(i))
			{

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				if(TextDrawsShown[i] == false)
				{
				    TextDrawShowForPlayer(i, Text:Black0);
				    TextDrawShowForPlayer(i, Text:White1);
				    TextDrawShowForPlayer(i, Text:White2);
				    TextDrawShowForPlayer(i, Text:BlackHealth);
				    TextDrawShowForPlayer(i, Text:DarkRedHealth);
				    TextDrawShowForPlayer(i, Text:BlackSpeed);
				    TextDrawShowForPlayer(i, Text:DarkYellowSpeed);
				    TextDrawShowForPlayer(i, Text:Marker);
				    TextDrawsShown[i] = true;
				}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			    new String[128];
		        new Float:X, Float:Y, Float:Z, Float:Speed;
                GetVehicleVelocity(GetPlayerVehicleID(i), X, Y, Z);
                Speed = floatmul(floatsqroot(floatadd(floatadd(floatpower(X, 2), floatpower(Y, 2)),  floatpower(Z, 2))), 100.0);
				new PlayerVehicleModelID = GetVehicleModel(GetPlayerVehicleID(i));
				PlayerVehicleModelID -= 400;
				format(String,sizeof(String),"~b~Vehiculo:~n~~w~%s~n~~b~Integridad:~n~~n~Velocidad: ~y~.:Motor:.~n~                                     ~w~%im/h~n~%ikm/h", PlayerVehicle[PlayerVehicleModelID], floatround(floatdiv(Speed, 1.609344), floatround_floor), floatround(Speed, floatround_floor));
				if(VHSCreated[i] == true)
				{
					TextDrawDestroy(VHS[i]);
				}
				VHS[i] = TextDrawCreate(485.000000,355.000000,String); //tatus consejos
				TextDrawAlignment(VHS[i],0);
				TextDrawBackgroundColor(VHS[i],0x000000ff);
				TextDrawFont(VHS[i],1);
				TextDrawLetterSize(VHS[i],0.299999,1.000000);
				TextDrawColor(VHS[i],0xffffffff);
				TextDrawSetOutline(VHS[i],1);
				TextDrawSetProportional(VHS[i],1);
				TextDrawSetShadow(VHS[i],1);
            	TextDrawShowForPlayer(i, VHS[i]);
            	VHSCreated[i] = true;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				new Float:CarHealth;
				GetVehicleHealth(GetPlayerVehicleID(i), CarHealth);
				if(LightRedHealthCreated[i] == true)
				{
					TextDrawDestroy(LightRedHealth[i]);
				}
				LightRedHealth[i] = TextDrawCreate(488.000000,386.000000,"_");
				TextDrawUseBox(LightRedHealth[i],1);
				TextDrawBoxColor(LightRedHealth[i],0xff000099);
				TextDrawTextSize(LightRedHealth[i], floatadd(484.0, floatdiv(CarHealth, 9.5238095238)),0.000000);
				TextDrawAlignment(LightRedHealth[i],0);
				TextDrawBackgroundColor(LightRedHealth[i],0x000000ff);
				TextDrawFont(LightRedHealth[i],3);
				TextDrawLetterSize(LightRedHealth[i],1.000000,0.199999);
				TextDrawColor(LightRedHealth[i],0xffffffff);
				TextDrawSetOutline(LightRedHealth[i],1);
				TextDrawSetProportional(LightRedHealth[i],1);
				TextDrawSetShadow(LightRedHealth[i],1);
            	TextDrawShowForPlayer(i, LightRedHealth[i]);
            	LightRedHealthCreated[i] = true;
				if(CarHealth < 250)
				{
					if(ExclamationShown[i] == true)
					{
						TextDrawHideForPlayer(i, Text:Exclamation);
					    ExclamationShown[i] = false;
					}
					else
					{
						TextDrawShowForPlayer(i, Text:Exclamation);
					    ExclamationShown[i] = true;
					}
				}
				else if(CarHealth > 250)
				{
					if(ExclamationShown[i] == true)
					{
						TextDrawHideForPlayer(i, Text:Exclamation);
					    ExclamationShown[i] = false;
					}
				}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				if(LightYellowSpeedCreated[i] == true)
				{
					TextDrawDestroy(LightYellowSpeed[i]);
				}
				LightYellowSpeed[i] = TextDrawCreate(537.000000,404.000000,"_");
				TextDrawUseBox(LightYellowSpeed[i],1);
				TextDrawBoxColor(LightYellowSpeed[i],0xffff0066);
				if(Speed >= 150)
				{
					TextDrawTextSize(LightYellowSpeed[i],589.000000,0.000000);
				}
				else
				{
					TextDrawTextSize(LightYellowSpeed[i], floatadd(533.0, floatmul(Speed, 0.373333333333)),0.000000);
				}
				TextDrawAlignment(LightYellowSpeed[i],0);
				TextDrawBackgroundColor(LightYellowSpeed[i],0x000000ff);
				TextDrawFont(LightYellowSpeed[i],3);
				TextDrawLetterSize(LightYellowSpeed[i],1.000000,1.200000);
				TextDrawColor(LightYellowSpeed[i],0xffffffff);
				TextDrawSetOutline(LightYellowSpeed[i],1);
				TextDrawSetProportional(LightYellowSpeed[i],1);
				TextDrawSetShadow(LightYellowSpeed[i],1);
            	TextDrawShowForPlayer(i, LightYellowSpeed[i]);
            	LightYellowSpeedCreated[i] = true;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			}
			else
			{
			    if(TextDrawsShown[i] == true)
			    {
					TextDrawHideForPlayer(i, Text:Black0);
					TextDrawHideForPlayer(i, Text:White1);
					TextDrawHideForPlayer(i, Text:White2);
					TextDrawHideForPlayer(i, Text:BlackHealth);
					TextDrawHideForPlayer(i, Text:DarkRedHealth);
					TextDrawHideForPlayer(i, Text:BlackSpeed);
					TextDrawHideForPlayer(i, Text:DarkYellowSpeed);
					TextDrawHideForPlayer(i, Text:Marker);
					TextDrawHideForPlayer(i, Text:Exclamation);
				    TextDrawsShown[i] = false;
				}
				TextDrawHideForPlayer(i, Text:VHS[i]);
				TextDrawHideForPlayer(i, Text:LightRedHealth[i]);
				TextDrawHideForPlayer(i, Text:LightYellowSpeed[i]);
			}
		}
	}
}

/*public Timer()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
		if(IsPlayerConnected(i))
		    PlayerObjectUpdate(i);
}*/

/*PlayerObjectUpdate(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	for(new i = 0; i < sizeof(Objects); i++)
	{
	    if(!Player[playerid][view][i])
	    {
	        if(IsInReach(pos[0],pos[1],pos[2],Objects[i][kox],Objects[i][koy],Objects[i][koz],Objects[i][viewdist]))
	        {
	            Player[playerid][view][i] = true;
	            Player[playerid][objid][i] = CreatePlayerObject(playerid,Objects[i][modelid],Objects[i][kox],Objects[i][koy],Objects[i][koz],Objects[i][korx],Objects[i][kory],Objects[i][korz]);
	        }
	    } else if(!IsInReach(pos[0],pos[1],pos[2],Objects[i][kox],Objects[i][koy],Objects[i][koz],Objects[i][viewdist]))
	    {
            Player[playerid][view][i] = false;
            DestroyPlayerObject(playerid,Player[playerid][objid][i]);
	    }
	}
}*/

/*public SetPlayerPosWithObjects(playerid,Float:x,Float:y,Float:z)
{
	for(new i = 0; i < sizeof(Objects); i++)
	{
	    if(!Player[playerid][view][i])
	    {
	        if(IsInReach(x,y,z,Objects[i][kox],Objects[i][koy],Objects[i][koz],Objects[i][viewdist]))
	        {
	            Player[playerid][view][i] = true;
	            Player[playerid][objid][i] = CreatePlayerObject(playerid,Objects[i][modelid],Objects[i][kox],Objects[i][koy],Objects[i][koz],Objects[i][korx],Objects[i][kory],Objects[i][korz]);
	        }
	    } else if(!IsInReach(x,y,z,Objects[i][kox],Objects[i][koy],Objects[i][koz],Objects[i][viewdist]))
	    {
            Player[playerid][view][i] = false;
            DestroyPlayerObject(playerid,Player[playerid][objid][i]);
	    }
	}
	SetPlayerPos(playerid,Float:x,Float:y,Float:z);
}*/

//------------------------------------------------

IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

//-------------------------------------------------

/*OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    //if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	animation[playerid]++;
}*/

//-------------------------------------------------

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	//if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    //TextDrawShowForPlayer(playerid,txtAnimHelper);
    animation[playerid]++;
}

//-------------------------------------------------

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

//-------------------------------------------------

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

//-------------------------------------------------

public pintando(playerid)
{
	new keys,updown,leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (keys == KEY_FIRE)
	{
    if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15 || PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16 || PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
	{
	 new Float:X, Float:Y, Float:Z,Float:A;
	 GetPlayerPos(playerid, X, Y, Z);
	 GetPlayerFacingAngle(playerid, A);
	 X += (1 * floatsin(-A, degrees));
	 Y += (1 * floatcos(-A, degrees));
     DestroyObject(PlayerInfo[playerid][pbono20]);
     if (PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5)
     {
	  PlayerInfo[playerid][pbono20] = CreateObject(1528, X, Y, Z, 0.0, 0.0, A+90);
	 }
	 if (PlayerInfo[playerid][pMember] == 15 || PlayerInfo[playerid][pLeader] == 15)
     {
	  PlayerInfo[playerid][pbono20] = CreateObject(1530, X, Y, Z, 0.0, 0.0, A+90);
	 }
     if (PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
     {
	  PlayerInfo[playerid][pbono20] = CreateObject(1526, X, Y, Z, 0.0, 0.0, A+90);
	 }
     if (PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
     {
	  PlayerInfo[playerid][pbono20] = CreateObject(1525, X, Y, Z, 0.0, 0.0, A+90);
	 }
	 GameTextForPlayer(playerid,"~r~~h~Grafiti pintado",3000,3);
	 PlayerPlaySound(playerid,1057,0,0,0);
	 return 1;
	 }
	 else
	 {
	 return 1;
	 }
	 }
	 return 1;
}

/*************************** AQI TERMINA EL CODIGO **************************/


